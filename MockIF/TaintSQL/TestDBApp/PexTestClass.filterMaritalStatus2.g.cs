// <copyright file="PexTestClass.filterMaritalStatus2.g.cs">Copyright ? 2009</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Framework;

namespace MyApplication
{
    public partial class PexTestClass
    {
[TestMethod]
[PexGeneratedBy(typeof(PexTestClass))]
public void filterMaritalStatus2742()
{
    int i;
    i = this.filterMaritalStatus2();
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(PexTestClass))]
public void filterMaritalStatus274201()
{
    int i;
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.DefaultSession
        .At(0, "Num Records", (object)1)
        .At(1, "column NAME Record 0", "\0")
        .At(2, "column ZIP Record 0", "\0")
        .At(5, "column SEX Record 0", "\0")
        .At(6, "column MARITAL Record 0", "\0")
        .At(7, "column RACE Record 0", "\0")
        .At(8, "column TAXSTAT Record 0", "\0")
        .At(9, "column DETAIL Record 0", "\0")
        .At(10, "column HOUSEHOLDDETAIL Record 0", "\0")
        .At(11, "column FATHERORIGIN Record 0", "\0")
        .At(12, "column MOTHERORIGIN Record 0", "\0")
        .At(13, "column BIRTHCOUNTRY Record 0", "\0")
        .At(14, "column CITIZENSHIP Record 0", "\0");
    i = this.filterMaritalStatus2();
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(PexTestClass))]
public void filterMaritalStatus2288()
{
    int i;
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.DefaultSession
        .At(0, "Num Records", (object)1)
        .At(1, "column NAME Record 0", "e")
        .At(2, "column ZIP Record 0", "e")
        .At(5, "column SEX Record 0", "e")
        .At(6, "column MARITAL Record 0", "evil")
        .At(7, "column RACE Record 0", "e")
        .At(8, "column TAXSTAT Record 0", "e")
        .At(9, "column DETAIL Record 0", "e")
        .At(10, "column HOUSEHOLDDETAIL Record 0", "e")
        .At(11, "column FATHERORIGIN Record 0", "e")
        .At(12, "column MOTHERORIGIN Record 0", "e")
        .At(13, "column BIRTHCOUNTRY Record 0", "e")
        .At(14, "column CITIZENSHIP Record 0", "e");
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      i = this.filterMaritalStatus2();
      Assert.AreEqual<int>(1, i);
      bool ov1 = observer.GetObservedValue<bool>("1");
      Assert.AreEqual<bool>(true, ov1);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PexTestClass))]
public void filterMaritalStatus274202()
{
    int i;
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.DefaultSession
        .At(0, "Num Records", (object)2)
        .At(1, "column NAME Record 0", "\0")
        .At(2, "column ZIP Record 0", "\0")
        .At(5, "column SEX Record 0", "\0")
        .At(6, "column MARITAL Record 0", "\0")
        .At(7, "column RACE Record 0", "\0")
        .At(8, "column TAXSTAT Record 0", "\0")
        .At(9, "column DETAIL Record 0", "\0\0\0\0\0\0\0\0")
        .At(10, "column HOUSEHOLDDETAIL Record 0", "\0")
        .At(11, "column FATHERORIGIN Record 0", "\0\0")
        .At(12, "column MOTHERORIGIN Record 0", "\0")
        .At(13, "column BIRTHCOUNTRY Record 0", "\0")
        .At(14, "column CITIZENSHIP Record 0", "\0")
        .At(15, "column NAME Record 1", "\0")
        .At(16, "column ZIP Record 1", "\0")
        .At(19, "column SEX Record 1", "\0")
        .At(20, "column MARITAL Record 1", "\0")
        .At(21, "column RACE Record 1", "\0")
        .At(22, "column TAXSTAT Record 1", "\0")
        .At(23, "column DETAIL Record 1", "\0")
        .At(24, "column HOUSEHOLDDETAIL Record 1", "\0")
        .At(25, "column FATHERORIGIN Record 1", "\0")
        .At(26, "column MOTHERORIGIN Record 1", "\0")
        .At(27, "column BIRTHCOUNTRY Record 1", "\0")
        .At(28, "column CITIZENSHIP Record 1", "\0");
    i = this.filterMaritalStatus2();
    Assert.AreEqual<int>(0, i);
}
[TestMethod]
[PexGeneratedBy(typeof(PexTestClass))]
public void filterMaritalStatus2558()
{
    int i;
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.DefaultSession
        .At(0, "Num Records", (object)2)
        .At(1, "column NAME Record 0", "e")
        .At(2, "column ZIP Record 0", "e")
        .At(5, "column SEX Record 0", "e")
        .At(6, "column MARITAL Record 0", "evil")
        .At(7, "column RACE Record 0", "e")
        .At(8, "column TAXSTAT Record 0", "e")
        .At(9, "column DETAIL Record 0", "e")
        .At(10, "column HOUSEHOLDDETAIL Record 0", "e")
        .At(11, "column FATHERORIGIN Record 0", "e")
        .At(12, "column MOTHERORIGIN Record 0", "e")
        .At(13, "column BIRTHCOUNTRY Record 0", "e")
        .At(14, "column CITIZENSHIP Record 0", "e")
        .At(15, "column NAME Record 1", "e")
        .At(16, "column ZIP Record 1", "e")
        .At(19, "column SEX Record 1", "e")
        .At(20, "column MARITAL Record 1", "evil")
        .At(21, "column RACE Record 1", "e")
        .At(22, "column TAXSTAT Record 1", "e")
        .At(23, "column DETAIL Record 1", "e")
        .At(24, "column HOUSEHOLDDETAIL Record 1", "e")
        .At(25, "column FATHERORIGIN Record 1", "e")
        .At(26, "column MOTHERORIGIN Record 1", "e")
        .At(27, "column BIRTHCOUNTRY Record 1", "e")
        .At(28, "column CITIZENSHIP Record 1", "e");
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      i = this.filterMaritalStatus2();
      Assert.AreEqual<int>(2, i);
      bool ov1 = observer.GetObservedValue<bool>("1");
      Assert.AreEqual<bool>(true, ov1);
      bool ov101 = observer.GetObservedValue<bool>("101");
      Assert.AreEqual<bool>(true, ov101);
    }
}
[TestMethod]
[PexGeneratedBy(typeof(PexTestClass))]
public void filterMaritalStatus2682()
{
    int i;
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.DefaultSession
        .At(0, "Num Records", (object)4)
        .At(1, "column NAME Record 0", "e")
        .At(2, "column ZIP Record 0", "e")
        .At(5, "column SEX Record 0", "e")
        .At(6, "column MARITAL Record 0", "evil")
        .At(7, "column RACE Record 0", "e")
        .At(8, "column TAXSTAT Record 0", "e")
        .At(9, "column DETAIL Record 0", "e")
        .At(10, "column HOUSEHOLDDETAIL Record 0", "e")
        .At(11, "column FATHERORIGIN Record 0", "e")
        .At(12, "column MOTHERORIGIN Record 0", "e")
        .At(13, "column BIRTHCOUNTRY Record 0", "e")
        .At(14, "column CITIZENSHIP Record 0", "eviliiiiiiiiiiiiiiiiiiiiiiiiiiii")
        .At(15, "column NAME Record 1", "e")
        .At(16, "column ZIP Record 1", "e")
        .At(19, "column SEX Record 1", "e")
        .At(20, "column MARITAL Record 1", "evil")
        .At(21, "column RACE Record 1", "e")
        .At(22, "column TAXSTAT Record 1", "e")
        .At(23, "column DETAIL Record 1", "e")
        .At(24, "column HOUSEHOLDDETAIL Record 1", "e")
        .At(25, "column FATHERORIGIN Record 1", "e")
        .At(26, "column MOTHERORIGIN Record 1", "e")
        .At(27, "column BIRTHCOUNTRY Record 1", "e")
        .At(28, "column CITIZENSHIP Record 1", "e")
        .At(29, "column NAME Record 2", "e")
        .At(30, "column ZIP Record 2", "e")
        .At(33, "column SEX Record 2", "ev")
        .At(34, "column MARITAL Record 2", "evil")
        .At(35, "column RACE Record 2", "e")
        .At(36, "column TAXSTAT Record 2", "e")
        .At(37, "column DETAIL Record 2", "e")
        .At(38, "column HOUSEHOLDDETAIL Record 2", "e")
        .At(39, "column FATHERORIGIN Record 2", "e")
        .At(40, "column MOTHERORIGIN Record 2", "e")
        .At(41, "column BIRTHCOUNTRY Record 2", "e")
        .At(42, "column CITIZENSHIP Record 2", "e")
        .At(43, "column NAME Record 3", "e")
        .At(44, "column ZIP Record 3", "e")
        .At(47, "column SEX Record 3", "e")
        .At(48, "column MARITAL Record 3", "evil")
        .At(49, "column RACE Record 3", "e")
        .At(50, "column TAXSTAT Record 3", "e")
        .At(51, "column DETAIL Record 3", "e")
        .At(52, "column HOUSEHOLDDETAIL Record 3", "e")
        .At(53, "column FATHERORIGIN Record 3", "e")
        .At(54, "column MOTHERORIGIN Record 3", "e")
        .At(55, "column BIRTHCOUNTRY Record 3", "e")
        .At(56, "column CITIZENSHIP Record 3", "e");
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      i = this.filterMaritalStatus2();
      Assert.AreEqual<int>(4, i);
      bool ov1 = observer.GetObservedValue<bool>("1");
      Assert.AreEqual<bool>(true, ov1);
      bool ov101 = observer.GetObservedValue<bool>("101");
      Assert.AreEqual<bool>(true, ov101);
      bool ov102 = observer.GetObservedValue<bool>("102");
      Assert.AreEqual<bool>(true, ov102);
      bool ov103 = observer.GetObservedValue<bool>("103");
      Assert.AreEqual<bool>(true, ov103);
      bool ov2 = observer.GetObservedValue<bool>("2");
      Assert.AreEqual<bool>(true, ov2);
    }
}
    }
}
