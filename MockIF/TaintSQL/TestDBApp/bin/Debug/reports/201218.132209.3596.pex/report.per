<?xml version="1.0" encoding="utf-8"?>
<pex id="{5fad466e-29aa-4cf7-9251-38bc7ea5a0a9}" creationTime="2020-12-18 05:22:09Z" configuration="MyApplication!\PexTestClass!\filterMaritalStatus2!" created="2020-12-18 05:22:09Z" pexVersion="0.94.51006.1" xml="C:\TaintSQL\TestDBApp\bin\Debug\reports\201218.132209.3596.pex\report.per" html="C:\TaintSQL\TestDBApp\bin\Debug\reports\201218.132209.3596.pex\report.html"><environment commandLine="&quot;C:\Program Files\Microsoft Pex\bin\Microsoft.Pex.exe&quot; C:\TaintSQL\TestDBApp\bin\Debug\TestDBApp.dll /membernamefilter:M:filterMaritalStatus2! /methodnamefilter:filterMaritalStatus2! /namespacefilter:MyApplication! /typefilter:PexTestClass! /x64failsilently /clrversion:v4.0.30319 /referencedprojectassemblies:MockDBMS /donotopenreport /reportlevel:Xml /reportrootpath:C:\TaintSQL\TestDBApp\bin\Debug\reports /testframework:VisualStudioUnitTest /testlanguage:cs /testprojectfile:C:\TaintSQL\TestDBApp\TestDBApp.csproj /testprojectnotupdate /testprojectskip" machineName="LINWEI6D15" osVersion="Microsoft Windows NT 5.1.2600 Service Pack 3" processorCount="4" clrVersion="4.0.30319.1" bitness="x86" user="Administrator"><envVars><envVar name="HOMEPATH" value="\Documents and Settings\Administrator"/>
<envVar name="COMPUTERNAME" value="LINWEI6D15"/>
<envVar name="CLRMONITOR_INJECT_TYPES" value=""/>
<envVar name="COMPLUS_ProfAPI_ProfilerCompatibilitySetting" value="EnableV2Profiler"/>
<envVar name="TMP" value="C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp"/>
<envVar name="PROCESSOR_REVISION" value="8e0a"/>
<envVar name="CLRMONITOR_INSTRUMENT_TYPES_EXCLUSIONS" value=""/>
<envVar name="PATHEXT" value=".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH"/>
<envVar name="COMPLUS_DEFAULTVERSION" value="v4.0.30319"/>
<envVar name="CLRMONITOR_CLSID" value="{21bbb412-71ac-41f9-a377-48529a4859cf}"/>
<envVar name="CommonProgramFiles" value="C:\Program Files\Common Files"/>
<envVar name="TEMP" value="C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp"/>
<envVar name="CLRMONITOR_PROTECT_TYPES" value="Microsoft.FSharp.Text.Printf,Microsoft.FSharp.Text.PrintfImpl"/>
<envVar name="CLRMONITOR_INJECT_ASSEMBLIES" value=""/>
<envVar name="CLIENTNAME" value="Console"/>
<envVar name="CLRMONITOR_INITIALIZED" value="0x12"/>
<envVar name="USERDOMAIN" value="LINWEI6D15"/>
<envVar name="windir" value="C:\WINDOWS"/>
<envVar name="CLRMONITOR_ERASE_FINALIZER_TYPES" value=""/>
<envVar name="CLRMONITOR_INJECT_NAMESPACES" value=""/>
<envVar name="PROCESSOR_IDENTIFIER" value="x86 Family 6 Model 142 Stepping 10, GenuineIntel"/>
<envVar name="Path" value="C:\Program Files\Parallels\Parallels Tools\Applications;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;c:\Program Files\Microsoft SQL Server\100\Tools\Binn\;c:\Program Files\Microsoft SQL Server\100\DTS\Binn\"/>
<envVar name="pex_wait_for_server_channel" value="1"/>
<envVar name="PROCESSOR_LEVEL" value="6"/>
<envVar name="CLRMONITOR_INSTRUMENT_NAMESPACES_EXCLUSIONS" value=""/>
<envVar name="CLRMONITOR_FLAGS" value=""/>
<envVar name="pex_instrumentation" value="1"/>
<envVar name="SESSIONNAME" value="Console"/>
<envVar name="CLRMONITOR_INSTRUMENT_TYPES" value="System.Array,System.Array+ArrayEnumerator,System.Array+FunctorComparer`1,System.Array+SZArrayEnumerator,System.Array+SorterGenericArray,System.Array+SorterObjectArray,System.Boolean,System.Byte,System.Char,System.CharEnumerator,System.ComponentModel.Component,System.ComponentModel.Container,System.ComponentModel.Container+Site,System.Convert,System.Currency,System.DateTime,System.Decimal,System.Diagnostics.Assert,System.Double,System.Globalization.CharUnicodeInfo,System.Globalization.CultureTableRecord,System.Globalization.TextInfo,System.Guid,System.IO.MemoryStream,System.IO.Stream,System.IO.StreamReader,System.IO.StreamWriter,System.IO.StringReader,System.IO.StringWriter,System.Int16,System.Int32,System.Int64,System.Lazy`1,System.Lazy`1+Boxed,System.Lazy`1+LazyInternalExceptionHolder,System.Math,System.Nullable,System.Nullable`1,System.OrdinalComparer,System.SByte,System.SZArrayHelper,System.SZArrayHelper+SZGenericArrayEnumerator`1,System.Single,System.String,System.StringComparer,System.Text.ASCIIEncoding,System.Text.DecoderNLS,System.Text.Encoding,System.Text.UTF8Encoding,System.TimeSpan,System.Tuple,System.Tuple`1,System.Tuple`2,System.Tuple`3,System.Tuple`4,System.Tuple`5,System.Tuple`6,System.Tuple`7,System.Tuple`8,System.UInt16,System.UInt32,System.UInt64,System.Xml.XmlTextWriter,System.Xml.XmlTextWriter+Namespace,System.Xml.XmlTextWriter+NamespaceState,System.Xml.XmlTextWriter+SpecialAttr,System.Xml.XmlTextWriter+State,System.Xml.XmlTextWriter+TagInfo,System.Xml.XmlTextWriter+Token,System.Xml.XmlWriter,__Box`1,__SzArrayHelper`1"/>
<envVar name="VisualStudioDir" value="\\Mac\Home\Documents\Visual Studio 2010"/>
<envVar name="ProgramFiles" value="C:\Program Files"/>
<envVar name="CLRMONITOR_ERASE_CCTOR_TYPES" value=""/>
<envVar name="FP_NO_HOST_CHECK" value="NO"/>
<envVar name="pex_clientid" value="pex4048_1"/>
<envVar name="NUMBER_OF_PROCESSORS" value="4"/>
<envVar name="SystemRoot" value="C:\WINDOWS"/>
<envVar name="CLRMONITOR_INSTRUMENT_ATTRIBUTE" value="Microsoft.Moles.Framework.Moles.MolesInstrumentAttribute"/>
<envVar name="CLRMONITOR_PROTECT_ALL_CCTORS" value="1"/>
<envVar name="LOGONSERVER" value="\\LINWEI6D15"/>
<envVar name="USERPROFILE" value="C:\Documents and Settings\Administrator"/>
<envVar name="CLRMONITOR_SUBSTITUTIONS" value="C:\WINDOWS\assembly\GAC_MSIL\Microsoft.ExtendedReflection\0.94.0.0__31bf3856ad364e35\Microsoft.ExtendedReflection.dll"/>
<envVar name="CLRMONITOR_INSTRUMENT_ASSEMBLIES_EXCLUSIONS" value="Microsoft.VisualBasic"/>
<envVar name="APPDATA" value="C:\Documents and Settings\Administrator\Application Data"/>
<envVar name="HOMEDRIVE" value="C:"/>
<envVar name="ComSpec" value="C:\WINDOWS\system32\cmd.exe"/>
<envVar name="VS100COMNTOOLS" value="c:\Program Files\Microsoft Visual Studio 10.0\Common7\Tools\"/>
<envVar name="USERNAME" value="Administrator"/>
<envVar name="COR_PROFILER" value="{21bbb412-71ac-41f9-a377-48529a4859cf}"/>
<envVar name="PROCESSOR_ARCHITECTURE" value="x86"/>
<envVar name="pex_server_channel" value="pex4048"/>
<envVar name="OS" value="Windows_NT"/>
<envVar name="CLRMONITOR_INSTRUMENT_NAMESPACES" value="System.Collections,System.Collections.Generic,System.Collections.ObjectModel,System.Collections.Specialized,System.Diagnostics.Contracts"/>
<envVar name="SystemDrive" value="C:"/>
<envVar name="CLRMONITOR_INSTRUMENT_ASSEMBLIES" value="FSharp.Core,FSharp.PowerPack,MacroScope,Microsoft.Contracts,Microsoft.VisualBasic,Microsoft.VisualStudio.QualityTools.UnitTestFramework,MockDBMS,ParsedQuery,System,System.Core,System.Web,TestDBApp"/>
<envVar name="ALLUSERSPROFILE" value="C:\Documents and Settings\All Users"/>
</envVars>
</environment>
<settings/>
<reflection><existingTest method="TestMarketMSShowAllCheckInLogByID87" type="MyApplication.PexTestClass" token="6000001" generated="true"/>
<existingTest method="TestMarketMSShowAllCheckInLogByID8701" type="MyApplication.PexTestClass" token="6000002" generated="true"/>
<existingTest method="TestMarketMSShowAllCheckInLogByID8702" type="MyApplication.PexTestClass" token="6000003" generated="true"/>
<existingTest method="TestOdysseyGetExistingFaves548" type="MyApplication.PexTestClass" token="6000012" generated="true"/>
<existingTest method="TestOdysseyGetExistingFaves949" type="MyApplication.PexTestClass" token="6000014" generated="true"/>
<existingTest method="TestOdysseyGetExistingFaves28701" type="MyApplication.PexTestClass" token="600001c" generated="true"/>
<existingTest method="TestOdysseyGetExistingFaves41101" type="MyApplication.PexTestClass" token="600001f" generated="true"/>
<existingTest method="TestOdysseyGetExistingFaves45301" type="MyApplication.PexTestClass" token="600001b" generated="true"/>
<existingTest method="TestOdysseyGetExistingFaves47101" type="MyApplication.PexTestClass" token="6000019" generated="true"/>
<existingTest method="TestOdysseyGetExistingFaves47102" type="MyApplication.PexTestClass" token="6000024" generated="true"/>
<existingTest method="TestOdysseyGetExistingFaves50801" type="MyApplication.PexTestClass" token="600001d" generated="true"/>
<existingTest method="TestOdysseyGetExistingFaves54802" type="MyApplication.PexTestClass" token="6000013" generated="true"/>
<existingTest method="TestOdysseyGetExistingFaves54805" type="MyApplication.PexTestClass" token="6000015" generated="true"/>
<existingTest method="TestOdysseyGetExistingFaves54807" type="MyApplication.PexTestClass" token="6000018" generated="true"/>
<existingTest method="TestOdysseyGetExistingFaves54808" type="MyApplication.PexTestClass" token="6000017" generated="true"/>
<existingTest method="TestOdysseyGetExistingFaves54809" type="MyApplication.PexTestClass" token="6000016" generated="true"/>
<existingTest method="TestOdysseyGetExistingFaves54813" type="MyApplication.PexTestClass" token="6000020" generated="true"/>
<existingTest method="TestOdysseyGetExistingFaves54814" type="MyApplication.PexTestClass" token="6000021" generated="true"/>
<existingTest method="TestOdysseyGetExistingFaves54815" type="MyApplication.PexTestClass" token="6000022" generated="true"/>
<existingTest method="TestOdysseyGetExistingFaves83401" type="MyApplication.PexTestClass" token="600001e" generated="true"/>
<existingTest method="TestOdysseyGetExistingFaves85901" type="MyApplication.PexTestClass" token="600001a" generated="true"/>
<existingTest method="TestOdysseyGetExistingFaves94902" type="MyApplication.PexTestClass" token="6000023" generated="true"/>
<existingTest method="TestpexChoose01" type="MyApplication.PexTestClass" token="6000026" generated="true"/>
<existingTest method="TestpexChoose02" type="MyApplication.PexTestClass" token="6000027" generated="true"/>
<existingTest method="TestpexChoose05" type="MyApplication.PexTestClass" token="6000028" generated="true"/>
<existingTest method="TestpexChooseThrowsNullReferenceException486" type="MyApplication.PexTestClass" token="6000025" generated="true" failure="true" exceptionType="System.NullReferenceException"/>
</reflection>
<assembly name="TestDBApp" version="1.0.0.0" fileVersion="1.0.0.0" fullName="TestDBApp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" location="C:\TaintSQL\TestDBApp\bin\Debug\TestDBApp.dll" fileName="TestDBApp.dll"><settings testFramework="VisualStudioUnitTest" testLanguage="cs"/>
<fixture name="PexTestClass" type="MyApplication.PexTestClass" typeName="PexTestClass" token="2000002" href="fix\TestDBApp.567.html"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
<exploration shortName="filterMaritalStatus2()" fullName="MyApplication.PexTestClass.filterMaritalStatus2()"><method><definition assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</definition>
</method>
<settings maxBranches="80000" maxRunsWithoutNewTests="200"/>
<log level="message" time="2020-12-18 05:22:09Z" category="symbols" message="could not load symbols for C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<log level="message" time="2020-12-18 05:22:09Z" category="symbols" message="search path: ;"/>
<uninstrumented testability="true" methodDisplayName="System.String[] System.IO.File.ReadAllLines(System.String path)" declaringTypeDisplayName="System.IO.File" methodShortDisplayName="File.ReadAllLines(String)" wikiTopic="Testability Issue"><method><definition assemblyName="mscorlib" name="ReadAllLines" static="true" token="6003ecf"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at Encoding.get_UTF8()" method="Encoding.get_UTF8()" offset="0"><method assemblyName="mscorlib" name="get_UTF8" static="true" token="600311e"><declaringType assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
<resultType spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</resultType>
</method>
</frame>
<frame value="  at File.ReadAllLines(String)" method="File.ReadAllLines(String)" offset="38"><method assemblyName="mscorlib" name="ReadAllLines" static="true" token="6003ecf"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at DBMS.readSchemaFromFile() in C:\TaintSQL\MockDBMS\MockDBMS.cs(41)" method="DBMS.readSchemaFromFile()" offset="17" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="41"><method assemblyName="MockDBMS" name="readSchemaFromFile" token="6000019"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        private void readSchemaFromFile()
        {
            tables = new List<Table>();]]></beforeSource>
<source><![CDATA[            string[] lines = System.IO.File.ReadAllLines(@"C:\schema.txt");]]></source>
<afterSource><![CDATA[            Table table = null;
            foreach (string line in lines)
            {]]></afterSource>
</frame>
<frame value="  at DBMS.initializeDBMSFromSchema() in C:\TaintSQL\MockDBMS\MockDBMS.cs(120)" method="DBMS.initializeDBMSFromSchema()" offset="2" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="120"><method assemblyName="MockDBMS" name="initializeDBMSFromSchema" token="600001a"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        private void initializeDBMSFromSchema()
        {]]></beforeSource>
<source><![CDATA[            readSchemaFromFile();]]></source>
<afterSource><![CDATA[            /* tables = new List<Table>(); 
            Table t = new Table("persons");
            t.AddColumn("firstname", DataTypes.STRING);]]></afterSource>
</frame>
<frame value="  at DBMS.CreateDatabaseState() in C:\TaintSQL\MockDBMS\MockDBMS.cs(147)" method="DBMS.CreateDatabaseState()" offset="2" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="147"><method assemblyName="MockDBMS" name="CreateDatabaseState" token="600001b"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        public void CreateDatabaseState()
        {
            //MockDBMS dbms = new MockDBMS();]]></beforeSource>
<source><![CDATA[            initializeDBMSFromSchema();]]></source>
<afterSource><![CDATA[             //Test Code

            //FillTestRecords();]]></afterSource>
</frame>
<frame value="  at MockSqlConnection.Open() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs(31)" method="MockSqlConnection.Open()" offset="7" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs" line="31"><method assemblyName="MockDBMS" name="Open" token="6000061"><declaringType assemblyName="MockDBMS" name="MockSqlConnection" token="200000e" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlConnection" token="200000e" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        public void Open()
        {]]></beforeSource>
<source><![CDATA[            dbms.CreateDatabaseState();]]></source>
<afterSource><![CDATA[        }
    }
}]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(503)" method="PexTestClass.filterMaritalStatus2()" offset="21" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="503"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            string status = "evil";
            int count = 0;
            MockSqlConnection conn = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");]]></beforeSource>
<source><![CDATA[            conn.Open();]]></source>
<afterSource><![CDATA[            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);
            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void System.IO.TextReader..ctor()" declaringTypeDisplayName="System.IO.TextReader" methodShortDisplayName="TextReader..ctor()" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="mscorlib" name=".ctor" token="6004020"><declaringType assemblyName="mscorlib" name="TextReader" token="20006cc" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="TextReader" token="20006cc" namespace="System.IO"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at StreamReader..ctor(String, Encoding, Boolean, Int32)" method="StreamReader..ctor(String, Encoding, Boolean, Int32)" offset="6"><method assemblyName="mscorlib" name=".ctor" token="6004040"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<parameter name="detectEncodingFromByteOrderMarks" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<parameter name="bufferSize" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at StreamReader..ctor(String, Encoding)" method="StreamReader..ctor(String, Encoding)" offset="9"><method assemblyName="mscorlib" name=".ctor" token="600403e"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at File.InternalReadAllLines(String, Encoding)" method="File.InternalReadAllLines(String, Encoding)" offset="13"><method assemblyName="mscorlib" name="InternalReadAllLines" static="true" token="6003ee1"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at File.ReadAllLines(String)" method="File.ReadAllLines(String)" offset="38"><method assemblyName="mscorlib" name="ReadAllLines" static="true" token="6003ecf"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at DBMS.readSchemaFromFile() in C:\TaintSQL\MockDBMS\MockDBMS.cs(41)" method="DBMS.readSchemaFromFile()" offset="17" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="41"><method assemblyName="MockDBMS" name="readSchemaFromFile" token="6000019"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        private void readSchemaFromFile()
        {
            tables = new List<Table>();]]></beforeSource>
<source><![CDATA[            string[] lines = System.IO.File.ReadAllLines(@"C:\schema.txt");]]></source>
<afterSource><![CDATA[            Table table = null;
            foreach (string line in lines)
            {]]></afterSource>
</frame>
<frame value="  at DBMS.initializeDBMSFromSchema() in C:\TaintSQL\MockDBMS\MockDBMS.cs(120)" method="DBMS.initializeDBMSFromSchema()" offset="2" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="120"><method assemblyName="MockDBMS" name="initializeDBMSFromSchema" token="600001a"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        private void initializeDBMSFromSchema()
        {]]></beforeSource>
<source><![CDATA[            readSchemaFromFile();]]></source>
<afterSource><![CDATA[            /* tables = new List<Table>(); 
            Table t = new Table("persons");
            t.AddColumn("firstname", DataTypes.STRING);]]></afterSource>
</frame>
<frame value="  at DBMS.CreateDatabaseState() in C:\TaintSQL\MockDBMS\MockDBMS.cs(147)" method="DBMS.CreateDatabaseState()" offset="2" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="147"><method assemblyName="MockDBMS" name="CreateDatabaseState" token="600001b"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        public void CreateDatabaseState()
        {
            //MockDBMS dbms = new MockDBMS();]]></beforeSource>
<source><![CDATA[            initializeDBMSFromSchema();]]></source>
<afterSource><![CDATA[             //Test Code

            //FillTestRecords();]]></afterSource>
</frame>
<frame value="  at MockSqlConnection.Open() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs(31)" method="MockSqlConnection.Open()" offset="7" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs" line="31"><method assemblyName="MockDBMS" name="Open" token="6000061"><declaringType assemblyName="MockDBMS" name="MockSqlConnection" token="200000e" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlConnection" token="200000e" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        public void Open()
        {]]></beforeSource>
<source><![CDATA[            dbms.CreateDatabaseState();]]></source>
<afterSource><![CDATA[        }
    }
}]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(503)" method="PexTestClass.filterMaritalStatus2()" offset="21" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="503"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            string status = "evil";
            int count = 0;
            MockSqlConnection conn = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");]]></beforeSource>
<source><![CDATA[            conn.Open();]]></source>
<afterSource><![CDATA[            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);
            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented testability="true" methodDisplayName="System.Void System.IO.FileStream..ctor(System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Int32 bufferSize, System.IO.FileOptions options)" declaringTypeDisplayName="System.IO.FileStream" methodShortDisplayName="FileStream..ctor(String, FileMode, FileAccess, FileShare, Int32, FileOptions)" wikiTopic="Testability Issue"><method><definition assemblyName="mscorlib" name=".ctor" token="6003f31"><declaringType assemblyName="mscorlib" name="FileStream" token="20006b8" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="FileStream" token="20006b8" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="mode" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="FileMode" token="20006b3" namespace="System.IO"/>
</type>
</parameter>
<parameter name="access" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="FileAccess" token="20006b0" namespace="System.IO"/>
</type>
</parameter>
<parameter name="share" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="FileShare" token="20006b6" namespace="System.IO"/>
</type>
</parameter>
<parameter name="bufferSize" position="5"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="options" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="FileOptions" token="20006b5" namespace="System.IO"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at Stream..ctor()" method="Stream..ctor()" offset="0"><method assemblyName="mscorlib" name=".ctor" token="6003d68"><declaringType assemblyName="mscorlib" name="Stream" token="200069a" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="Stream" token="200069a" namespace="System.IO"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at FileStream..ctor(String, FileMode, FileAccess, FileShare, Int32, FileOptions)" method="FileStream..ctor(String, FileMode, FileAccess, FileShare, Int32, FileOptions)" offset="0"><method assemblyName="mscorlib" name=".ctor" token="6003f31"><declaringType assemblyName="mscorlib" name="FileStream" token="20006b8" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="FileStream" token="20006b8" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="mode" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="FileMode" token="20006b3" namespace="System.IO"/>
</type>
</parameter>
<parameter name="access" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="FileAccess" token="20006b0" namespace="System.IO"/>
</type>
</parameter>
<parameter name="share" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="FileShare" token="20006b6" namespace="System.IO"/>
</type>
</parameter>
<parameter name="bufferSize" position="5"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="options" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="FileOptions" token="20006b5" namespace="System.IO"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at StreamReader..ctor(String, Encoding, Boolean, Int32)" method="StreamReader..ctor(String, Encoding, Boolean, Int32)" offset="97"><method assemblyName="mscorlib" name=".ctor" token="6004040"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<parameter name="detectEncodingFromByteOrderMarks" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<parameter name="bufferSize" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at StreamReader..ctor(String, Encoding)" method="StreamReader..ctor(String, Encoding)" offset="9"><method assemblyName="mscorlib" name=".ctor" token="600403e"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at File.InternalReadAllLines(String, Encoding)" method="File.InternalReadAllLines(String, Encoding)" offset="13"><method assemblyName="mscorlib" name="InternalReadAllLines" static="true" token="6003ee1"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at File.ReadAllLines(String)" method="File.ReadAllLines(String)" offset="38"><method assemblyName="mscorlib" name="ReadAllLines" static="true" token="6003ecf"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at DBMS.readSchemaFromFile() in C:\TaintSQL\MockDBMS\MockDBMS.cs(41)" method="DBMS.readSchemaFromFile()" offset="17" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="41"><method assemblyName="MockDBMS" name="readSchemaFromFile" token="6000019"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        private void readSchemaFromFile()
        {
            tables = new List<Table>();]]></beforeSource>
<source><![CDATA[            string[] lines = System.IO.File.ReadAllLines(@"C:\schema.txt");]]></source>
<afterSource><![CDATA[            Table table = null;
            foreach (string line in lines)
            {]]></afterSource>
</frame>
<frame value="  at DBMS.initializeDBMSFromSchema() in C:\TaintSQL\MockDBMS\MockDBMS.cs(120)" method="DBMS.initializeDBMSFromSchema()" offset="2" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="120"><method assemblyName="MockDBMS" name="initializeDBMSFromSchema" token="600001a"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        private void initializeDBMSFromSchema()
        {]]></beforeSource>
<source><![CDATA[            readSchemaFromFile();]]></source>
<afterSource><![CDATA[            /* tables = new List<Table>(); 
            Table t = new Table("persons");
            t.AddColumn("firstname", DataTypes.STRING);]]></afterSource>
</frame>
<frame value="  at DBMS.CreateDatabaseState() in C:\TaintSQL\MockDBMS\MockDBMS.cs(147)" method="DBMS.CreateDatabaseState()" offset="2" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="147"><method assemblyName="MockDBMS" name="CreateDatabaseState" token="600001b"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        public void CreateDatabaseState()
        {
            //MockDBMS dbms = new MockDBMS();]]></beforeSource>
<source><![CDATA[            initializeDBMSFromSchema();]]></source>
<afterSource><![CDATA[             //Test Code

            //FillTestRecords();]]></afterSource>
</frame>
<frame value="  at MockSqlConnection.Open() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs(31)" method="MockSqlConnection.Open()" offset="7" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs" line="31"><method assemblyName="MockDBMS" name="Open" token="6000061"><declaringType assemblyName="MockDBMS" name="MockSqlConnection" token="200000e" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlConnection" token="200000e" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        public void Open()
        {]]></beforeSource>
<source><![CDATA[            dbms.CreateDatabaseState();]]></source>
<afterSource><![CDATA[        }
    }
}]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(503)" method="PexTestClass.filterMaritalStatus2()" offset="21" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="503"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            string status = "evil";
            int count = 0;
            MockSqlConnection conn = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");]]></beforeSource>
<source><![CDATA[            conn.Open();]]></source>
<afterSource><![CDATA[            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);
            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void System.Text.Decoder..ctor()" declaringTypeDisplayName="System.Text.Decoder" methodShortDisplayName="Decoder..ctor()" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="mscorlib" name=".ctor" token="6003146"><declaringType assemblyName="mscorlib" name="Decoder" token="20004c8" namespace="System.Text"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="Decoder" token="20004c8" namespace="System.Text"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at DecoderNLS..ctor(Encoding)" method="DecoderNLS..ctor(Encoding)" offset="6"><method assemblyName="mscorlib" name=".ctor" token="60031b5"><declaringType assemblyName="mscorlib" name="DecoderNLS" token="20004d4" namespace="System.Text"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="DecoderNLS" token="20004d4" namespace="System.Text"/>
</type>
</parameter>
<parameter name="encoding" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at UTF8Encoding.GetDecoder()" method="UTF8Encoding.GetDecoder()" offset="1"><method assemblyName="mscorlib" name="GetDecoder" token="6003313"><declaringType assemblyName="mscorlib" name="UTF8Encoding" token="20004fb" namespace="System.Text"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="UTF8Encoding" token="20004fb" namespace="System.Text"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="Decoder" token="20004c8" namespace="System.Text"/>
</resultType>
</method>
</frame>
<frame value="  at StreamReader.Init(Stream, Encoding, Boolean, Int32)" method="StreamReader.Init(Stream, Encoding, Boolean, Int32)" offset="16"><method assemblyName="mscorlib" name="Init" token="600404f"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="stream" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Stream" token="200069a" namespace="System.IO"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<parameter name="detectEncodingFromByteOrderMarks" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<parameter name="bufferSize" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at StreamReader..ctor(String, Encoding, Boolean, Int32)" method="StreamReader..ctor(String, Encoding, Boolean, Int32)" offset="109"><method assemblyName="mscorlib" name=".ctor" token="6004040"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<parameter name="detectEncodingFromByteOrderMarks" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<parameter name="bufferSize" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at StreamReader..ctor(String, Encoding)" method="StreamReader..ctor(String, Encoding)" offset="9"><method assemblyName="mscorlib" name=".ctor" token="600403e"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at File.InternalReadAllLines(String, Encoding)" method="File.InternalReadAllLines(String, Encoding)" offset="13"><method assemblyName="mscorlib" name="InternalReadAllLines" static="true" token="6003ee1"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at File.ReadAllLines(String)" method="File.ReadAllLines(String)" offset="38"><method assemblyName="mscorlib" name="ReadAllLines" static="true" token="6003ecf"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at DBMS.readSchemaFromFile() in C:\TaintSQL\MockDBMS\MockDBMS.cs(41)" method="DBMS.readSchemaFromFile()" offset="17" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="41"><method assemblyName="MockDBMS" name="readSchemaFromFile" token="6000019"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        private void readSchemaFromFile()
        {
            tables = new List<Table>();]]></beforeSource>
<source><![CDATA[            string[] lines = System.IO.File.ReadAllLines(@"C:\schema.txt");]]></source>
<afterSource><![CDATA[            Table table = null;
            foreach (string line in lines)
            {]]></afterSource>
</frame>
<frame value="  at DBMS.initializeDBMSFromSchema() in C:\TaintSQL\MockDBMS\MockDBMS.cs(120)" method="DBMS.initializeDBMSFromSchema()" offset="2" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="120"><method assemblyName="MockDBMS" name="initializeDBMSFromSchema" token="600001a"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        private void initializeDBMSFromSchema()
        {]]></beforeSource>
<source><![CDATA[            readSchemaFromFile();]]></source>
<afterSource><![CDATA[            /* tables = new List<Table>(); 
            Table t = new Table("persons");
            t.AddColumn("firstname", DataTypes.STRING);]]></afterSource>
</frame>
<frame value="  at DBMS.CreateDatabaseState() in C:\TaintSQL\MockDBMS\MockDBMS.cs(147)" method="DBMS.CreateDatabaseState()" offset="2" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="147"><method assemblyName="MockDBMS" name="CreateDatabaseState" token="600001b"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        public void CreateDatabaseState()
        {
            //MockDBMS dbms = new MockDBMS();]]></beforeSource>
<source><![CDATA[            initializeDBMSFromSchema();]]></source>
<afterSource><![CDATA[             //Test Code

            //FillTestRecords();]]></afterSource>
</frame>
<frame value="  at MockSqlConnection.Open() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs(31)" method="MockSqlConnection.Open()" offset="7" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs" line="31"><method assemblyName="MockDBMS" name="Open" token="6000061"><declaringType assemblyName="MockDBMS" name="MockSqlConnection" token="200000e" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlConnection" token="200000e" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        public void Open()
        {]]></beforeSource>
<source><![CDATA[            dbms.CreateDatabaseState();]]></source>
<afterSource><![CDATA[        }
    }
}]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(503)" method="PexTestClass.filterMaritalStatus2()" offset="21" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="503"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            string status = "evil";
            int count = 0;
            MockSqlConnection conn = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");]]></beforeSource>
<source><![CDATA[            conn.Open();]]></source>
<afterSource><![CDATA[            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);
            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void System.Text.UTF8Encoding+UTF8Decoder.Reset()" declaringTypeDisplayName="System.Text.UTF8Encoding+UTF8Decoder" methodShortDisplayName="UTF8Decoder.Reset()" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="mscorlib" name="Reset" token="6003328"><declaringType assemblyName="mscorlib" name="UTF8Decoder" token="20004fd"><declaringType assemblyName="mscorlib" name="UTF8Encoding" token="20004fb" namespace="System.Text"/>
</declaringType>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="UTF8Decoder" token="20004fd"><declaringType assemblyName="mscorlib" name="UTF8Encoding" token="20004fb" namespace="System.Text"/>
</definition>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at DecoderNLS..ctor(Encoding)" method="DecoderNLS..ctor(Encoding)" offset="36"><method assemblyName="mscorlib" name=".ctor" token="60031b5"><declaringType assemblyName="mscorlib" name="DecoderNLS" token="20004d4" namespace="System.Text"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="DecoderNLS" token="20004d4" namespace="System.Text"/>
</type>
</parameter>
<parameter name="encoding" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at UTF8Encoding.GetDecoder()" method="UTF8Encoding.GetDecoder()" offset="1"><method assemblyName="mscorlib" name="GetDecoder" token="6003313"><declaringType assemblyName="mscorlib" name="UTF8Encoding" token="20004fb" namespace="System.Text"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="UTF8Encoding" token="20004fb" namespace="System.Text"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="Decoder" token="20004c8" namespace="System.Text"/>
</resultType>
</method>
</frame>
<frame value="  at StreamReader.Init(Stream, Encoding, Boolean, Int32)" method="StreamReader.Init(Stream, Encoding, Boolean, Int32)" offset="16"><method assemblyName="mscorlib" name="Init" token="600404f"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="stream" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Stream" token="200069a" namespace="System.IO"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<parameter name="detectEncodingFromByteOrderMarks" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<parameter name="bufferSize" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at StreamReader..ctor(String, Encoding, Boolean, Int32)" method="StreamReader..ctor(String, Encoding, Boolean, Int32)" offset="109"><method assemblyName="mscorlib" name=".ctor" token="6004040"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<parameter name="detectEncodingFromByteOrderMarks" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<parameter name="bufferSize" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at StreamReader..ctor(String, Encoding)" method="StreamReader..ctor(String, Encoding)" offset="9"><method assemblyName="mscorlib" name=".ctor" token="600403e"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at File.InternalReadAllLines(String, Encoding)" method="File.InternalReadAllLines(String, Encoding)" offset="13"><method assemblyName="mscorlib" name="InternalReadAllLines" static="true" token="6003ee1"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at File.ReadAllLines(String)" method="File.ReadAllLines(String)" offset="38"><method assemblyName="mscorlib" name="ReadAllLines" static="true" token="6003ecf"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at DBMS.readSchemaFromFile() in C:\TaintSQL\MockDBMS\MockDBMS.cs(41)" method="DBMS.readSchemaFromFile()" offset="17" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="41"><method assemblyName="MockDBMS" name="readSchemaFromFile" token="6000019"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        private void readSchemaFromFile()
        {
            tables = new List<Table>();]]></beforeSource>
<source><![CDATA[            string[] lines = System.IO.File.ReadAllLines(@"C:\schema.txt");]]></source>
<afterSource><![CDATA[            Table table = null;
            foreach (string line in lines)
            {]]></afterSource>
</frame>
<frame value="  at DBMS.initializeDBMSFromSchema() in C:\TaintSQL\MockDBMS\MockDBMS.cs(120)" method="DBMS.initializeDBMSFromSchema()" offset="2" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="120"><method assemblyName="MockDBMS" name="initializeDBMSFromSchema" token="600001a"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        private void initializeDBMSFromSchema()
        {]]></beforeSource>
<source><![CDATA[            readSchemaFromFile();]]></source>
<afterSource><![CDATA[            /* tables = new List<Table>(); 
            Table t = new Table("persons");
            t.AddColumn("firstname", DataTypes.STRING);]]></afterSource>
</frame>
<frame value="  at DBMS.CreateDatabaseState() in C:\TaintSQL\MockDBMS\MockDBMS.cs(147)" method="DBMS.CreateDatabaseState()" offset="2" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="147"><method assemblyName="MockDBMS" name="CreateDatabaseState" token="600001b"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        public void CreateDatabaseState()
        {
            //MockDBMS dbms = new MockDBMS();]]></beforeSource>
<source><![CDATA[            initializeDBMSFromSchema();]]></source>
<afterSource><![CDATA[             //Test Code

            //FillTestRecords();]]></afterSource>
</frame>
<frame value="  at MockSqlConnection.Open() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs(31)" method="MockSqlConnection.Open()" offset="7" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs" line="31"><method assemblyName="MockDBMS" name="Open" token="6000061"><declaringType assemblyName="MockDBMS" name="MockSqlConnection" token="200000e" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlConnection" token="200000e" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        public void Open()
        {]]></beforeSource>
<source><![CDATA[            dbms.CreateDatabaseState();]]></source>
<afterSource><![CDATA[        }
    }
}]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(503)" method="PexTestClass.filterMaritalStatus2()" offset="21" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="503"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            string status = "evil";
            int count = 0;
            MockSqlConnection conn = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");]]></beforeSource>
<source><![CDATA[            conn.Open();]]></source>
<afterSource><![CDATA[            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);
            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Int32 System.Text.DecoderReplacementFallback.get_MaxCharCount()" declaringTypeDisplayName="System.Text.DecoderReplacementFallback" methodShortDisplayName="DecoderReplacementFallback.get_MaxCharCount()" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="mscorlib" name="get_MaxCharCount" token="60031f9"><declaringType assemblyName="mscorlib" name="DecoderReplacementFallback" token="20004dc" namespace="System.Text"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="DecoderReplacementFallback" token="20004dc" namespace="System.Text"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at UTF8Encoding.GetMaxCharCount(Int32)" method="UTF8Encoding.GetMaxCharCount(Int32)" offset="42"><method assemblyName="mscorlib" name="GetMaxCharCount" token="6003316"><declaringType assemblyName="mscorlib" name="UTF8Encoding" token="20004fb" namespace="System.Text"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="UTF8Encoding" token="20004fb" namespace="System.Text"/>
</type>
</parameter>
<parameter name="byteCount" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at StreamReader.Init(Stream, Encoding, Boolean, Int32)" method="StreamReader.Init(Stream, Encoding, Boolean, Int32)" offset="59"><method assemblyName="mscorlib" name="Init" token="600404f"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="stream" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Stream" token="200069a" namespace="System.IO"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<parameter name="detectEncodingFromByteOrderMarks" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<parameter name="bufferSize" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at StreamReader..ctor(String, Encoding, Boolean, Int32)" method="StreamReader..ctor(String, Encoding, Boolean, Int32)" offset="109"><method assemblyName="mscorlib" name=".ctor" token="6004040"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<parameter name="detectEncodingFromByteOrderMarks" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<parameter name="bufferSize" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at StreamReader..ctor(String, Encoding)" method="StreamReader..ctor(String, Encoding)" offset="9"><method assemblyName="mscorlib" name=".ctor" token="600403e"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at File.InternalReadAllLines(String, Encoding)" method="File.InternalReadAllLines(String, Encoding)" offset="13"><method assemblyName="mscorlib" name="InternalReadAllLines" static="true" token="6003ee1"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at File.ReadAllLines(String)" method="File.ReadAllLines(String)" offset="38"><method assemblyName="mscorlib" name="ReadAllLines" static="true" token="6003ecf"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at DBMS.readSchemaFromFile() in C:\TaintSQL\MockDBMS\MockDBMS.cs(41)" method="DBMS.readSchemaFromFile()" offset="17" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="41"><method assemblyName="MockDBMS" name="readSchemaFromFile" token="6000019"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        private void readSchemaFromFile()
        {
            tables = new List<Table>();]]></beforeSource>
<source><![CDATA[            string[] lines = System.IO.File.ReadAllLines(@"C:\schema.txt");]]></source>
<afterSource><![CDATA[            Table table = null;
            foreach (string line in lines)
            {]]></afterSource>
</frame>
<frame value="  at DBMS.initializeDBMSFromSchema() in C:\TaintSQL\MockDBMS\MockDBMS.cs(120)" method="DBMS.initializeDBMSFromSchema()" offset="2" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="120"><method assemblyName="MockDBMS" name="initializeDBMSFromSchema" token="600001a"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        private void initializeDBMSFromSchema()
        {]]></beforeSource>
<source><![CDATA[            readSchemaFromFile();]]></source>
<afterSource><![CDATA[            /* tables = new List<Table>(); 
            Table t = new Table("persons");
            t.AddColumn("firstname", DataTypes.STRING);]]></afterSource>
</frame>
<frame value="  at DBMS.CreateDatabaseState() in C:\TaintSQL\MockDBMS\MockDBMS.cs(147)" method="DBMS.CreateDatabaseState()" offset="2" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="147"><method assemblyName="MockDBMS" name="CreateDatabaseState" token="600001b"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        public void CreateDatabaseState()
        {
            //MockDBMS dbms = new MockDBMS();]]></beforeSource>
<source><![CDATA[            initializeDBMSFromSchema();]]></source>
<afterSource><![CDATA[             //Test Code

            //FillTestRecords();]]></afterSource>
</frame>
<frame value="  at MockSqlConnection.Open() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs(31)" method="MockSqlConnection.Open()" offset="7" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs" line="31"><method assemblyName="MockDBMS" name="Open" token="6000061"><declaringType assemblyName="MockDBMS" name="MockSqlConnection" token="200000e" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlConnection" token="200000e" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        public void Open()
        {]]></beforeSource>
<source><![CDATA[            dbms.CreateDatabaseState();]]></source>
<afterSource><![CDATA[        }
    }
}]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(503)" method="PexTestClass.filterMaritalStatus2()" offset="21" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="503"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            string status = "evil";
            int count = 0;
            MockSqlConnection conn = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");]]></beforeSource>
<source><![CDATA[            conn.Open();]]></source>
<afterSource><![CDATA[            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);
            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented testability="true" methodDisplayName="System.Int32 System.IO.FileStream.Read(System.Byte[] array, System.Int32 offset, System.Int32 count)" declaringTypeDisplayName="System.IO.FileStream" methodShortDisplayName="FileStream.Read(Byte[], Int32, Int32)" wikiTopic="Testability Issue"><method><definition assemblyName="mscorlib" name="Read" token="6003f51"><declaringType assemblyName="mscorlib" name="FileStream" token="20006b8" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="FileStream" token="20006b8" namespace="System.IO"/>
</type>
</parameter>
<parameter name="array" position="1" in="true" out="true"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Byte" token="2000098" namespace="System"/>
</elementType>
</type>
</parameter>
<parameter name="offset" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="count" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at StreamReader.ReadBuffer()" method="StreamReader.ReadBuffer()" offset="75"><method assemblyName="mscorlib" name="ReadBuffer" token="600404d"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at StreamReader.ReadLine()" method="StreamReader.ReadLine()" offset="28"><method assemblyName="mscorlib" name="ReadLine" token="600404e"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at File.InternalReadAllLines(String, Encoding)" method="File.InternalReadAllLines(String, Encoding)" offset="23"><method assemblyName="mscorlib" name="InternalReadAllLines" static="true" token="6003ee1"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at File.ReadAllLines(String)" method="File.ReadAllLines(String)" offset="38"><method assemblyName="mscorlib" name="ReadAllLines" static="true" token="6003ecf"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at DBMS.readSchemaFromFile() in C:\TaintSQL\MockDBMS\MockDBMS.cs(41)" method="DBMS.readSchemaFromFile()" offset="17" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="41"><method assemblyName="MockDBMS" name="readSchemaFromFile" token="6000019"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        private void readSchemaFromFile()
        {
            tables = new List<Table>();]]></beforeSource>
<source><![CDATA[            string[] lines = System.IO.File.ReadAllLines(@"C:\schema.txt");]]></source>
<afterSource><![CDATA[            Table table = null;
            foreach (string line in lines)
            {]]></afterSource>
</frame>
<frame value="  at DBMS.initializeDBMSFromSchema() in C:\TaintSQL\MockDBMS\MockDBMS.cs(120)" method="DBMS.initializeDBMSFromSchema()" offset="2" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="120"><method assemblyName="MockDBMS" name="initializeDBMSFromSchema" token="600001a"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        private void initializeDBMSFromSchema()
        {]]></beforeSource>
<source><![CDATA[            readSchemaFromFile();]]></source>
<afterSource><![CDATA[            /* tables = new List<Table>(); 
            Table t = new Table("persons");
            t.AddColumn("firstname", DataTypes.STRING);]]></afterSource>
</frame>
<frame value="  at DBMS.CreateDatabaseState() in C:\TaintSQL\MockDBMS\MockDBMS.cs(147)" method="DBMS.CreateDatabaseState()" offset="2" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="147"><method assemblyName="MockDBMS" name="CreateDatabaseState" token="600001b"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        public void CreateDatabaseState()
        {
            //MockDBMS dbms = new MockDBMS();]]></beforeSource>
<source><![CDATA[            initializeDBMSFromSchema();]]></source>
<afterSource><![CDATA[             //Test Code

            //FillTestRecords();]]></afterSource>
</frame>
<frame value="  at MockSqlConnection.Open() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs(31)" method="MockSqlConnection.Open()" offset="7" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs" line="31"><method assemblyName="MockDBMS" name="Open" token="6000061"><declaringType assemblyName="MockDBMS" name="MockSqlConnection" token="200000e" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlConnection" token="200000e" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        public void Open()
        {]]></beforeSource>
<source><![CDATA[            dbms.CreateDatabaseState();]]></source>
<afterSource><![CDATA[        }
    }
}]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(503)" method="PexTestClass.filterMaritalStatus2()" offset="21" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="503"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            string status = "evil";
            int count = 0;
            MockSqlConnection conn = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");]]></beforeSource>
<source><![CDATA[            conn.Open();]]></source>
<afterSource><![CDATA[            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);
            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented extern="true" methodDisplayName="System.Void System.Buffer.InternalBlockCopy(System.Array src, System.Int32 srcOffsetBytes, System.Array dst, System.Int32 dstOffsetBytes, System.Int32 byteCount)" declaringTypeDisplayName="System.Buffer" methodShortDisplayName="Buffer.InternalBlockCopy(Array, Int32, Array, Int32, Int32)" wikiTopic="External Method Called"><method><definition assemblyName="mscorlib" name="InternalBlockCopy" static="true" token="6000809"><declaringType assemblyName="mscorlib" name="Buffer" token="2000097" namespace="System"/>
<parameter name="src" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="Array" token="2000030" namespace="System"/>
</type>
</parameter>
<parameter name="srcOffsetBytes" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="dst" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Array" token="2000030" namespace="System"/>
</type>
</parameter>
<parameter name="dstOffsetBytes" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="byteCount" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at StreamReader.CompressBuffer(Int32)" method="StreamReader.CompressBuffer(Int32)" offset="27"><method assemblyName="mscorlib" name="CompressBuffer" token="6004050"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="n" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at StreamReader.IsPreamble()" method="StreamReader.IsPreamble()" offset="165"><method assemblyName="mscorlib" name="IsPreamble" token="6004052"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at StreamReader.ReadBuffer()" method="StreamReader.ReadBuffer()" offset="230"><method assemblyName="mscorlib" name="ReadBuffer" token="600404d"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at StreamReader.ReadLine()" method="StreamReader.ReadLine()" offset="28"><method assemblyName="mscorlib" name="ReadLine" token="600404e"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at File.InternalReadAllLines(String, Encoding)" method="File.InternalReadAllLines(String, Encoding)" offset="23"><method assemblyName="mscorlib" name="InternalReadAllLines" static="true" token="6003ee1"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at File.ReadAllLines(String)" method="File.ReadAllLines(String)" offset="38"><method assemblyName="mscorlib" name="ReadAllLines" static="true" token="6003ecf"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at DBMS.readSchemaFromFile() in C:\TaintSQL\MockDBMS\MockDBMS.cs(41)" method="DBMS.readSchemaFromFile()" offset="17" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="41"><method assemblyName="MockDBMS" name="readSchemaFromFile" token="6000019"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        private void readSchemaFromFile()
        {
            tables = new List<Table>();]]></beforeSource>
<source><![CDATA[            string[] lines = System.IO.File.ReadAllLines(@"C:\schema.txt");]]></source>
<afterSource><![CDATA[            Table table = null;
            foreach (string line in lines)
            {]]></afterSource>
</frame>
<frame value="  at DBMS.initializeDBMSFromSchema() in C:\TaintSQL\MockDBMS\MockDBMS.cs(120)" method="DBMS.initializeDBMSFromSchema()" offset="2" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="120"><method assemblyName="MockDBMS" name="initializeDBMSFromSchema" token="600001a"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        private void initializeDBMSFromSchema()
        {]]></beforeSource>
<source><![CDATA[            readSchemaFromFile();]]></source>
<afterSource><![CDATA[            /* tables = new List<Table>(); 
            Table t = new Table("persons");
            t.AddColumn("firstname", DataTypes.STRING);]]></afterSource>
</frame>
<frame value="  at DBMS.CreateDatabaseState() in C:\TaintSQL\MockDBMS\MockDBMS.cs(147)" method="DBMS.CreateDatabaseState()" offset="2" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="147"><method assemblyName="MockDBMS" name="CreateDatabaseState" token="600001b"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        public void CreateDatabaseState()
        {
            //MockDBMS dbms = new MockDBMS();]]></beforeSource>
<source><![CDATA[            initializeDBMSFromSchema();]]></source>
<afterSource><![CDATA[             //Test Code

            //FillTestRecords();]]></afterSource>
</frame>
<frame value="  at MockSqlConnection.Open() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs(31)" method="MockSqlConnection.Open()" offset="7" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs" line="31"><method assemblyName="MockDBMS" name="Open" token="6000061"><declaringType assemblyName="MockDBMS" name="MockSqlConnection" token="200000e" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlConnection" token="200000e" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        public void Open()
        {]]></beforeSource>
<source><![CDATA[            dbms.CreateDatabaseState();]]></source>
<afterSource><![CDATA[        }
    }
}]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(503)" method="PexTestClass.filterMaritalStatus2()" offset="21" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="503"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            string status = "evil";
            int count = 0;
            MockSqlConnection conn = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");]]></beforeSource>
<source><![CDATA[            conn.Open();]]></source>
<afterSource><![CDATA[            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);
            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void System.IO.TextReader.Dispose(System.Boolean disposing)" declaringTypeDisplayName="System.IO.TextReader" methodShortDisplayName="TextReader.Dispose(Boolean)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="mscorlib" name="Dispose" token="6004023"><declaringType assemblyName="mscorlib" name="TextReader" token="20006cc" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="TextReader" token="20006cc" namespace="System.IO"/>
</type>
</parameter>
<parameter name="disposing" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at StreamReader.Dispose(Boolean)" method="StreamReader.Dispose(Boolean)" offset="104"><method assemblyName="mscorlib" name="Dispose" token="6004043"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="disposing" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at TextReader.Dispose()" method="TextReader.Dispose()" offset="7"><method assemblyName="mscorlib" name="Dispose" token="6004022"><declaringType assemblyName="mscorlib" name="TextReader" token="20006cc" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="TextReader" token="20006cc" namespace="System.IO"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at File.InternalReadAllLines(String, Encoding)" method="File.InternalReadAllLines(String, Encoding)" offset="44"><method assemblyName="mscorlib" name="InternalReadAllLines" static="true" token="6003ee1"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at File.ReadAllLines(String)" method="File.ReadAllLines(String)" offset="38"><method assemblyName="mscorlib" name="ReadAllLines" static="true" token="6003ecf"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at DBMS.readSchemaFromFile() in C:\TaintSQL\MockDBMS\MockDBMS.cs(41)" method="DBMS.readSchemaFromFile()" offset="17" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="41"><method assemblyName="MockDBMS" name="readSchemaFromFile" token="6000019"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        private void readSchemaFromFile()
        {
            tables = new List<Table>();]]></beforeSource>
<source><![CDATA[            string[] lines = System.IO.File.ReadAllLines(@"C:\schema.txt");]]></source>
<afterSource><![CDATA[            Table table = null;
            foreach (string line in lines)
            {]]></afterSource>
</frame>
<frame value="  at DBMS.initializeDBMSFromSchema() in C:\TaintSQL\MockDBMS\MockDBMS.cs(120)" method="DBMS.initializeDBMSFromSchema()" offset="2" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="120"><method assemblyName="MockDBMS" name="initializeDBMSFromSchema" token="600001a"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        private void initializeDBMSFromSchema()
        {]]></beforeSource>
<source><![CDATA[            readSchemaFromFile();]]></source>
<afterSource><![CDATA[            /* tables = new List<Table>(); 
            Table t = new Table("persons");
            t.AddColumn("firstname", DataTypes.STRING);]]></afterSource>
</frame>
<frame value="  at DBMS.CreateDatabaseState() in C:\TaintSQL\MockDBMS\MockDBMS.cs(147)" method="DBMS.CreateDatabaseState()" offset="2" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="147"><method assemblyName="MockDBMS" name="CreateDatabaseState" token="600001b"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        public void CreateDatabaseState()
        {
            //MockDBMS dbms = new MockDBMS();]]></beforeSource>
<source><![CDATA[            initializeDBMSFromSchema();]]></source>
<afterSource><![CDATA[             //Test Code

            //FillTestRecords();]]></afterSource>
</frame>
<frame value="  at MockSqlConnection.Open() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs(31)" method="MockSqlConnection.Open()" offset="7" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs" line="31"><method assemblyName="MockDBMS" name="Open" token="6000061"><declaringType assemblyName="MockDBMS" name="MockSqlConnection" token="200000e" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlConnection" token="200000e" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        public void Open()
        {]]></beforeSource>
<source><![CDATA[            dbms.CreateDatabaseState();]]></source>
<afterSource><![CDATA[        }
    }
}]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(503)" method="PexTestClass.filterMaritalStatus2()" offset="21" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="503"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            string status = "evil";
            int count = 0;
            MockSqlConnection conn = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");]]></beforeSource>
<source><![CDATA[            conn.Open();]]></source>
<afterSource><![CDATA[            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);
            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented extern="true" methodDisplayName="System.Int32 System.Globalization.TextInfo.InternalCompareStringOrdinalIgnoreCase(System.String string1, System.Int32 index1, System.String string2, System.Int32 index2, System.Int32 length1, System.Int32 length2)" declaringTypeDisplayName="System.Globalization.TextInfo" methodShortDisplayName="TextInfo.InternalCompareStringOrdinalIgnoreCase(String, Int32, String, Int32, Int32, Int32)" wikiTopic="External Method Called"><method><definition assemblyName="mscorlib" name="InternalCompareStringOrdinalIgnoreCase" static="true" token="6002fb0"><declaringType assemblyName="mscorlib" name="TextInfo" token="20004b2" namespace="System.Globalization"/>
<parameter name="string1" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="index1" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="string2" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="index2" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="length1" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="length2" position="5"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at TextInfo.CompareOrdinalIgnoreCaseEx(String, Int32, String, Int32, Int32, Int32)" method="TextInfo.CompareOrdinalIgnoreCaseEx(String, Int32, String, Int32, Int32, Int32)" offset="13"><method assemblyName="mscorlib" name="CompareOrdinalIgnoreCaseEx" static="true" token="6002f91"><declaringType assemblyName="mscorlib" name="TextInfo" token="20004b2" namespace="System.Globalization"/>
<parameter name="strA" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="indexA" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="strB" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="indexB" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="lengthA" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="lengthB" position="5"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at String.Compare(String, Int32, String, Int32, Int32, StringComparison)" method="String.Compare(String, Int32, String, Int32, Int32, StringComparison)" offset="427"><method assemblyName="mscorlib" name="Compare" static="true" token="60002f3"><declaringType assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
<parameter name="strA" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="indexA" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="strB" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="indexB" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="length" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="comparisonType" position="5"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="StringComparison" token="2000051" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at StringExpressionSet.StringSubsetString(String, String, Boolean)" method="StringExpressionSet.StringSubsetString(String, String, Boolean)" offset="150"><method assemblyName="mscorlib" name="StringSubsetString" token="6003624"><declaringType assemblyName="mscorlib" name="StringExpressionSet" token="200056d" namespace="System.Security.Util"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StringExpressionSet" token="200056d" namespace="System.Security.Util"/>
</type>
</parameter>
<parameter name="left" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="right" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="ignoreCase" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at StringExpressionSet.StringSubsetStringExpression(String, StringExpressionSet, Boolean)" method="StringExpressionSet.StringSubsetStringExpression(String, StringExpressionSet, Boolean)" offset="4"><method assemblyName="mscorlib" name="StringSubsetStringExpression" token="6003622"><declaringType assemblyName="mscorlib" name="StringExpressionSet" token="200056d" namespace="System.Security.Util"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StringExpressionSet" token="200056d" namespace="System.Security.Util"/>
</type>
</parameter>
<parameter name="left" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="right" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="StringExpressionSet" token="200056d" namespace="System.Security.Util"/>
</type>
</parameter>
<parameter name="ignoreCase" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at StringExpressionSet.IsSubsetOf(StringExpressionSet)" method="StringExpressionSet.IsSubsetOf(StringExpressionSet)" offset="39"><method assemblyName="mscorlib" name="IsSubsetOf" token="600361b"><declaringType assemblyName="mscorlib" name="StringExpressionSet" token="200056d" namespace="System.Security.Util"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StringExpressionSet" token="200056d" namespace="System.Security.Util"/>
</type>
</parameter>
<parameter name="ses" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="StringExpressionSet" token="200056d" namespace="System.Security.Util"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at FileIOAccess.IsSubsetOf(FileIOAccess)" method="FileIOAccess.IsSubsetOf(FileIOAccess)" offset="20"><method assemblyName="mscorlib" name="IsSubsetOf" token="60042bd"><declaringType assemblyName="mscorlib" name="FileIOAccess" token="200073f" namespace="System.Security.Permissions"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="FileIOAccess" token="200073f" namespace="System.Security.Permissions"/>
</type>
</parameter>
<parameter name="operand" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="FileIOAccess" token="200073f" namespace="System.Security.Permissions"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at RuntimeAssembly.IsAssemblyUnderAppBase()" method="RuntimeAssembly.IsAssemblyUnderAppBase()" offset="50"><method assemblyName="mscorlib" name="IsAssemblyUnderAppBase" token="6002475"><declaringType assemblyName="mscorlib" name="RuntimeAssembly" token="20003bd" namespace="System.Reflection"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="RuntimeAssembly" token="20003bd" namespace="System.Reflection"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(57)" method="Factory.CreateStatement(String)" offset="-1" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="57"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003c6"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1317)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1317"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="6000074"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000039" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="600006d"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="2000002" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(506)" method="PexTestClass.filterMaritalStatus2()" offset="44" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="506"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            conn.Open();
            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[10].Equals(status))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.ANTLRStringStream..ctor(System.String input)" declaringTypeDisplayName="Antlr.Runtime.ANTLRStringStream" methodShortDisplayName="ANTLRStringStream..ctor(String)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name=".ctor" token="60001ab"><declaringType assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at CaseInsensitiveStringStream..ctor(String) in C:\TaintSQL\MacroScopeCE\CaseInsensitiveStringStream.cs(19)" method="CaseInsensitiveStringStream..ctor(String)" offset="7" file="C:\TaintSQL\MacroScopeCE\CaseInsensitiveStringStream.cs" line="19"><method assemblyName="MacroScope" name=".ctor" token="6000094"><declaringType assemblyName="MacroScope" name="CaseInsensitiveStringStream" token="200000b" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="CaseInsensitiveStringStream" token="200000b" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
        public CaseInsensitiveStringStream() { }
]]></beforeSource>
<source><![CDATA[        public CaseInsensitiveStringStream(string input) : base(input) { }]]></source>
<afterSource><![CDATA[
        // Only the lookahead is converted to lowercase. The original case is preserved in the stream.
        public override int LA(int i)]]></afterSource>
</frame>
<frame value="  at Factory.CreateParser(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(66)" method="Factory.CreateParser(String)" offset="25" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="66"><method assemblyName="MacroScope" name="CreateParser" static="true" token="60003c7"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                throw new ArgumentNullException("commandText");
            }
]]></beforeSource>
<source><![CDATA[            MacroScopeLexer lexer = new MacroScopeLexer(]]></source>
<afterSource><![CDATA[                new CaseInsensitiveStringStream(commandText));
            return new MacroScopeParser(new CommonTokenStream(lexer));
        }]]></afterSource>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(55)" method="Factory.CreateStatement(String)" offset="2" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="55"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003c6"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[        /// </returns>
        public static IStatement CreateStatement(string commandText)
        {]]></beforeSource>
<source><![CDATA[            MacroScopeParser parser = CreateParser(commandText);]]></source>
<afterSource><![CDATA[            return parser.statement();
        }
]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1317)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1317"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="6000074"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000039" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="600006d"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="2000002" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(506)" method="PexTestClass.filterMaritalStatus2()" offset="44" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="506"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            conn.Open();
            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[10].Equals(status))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.Lexer..ctor(Antlr.Runtime.ICharStream input)" declaringTypeDisplayName="Antlr.Runtime.Lexer" methodShortDisplayName="Lexer..ctor(ICharStream)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name=".ctor" token="600014a"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ICharStream" token="200001f" namespace="Antlr.Runtime"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at MacroScopeLexer..ctor(ICharStream) in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(126)" method="MacroScopeLexer..ctor(ICharStream)" offset="7" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="126"><method assemblyName="MacroScope" name=".ctor" token="6000003"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ICharStream" token="200001f" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[    {
		InitializeCyclicDFAs();
    }]]></beforeSource>
<source><![CDATA[    public MacroScopeLexer(ICharStream input) ]]></source>
<afterSource><![CDATA[		: base(input)
	{
		InitializeCyclicDFAs();]]></afterSource>
</frame>
<frame value="  at Factory.CreateParser(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(66)" method="Factory.CreateParser(String)" offset="30" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="66"><method assemblyName="MacroScope" name="CreateParser" static="true" token="60003c7"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                throw new ArgumentNullException("commandText");
            }
]]></beforeSource>
<source><![CDATA[            MacroScopeLexer lexer = new MacroScopeLexer(]]></source>
<afterSource><![CDATA[                new CaseInsensitiveStringStream(commandText));
            return new MacroScopeParser(new CommonTokenStream(lexer));
        }]]></afterSource>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(55)" method="Factory.CreateStatement(String)" offset="2" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="55"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003c6"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[        /// </returns>
        public static IStatement CreateStatement(string commandText)
        {]]></beforeSource>
<source><![CDATA[            MacroScopeParser parser = CreateParser(commandText);]]></source>
<afterSource><![CDATA[            return parser.statement();
        }
]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1317)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1317"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="6000074"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000039" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="600006d"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="2000002" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(506)" method="PexTestClass.filterMaritalStatus2()" offset="44" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="506"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            conn.Open();
            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[10].Equals(status))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.DFA..ctor()" declaringTypeDisplayName="Antlr.Runtime.DFA" methodShortDisplayName="DFA..ctor()" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name=".ctor" token="6000320"><declaringType assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at DFA12..ctor(BaseRecognizer) in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(6421)" method="DFA12..ctor(BaseRecognizer)" offset="6" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="6421"><method assemblyName="MacroScope" name=".ctor" token="600006a"><declaringType assemblyName="MacroScope" name="DFA12" token="2000003"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</declaringType>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="DFA12" token="2000003"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</definition>
</type>
</parameter>
<parameter name="recognizer" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="BaseRecognizer" token="2000005" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[    
    protected class DFA12 : DFA
    {]]></beforeSource>
<source><![CDATA[        public DFA12(BaseRecognizer recognizer) ]]></source>
<afterSource><![CDATA[        {
            this.recognizer = recognizer;
            this.decisionNumber = 12;]]></afterSource>
</frame>
<frame value="  at MacroScopeLexer.InitializeCyclicDFAs() in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(6366)" method="MacroScopeLexer.InitializeCyclicDFAs()" offset="3" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="6366"><method assemblyName="MacroScope" name="InitializeCyclicDFAs" token="6000067"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[    protected DFA12 dfa12;
	private void InitializeCyclicDFAs()
	{]]></beforeSource>
<source><![CDATA[	    this.dfa12 = new DFA12(this);]]></source>
<afterSource><![CDATA[	    this.dfa12.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA12_SpecialStateTransition);
	}
]]></afterSource>
</frame>
<frame value="  at MacroScopeLexer..ctor(ICharStream) in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(129)" method="MacroScopeLexer..ctor(ICharStream)" offset="10" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="129"><method assemblyName="MacroScope" name=".ctor" token="6000003"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ICharStream" token="200001f" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[    public MacroScopeLexer(ICharStream input) 
		: base(input)
	{]]></beforeSource>
<source><![CDATA[		InitializeCyclicDFAs();]]></source>
<afterSource><![CDATA[        ruleMemo = new IDictionary[97+1];
     }
    ]]></afterSource>
</frame>
<frame value="  at Factory.CreateParser(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(66)" method="Factory.CreateParser(String)" offset="30" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="66"><method assemblyName="MacroScope" name="CreateParser" static="true" token="60003c7"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                throw new ArgumentNullException("commandText");
            }
]]></beforeSource>
<source><![CDATA[            MacroScopeLexer lexer = new MacroScopeLexer(]]></source>
<afterSource><![CDATA[                new CaseInsensitiveStringStream(commandText));
            return new MacroScopeParser(new CommonTokenStream(lexer));
        }]]></afterSource>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(55)" method="Factory.CreateStatement(String)" offset="2" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="55"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003c6"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[        /// </returns>
        public static IStatement CreateStatement(string commandText)
        {]]></beforeSource>
<source><![CDATA[            MacroScopeParser parser = CreateParser(commandText);]]></source>
<afterSource><![CDATA[            return parser.statement();
        }
]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1317)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1317"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="6000074"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000039" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="600006d"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="2000002" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(506)" method="PexTestClass.filterMaritalStatus2()" offset="44" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="506"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            conn.Open();
            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[10].Equals(status))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<log level="message" time="2020-12-18 05:22:09Z" category="symbols" message="could not load symbols for C:\TaintSQL\TestDBApp\bin\Debug\Antlr3.Runtime.dll"/>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.CommonTokenStream..ctor(Antlr.Runtime.ITokenSource tokenSource)" declaringTypeDisplayName="Antlr.Runtime.CommonTokenStream" methodShortDisplayName="CommonTokenStream..ctor(ITokenSource)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name=".ctor" token="60002a1"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="tokenSource" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ITokenSource" token="2000016" namespace="Antlr.Runtime"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at ArrayList..ctor(Int32)" method="ArrayList..ctor(Int32)" offset="0"><method assemblyName="mscorlib" name=".ctor" token="6006960"><declaringType assemblyName="mscorlib" name="ArrayList" token="20002fc" namespace="System.Collections"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="ArrayList" token="20002fc" namespace="System.Collections"/>
</type>
</parameter>
<parameter position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream..ctor()" method="CommonTokenStream..ctor()" offset="40"><method assemblyName="Antlr3.Runtime" name=".ctor" token="60002a0"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream..ctor(ITokenSource)" method="CommonTokenStream..ctor(ITokenSource)" offset="6"><method assemblyName="Antlr3.Runtime" name=".ctor" token="60002a1"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="tokenSource" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ITokenSource" token="2000016" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at Factory.CreateParser(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(68)" method="Factory.CreateParser(String)" offset="37" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="68"><method assemblyName="MacroScope" name="CreateParser" static="true" token="60003c7"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[
            MacroScopeLexer lexer = new MacroScopeLexer(
                new CaseInsensitiveStringStream(commandText));]]></beforeSource>
<source><![CDATA[            return new MacroScopeParser(new CommonTokenStream(lexer));]]></source>
<afterSource><![CDATA[        }

        /// <summary>]]></afterSource>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(55)" method="Factory.CreateStatement(String)" offset="2" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="55"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003c6"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[        /// </returns>
        public static IStatement CreateStatement(string commandText)
        {]]></beforeSource>
<source><![CDATA[            MacroScopeParser parser = CreateParser(commandText);]]></source>
<afterSource><![CDATA[            return parser.statement();
        }
]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1317)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1317"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="6000074"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000039" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="600006d"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="2000002" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(506)" method="PexTestClass.filterMaritalStatus2()" offset="44" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="506"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            conn.Open();
            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[10].Equals(status))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.Parser..ctor(Antlr.Runtime.ITokenStream input)" declaringTypeDisplayName="Antlr.Runtime.Parser" methodShortDisplayName="Parser..ctor(ITokenStream)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name=".ctor" token="60002f5"><declaringType assemblyName="Antlr3.Runtime" name="Parser" token="2000042" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Parser" token="2000042" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ITokenStream" token="2000003" namespace="Antlr.Runtime"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at MacroScopeParser..ctor(ITokenStream) in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(220)" method="MacroScopeParser..ctor(ITokenStream)" offset="7" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="220"><method assemblyName="MacroScope" name=".ctor" token="60000e4"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ITokenStream" token="2000003" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[    public const int Iso8601DateTime = 70;
    
    ]]></beforeSource>
<source><![CDATA[        public MacroScopeParser(ITokenStream input) ]]></source>
<afterSource><![CDATA[    		: base(input)
    	{
    		InitializeCyclicDFAs();]]></afterSource>
</frame>
<frame value="  at Factory.CreateParser(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(68)" method="Factory.CreateParser(String)" offset="42" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="68"><method assemblyName="MacroScope" name="CreateParser" static="true" token="60003c7"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[
            MacroScopeLexer lexer = new MacroScopeLexer(
                new CaseInsensitiveStringStream(commandText));]]></beforeSource>
<source><![CDATA[            return new MacroScopeParser(new CommonTokenStream(lexer));]]></source>
<afterSource><![CDATA[        }

        /// <summary>]]></afterSource>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(55)" method="Factory.CreateStatement(String)" offset="2" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="55"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003c6"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[        /// </returns>
        public static IStatement CreateStatement(string commandText)
        {]]></beforeSource>
<source><![CDATA[            MacroScopeParser parser = CreateParser(commandText);]]></source>
<afterSource><![CDATA[            return parser.statement();
        }
]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1317)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1317"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="6000074"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000039" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="600006d"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="2000002" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(506)" method="PexTestClass.filterMaritalStatus2()" offset="44" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="506"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            conn.Open();
            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[10].Equals(status))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Int32 Antlr.Runtime.CommonTokenStream.LA(System.Int32 i)" declaringTypeDisplayName="Antlr.Runtime.CommonTokenStream" methodShortDisplayName="CommonTokenStream.LA(Int32)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at CaseInsensitiveStringStream.LA(Int32) in C:\TaintSQL\MacroScopeCE\CaseInsensitiveStringStream.cs(23)" method="CaseInsensitiveStringStream.LA(Int32)" offset="0" file="C:\TaintSQL\MacroScopeCE\CaseInsensitiveStringStream.cs" line="23"><method assemblyName="MacroScope" name="LA" token="6000095"><declaringType assemblyName="MacroScope" name="CaseInsensitiveStringStream" token="200000b" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="CaseInsensitiveStringStream" token="200000b" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[
        // Only the lookahead is converted to lowercase. The original case is preserved in the stream.
        public override int LA(int i)]]></beforeSource>
<source><![CDATA[        {]]></source>
<afterSource><![CDATA[            if (i == 0)
            {
                return 0;]]></afterSource>
</frame>
<frame value="  at Lexer.NextToken()" method="Lexer.NextToken()" offset="79"><method assemblyName="Antlr3.Runtime" name="NextToken" token="6000153"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.FillBuffer()" method="CommonTokenStream.FillBuffer()" offset="3"><method assemblyName="Antlr3.Runtime" name="FillBuffer" token="60002b2"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="24"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(260)" method="MacroScopeParser.statement()" offset="23" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="260"><method assemblyName="MacroScope" name="statement" token="60000e7"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[    	{
            // MacroScope\\MacroScope.g:27:40: (i= insertStatement EOF | s= selectStatement EOF | u= updateStatement EOF | d= deleteStatement EOF )
            int alt1 = 4;]]></beforeSource>
<source><![CDATA[            switch ( input.LA(1) ) ]]></source>
<afterSource><![CDATA[            {
            case INSERT:
            	{]]></afterSource>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003c6"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[        public static IStatement CreateStatement(string commandText)
        {
            MacroScopeParser parser = CreateParser(commandText);]]></beforeSource>
<source><![CDATA[            return parser.statement();]]></source>
<afterSource><![CDATA[        }

        public static MacroScopeParser CreateParser(string commandText)]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1317)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1317"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="6000074"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000039" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="600006d"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="2000002" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(506)" method="PexTestClass.filterMaritalStatus2()" offset="44" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="506"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            conn.Open();
            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[10].Equals(status))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.Lexer.Match(System.String s)" declaringTypeDisplayName="Antlr.Runtime.Lexer" methodShortDisplayName="Lexer.Match(String)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="Match" token="6000158"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="s" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at CaseInsensitiveStringStream.LA(Int32) in C:\TaintSQL\MacroScopeCE\CaseInsensitiveStringStream.cs(23)" method="CaseInsensitiveStringStream.LA(Int32)" offset="0" file="C:\TaintSQL\MacroScopeCE\CaseInsensitiveStringStream.cs" line="23"><method assemblyName="MacroScope" name="LA" token="6000095"><declaringType assemblyName="MacroScope" name="CaseInsensitiveStringStream" token="200000b" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="CaseInsensitiveStringStream" token="200000b" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[
        // Only the lookahead is converted to lowercase. The original case is preserved in the stream.
        public override int LA(int i)]]></beforeSource>
<source><![CDATA[        {]]></source>
<afterSource><![CDATA[            if (i == 0)
            {
                return 0;]]></afterSource>
</frame>
<frame value="  at Lexer.Match(String)" method="Lexer.Match(String)" offset="6"><method assemblyName="Antlr3.Runtime" name="Match" token="6000158"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="s" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at MacroScopeLexer.mSELECT() in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(1137)" method="MacroScopeLexer.mSELECT()" offset="12" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="1137"><method assemblyName="MacroScope" name="mSELECT" token="6000032"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            // MacroScope\\MacroScope.g:846:8: ( 'select' )
            // MacroScope\\MacroScope.g:846:10: 'select'
            {]]></beforeSource>
<source><![CDATA[            	Match("select"); if (failed) return ;]]></source>
<afterSource><![CDATA[
            
            }]]></afterSource>
</frame>
<frame value="  at MacroScopeLexer.mTokens() in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(5994)" method="MacroScopeLexer.mTokens()" offset="13814" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="5994"><method assemblyName="MacroScope" name="mTokens" token="6000064"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            case 46 :
                // MacroScope\\MacroScope.g:1:253: SELECT
                {]]></beforeSource>
<source><![CDATA[                	mSELECT(); if (failed) return ;]]></source>
<afterSource><![CDATA[                
                }
                break;]]></afterSource>
</frame>
<frame value="  at Lexer.NextToken()" method="Lexer.NextToken()" offset="117"><method assemblyName="Antlr3.Runtime" name="NextToken" token="6000153"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.FillBuffer()" method="CommonTokenStream.FillBuffer()" offset="3"><method assemblyName="Antlr3.Runtime" name="FillBuffer" token="60002b2"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="24"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(260)" method="MacroScopeParser.statement()" offset="23" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="260"><method assemblyName="MacroScope" name="statement" token="60000e7"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[    	{
            // MacroScope\\MacroScope.g:27:40: (i= insertStatement EOF | s= selectStatement EOF | u= updateStatement EOF | d= deleteStatement EOF )
            int alt1 = 4;]]></beforeSource>
<source><![CDATA[            switch ( input.LA(1) ) ]]></source>
<afterSource><![CDATA[            {
            case INSERT:
            	{]]></afterSource>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003c6"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[        public static IStatement CreateStatement(string commandText)
        {
            MacroScopeParser parser = CreateParser(commandText);]]></beforeSource>
<source><![CDATA[            return parser.statement();]]></source>
<afterSource><![CDATA[        }

        public static MacroScopeParser CreateParser(string commandText)]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1317)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1317"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="6000074"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000039" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="600006d"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="2000002" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(506)" method="PexTestClass.filterMaritalStatus2()" offset="44" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="506"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            conn.Open();
            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[10].Equals(status))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.ANTLRStringStream.Consume()" declaringTypeDisplayName="Antlr.Runtime.ANTLRStringStream" methodShortDisplayName="ANTLRStringStream.Consume()" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="Consume" token="60001b2"><declaringType assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at MacroScopeLexer.mWhitespace() in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(3286)" method="MacroScopeLexer.mWhitespace()" offset="157" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="3286"><method assemblyName="MacroScope" name="mWhitespace" token="6000063"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            			    {
            			    	if ( (input.LA(1) >= '\t' && input.LA(1) <= '\n') || input.LA(1) == '\r' || input.LA(1) == ' ' ) 
            			    	{]]></beforeSource>
<source><![CDATA[            			    	    input.Consume();]]></source>
<afterSource><![CDATA[            			    	failed = false;
            			    	}
            			    	else ]]></afterSource>
</frame>
<frame value="  at MacroScopeLexer.mTokens() in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(6274)" method="MacroScopeLexer.mTokens()" offset="15150" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="6274"><method assemblyName="MacroScope" name="mTokens" token="6000064"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            case 86 :
                // MacroScope\\MacroScope.g:1:631: Whitespace
                {]]></beforeSource>
<source><![CDATA[                	mWhitespace(); if (failed) return ;]]></source>
<afterSource><![CDATA[                
                }
                break;]]></afterSource>
</frame>
<frame value="  at Lexer.NextToken()" method="Lexer.NextToken()" offset="117"><method assemblyName="Antlr3.Runtime" name="NextToken" token="6000153"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.FillBuffer()" method="CommonTokenStream.FillBuffer()" offset="209"><method assemblyName="Antlr3.Runtime" name="FillBuffer" token="60002b2"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="24"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(260)" method="MacroScopeParser.statement()" offset="23" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="260"><method assemblyName="MacroScope" name="statement" token="60000e7"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[    	{
            // MacroScope\\MacroScope.g:27:40: (i= insertStatement EOF | s= selectStatement EOF | u= updateStatement EOF | d= deleteStatement EOF )
            int alt1 = 4;]]></beforeSource>
<source><![CDATA[            switch ( input.LA(1) ) ]]></source>
<afterSource><![CDATA[            {
            case INSERT:
            	{]]></afterSource>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003c6"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[        public static IStatement CreateStatement(string commandText)
        {
            MacroScopeParser parser = CreateParser(commandText);]]></beforeSource>
<source><![CDATA[            return parser.statement();]]></source>
<afterSource><![CDATA[        }

        public static MacroScopeParser CreateParser(string commandText)]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1317)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1317"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="6000074"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000039" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="600006d"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="2000002" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(506)" method="PexTestClass.filterMaritalStatus2()" offset="44" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="506"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            conn.Open();
            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[10].Equals(status))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.Lexer.Match(System.Int32 c)" declaringTypeDisplayName="Antlr.Runtime.Lexer" methodShortDisplayName="Lexer.Match(Int32)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="Match" token="600015a"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="c" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at CaseInsensitiveStringStream.LA(Int32) in C:\TaintSQL\MacroScopeCE\CaseInsensitiveStringStream.cs(23)" method="CaseInsensitiveStringStream.LA(Int32)" offset="0" file="C:\TaintSQL\MacroScopeCE\CaseInsensitiveStringStream.cs" line="23"><method assemblyName="MacroScope" name="LA" token="6000095"><declaringType assemblyName="MacroScope" name="CaseInsensitiveStringStream" token="200000b" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="CaseInsensitiveStringStream" token="200000b" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[
        // Only the lookahead is converted to lowercase. The original case is preserved in the stream.
        public override int LA(int i)]]></beforeSource>
<source><![CDATA[        {]]></source>
<afterSource><![CDATA[            if (i == 0)
            {
                return 0;]]></afterSource>
</frame>
<frame value="  at Lexer.Match(Int32)" method="Lexer.Match(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="Match" token="600015a"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="c" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at MacroScopeLexer.mSTAR() in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(1700)" method="MacroScopeLexer.mSTAR()" offset="9" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="1700"><method assemblyName="MacroScope" name="mSTAR" token="600004c"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            // MacroScope\\MacroScope.g:875:6: ( '*' )
            // MacroScope\\MacroScope.g:875:8: '*'
            {]]></beforeSource>
<source><![CDATA[            	Match('*'); if (failed) return ;]]></source>
<afterSource><![CDATA[            
            }
    ]]></afterSource>
</frame>
<frame value="  at MacroScopeLexer.mTokens() in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(6176)" method="MacroScopeLexer.mTokens()" offset="14698" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="6176"><method assemblyName="MacroScope" name="mTokens" token="6000064"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            case 72 :
                // MacroScope\\MacroScope.g:1:463: STAR
                {]]></beforeSource>
<source><![CDATA[                	mSTAR(); if (failed) return ;]]></source>
<afterSource><![CDATA[                
                }
                break;]]></afterSource>
</frame>
<frame value="  at Lexer.NextToken()" method="Lexer.NextToken()" offset="117"><method assemblyName="Antlr3.Runtime" name="NextToken" token="6000153"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.FillBuffer()" method="CommonTokenStream.FillBuffer()" offset="209"><method assemblyName="Antlr3.Runtime" name="FillBuffer" token="60002b2"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="24"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(260)" method="MacroScopeParser.statement()" offset="23" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="260"><method assemblyName="MacroScope" name="statement" token="60000e7"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[    	{
            // MacroScope\\MacroScope.g:27:40: (i= insertStatement EOF | s= selectStatement EOF | u= updateStatement EOF | d= deleteStatement EOF )
            int alt1 = 4;]]></beforeSource>
<source><![CDATA[            switch ( input.LA(1) ) ]]></source>
<afterSource><![CDATA[            {
            case INSERT:
            	{]]></afterSource>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003c6"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[        public static IStatement CreateStatement(string commandText)
        {
            MacroScopeParser parser = CreateParser(commandText);]]></beforeSource>
<source><![CDATA[            return parser.statement();]]></source>
<afterSource><![CDATA[        }

        public static MacroScopeParser CreateParser(string commandText)]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1317)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1317"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="6000074"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000039" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="600006d"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="2000002" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(506)" method="PexTestClass.filterMaritalStatus2()" offset="44" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="506"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            conn.Open();
            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[10].Equals(status))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.Lexer.MatchRange(System.Int32 a, System.Int32 b)" declaringTypeDisplayName="Antlr.Runtime.Lexer" methodShortDisplayName="Lexer.MatchRange(Int32, Int32)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="MatchRange" token="600015b"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="a" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="b" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at CaseInsensitiveStringStream.LA(Int32) in C:\TaintSQL\MacroScopeCE\CaseInsensitiveStringStream.cs(23)" method="CaseInsensitiveStringStream.LA(Int32)" offset="0" file="C:\TaintSQL\MacroScopeCE\CaseInsensitiveStringStream.cs" line="23"><method assemblyName="MacroScope" name="LA" token="6000095"><declaringType assemblyName="MacroScope" name="CaseInsensitiveStringStream" token="200000b" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="CaseInsensitiveStringStream" token="200000b" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[
        // Only the lookahead is converted to lowercase. The original case is preserved in the stream.
        public override int LA(int i)]]></beforeSource>
<source><![CDATA[        {]]></source>
<afterSource><![CDATA[            if (i == 0)
            {
                return 0;]]></afterSource>
</frame>
<frame value="  at Lexer.MatchRange(Int32, Int32)" method="Lexer.MatchRange(Int32, Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="MatchRange" token="600015b"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="a" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="b" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at MacroScopeLexer.mLetter() in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(1784)" method="MacroScopeLexer.mLetter()" offset="8" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="1784"><method assemblyName="MacroScope" name="mLetter" token="6000050"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            // MacroScope\\MacroScope.g:883:8: ( 'a' .. 'z' )
            // MacroScope\\MacroScope.g:883:10: 'a' .. 'z'
            {]]></beforeSource>
<source><![CDATA[            	MatchRange('a','z'); if (failed) return ;]]></source>
<afterSource><![CDATA[            
            }
]]></afterSource>
</frame>
<frame value="  at MacroScopeLexer.mNonQuotedIdentifier() in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(2442)" method="MacroScopeLexer.mNonQuotedIdentifier()" offset="7" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="2442"><method assemblyName="MacroScope" name="mNonQuotedIdentifier" token="6000059"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            // MacroScope\\MacroScope.g:924:21: ( Letter WordTail )
            // MacroScope\\MacroScope.g:924:23: Letter WordTail
            {]]></beforeSource>
<source><![CDATA[            	mLetter(); if (failed) return ;]]></source>
<afterSource><![CDATA[            	mWordTail(); if (failed) return ;
            
            }]]></afterSource>
</frame>
<frame value="  at MacroScopeLexer.mTokens() in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(6225)" method="MacroScopeLexer.mTokens()" offset="14936" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="6225"><method assemblyName="MacroScope" name="mTokens" token="6000064"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            case 79 :
                // MacroScope\\MacroScope.g:1:533: NonQuotedIdentifier
                {]]></beforeSource>
<source><![CDATA[                	mNonQuotedIdentifier(); if (failed) return ;]]></source>
<afterSource><![CDATA[                
                }
                break;]]></afterSource>
</frame>
<frame value="  at Lexer.NextToken()" method="Lexer.NextToken()" offset="117"><method assemblyName="Antlr3.Runtime" name="NextToken" token="6000153"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.FillBuffer()" method="CommonTokenStream.FillBuffer()" offset="209"><method assemblyName="Antlr3.Runtime" name="FillBuffer" token="60002b2"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="24"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(260)" method="MacroScopeParser.statement()" offset="23" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="260"><method assemblyName="MacroScope" name="statement" token="60000e7"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[    	{
            // MacroScope\\MacroScope.g:27:40: (i= insertStatement EOF | s= selectStatement EOF | u= updateStatement EOF | d= deleteStatement EOF )
            int alt1 = 4;]]></beforeSource>
<source><![CDATA[            switch ( input.LA(1) ) ]]></source>
<afterSource><![CDATA[            {
            case INSERT:
            	{]]></afterSource>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003c6"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[        public static IStatement CreateStatement(string commandText)
        {
            MacroScopeParser parser = CreateParser(commandText);]]></beforeSource>
<source><![CDATA[            return parser.statement();]]></source>
<afterSource><![CDATA[        }

        public static MacroScopeParser CreateParser(string commandText)]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1317)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1317"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="6000074"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000039" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="600006d"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="2000002" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(506)" method="PexTestClass.filterMaritalStatus2()" offset="44" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="506"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            conn.Open();
            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[10].Equals(status))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Int32 Antlr.Runtime.DFA.Predict(Antlr.Runtime.IIntStream input)" declaringTypeDisplayName="Antlr.Runtime.DFA" methodShortDisplayName="DFA.Predict(IIntStream)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="Predict" token="600031a"><declaringType assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at ArrayList..ctor()" method="ArrayList..ctor()" offset="0"><method assemblyName="mscorlib" name=".ctor" token="600695f"><declaringType assemblyName="mscorlib" name="ArrayList" token="20002fc" namespace="System.Collections"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="ArrayList" token="20002fc" namespace="System.Collections"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at ANTLRStringStream.Mark()" method="ANTLRStringStream.Mark()" offset="24"><method assemblyName="Antlr3.Runtime" name="Mark" token="60001b7"><declaringType assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at DFA.Predict(IIntStream)" method="DFA.Predict(IIntStream)" offset="1"><method assemblyName="Antlr3.Runtime" name="Predict" token="600031a"><declaringType assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeLexer.mNumber() in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(2035)" method="MacroScopeLexer.mNumber()" offset="19" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="2035"><method assemblyName="MacroScope" name="mNumber" token="6000057"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            int _type = Number;
            // MacroScope\\MacroScope.g:912:8: ( ( ( Digit )+ ( '.' | 'e' ) )=> ( Digit )+ ( '.' ( Digit )* ( Exponent )? | Exponent ) | '.' ( ( Digit )+ ( Exponent )? )? | ( Digit )+ | '0x' ( 'a' .. 'f' | Digit )* )
            int alt12 = 4;]]></beforeSource>
<source><![CDATA[            alt12 = dfa12.Predict(input);]]></source>
<afterSource><![CDATA[            switch (alt12) 
            {
                case 1 :]]></afterSource>
</frame>
<frame value="  at MacroScopeLexer.mTokens() in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(6218)" method="MacroScopeLexer.mTokens()" offset="14902" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="6218"><method assemblyName="MacroScope" name="mTokens" token="6000064"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            case 78 :
                // MacroScope\\MacroScope.g:1:526: Number
                {]]></beforeSource>
<source><![CDATA[                	mNumber(); if (failed) return ;]]></source>
<afterSource><![CDATA[                
                }
                break;]]></afterSource>
</frame>
<frame value="  at Lexer.NextToken()" method="Lexer.NextToken()" offset="117"><method assemblyName="Antlr3.Runtime" name="NextToken" token="6000153"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.FillBuffer()" method="CommonTokenStream.FillBuffer()" offset="209"><method assemblyName="Antlr3.Runtime" name="FillBuffer" token="60002b2"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="24"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(260)" method="MacroScopeParser.statement()" offset="23" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="260"><method assemblyName="MacroScope" name="statement" token="60000e7"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[    	{
            // MacroScope\\MacroScope.g:27:40: (i= insertStatement EOF | s= selectStatement EOF | u= updateStatement EOF | d= deleteStatement EOF )
            int alt1 = 4;]]></beforeSource>
<source><![CDATA[            switch ( input.LA(1) ) ]]></source>
<afterSource><![CDATA[            {
            case INSERT:
            	{]]></afterSource>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003c6"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[        public static IStatement CreateStatement(string commandText)
        {
            MacroScopeParser parser = CreateParser(commandText);]]></beforeSource>
<source><![CDATA[            return parser.statement();]]></source>
<afterSource><![CDATA[        }

        public static MacroScopeParser CreateParser(string commandText)]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1317)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1317"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="6000074"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000039" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="600006d"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="2000002" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(506)" method="PexTestClass.filterMaritalStatus2()" offset="44" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="506"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            conn.Open();
            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[10].Equals(status))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Int32 Antlr.Runtime.ANTLRStringStream.Index()" declaringTypeDisplayName="Antlr.Runtime.ANTLRStringStream" methodShortDisplayName="ANTLRStringStream.Index()" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="Index" token="60001b5"><declaringType assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at MacroScopeLexer.DFA12_SpecialStateTransition(DFA, Int32, IIntStream) in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(6452)" method="MacroScopeLexer.DFA12_SpecialStateTransition(DFA, Int32, IIntStream)" offset="35" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="6452"><method assemblyName="MacroScope" name="DFA12_SpecialStateTransition" token="6000068"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="dfa" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="s" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="input" position="3"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[                   	int LA12_3 = input.LA(1);
                   	
                   	 ]]></beforeSource>
<source><![CDATA[                   	int index12_3 = input.Index();]]></source>
<afterSource><![CDATA[                   	input.Rewind();
                   	s = -1;
                   	if ( ((LA12_3 >= '0' && LA12_3 <= '9')) ) { s = 3; }]]></afterSource>
</frame>
<frame value="  at DFA.Predict(IIntStream)" method="DFA.Predict(IIntStream)" offset="47"><method assemblyName="Antlr3.Runtime" name="Predict" token="600031a"><declaringType assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeLexer.mNumber() in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(2035)" method="MacroScopeLexer.mNumber()" offset="19" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="2035"><method assemblyName="MacroScope" name="mNumber" token="6000057"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            int _type = Number;
            // MacroScope\\MacroScope.g:912:8: ( ( ( Digit )+ ( '.' | 'e' ) )=> ( Digit )+ ( '.' ( Digit )* ( Exponent )? | Exponent ) | '.' ( ( Digit )+ ( Exponent )? )? | ( Digit )+ | '0x' ( 'a' .. 'f' | Digit )* )
            int alt12 = 4;]]></beforeSource>
<source><![CDATA[            alt12 = dfa12.Predict(input);]]></source>
<afterSource><![CDATA[            switch (alt12) 
            {
                case 1 :]]></afterSource>
</frame>
<frame value="  at MacroScopeLexer.mTokens() in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(6218)" method="MacroScopeLexer.mTokens()" offset="14902" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="6218"><method assemblyName="MacroScope" name="mTokens" token="6000064"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            case 78 :
                // MacroScope\\MacroScope.g:1:526: Number
                {]]></beforeSource>
<source><![CDATA[                	mNumber(); if (failed) return ;]]></source>
<afterSource><![CDATA[                
                }
                break;]]></afterSource>
</frame>
<frame value="  at Lexer.NextToken()" method="Lexer.NextToken()" offset="117"><method assemblyName="Antlr3.Runtime" name="NextToken" token="6000153"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.FillBuffer()" method="CommonTokenStream.FillBuffer()" offset="209"><method assemblyName="Antlr3.Runtime" name="FillBuffer" token="60002b2"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="24"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(260)" method="MacroScopeParser.statement()" offset="23" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="260"><method assemblyName="MacroScope" name="statement" token="60000e7"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[    	{
            // MacroScope\\MacroScope.g:27:40: (i= insertStatement EOF | s= selectStatement EOF | u= updateStatement EOF | d= deleteStatement EOF )
            int alt1 = 4;]]></beforeSource>
<source><![CDATA[            switch ( input.LA(1) ) ]]></source>
<afterSource><![CDATA[            {
            case INSERT:
            	{]]></afterSource>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003c6"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[        public static IStatement CreateStatement(string commandText)
        {
            MacroScopeParser parser = CreateParser(commandText);]]></beforeSource>
<source><![CDATA[            return parser.statement();]]></source>
<afterSource><![CDATA[        }

        public static MacroScopeParser CreateParser(string commandText)]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1317)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1317"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="6000074"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000039" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="600006d"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="2000002" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(506)" method="PexTestClass.filterMaritalStatus2()" offset="44" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="506"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            conn.Open();
            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[10].Equals(status))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.ANTLRStringStream.Rewind()" declaringTypeDisplayName="Antlr.Runtime.ANTLRStringStream" methodShortDisplayName="ANTLRStringStream.Rewind()" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="Rewind" token="60001b9"><declaringType assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at ArrayList.get_Item(Int32)" method="ArrayList.get_Item(Int32)" offset="0"><method assemblyName="mscorlib" name="get_Item" token="6001d7f"><declaringType assemblyName="mscorlib" name="ArrayList" token="20002fc" namespace="System.Collections"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="ArrayList" token="20002fc" namespace="System.Collections"/>
</type>
</parameter>
<parameter name="index" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at ANTLRStringStream.Rewind(Int32)" method="ANTLRStringStream.Rewind(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="Rewind" token="60001b8"><declaringType assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="m" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at ANTLRStringStream.Rewind()" method="ANTLRStringStream.Rewind()" offset="13"><method assemblyName="Antlr3.Runtime" name="Rewind" token="60001b9"><declaringType assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at MacroScopeLexer.DFA12_SpecialStateTransition(DFA, Int32, IIntStream) in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(6453)" method="MacroScopeLexer.DFA12_SpecialStateTransition(DFA, Int32, IIntStream)" offset="42" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="6453"><method assemblyName="MacroScope" name="DFA12_SpecialStateTransition" token="6000068"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="dfa" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="s" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="input" position="3"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[                   	
                   	 
                   	int index12_3 = input.Index();]]></beforeSource>
<source><![CDATA[                   	input.Rewind();]]></source>
<afterSource><![CDATA[                   	s = -1;
                   	if ( ((LA12_3 >= '0' && LA12_3 <= '9')) ) { s = 3; }
]]></afterSource>
</frame>
<frame value="  at DFA.Predict(IIntStream)" method="DFA.Predict(IIntStream)" offset="47"><method assemblyName="Antlr3.Runtime" name="Predict" token="600031a"><declaringType assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeLexer.mNumber() in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(2035)" method="MacroScopeLexer.mNumber()" offset="19" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="2035"><method assemblyName="MacroScope" name="mNumber" token="6000057"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            int _type = Number;
            // MacroScope\\MacroScope.g:912:8: ( ( ( Digit )+ ( '.' | 'e' ) )=> ( Digit )+ ( '.' ( Digit )* ( Exponent )? | Exponent ) | '.' ( ( Digit )+ ( Exponent )? )? | ( Digit )+ | '0x' ( 'a' .. 'f' | Digit )* )
            int alt12 = 4;]]></beforeSource>
<source><![CDATA[            alt12 = dfa12.Predict(input);]]></source>
<afterSource><![CDATA[            switch (alt12) 
            {
                case 1 :]]></afterSource>
</frame>
<frame value="  at MacroScopeLexer.mTokens() in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(6218)" method="MacroScopeLexer.mTokens()" offset="14902" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="6218"><method assemblyName="MacroScope" name="mTokens" token="6000064"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            case 78 :
                // MacroScope\\MacroScope.g:1:526: Number
                {]]></beforeSource>
<source><![CDATA[                	mNumber(); if (failed) return ;]]></source>
<afterSource><![CDATA[                
                }
                break;]]></afterSource>
</frame>
<frame value="  at Lexer.NextToken()" method="Lexer.NextToken()" offset="117"><method assemblyName="Antlr3.Runtime" name="NextToken" token="6000153"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.FillBuffer()" method="CommonTokenStream.FillBuffer()" offset="209"><method assemblyName="Antlr3.Runtime" name="FillBuffer" token="60002b2"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="24"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(260)" method="MacroScopeParser.statement()" offset="23" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="260"><method assemblyName="MacroScope" name="statement" token="60000e7"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[    	{
            // MacroScope\\MacroScope.g:27:40: (i= insertStatement EOF | s= selectStatement EOF | u= updateStatement EOF | d= deleteStatement EOF )
            int alt1 = 4;]]></beforeSource>
<source><![CDATA[            switch ( input.LA(1) ) ]]></source>
<afterSource><![CDATA[            {
            case INSERT:
            	{]]></afterSource>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003c6"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[        public static IStatement CreateStatement(string commandText)
        {
            MacroScopeParser parser = CreateParser(commandText);]]></beforeSource>
<source><![CDATA[            return parser.statement();]]></source>
<afterSource><![CDATA[        }

        public static MacroScopeParser CreateParser(string commandText)]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1317)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1317"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="6000074"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000039" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="600006d"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="2000002" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(506)" method="PexTestClass.filterMaritalStatus2()" offset="44" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="506"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            conn.Open();
            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[10].Equals(status))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.ANTLRStringStream.Seek(System.Int32 index)" declaringTypeDisplayName="Antlr.Runtime.ANTLRStringStream" methodShortDisplayName="ANTLRStringStream.Seek(Int32)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="Seek" token="60001bb"><declaringType assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="index" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at MacroScopeLexer.DFA12_SpecialStateTransition(DFA, Int32, IIntStream) in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(6464)" method="MacroScopeLexer.DFA12_SpecialStateTransition(DFA, Int32, IIntStream)" offset="142" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="6464"><method assemblyName="MacroScope" name="DFA12_SpecialStateTransition" token="6000068"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="dfa" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="s" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="input" position="3"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[                   	else s = 5;
                   	
                   	 ]]></beforeSource>
<source><![CDATA[                   	input.Seek(index12_3);]]></source>
<afterSource><![CDATA[                   	if ( s >= 0 ) return s;
                   	break;
]]></afterSource>
</frame>
<frame value="  at DFA.Predict(IIntStream)" method="DFA.Predict(IIntStream)" offset="47"><method assemblyName="Antlr3.Runtime" name="Predict" token="600031a"><declaringType assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeLexer.mNumber() in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(2035)" method="MacroScopeLexer.mNumber()" offset="19" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="2035"><method assemblyName="MacroScope" name="mNumber" token="6000057"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            int _type = Number;
            // MacroScope\\MacroScope.g:912:8: ( ( ( Digit )+ ( '.' | 'e' ) )=> ( Digit )+ ( '.' ( Digit )* ( Exponent )? | Exponent ) | '.' ( ( Digit )+ ( Exponent )? )? | ( Digit )+ | '0x' ( 'a' .. 'f' | Digit )* )
            int alt12 = 4;]]></beforeSource>
<source><![CDATA[            alt12 = dfa12.Predict(input);]]></source>
<afterSource><![CDATA[            switch (alt12) 
            {
                case 1 :]]></afterSource>
</frame>
<frame value="  at MacroScopeLexer.mTokens() in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(6218)" method="MacroScopeLexer.mTokens()" offset="14902" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="6218"><method assemblyName="MacroScope" name="mTokens" token="6000064"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            case 78 :
                // MacroScope\\MacroScope.g:1:526: Number
                {]]></beforeSource>
<source><![CDATA[                	mNumber(); if (failed) return ;]]></source>
<afterSource><![CDATA[                
                }
                break;]]></afterSource>
</frame>
<frame value="  at Lexer.NextToken()" method="Lexer.NextToken()" offset="117"><method assemblyName="Antlr3.Runtime" name="NextToken" token="6000153"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.FillBuffer()" method="CommonTokenStream.FillBuffer()" offset="209"><method assemblyName="Antlr3.Runtime" name="FillBuffer" token="60002b2"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="24"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(260)" method="MacroScopeParser.statement()" offset="23" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="260"><method assemblyName="MacroScope" name="statement" token="60000e7"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[    	{
            // MacroScope\\MacroScope.g:27:40: (i= insertStatement EOF | s= selectStatement EOF | u= updateStatement EOF | d= deleteStatement EOF )
            int alt1 = 4;]]></beforeSource>
<source><![CDATA[            switch ( input.LA(1) ) ]]></source>
<afterSource><![CDATA[            {
            case INSERT:
            	{]]></afterSource>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003c6"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[        public static IStatement CreateStatement(string commandText)
        {
            MacroScopeParser parser = CreateParser(commandText);]]></beforeSource>
<source><![CDATA[            return parser.statement();]]></source>
<afterSource><![CDATA[        }

        public static MacroScopeParser CreateParser(string commandText)]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1317)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1317"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="6000074"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000039" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="600006d"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="2000002" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(506)" method="PexTestClass.filterMaritalStatus2()" offset="44" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="506"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            conn.Open();
            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[10].Equals(status))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.BaseRecognizer.PushFollow(Antlr.Runtime.BitSet fset)" declaringTypeDisplayName="Antlr.Runtime.BaseRecognizer" methodShortDisplayName="BaseRecognizer.PushFollow(BitSet)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="PushFollow" token="600002d"><declaringType assemblyName="Antlr3.Runtime" name="BaseRecognizer" token="2000005" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="BaseRecognizer" token="2000005" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="fset" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="BitSet" token="200001e" namespace="Antlr.Runtime"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at MacroScopeParser.statement() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(311)" method="MacroScopeParser.statement()" offset="339" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="311"><method assemblyName="MacroScope" name="statement" token="60000e7"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                case 2 :
                    // MacroScope\\MacroScope.g:29:4: s= selectStatement EOF
                    {]]></beforeSource>
<source><![CDATA[                    	PushFollow(FOLLOW_selectStatement_in_statement79);]]></source>
<afterSource><![CDATA[                    	s = selectStatement();
                    	followingStackPointer_--;
                    	if (failed) return value;]]></afterSource>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003c6"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[        public static IStatement CreateStatement(string commandText)
        {
            MacroScopeParser parser = CreateParser(commandText);]]></beforeSource>
<source><![CDATA[            return parser.statement();]]></source>
<afterSource><![CDATA[        }

        public static MacroScopeParser CreateParser(string commandText)]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1317)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1317"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="6000074"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000039" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="600006d"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="2000002" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(506)" method="PexTestClass.filterMaritalStatus2()" offset="44" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="506"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            conn.Open();
            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[10].Equals(status))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.BaseRecognizer.Match(Antlr.Runtime.IIntStream input, System.Int32 ttype, Antlr.Runtime.BitSet follow)" declaringTypeDisplayName="Antlr.Runtime.BaseRecognizer" methodShortDisplayName="BaseRecognizer.Match(IIntStream, Int32, BitSet)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="Match" token="6000019"><declaringType assemblyName="Antlr3.Runtime" name="BaseRecognizer" token="2000005" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="BaseRecognizer" token="2000005" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="ttype" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="follow" position="3"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="BitSet" token="200001e" namespace="Antlr.Runtime"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at ArrayList.get_Count()" method="ArrayList.get_Count()" offset="0"><method assemblyName="mscorlib" name="get_Count" token="6001d7a"><declaringType assemblyName="mscorlib" name="ArrayList" token="20002fc" namespace="System.Collections"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="ArrayList" token="20002fc" namespace="System.Collections"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="68"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at BaseRecognizer.Match(IIntStream, Int32, BitSet)" method="BaseRecognizer.Match(IIntStream, Int32, BitSet)" offset="1"><method assemblyName="Antlr3.Runtime" name="Match" token="6000019"><declaringType assemblyName="Antlr3.Runtime" name="BaseRecognizer" token="2000005" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="BaseRecognizer" token="2000005" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="ttype" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="follow" position="3"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="BitSet" token="200001e" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at MacroScopeParser.selectClause() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(1369)" method="MacroScopeParser.selectClause()" offset="23" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="1369"><method assemblyName="MacroScope" name="selectClause" token="60000f4"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="200001f" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[            // MacroScope\\MacroScope.g:139:48: ( SELECT ( ALL | DISTINCT )? ( TOP Integer )? s= selectList )
            // MacroScope\\MacroScope.g:140:2: SELECT ( ALL | DISTINCT )? ( TOP Integer )? s= selectList
            {]]></beforeSource>
<source><![CDATA[            	Match(input,SELECT,FOLLOW_SELECT_in_selectClause694); if (failed) return value;]]></source>
<afterSource><![CDATA[            	if ( backtracking == 0 ) 
            	{
            	   value =  new QueryExpression(); ]]></afterSource>
</frame>
<frame value="  at MacroScopeParser.querySpecification() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(1225)" method="MacroScopeParser.querySpecification()" offset="30" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="1225"><method assemblyName="MacroScope" name="querySpecification" token="60000f3"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="200001f" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[            // MacroScope\\MacroScope.g:131:2: s= selectClause (f= fromClause )? (w= whereClause )? (g= groupByClause (h= havingClause )? )?
            {
            	PushFollow(FOLLOW_selectClause_in_querySpecification619);]]></beforeSource>
<source><![CDATA[            	s = selectClause();]]></source>
<afterSource><![CDATA[            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) ]]></afterSource>
</frame>
<frame value="  at MacroScopeParser.subQueryExpression() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(1163)" method="MacroScopeParser.subQueryExpression()" offset="158" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="1163"><method assemblyName="MacroScope" name="subQueryExpression" token="60000f2"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="200001f" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                    // MacroScope\\MacroScope.g:126:2: s= querySpecification
                    {
                    	PushFollow(FOLLOW_querySpecification_in_subQueryExpression582);]]></beforeSource>
<source><![CDATA[                    	s = querySpecification();]]></source>
<afterSource><![CDATA[                    	followingStackPointer_--;
                    	if (failed) return value;
                    	if ( backtracking == 0 ) ]]></afterSource>
</frame>
<frame value="  at MacroScopeParser.queryExpression() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(1034)" method="MacroScopeParser.queryExpression()" offset="24" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="1034"><method assemblyName="MacroScope" name="queryExpression" token="60000f1"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="200001f" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[            // MacroScope\\MacroScope.g:115:2: s= subQueryExpression (u= unionOperator s= subQueryExpression )* (o= orderByClause )?
            {
            	PushFollow(FOLLOW_subQueryExpression_in_queryExpression523);]]></beforeSource>
<source><![CDATA[            	s = subQueryExpression();]]></source>
<afterSource><![CDATA[            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) ]]></afterSource>
</frame>
<frame value="  at MacroScopeParser.selectStatement() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(473)" method="MacroScopeParser.selectStatement()" offset="20" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="473"><method assemblyName="MacroScope" name="selectStatement" token="60000e9"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="SelectStatement" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[            // MacroScope\\MacroScope.g:53:2: q= queryExpression
            {
            	PushFollow(FOLLOW_queryExpression_in_selectStatement206);]]></beforeSource>
<source><![CDATA[            	q = queryExpression();]]></source>
<afterSource><![CDATA[            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) ]]></afterSource>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(312)" method="MacroScopeParser.statement()" offset="341" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="312"><method assemblyName="MacroScope" name="statement" token="60000e7"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                    // MacroScope\\MacroScope.g:29:4: s= selectStatement EOF
                    {
                    	PushFollow(FOLLOW_selectStatement_in_statement79);]]></beforeSource>
<source><![CDATA[                    	s = selectStatement();]]></source>
<afterSource><![CDATA[                    	followingStackPointer_--;
                    	if (failed) return value;
                    	Match(input,EOF,FOLLOW_EOF_in_statement81); if (failed) return value;]]></afterSource>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003c6"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[        public static IStatement CreateStatement(string commandText)
        {
            MacroScopeParser parser = CreateParser(commandText);]]></beforeSource>
<source><![CDATA[            return parser.statement();]]></source>
<afterSource><![CDATA[        }

        public static MacroScopeParser CreateParser(string commandText)]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1317)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1317"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="6000074"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000039" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="600006d"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="2000002" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(506)" method="PexTestClass.filterMaritalStatus2()" offset="44" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="506"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            conn.Open();
            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[10].Equals(status))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="Antlr.Runtime.IToken Antlr.Runtime.CommonTokenStream.LT(System.Int32 k)" declaringTypeDisplayName="Antlr.Runtime.CommonTokenStream" methodShortDisplayName="CommonTokenStream.LT(Int32)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at ArrayList.get_Count()" method="ArrayList.get_Count()" offset="0"><method assemblyName="mscorlib" name="get_Count" token="6001d7a"><declaringType assemblyName="mscorlib" name="ArrayList" token="20002fc" namespace="System.Collections"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="ArrayList" token="20002fc" namespace="System.Collections"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="68"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.identifier() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(5822)" method="MacroScopeParser.identifier()" offset="158" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="5822"><method assemblyName="MacroScope" name="identifier" token="6000119"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="Identifier" token="200002a" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                case 1 :
                    // MacroScope\\MacroScope.g:708:2: NonQuotedIdentifier
                    {]]></beforeSource>
<source><![CDATA[                    	NonQuotedIdentifier6 = (IToken)input.LT(1);]]></source>
<afterSource><![CDATA[                    	Match(input,NonQuotedIdentifier,FOLLOW_NonQuotedIdentifier_in_identifier2984); if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{]]></afterSource>
</frame>
<frame value="  at MacroScopeParser.dbObject() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(5575)" method="MacroScopeParser.dbObject()" offset="20" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="5575"><method assemblyName="MacroScope" name="dbObject" token="6000116"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="DbObject" token="200003c" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[            // MacroScope\\MacroScope.g:682:2: i= identifier ( DOT i= identifier )*
            {
            	PushFollow(FOLLOW_identifier_in_dbObject2889);]]></beforeSource>
<source><![CDATA[            	i = identifier();]]></source>
<afterSource><![CDATA[            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) ]]></afterSource>
</frame>
<frame value="  at MacroScopeParser.subTableSource() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(3404)" method="MacroScopeParser.subTableSource()" offset="1653" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="3404"><method assemblyName="MacroScope" name="subTableSource" token="6000104"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="Table" token="2000025" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                    // MacroScope\\MacroScope.g:405:4: o= dbObject (a= alias1 )?
                    {
                    	PushFollow(FOLLOW_dbObject_in_subTableSource1779);]]></beforeSource>
<source><![CDATA[                    	o = dbObject();]]></source>
<afterSource><![CDATA[                    	followingStackPointer_--;
                    	if (failed) return value;
                    	if ( backtracking == 0 ) ]]></afterSource>
</frame>
<frame value="  at MacroScopeParser.tableSource() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(3105)" method="MacroScopeParser.tableSource()" offset="20" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="3105"><method assemblyName="MacroScope" name="tableSource" token="6000103"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="Table" token="2000025" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[            // MacroScope\\MacroScope.g:376:2: t= subTableSource (t= joinedTable )*
            {
            	PushFollow(FOLLOW_subTableSource_in_tableSource1632);]]></beforeSource>
<source><![CDATA[            	t = subTableSource();]]></source>
<afterSource><![CDATA[            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) ]]></afterSource>
</frame>
<frame value="  at MacroScopeParser.fromClause() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(3029)" method="MacroScopeParser.fromClause()" offset="63" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="3029"><method assemblyName="MacroScope" name="fromClause" token="6000102"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="AliasedItem" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[            {
            	Match(input,FROM,FOLLOW_FROM_in_fromClause1589); if (failed) return value;
            	PushFollow(FOLLOW_tableSource_in_fromClause1595);]]></beforeSource>
<source><![CDATA[            	t = tableSource();]]></source>
<afterSource><![CDATA[            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) ]]></afterSource>
</frame>
<frame value="  at MacroScopeParser.querySpecification() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(1246)" method="MacroScopeParser.querySpecification()" offset="157" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="1246"><method assemblyName="MacroScope" name="querySpecification" token="60000f3"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="200001f" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[            	        // MacroScope\\MacroScope.g:132:4: f= fromClause
            	        {
            	        	PushFollow(FOLLOW_fromClause_in_querySpecification630);]]></beforeSource>
<source><![CDATA[            	        	f = fromClause();]]></source>
<afterSource><![CDATA[            	        	followingStackPointer_--;
            	        	if (failed) return value;
            	        	if ( backtracking == 0 ) ]]></afterSource>
</frame>
<frame value="  at MacroScopeParser.subQueryExpression() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(1163)" method="MacroScopeParser.subQueryExpression()" offset="158" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="1163"><method assemblyName="MacroScope" name="subQueryExpression" token="60000f2"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="200001f" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                    // MacroScope\\MacroScope.g:126:2: s= querySpecification
                    {
                    	PushFollow(FOLLOW_querySpecification_in_subQueryExpression582);]]></beforeSource>
<source><![CDATA[                    	s = querySpecification();]]></source>
<afterSource><![CDATA[                    	followingStackPointer_--;
                    	if (failed) return value;
                    	if ( backtracking == 0 ) ]]></afterSource>
</frame>
<frame value="  at MacroScopeParser.queryExpression() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(1034)" method="MacroScopeParser.queryExpression()" offset="24" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="1034"><method assemblyName="MacroScope" name="queryExpression" token="60000f1"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="200001f" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[            // MacroScope\\MacroScope.g:115:2: s= subQueryExpression (u= unionOperator s= subQueryExpression )* (o= orderByClause )?
            {
            	PushFollow(FOLLOW_subQueryExpression_in_queryExpression523);]]></beforeSource>
<source><![CDATA[            	s = subQueryExpression();]]></source>
<afterSource><![CDATA[            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) ]]></afterSource>
</frame>
<frame value="  at MacroScopeParser.selectStatement() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(473)" method="MacroScopeParser.selectStatement()" offset="20" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="473"><method assemblyName="MacroScope" name="selectStatement" token="60000e9"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="SelectStatement" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[            // MacroScope\\MacroScope.g:53:2: q= queryExpression
            {
            	PushFollow(FOLLOW_queryExpression_in_selectStatement206);]]></beforeSource>
<source><![CDATA[            	q = queryExpression();]]></source>
<afterSource><![CDATA[            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) ]]></afterSource>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(312)" method="MacroScopeParser.statement()" offset="341" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="312"><method assemblyName="MacroScope" name="statement" token="60000e7"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                    // MacroScope\\MacroScope.g:29:4: s= selectStatement EOF
                    {
                    	PushFollow(FOLLOW_selectStatement_in_statement79);]]></beforeSource>
<source><![CDATA[                    	s = selectStatement();]]></source>
<afterSource><![CDATA[                    	followingStackPointer_--;
                    	if (failed) return value;
                    	Match(input,EOF,FOLLOW_EOF_in_statement81); if (failed) return value;]]></afterSource>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003c6"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[        public static IStatement CreateStatement(string commandText)
        {
            MacroScopeParser parser = CreateParser(commandText);]]></beforeSource>
<source><![CDATA[            return parser.statement();]]></source>
<afterSource><![CDATA[        }

        public static MacroScopeParser CreateParser(string commandText)]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1317)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1317"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="6000074"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000039" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="600006d"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="2000002" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(506)" method="PexTestClass.filterMaritalStatus2()" offset="44" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="506"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            conn.Open();
            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[10].Equals(status))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.String Antlr.Runtime.CommonToken.get_Text()" declaringTypeDisplayName="Antlr.Runtime.CommonToken" methodShortDisplayName="CommonToken.get_Text()" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="get_Text" token="600030e"><declaringType assemblyName="Antlr3.Runtime" name="CommonToken" token="2000043" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonToken" token="2000043" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at MacroScopeParser.identifier() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(5827)" method="MacroScopeParser.identifier()" offset="227" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="5827"><method assemblyName="MacroScope" name="identifier" token="6000119"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="Identifier" token="200002a" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                    	if ( backtracking == 0 ) 
                    	{
                    	  ]]></beforeSource>
<source><![CDATA[                    	  		value =  new Identifier(NonQuotedIdentifier6.Text);]]></source>
<afterSource><![CDATA[                    	  	
                    	}
                    ]]></afterSource>
</frame>
<frame value="  at MacroScopeParser.dbObject() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(5575)" method="MacroScopeParser.dbObject()" offset="20" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="5575"><method assemblyName="MacroScope" name="dbObject" token="6000116"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="DbObject" token="200003c" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[            // MacroScope\\MacroScope.g:682:2: i= identifier ( DOT i= identifier )*
            {
            	PushFollow(FOLLOW_identifier_in_dbObject2889);]]></beforeSource>
<source><![CDATA[            	i = identifier();]]></source>
<afterSource><![CDATA[            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) ]]></afterSource>
</frame>
<frame value="  at MacroScopeParser.subTableSource() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(3404)" method="MacroScopeParser.subTableSource()" offset="1653" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="3404"><method assemblyName="MacroScope" name="subTableSource" token="6000104"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="Table" token="2000025" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                    // MacroScope\\MacroScope.g:405:4: o= dbObject (a= alias1 )?
                    {
                    	PushFollow(FOLLOW_dbObject_in_subTableSource1779);]]></beforeSource>
<source><![CDATA[                    	o = dbObject();]]></source>
<afterSource><![CDATA[                    	followingStackPointer_--;
                    	if (failed) return value;
                    	if ( backtracking == 0 ) ]]></afterSource>
</frame>
<frame value="  at MacroScopeParser.tableSource() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(3105)" method="MacroScopeParser.tableSource()" offset="20" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="3105"><method assemblyName="MacroScope" name="tableSource" token="6000103"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="Table" token="2000025" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[            // MacroScope\\MacroScope.g:376:2: t= subTableSource (t= joinedTable )*
            {
            	PushFollow(FOLLOW_subTableSource_in_tableSource1632);]]></beforeSource>
<source><![CDATA[            	t = subTableSource();]]></source>
<afterSource><![CDATA[            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) ]]></afterSource>
</frame>
<frame value="  at MacroScopeParser.fromClause() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(3029)" method="MacroScopeParser.fromClause()" offset="63" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="3029"><method assemblyName="MacroScope" name="fromClause" token="6000102"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="AliasedItem" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[            {
            	Match(input,FROM,FOLLOW_FROM_in_fromClause1589); if (failed) return value;
            	PushFollow(FOLLOW_tableSource_in_fromClause1595);]]></beforeSource>
<source><![CDATA[            	t = tableSource();]]></source>
<afterSource><![CDATA[            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) ]]></afterSource>
</frame>
<frame value="  at MacroScopeParser.querySpecification() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(1246)" method="MacroScopeParser.querySpecification()" offset="157" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="1246"><method assemblyName="MacroScope" name="querySpecification" token="60000f3"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="200001f" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[            	        // MacroScope\\MacroScope.g:132:4: f= fromClause
            	        {
            	        	PushFollow(FOLLOW_fromClause_in_querySpecification630);]]></beforeSource>
<source><![CDATA[            	        	f = fromClause();]]></source>
<afterSource><![CDATA[            	        	followingStackPointer_--;
            	        	if (failed) return value;
            	        	if ( backtracking == 0 ) ]]></afterSource>
</frame>
<frame value="  at MacroScopeParser.subQueryExpression() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(1163)" method="MacroScopeParser.subQueryExpression()" offset="158" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="1163"><method assemblyName="MacroScope" name="subQueryExpression" token="60000f2"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="200001f" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                    // MacroScope\\MacroScope.g:126:2: s= querySpecification
                    {
                    	PushFollow(FOLLOW_querySpecification_in_subQueryExpression582);]]></beforeSource>
<source><![CDATA[                    	s = querySpecification();]]></source>
<afterSource><![CDATA[                    	followingStackPointer_--;
                    	if (failed) return value;
                    	if ( backtracking == 0 ) ]]></afterSource>
</frame>
<frame value="  at MacroScopeParser.queryExpression() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(1034)" method="MacroScopeParser.queryExpression()" offset="24" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="1034"><method assemblyName="MacroScope" name="queryExpression" token="60000f1"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="200001f" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[            // MacroScope\\MacroScope.g:115:2: s= subQueryExpression (u= unionOperator s= subQueryExpression )* (o= orderByClause )?
            {
            	PushFollow(FOLLOW_subQueryExpression_in_queryExpression523);]]></beforeSource>
<source><![CDATA[            	s = subQueryExpression();]]></source>
<afterSource><![CDATA[            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) ]]></afterSource>
</frame>
<frame value="  at MacroScopeParser.selectStatement() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(473)" method="MacroScopeParser.selectStatement()" offset="20" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="473"><method assemblyName="MacroScope" name="selectStatement" token="60000e9"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="SelectStatement" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[            // MacroScope\\MacroScope.g:53:2: q= queryExpression
            {
            	PushFollow(FOLLOW_queryExpression_in_selectStatement206);]]></beforeSource>
<source><![CDATA[            	q = queryExpression();]]></source>
<afterSource><![CDATA[            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) ]]></afterSource>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(312)" method="MacroScopeParser.statement()" offset="341" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="312"><method assemblyName="MacroScope" name="statement" token="60000e7"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                    // MacroScope\\MacroScope.g:29:4: s= selectStatement EOF
                    {
                    	PushFollow(FOLLOW_selectStatement_in_statement79);]]></beforeSource>
<source><![CDATA[                    	s = selectStatement();]]></source>
<afterSource><![CDATA[                    	followingStackPointer_--;
                    	if (failed) return value;
                    	Match(input,EOF,FOLLOW_EOF_in_statement81); if (failed) return value;]]></afterSource>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003c6"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[        public static IStatement CreateStatement(string commandText)
        {
            MacroScopeParser parser = CreateParser(commandText);]]></beforeSource>
<source><![CDATA[            return parser.statement();]]></source>
<afterSource><![CDATA[        }

        public static MacroScopeParser CreateParser(string commandText)]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1317)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1317"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="6000074"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000039" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="600006d"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="2000002" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(506)" method="PexTestClass.filterMaritalStatus2()" offset="44" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="506"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            conn.Open();
            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[10].Equals(status))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented testability="true" methodDisplayName="System.Void System.Random..ctor()" declaringTypeDisplayName="System.Random" methodShortDisplayName="Random..ctor()" wikiTopic="Testability Issue"><method><definition assemblyName="mscorlib" name=".ctor" token="6000e59"><declaringType assemblyName="mscorlib" name="Random" token="2000115" namespace="System"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="Random" token="2000115" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at Math.Abs(Int32)" method="Math.Abs(Int32)" offset="0"><method assemblyName="mscorlib" name="Abs" static="true" token="6000d8d"><declaringType assemblyName="mscorlib" name="Math" token="20000fb" namespace="System"/>
<parameter name="value" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at Random..ctor(Int32)" method="Random..ctor(Int32)" offset="27"><method assemblyName="mscorlib" name=".ctor" token="6000e5a"><declaringType assemblyName="mscorlib" name="Random" token="2000115" namespace="System"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="Random" token="2000115" namespace="System"/>
</type>
</parameter>
<parameter name="Seed" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at Random..ctor()" method="Random..ctor()" offset="11"><method assemblyName="mscorlib" name=".ctor" token="6000e59"><declaringType assemblyName="mscorlib" name="Random" token="2000115" namespace="System"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="Random" token="2000115" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at DBMS.GenerateRandomNumber(Int32) in C:\TaintSQL\MockDBMS\MockDBMS.cs(343)" method="DBMS.GenerateRandomNumber(Int32)" offset="9" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="343"><method assemblyName="MockDBMS" name="GenerateRandomNumber" static="true" token="6000020"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter name="Length" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[        public static string GenerateRandomNumber(int Length)
        {
            System.Text.StringBuilder newRandom = new System.Text.StringBuilder(9);]]></beforeSource>
<source><![CDATA[            Random rd = new Random();]]></source>
<afterSource><![CDATA[            for (int i = 0; i < Length; i++)
            {
                newRandom.Append(constant[rd.Next(9)]);]]></afterSource>
</frame>
<frame value="  at DBMS.processData(Object, String, String, Boolean) in C:\TaintSQL\MockDBMS\MockDBMS.cs(353)" method="DBMS.processData(Object, String, String, Boolean)" offset="2" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="353"><method assemblyName="MockDBMS" name="processData" static="true" token="6000021"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter name="x" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</type>
</parameter>
<parameter name="tag" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="query" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="flag" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public static string processData(object x, string tag, string query, bool flag)
        {]]></beforeSource>
<source><![CDATA[            string pwd = GenerateRandomNumber(8);]]></source>
<afterSource><![CDATA[            while(query.Contains(pwd) || taintTags.ContainsKey(pwd))
            {
                pwd = GenerateRandomNumber(8);]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(519)" method="PexTestClass.filterMaritalStatus2()" offset="124" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="519"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            try
            {
]]></beforeSource>
<source><![CDATA[                string cmd_statusSearch = String.Format(sql, DBMS.processData(status, "00000001", sql, true));]]></source>
<afterSource><![CDATA[                MockSqlCommand myCommand2 = new MockSqlCommand(cmd_statusSearch, conn);
                MockSqlDataReader result = myCommand2.ExecuteReader();
                Console.WriteLine(result.records.Count);]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented testability="true" methodDisplayName="System.Int32 System.Random.Next(System.Int32 maxValue)" declaringTypeDisplayName="System.Random" methodShortDisplayName="Random.Next(Int32)" wikiTopic="Testability Issue"><method><definition assemblyName="mscorlib" name="Next" token="6000e5f"><declaringType assemblyName="mscorlib" name="Random" token="2000115" namespace="System"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="Random" token="2000115" namespace="System"/>
</type>
</parameter>
<parameter name="maxValue" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at DBMS.GenerateRandomNumber(Int32) in C:\TaintSQL\MockDBMS\MockDBMS.cs(346)" method="DBMS.GenerateRandomNumber(Int32)" offset="29" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="346"><method assemblyName="MockDBMS" name="GenerateRandomNumber" static="true" token="6000020"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter name="Length" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            Random rd = new Random();
            for (int i = 0; i < Length; i++)
            {]]></beforeSource>
<source><![CDATA[                newRandom.Append(constant[rd.Next(9)]);]]></source>
<afterSource><![CDATA[            }
            return newRandom.ToString();
        }]]></afterSource>
</frame>
<frame value="  at DBMS.processData(Object, String, String, Boolean) in C:\TaintSQL\MockDBMS\MockDBMS.cs(353)" method="DBMS.processData(Object, String, String, Boolean)" offset="2" file="C:\TaintSQL\MockDBMS\MockDBMS.cs" line="353"><method assemblyName="MockDBMS" name="processData" static="true" token="6000021"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter name="x" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</type>
</parameter>
<parameter name="tag" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="query" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="flag" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public static string processData(object x, string tag, string query, bool flag)
        {]]></beforeSource>
<source><![CDATA[            string pwd = GenerateRandomNumber(8);]]></source>
<afterSource><![CDATA[            while(query.Contains(pwd) || taintTags.ContainsKey(pwd))
            {
                pwd = GenerateRandomNumber(8);]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(519)" method="PexTestClass.filterMaritalStatus2()" offset="124" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="519"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            try
            {
]]></beforeSource>
<source><![CDATA[                string cmd_statusSearch = String.Format(sql, DBMS.processData(status, "00000001", sql, true));]]></source>
<afterSource><![CDATA[                MockSqlCommand myCommand2 = new MockSqlCommand(cmd_statusSearch, conn);
                MockSqlDataReader result = myCommand2.ExecuteReader();
                Console.WriteLine(result.records.Count);]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Int32 Antlr.Runtime.Lexer.get_CharIndex()" declaringTypeDisplayName="Antlr.Runtime.Lexer" methodShortDisplayName="Lexer.get_CharIndex()" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="get_CharIndex" token="600014f"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at MacroScopeLexer.mAsciiStringLiteral() in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(2926)" method="MacroScopeLexer.mAsciiStringLiteral()" offset="136" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="2926"><method assemblyName="MacroScope" name="mAsciiStringLiteral" token="600005d"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            	    case 1 :
            	        // MacroScope\\MacroScope.g:951:4: s= AsciiStringRun
            	        {]]></beforeSource>
<source><![CDATA[            	        	int sStart1227 = CharIndex;]]></source>
<afterSource><![CDATA[            	        	mAsciiStringRun(); if (failed) return ;
            	        	s = new CommonToken(input, Token.INVALID_TOKEN_TYPE, Token.DEFAULT_CHANNEL, sStart1227, CharIndex-1);
            	        	if ( backtracking == 0 ) ]]></afterSource>
</frame>
<frame value="  at MacroScopeLexer.mTokens() in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(6246)" method="MacroScopeLexer.mTokens()" offset="15038" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="6246"><method assemblyName="MacroScope" name="mTokens" token="6000064"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            case 82 :
                // MacroScope\\MacroScope.g:1:579: AsciiStringLiteral
                {]]></beforeSource>
<source><![CDATA[                	mAsciiStringLiteral(); if (failed) return ;]]></source>
<afterSource><![CDATA[                
                }
                break;]]></afterSource>
</frame>
<frame value="  at Lexer.NextToken()" method="Lexer.NextToken()" offset="117"><method assemblyName="Antlr3.Runtime" name="NextToken" token="6000153"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.FillBuffer()" method="CommonTokenStream.FillBuffer()" offset="209"><method assemblyName="Antlr3.Runtime" name="FillBuffer" token="60002b2"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="24"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(260)" method="MacroScopeParser.statement()" offset="23" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="260"><method assemblyName="MacroScope" name="statement" token="60000e7"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[    	{
            // MacroScope\\MacroScope.g:27:40: (i= insertStatement EOF | s= selectStatement EOF | u= updateStatement EOF | d= deleteStatement EOF )
            int alt1 = 4;]]></beforeSource>
<source><![CDATA[            switch ( input.LA(1) ) ]]></source>
<afterSource><![CDATA[            {
            case INSERT:
            	{]]></afterSource>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003c6"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[        public static IStatement CreateStatement(string commandText)
        {
            MacroScopeParser parser = CreateParser(commandText);]]></beforeSource>
<source><![CDATA[            return parser.statement();]]></source>
<afterSource><![CDATA[        }

        public static MacroScopeParser CreateParser(string commandText)]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1317)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1317"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="6000074"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000039" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="600006d"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="2000002" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(521)" method="PexTestClass.filterMaritalStatus2()" offset="148" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="521"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[
                string cmd_statusSearch = String.Format(sql, DBMS.processData(status, "00000001", sql, true));
                MockSqlCommand myCommand2 = new MockSqlCommand(cmd_statusSearch, conn);]]></beforeSource>
<source><![CDATA[                MockSqlDataReader result = myCommand2.ExecuteReader();]]></source>
<afterSource><![CDATA[                Console.WriteLine(result.records.Count);
                count = result.records.Count;
  ]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.CommonToken..ctor(Antlr.Runtime.ICharStream input, System.Int32 type, System.Int32 channel, System.Int32 start, System.Int32 stop)" declaringTypeDisplayName="Antlr.Runtime.CommonToken" methodShortDisplayName="CommonToken..ctor(ICharStream, Int32, Int32, Int32, Int32)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name=".ctor" token="60002fd"><declaringType assemblyName="Antlr3.Runtime" name="CommonToken" token="2000043" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonToken" token="2000043" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ICharStream" token="200001f" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="type" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="channel" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="start" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="stop" position="5"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at MacroScopeLexer.mAsciiStringLiteral() in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(2928)" method="MacroScopeLexer.mAsciiStringLiteral()" offset="193" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="2928"><method assemblyName="MacroScope" name="mAsciiStringLiteral" token="600005d"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            	        {
            	        	int sStart1227 = CharIndex;
            	        	mAsciiStringRun(); if (failed) return ;]]></beforeSource>
<source><![CDATA[            	        	s = new CommonToken(input, Token.INVALID_TOKEN_TYPE, Token.DEFAULT_CHANNEL, sStart1227, CharIndex-1);]]></source>
<afterSource><![CDATA[            	        	if ( backtracking == 0 ) 
            	        	{
            	        	   text = s.Text; ]]></afterSource>
</frame>
<frame value="  at MacroScopeLexer.mTokens() in C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs(6246)" method="MacroScopeLexer.mTokens()" offset="15038" file="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" line="6246"><method assemblyName="MacroScope" name="mTokens" token="6000064"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            case 82 :
                // MacroScope\\MacroScope.g:1:579: AsciiStringLiteral
                {]]></beforeSource>
<source><![CDATA[                	mAsciiStringLiteral(); if (failed) return ;]]></source>
<afterSource><![CDATA[                
                }
                break;]]></afterSource>
</frame>
<frame value="  at Lexer.NextToken()" method="Lexer.NextToken()" offset="117"><method assemblyName="Antlr3.Runtime" name="NextToken" token="6000153"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.FillBuffer()" method="CommonTokenStream.FillBuffer()" offset="209"><method assemblyName="Antlr3.Runtime" name="FillBuffer" token="60002b2"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="24"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs(260)" method="MacroScopeParser.statement()" offset="23" file="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" line="260"><method assemblyName="MacroScope" name="statement" token="60000e7"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000013" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[    	{
            // MacroScope\\MacroScope.g:27:40: (i= insertStatement EOF | s= selectStatement EOF | u= updateStatement EOF | d= deleteStatement EOF )
            int alt1 = 4;]]></beforeSource>
<source><![CDATA[            switch ( input.LA(1) ) ]]></source>
<afterSource><![CDATA[            {
            case INSERT:
            	{]]></afterSource>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\TaintSQL\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\TaintSQL\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003c6"><declaringType assemblyName="MacroScope" name="Factory" token="200003d" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="2000008" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[        public static IStatement CreateStatement(string commandText)
        {
            MacroScopeParser parser = CreateParser(commandText);]]></beforeSource>
<source><![CDATA[            return parser.statement();]]></source>
<afterSource><![CDATA[        }

        public static MacroScopeParser CreateParser(string commandText)]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1317)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1317"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="6000074"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000039" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="600006d"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="2000002" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(521)" method="PexTestClass.filterMaritalStatus2()" offset="148" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="521"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[
                string cmd_statusSearch = String.Format(sql, DBMS.processData(status, "00000001", sql, true));
                MockSqlCommand myCommand2 = new MockSqlCommand(cmd_statusSearch, conn);]]></beforeSource>
<source><![CDATA[                MockSqlDataReader result = myCommand2.ExecuteReader();]]></source>
<afterSource><![CDATA[                Console.WriteLine(result.records.Count);
                count = result.records.Count;
  ]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<test name="filterMaritalStatus2" state="success" duration="1.81524833858997"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
0
]]></console>
</test>
<generatedTest id="748f51b8-cf7b-4dbb-8bbf-716abe14ad18" index="1" run="1" status="normaltermination" generated="true" new="true" assemblyName="TestDBApp" name="filterMaritalStatus2742"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="ffffffff" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="ffffffff" namespace="MyApplication"/>
</type>
</parameter>
<rcov name="Block" dcov="218" dtot="809" acov="218" atot="809"/>
<rcov name="asserts" dcov="5" dtot="12" acov="5" atot="12"/>
<value name="result">0</value>
<code><![CDATA[int i;
i = this.filterMaritalStatus2();
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.VisualStudio.TestTools.UnitTesting;Microsoft.Pex.Framework.Generated"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(PexTestClass))]
public void filterMaritalStatus2742()
{
    int i;
    i = this.filterMaritalStatus2();
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="TestDBApp" location="C:\TaintSQL\TestDBApp\bin\Debug\TestDBApp.dll"/>
<pathCondition><![CDATA[byte[] s1 = new;
uint s0 = &(sbyte[]).$Items + s1 + unchecked(0);
uint s2 = &(short[]).$Items + s1 + unchecked(0);
return s0 < 4294966956u && s2 < 4294965246u && 2u + s2 < 666u + s2 && (4294967293u | 2u ^ 2u + s0) != uint.MaxValue && 8u + s2 < 666u + s2 && 24u + s2 < 666u + s2 && 40u + s2 < 666u + s2 && 
                                                                                                                                                                      56u + s2 < 666u + s2 && 72u + s2 < 666u + s2 && 88u + s2 < 666u + s2 && 104u + s2 < 666u + s2 && 120u + s2 < 666u + s2 && 136u + s2 < 666u + s2 && 152u + s2 < 666u + s2 && 168u + s2 < 666u + s2 && 
                                                                                                                                                                                                                                                                                                                                                  184u + s2 < 666u + s2 && 200u + s2 < 666u + s2 && 216u + s2 < 666u + s2 && 232u + s2 < 666u + s2 && 248u + s2 < 666u + s2 && 264u + s2 < 666u + s2 && 280u + s2 < 666u + s2 && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        296u + s2 < 666u + s2 && 312u + s2 < 666u + s2 && 328u + s2 < 666u + s2 && 344u + s2 < 666u + s2 && 360u + s2 < 666u + s2 && 376u + s2 < 666u + s2 && 392u + s2 < 666u + s2 && 
u + s2 < 666u + s2 && 424u + s2 < 666u + s2 && 440u + s2 < 666u + s2 && 456u + s2 < 666u + s2 && 472u + s2 < 666u + s2 && 488u + s2 < 666u + s2 && 504u + s2 < 666u + s2 && 
u + s2 < 666u + s2 && 536u + s2 < 666u + s2 && 552u + s2 < 666u + s2 && 568u + s2 < 666u + s2 && 584u + s2 < 666u + s2 && 600u + s2 < 666u + s2 && 616u + s2 < 666u + s2 && 
u + s2 < 666u + s2 && 648u + s2 < 666u + s2 && 664u + s2 < 666u + s2 && choiceof(default, 0, Num Records) < 1 && (4294967294u | 1u ^ 2u + s0) == uint.MaxValue && 680u + s2 >= 666u + s2;
]]></pathCondition>
</generatedTest>
<log level="message" time="2020-12-18 05:22:11Z" category="coverage" message="coverage increased from 0 to 218 blocks (+218) after flipping System.Text.UTF8Encoding.GetChars at 0x002e"/>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.05"/>
<test name="filterMaritalStatus2" state="success" duration="0.05"/>
<test name="filterMaritalStatus2" state="success" duration="0.06"/>
<test name="filterMaritalStatus2" state="success" duration="0.05"/>
<test name="filterMaritalStatus2" state="success" duration="0.04"/>
<test name="filterMaritalStatus2" state="success" duration="0.05"/>
<test name="filterMaritalStatus2" state="success" duration="0.05"/>
<test name="filterMaritalStatus2" state="success" duration="0.05"/>
<test name="filterMaritalStatus2" state="success" duration="0.05"/>
<test name="filterMaritalStatus2" state="success" duration="0.05"/>
<test name="filterMaritalStatus2" state="success" duration="0.05"/>
<test name="filterMaritalStatus2" state="success" duration="0.05"/>
<test name="filterMaritalStatus2" state="success" duration="0.05"/>
<test name="filterMaritalStatus2" state="success" duration="0.05"/>
<test name="filterMaritalStatus2" state="success" duration="0.05"/>
<test name="filterMaritalStatus2" state="success" duration="0.05"/>
<test name="filterMaritalStatus2" state="success" duration="0.05"/>
<test name="filterMaritalStatus2" state="success" duration="0.06"/>
<uninstrumented methodDisplayName="System.Int32 System.ParseNumbers.StringToInt(System.String s, System.Int32 radix, System.Int32 flags)" declaringTypeDisplayName="System.ParseNumbers" methodShortDisplayName="ParseNumbers.StringToInt(String, Int32, Int32)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="mscorlib" name="StringToInt" static="true" token="6000e50"><declaringType assemblyName="mscorlib" name="ParseNumbers" token="2000112" namespace="System"/>
<parameter name="s" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="radix" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="flags" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at Convert.ToInt32(String, Int32)" method="Convert.ToInt32(String, Int32)" offset="46"><method assemblyName="mscorlib" name="ToInt32" static="true" token="600676c"><declaringType assemblyName="mscorlib" name="Convert" token="20000b5" namespace="System"/>
<parameter position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.SelectColumnsFrom(List`1&lt;Object[]&gt;, QueryParts, Table) in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1237)" method="MockSqlCommand.SelectColumnsFrom(List`1&lt;Object[]&gt;, QueryParts, Table)" offset="276" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1237"><method assemblyName="MockDBMS" name="SelectColumnsFrom" token="6000073"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<parameter name="records" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="List`1" token="200033e" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</elementType>
</genericTypeArgument>
</type>
</parameter>
<parameter name="parsedQuery" position="2"><type spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000039" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="table" position="3"><type spec="Class"><definition assemblyName="MockDBMS" name="Table" token="2000008" namespace="MockDBMS"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="List`1" token="200033e" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</elementType>
</genericTypeArgument>
</resultType>
</method>
<beforeSource><![CDATA[                        int len = tags_arr.Length, new_tag = 0;
                        for (int i = 0; i < len; i++)
                        {]]></beforeSource>
<source><![CDATA[                            new_tag = new_tag | Convert.ToInt32(tags_arr[i], 16);]]></source>
<afterSource><![CDATA[                        }
                        string new_tag_16 = Convert.ToString(new_tag, 16);
                        len = 8 - new_tag_16.Length;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(48)" method="MockSqlCommand.ExecuteReader()" offset="210" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="48"><method assemblyName="MockDBMS" name="ExecuteReader" token="600006d"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="2000002" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[                        records = table.PerformOperationOnRecords(records, joinRecords, "AND");
                    }
]]></beforeSource>
<source><![CDATA[                    selectedRecords = SelectColumnsFrom(records, parsedQuery, table);]]></source>
<afterSource><![CDATA[                }
                else
                {]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(506)" method="PexTestClass.filterMaritalStatus2()" offset="44" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="506"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            conn.Open();
            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[10].Equals(status))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented extern="true" methodDisplayName="System.String System.ParseNumbers.IntToString(System.Int32 l, System.Int32 radix, System.Int32 width, System.Char paddingChar, System.Int32 flags)" declaringTypeDisplayName="System.ParseNumbers" methodShortDisplayName="ParseNumbers.IntToString(Int32, Int32, Int32, Char, Int32)" wikiTopic="External Method Called"><method><definition assemblyName="mscorlib" name="IntToString" static="true" token="6000e53"><declaringType assemblyName="mscorlib" name="ParseNumbers" token="2000112" namespace="System"/>
<parameter name="l" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="radix" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="width" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="paddingChar" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Char" token="200009a" namespace="System"/>
</type>
</parameter>
<parameter name="flags" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at Convert.ToString(Int32, Int32)" method="Convert.ToString(Int32, Int32)" offset="45"><method assemblyName="mscorlib" name="ToString" static="true" token="6006772"><declaringType assemblyName="mscorlib" name="Convert" token="20000b5" namespace="System"/>
<parameter position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.SelectColumnsFrom(List`1&lt;Object[]&gt;, QueryParts, Table) in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1239)" method="MockSqlCommand.SelectColumnsFrom(List`1&lt;Object[]&gt;, QueryParts, Table)" offset="307" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1239"><method assemblyName="MockDBMS" name="SelectColumnsFrom" token="6000073"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<parameter name="records" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="List`1" token="200033e" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</elementType>
</genericTypeArgument>
</type>
</parameter>
<parameter name="parsedQuery" position="2"><type spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000039" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="table" position="3"><type spec="Class"><definition assemblyName="MockDBMS" name="Table" token="2000008" namespace="MockDBMS"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="List`1" token="200033e" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</elementType>
</genericTypeArgument>
</resultType>
</method>
<beforeSource><![CDATA[                        {
                            new_tag = new_tag | Convert.ToInt32(tags_arr[i], 16);
                        }]]></beforeSource>
<source><![CDATA[                        string new_tag_16 = Convert.ToString(new_tag, 16);]]></source>
<afterSource><![CDATA[                        len = 8 - new_tag_16.Length;
                        for (int i = 0; i < len; i++)
                        {]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(48)" method="MockSqlCommand.ExecuteReader()" offset="210" file="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="48"><method assemblyName="MockDBMS" name="ExecuteReader" token="600006d"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000010" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="2000002" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[                        records = table.PerformOperationOnRecords(records, joinRecords, "AND");
                    }
]]></beforeSource>
<source><![CDATA[                    selectedRecords = SelectColumnsFrom(records, parsedQuery, table);]]></source>
<afterSource><![CDATA[                }
                else
                {]]></afterSource>
</frame>
<frame value="  at PexTestClass.filterMaritalStatus2() in C:\TaintSQL\TestDBApp\DBApplication.cs(506)" method="PexTestClass.filterMaritalStatus2()" offset="44" file="C:\TaintSQL\TestDBApp\DBApplication.cs" line="506"><method assemblyName="TestDBApp" name="filterMaritalStatus2" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000002" namespace="MyApplication"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            conn.Open();
            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[10].Equals(status))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<test name="filterMaritalStatus2" state="success" duration="0.22"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
0
]]></console>
</test>
<generatedTest id="76e2175a-9ca9-4443-be83-d97b1cdefea3" index="2" run="21" status="normaltermination" generated="true" new="true" assemblyName="TestDBApp" name="filterMaritalStatus274201"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="ffffffff" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="ffffffff" namespace="MyApplication"/>
</type>
</parameter>
<rcov name="Block" dcov="83" dtot="7" acov="301" atot="816"/>
<rcov name="asserts" dcov="0" dtot="0" acov="5" atot="12"/>
<value name="result">0</value>
<code><![CDATA[int i;
IPexChoiceRecorder choices = PexChoose.Replay.Setup();
choices.DefaultSession
    .At(0, "Num Records", (object)1)
    .At(1, "column NAME Record 0", "\0")
    .At(2, "column ZIP Record 0", "\0")
    .At(5, "column SEX Record 0", "\0")
    .At(6, "column MARITAL Record 0", "\0")
    .At(7, "column RACE Record 0", "\0")
    .At(8, "column TAXSTAT Record 0", "\0")
    .At(9, "column DETAIL Record 0", "\0")
    .At(10, "column HOUSEHOLDDETAIL Record 0", "\0")
    .At(11, "column FATHERORIGIN Record 0", "\0")
    .At(12, "column MOTHERORIGIN Record 0", "\0")
    .At(13, "column BIRTHCOUNTRY Record 0", "\0")
    .At(14, "column CITIZENSHIP Record 0", "\0");
i = this.filterMaritalStatus2();
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Generated;Microsoft.Pex.Framework;Microsoft.VisualStudio.TestTools.UnitTesting"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(PexTestClass))]
public void filterMaritalStatus274201()
{
    int i;
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.DefaultSession
        .At(0, "Num Records", (object)1)
        .At(1, "column NAME Record 0", "\0")
        .At(2, "column ZIP Record 0", "\0")
        .At(5, "column SEX Record 0", "\0")
        .At(6, "column MARITAL Record 0", "\0")
        .At(7, "column RACE Record 0", "\0")
        .At(8, "column TAXSTAT Record 0", "\0")
        .At(9, "column DETAIL Record 0", "\0")
        .At(10, "column HOUSEHOLDDETAIL Record 0", "\0")
        .At(11, "column FATHERORIGIN Record 0", "\0")
        .At(12, "column MOTHERORIGIN Record 0", "\0")
        .At(13, "column BIRTHCOUNTRY Record 0", "\0")
        .At(14, "column CITIZENSHIP Record 0", "\0");
    i = this.filterMaritalStatus2();
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="TestDBApp" location="C:\TaintSQL\TestDBApp\bin\Debug\TestDBApp.dll"/>
<pathCondition><![CDATA[byte[] s1 = new;
uint s0 = &(sbyte[]).$Items + s1 + unchecked(0);
uint s2 = &(short[]).$Items + s1 + unchecked(0);
return s0 < 4294966956u && s2 < 4294965246u && 2u + s2 < 666u + s2 && (4294967293u | 2u ^ 2u + s0) != uint.MaxValue && 8u + s2 < 666u + s2 && 24u + s2 < 666u + s2 && 40u + s2 < 666u + s2 && 
                                                                                                                                                                      56u + s2 < 666u + s2 && 72u + s2 < 666u + s2 && 88u + s2 < 666u + s2 && 104u + s2 < 666u + s2 && 120u + s2 < 666u + s2 && 136u + s2 < 666u + s2 && 152u + s2 < 666u + s2 && 168u + s2 < 666u + s2 && 
                                                                                                                                                                                                                                                                                                                                                  184u + s2 < 666u + s2 && 200u + s2 < 666u + s2 && 216u + s2 < 666u + s2 && 232u + s2 < 666u + s2 && 248u + s2 < 666u + s2 && 264u + s2 < 666u + s2 && 280u + s2 < 666u + s2 && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        296u + s2 < 666u + s2 && 312u + s2 < 666u + s2 && 328u + s2 < 666u + s2 && 344u + s2 < 666u + s2 && 360u + s2 < 666u + s2 && 376u + s2 < 666u + s2 && 392u + s2 < 666u + s2 && 
u + s2 < 666u + s2 && 424u + s2 < 666u + s2 && 440u + s2 < 666u + s2 && 456u + s2 < 666u + s2 && 472u + s2 < 666u + s2 && 488u + s2 < 666u + s2 && 504u + s2 < 666u + s2 && 
u + s2 < 666u + s2 && 536u + s2 < 666u + s2 && 552u + s2 < 666u + s2 && 568u + s2 < 666u + s2 && 584u + s2 < 666u + s2 && 600u + s2 < 666u + s2 && 616u + s2 < 666u + s2 && 
u + s2 < 666u + s2 && 648u + s2 < 666u + s2 && 664u + s2 < 666u + s2 && choiceof(default, 0, column NAME Record 0) != (string)null && choiceof(default, 0, column NAME Record 0).Length != 0 && 
choiceof(default, 0, column ZIP Record 0) != (string)null && choiceof(default, 0, column ZIP Record 0).Length != 0 && choiceof(default, 0, column SEX Record 0) != (string)null && 
choiceof(default, 0, column SEX Record 0).Length != 0 && choiceof(default, 0, column MARITAL Record 0) != (string)null && choiceof(default, 0, column MARITAL Record 0).Length != 0 && 
choiceof(default, 0, column RACE Record 0) != (string)null && choiceof(default, 0, column RACE Record 0).Length != 0 && choiceof(default, 0, column TAXSTAT Record 0) != (string)null && 
choiceof(default, 0, column TAXSTAT Record 0).Length != 0 && choiceof(default, 0, column DETAIL Record 0) != (string)null && choiceof(default, 0, column DETAIL Record 0).Length != 0 && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        choiceof(default, 0, column HOUSEHOLDDETAIL Record 0) != (string)null && choiceof(default, 0, column HOUSEHOLDDETAIL Record 0).Length != 0 && 
choiceof(default, 0, column FATHERORIGIN Record 0) != (string)null && choiceof(default, 0, column FATHERORIGIN Record 0).Length != 0 && 
choiceof(default, 0, column MOTHERORIGIN Record 0) != (string)null && choiceof(default, 0, column MOTHERORIGIN Record 0).Length != 0 && 
choiceof(default, 0, column BIRTHCOUNTRY Record 0) != (string)null && choiceof(default, 0, column BIRTHCOUNTRY Record 0).Length != 0 && 
choiceof(default, 0, column CITIZENSHIP Record 0) != (string)null && choiceof(default, 0, column CITIZENSHIP Record 0).Length != 0 && choiceof(default, 0, Num Records) == 1 && 
u | 1u ^ 2u + s0) == uint.MaxValue && 680u + s2 >= 666u + s2 && (choiceof(default, 0, column MARITAL Record 0).Length != 4 || choiceof(default, 0, column MARITAL Record 0)[0] != 'e' || 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     choiceof(default, 0, column MARITAL Record 0)[1] != 'v' || choiceof(default, 0, column MARITAL Record 0)[2] != 'i' || choiceof(default, 0, column MARITAL Record 0)[3] != 'l');
]]></pathCondition>
</generatedTest>
<log level="message" time="2020-12-18 05:22:13Z" category="coverage" message="coverage increased from 218 to 301 blocks (+83) after flipping Microsoft.Pex.Framework.PexAssume.IsNotNull at 0x0001"/>
<test name="filterMaritalStatus2" state="success" duration="0.24"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
1
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<generatedTest id="1465edca-00fc-4934-9a78-23ffe895dac1" index="3" run="22" status="normaltermination" generated="true" new="true" assemblyName="TestDBApp" name="filterMaritalStatus2288"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="ffffffff" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="ffffffff" namespace="MyApplication"/>
</type>
</parameter>
<rcov name="Block" dcov="7" dtot="0" acov="308" atot="816"/>
<rcov name="asserts" dcov="0" dtot="0" acov="5" atot="12"/>
<value name="result">1</value>
<code><![CDATA[int i;
IPexChoiceRecorder choices = PexChoose.Replay.Setup();
choices.DefaultSession
    .At(0, "Num Records", (object)1)
    .At(1, "column NAME Record 0", "e")
    .At(2, "column ZIP Record 0", "e")
    .At(5, "column SEX Record 0", "e")
    .At(6, "column MARITAL Record 0", "evil")
    .At(7, "column RACE Record 0", "e")
    .At(8, "column TAXSTAT Record 0", "e")
    .At(9, "column DETAIL Record 0", "e")
    .At(10, "column HOUSEHOLDDETAIL Record 0", "e")
    .At(11, "column FATHERORIGIN Record 0", "e")
    .At(12, "column MOTHERORIGIN Record 0", "e")
    .At(13, "column BIRTHCOUNTRY Record 0", "e")
    .At(14, "column CITIZENSHIP Record 0", "e");
using (IPexObserveContext observer = PexObserve.NewTest())
{
  i = this.filterMaritalStatus2();
  Assert.AreEqual<int>(1, i);
  bool ov1 = observer.GetObservedValue<bool>("1");
  Assert.AreEqual<bool>(true, ov1);
}
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Generated;Microsoft.Pex.Framework;Microsoft.VisualStudio.TestTools.UnitTesting"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(PexTestClass))]
public void filterMaritalStatus2288()
{
    int i;
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.DefaultSession
        .At(0, "Num Records", (object)1)
        .At(1, "column NAME Record 0", "e")
        .At(2, "column ZIP Record 0", "e")
        .At(5, "column SEX Record 0", "e")
        .At(6, "column MARITAL Record 0", "evil")
        .At(7, "column RACE Record 0", "e")
        .At(8, "column TAXSTAT Record 0", "e")
        .At(9, "column DETAIL Record 0", "e")
        .At(10, "column HOUSEHOLDDETAIL Record 0", "e")
        .At(11, "column FATHERORIGIN Record 0", "e")
        .At(12, "column MOTHERORIGIN Record 0", "e")
        .At(13, "column BIRTHCOUNTRY Record 0", "e")
        .At(14, "column CITIZENSHIP Record 0", "e");
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      i = this.filterMaritalStatus2();
      Assert.AreEqual<int>(1, i);
      bool ov1 = observer.GetObservedValue<bool>("1");
      Assert.AreEqual<bool>(true, ov1);
    }
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="TestDBApp" location="C:\TaintSQL\TestDBApp\bin\Debug\TestDBApp.dll"/>
<pathCondition><![CDATA[byte[] s1 = new;
uint s0 = &(sbyte[]).$Items + s1 + unchecked(0);
uint s2 = &(short[]).$Items + s1 + unchecked(0);
return s0 < 4294966956u && s2 < 4294965246u && 2u + s2 < 666u + s2 && (4294967293u | 2u ^ 2u + s0) != uint.MaxValue && 8u + s2 < 666u + s2 && 
                                                                                                                       24u + s2 < 666u + s2 && 40u + s2 < 666u + s2 && 56u + s2 < 666u + s2 && 72u + s2 < 666u + s2 && 88u + s2 < 666u + s2 && 104u + s2 < 666u + s2 && 120u + s2 < 666u + s2 && 136u + s2 < 666u + s2 && 
                                                                                                                                                                                                                                                                                                 152u + s2 < 666u + s2 && 168u + s2 < 666u + s2 && 184u + s2 < 666u + s2 && 200u + s2 < 666u + s2 && 216u + s2 < 666u + s2 && 232u + s2 < 666u + s2 && 248u + s2 < 666u + s2 && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       264u + s2 < 666u + s2 && 280u + s2 < 666u + s2 && 296u + s2 < 666u + s2 && 312u + s2 < 666u + s2 && 328u + s2 < 666u + s2 && 344u + s2 < 666u + s2 && 360u + s2 < 666u + s2 && 
u + s2 < 666u + s2 && 392u + s2 < 666u + s2 && 408u + s2 < 666u + s2 && 424u + s2 < 666u + s2 && 440u + s2 < 666u + s2 && 456u + s2 < 666u + s2 && 472u + s2 < 666u + s2 && 
u + s2 < 666u + s2 && 504u + s2 < 666u + s2 && 520u + s2 < 666u + s2 && 536u + s2 < 666u + s2 && 552u + s2 < 666u + s2 && 568u + s2 < 666u + s2 && 584u + s2 < 666u + s2 && 
u + s2 < 666u + s2 && 616u + s2 < 666u + s2 && 632u + s2 < 666u + s2 && 648u + s2 < 666u + s2 && 664u + s2 < 666u + s2 && choiceof(default, 0, column NAME Record 0) != (string)null && 
choiceof(default, 0, column NAME Record 0).Length != 0 && choiceof(default, 0, column ZIP Record 0) != (string)null && choiceof(default, 0, column ZIP Record 0).Length != 0 && 
choiceof(default, 0, column SEX Record 0) != (string)null && choiceof(default, 0, column SEX Record 0).Length != 0 && choiceof(default, 0, column MARITAL Record 0) != (string)null && 
choiceof(default, 0, column RACE Record 0) != (string)null && choiceof(default, 0, column RACE Record 0).Length != 0 && choiceof(default, 0, column TAXSTAT Record 0) != (string)null && 
choiceof(default, 0, column TAXSTAT Record 0).Length != 0 && choiceof(default, 0, column DETAIL Record 0) != (string)null && choiceof(default, 0, column DETAIL Record 0).Length != 0 && 
choiceof(default, 0, column HOUSEHOLDDETAIL Record 0) != (string)null && choiceof(default, 0, column HOUSEHOLDDETAIL Record 0).Length != 0 && 
choiceof(default, 0, column FATHERORIGIN Record 0) != (string)null && choiceof(default, 0, column FATHERORIGIN Record 0).Length != 0 && 
choiceof(default, 0, column MOTHERORIGIN Record 0) != (string)null && choiceof(default, 0, column MOTHERORIGIN Record 0).Length != 0 && 
choiceof(default, 0, column BIRTHCOUNTRY Record 0) != (string)null && choiceof(default, 0, column BIRTHCOUNTRY Record 0).Length != 0 && 
choiceof(default, 0, column CITIZENSHIP Record 0) != (string)null && choiceof(default, 0, column CITIZENSHIP Record 0).Length != 0 && choiceof(default, 0, Num Records) == 1 && 
u | 1u ^ 2u + s0) == uint.MaxValue && 680u + s2 >= 666u + s2 && choiceof(default, 0, column MARITAL Record 0)[3] == 'l' && choiceof(default, 0, column MARITAL Record 0)[2] == 'i' && 
choiceof(default, 0, column MARITAL Record 0)[1] == 'v' && choiceof(default, 0, column MARITAL Record 0).Length == 4 && choiceof(default, 0, column MARITAL Record 0)[0] == 'e';
]]></pathCondition>
</generatedTest>
<log level="message" time="2020-12-18 05:22:13Z" category="coverage" message="coverage increased from 301 to 308 blocks (+7) after flipping MyApplication.PexTestClass.filterMaritalStatus2 at 0x004c"/>
<test name="filterMaritalStatus2" state="success" duration="0.05"/>
<test name="filterMaritalStatus2" state="success" duration="0.06"/>
<test name="filterMaritalStatus2" state="success" duration="0.05"/>
<test name="filterMaritalStatus2" state="success" duration="0.05"/>
<test name="filterMaritalStatus2" state="success" duration="0.06"/>
<test name="filterMaritalStatus2" state="success" duration="0.06"/>
<test name="filterMaritalStatus2" state="success" duration="0.06"/>
<test name="filterMaritalStatus2" state="success" duration="0.06"/>
<test name="filterMaritalStatus2" state="success" duration="0.06"/>
<test name="filterMaritalStatus2" state="success" duration="0.06"/>
<test name="filterMaritalStatus2" state="success" duration="0.06"/>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.06"/>
<test name="filterMaritalStatus2" state="success" duration="0.06"/>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.06"/>
<test name="filterMaritalStatus2" state="success" duration="0.06"/>
<test name="filterMaritalStatus2" state="success" duration="0.06"/>
<test name="filterMaritalStatus2" state="success" duration="0.06"/>
<test name="filterMaritalStatus2" state="success" duration="0.05"/>
<test name="filterMaritalStatus2" state="success" duration="0.05"/>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.23"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
0
]]></console>
</test>
<generatedTest id="620c5465-5eba-4fa5-b671-cfceb042fc8c" index="4" run="46" status="normaltermination" generated="true" new="true" assemblyName="TestDBApp" name="filterMaritalStatus274202"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="ffffffff" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="ffffffff" namespace="MyApplication"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="308" atot="816"/>
<rcov name="asserts" dcov="0" dtot="0" acov="5" atot="12"/>
<value name="result">0</value>
<code><![CDATA[int i;
IPexChoiceRecorder choices = PexChoose.Replay.Setup();
choices.DefaultSession
    .At(0, "Num Records", (object)2)
    .At(1, "column NAME Record 0", "\0")
    .At(2, "column ZIP Record 0", "\0")
    .At(5, "column SEX Record 0", "\0")
    .At(6, "column MARITAL Record 0", "\0")
    .At(7, "column RACE Record 0", "\0")
    .At(8, "column TAXSTAT Record 0", "\0")
    .At(9, "column DETAIL Record 0", "\0\0\0\0\0\0\0\0")
    .At(10, "column HOUSEHOLDDETAIL Record 0", "\0")
    .At(11, "column FATHERORIGIN Record 0", "\0\0")
    .At(12, "column MOTHERORIGIN Record 0", "\0")
    .At(13, "column BIRTHCOUNTRY Record 0", "\0")
    .At(14, "column CITIZENSHIP Record 0", "\0")
    .At(15, "column NAME Record 1", "\0")
    .At(16, "column ZIP Record 1", "\0")
    .At(19, "column SEX Record 1", "\0")
    .At(20, "column MARITAL Record 1", "\0")
    .At(21, "column RACE Record 1", "\0")
    .At(22, "column TAXSTAT Record 1", "\0")
    .At(23, "column DETAIL Record 1", "\0")
    .At(24, "column HOUSEHOLDDETAIL Record 1", "\0")
    .At(25, "column FATHERORIGIN Record 1", "\0")
    .At(26, "column MOTHERORIGIN Record 1", "\0")
    .At(27, "column BIRTHCOUNTRY Record 1", "\0")
    .At(28, "column CITIZENSHIP Record 1", "\0");
i = this.filterMaritalStatus2();
Assert.AreEqual<int>(0, i);
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Generated;Microsoft.Pex.Framework;Microsoft.VisualStudio.TestTools.UnitTesting"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(PexTestClass))]
public void filterMaritalStatus274202()
{
    int i;
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.DefaultSession
        .At(0, "Num Records", (object)2)
        .At(1, "column NAME Record 0", "\0")
        .At(2, "column ZIP Record 0", "\0")
        .At(5, "column SEX Record 0", "\0")
        .At(6, "column MARITAL Record 0", "\0")
        .At(7, "column RACE Record 0", "\0")
        .At(8, "column TAXSTAT Record 0", "\0")
        .At(9, "column DETAIL Record 0", "\0\0\0\0\0\0\0\0")
        .At(10, "column HOUSEHOLDDETAIL Record 0", "\0")
        .At(11, "column FATHERORIGIN Record 0", "\0\0")
        .At(12, "column MOTHERORIGIN Record 0", "\0")
        .At(13, "column BIRTHCOUNTRY Record 0", "\0")
        .At(14, "column CITIZENSHIP Record 0", "\0")
        .At(15, "column NAME Record 1", "\0")
        .At(16, "column ZIP Record 1", "\0")
        .At(19, "column SEX Record 1", "\0")
        .At(20, "column MARITAL Record 1", "\0")
        .At(21, "column RACE Record 1", "\0")
        .At(22, "column TAXSTAT Record 1", "\0")
        .At(23, "column DETAIL Record 1", "\0")
        .At(24, "column HOUSEHOLDDETAIL Record 1", "\0")
        .At(25, "column FATHERORIGIN Record 1", "\0")
        .At(26, "column MOTHERORIGIN Record 1", "\0")
        .At(27, "column BIRTHCOUNTRY Record 1", "\0")
        .At(28, "column CITIZENSHIP Record 1", "\0");
    i = this.filterMaritalStatus2();
    Assert.AreEqual<int>(0, i);
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="TestDBApp" location="C:\TaintSQL\TestDBApp\bin\Debug\TestDBApp.dll"/>
<pathCondition><![CDATA[byte[] s1 = new;
uint s0 = &(sbyte[]).$Items + s1 + unchecked(0);
uint s2 = &(short[]).$Items + s1 + unchecked(0);
return s0 < 4294966956u && s2 < 4294965246u && 2u + s2 < 666u + s2 && (4294967293u | 2u ^ 2u + s0) != uint.MaxValue && 
                                                                      8u + s2 < 666u + s2 && 24u + s2 < 666u + s2 && 40u + s2 < 666u + s2 && 56u + s2 < 666u + s2 && 72u + s2 < 666u + s2 && 88u + s2 < 666u + s2 && 104u + s2 < 666u + s2 && 
                                                                                                                                                                                                                     120u + s2 < 666u + s2 && 136u + s2 < 666u + s2 && 152u + s2 < 666u + s2 && 168u + s2 < 666u + s2 && 184u + s2 < 666u + s2 && 200u + s2 < 666u + s2 && 216u + s2 < 666u + s2 && 
                                                                                                                                                                                                                                                                                                                                                                           232u + s2 < 666u + s2 && 248u + s2 < 666u + s2 && 264u + s2 < 666u + s2 && 280u + s2 < 666u + s2 && 296u + s2 < 666u + s2 && 312u + s2 < 666u + s2 && 328u + s2 < 666u + s2 && 
u + s2 < 666u + s2 && 360u + s2 < 666u + s2 && 376u + s2 < 666u + s2 && 392u + s2 < 666u + s2 && 408u + s2 < 666u + s2 && 424u + s2 < 666u + s2 && 440u + s2 < 666u + s2 && 
u + s2 < 666u + s2 && 472u + s2 < 666u + s2 && 488u + s2 < 666u + s2 && 504u + s2 < 666u + s2 && 520u + s2 < 666u + s2 && 536u + s2 < 666u + s2 && 552u + s2 < 666u + s2 && 
u + s2 < 666u + s2 && 584u + s2 < 666u + s2 && 600u + s2 < 666u + s2 && 616u + s2 < 666u + s2 && 632u + s2 < 666u + s2 && 648u + s2 < 666u + s2 && 664u + s2 < 666u + s2 && 
choiceof(default, 0, column NAME Record 0) != (string)null && choiceof(default, 0, column NAME Record 0).Length != 0 && choiceof(default, 0, column ZIP Record 0) != (string)null && 
choiceof(default, 0, column ZIP Record 0).Length != 0 && choiceof(default, 0, column SEX Record 0) != (string)null && choiceof(default, 0, column SEX Record 0).Length != 0 && 
choiceof(default, 0, column MARITAL Record 0) != (string)null && choiceof(default, 0, column MARITAL Record 0).Length != 0 && choiceof(default, 0, column RACE Record 0) != (string)null && 
choiceof(default, 0, column RACE Record 0).Length != 0 && choiceof(default, 0, column TAXSTAT Record 0) != (string)null && choiceof(default, 0, column TAXSTAT Record 0).Length != 0 && 
choiceof(default, 0, column DETAIL Record 0) != (string)null && choiceof(default, 0, column DETAIL Record 0).Length != 0 && choiceof(default, 0, column HOUSEHOLDDETAIL Record 0) != (string)null && 
choiceof(default, 0, column HOUSEHOLDDETAIL Record 0).Length != 0 && choiceof(default, 0, column FATHERORIGIN Record 0) != (string)null && 
choiceof(default, 0, column FATHERORIGIN Record 0).Length != 0 && choiceof(default, 0, column MOTHERORIGIN Record 0) != (string)null && 
choiceof(default, 0, column MOTHERORIGIN Record 0).Length != 0 && choiceof(default, 0, column BIRTHCOUNTRY Record 0) != (string)null && 
choiceof(default, 0, column BIRTHCOUNTRY Record 0).Length != 0 && choiceof(default, 0, column CITIZENSHIP Record 0) != (string)null && 
choiceof(default, 0, column CITIZENSHIP Record 0).Length != 0 && choiceof(default, 0, column NAME Record 1) != (string)null && choiceof(default, 0, column NAME Record 1).Length != 0 && 
choiceof(default, 0, column ZIP Record 1) != (string)null && choiceof(default, 0, column ZIP Record 1).Length != 0 && choiceof(default, 0, column SEX Record 1) != (string)null && 
choiceof(default, 0, column SEX Record 1).Length != 0 && choiceof(default, 0, column MARITAL Record 1) != (string)null && choiceof(default, 0, column MARITAL Record 1).Length != 0 && 
choiceof(default, 0, column RACE Record 1) != (string)null && choiceof(default, 0, column RACE Record 1).Length != 0 && choiceof(default, 0, column TAXSTAT Record 1) != (string)null && 
choiceof(default, 0, column TAXSTAT Record 1).Length != 0 && choiceof(default, 0, column DETAIL Record 1) != (string)null && choiceof(default, 0, column DETAIL Record 1).Length != 0 && 
choiceof(default, 0, column HOUSEHOLDDETAIL Record 1) != (string)null && choiceof(default, 0, column HOUSEHOLDDETAIL Record 1).Length != 0 && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              choiceof(default, 0, column FATHERORIGIN Record 1) != (string)null && choiceof(default, 0, column FATHERORIGIN Record 1).Length != 0 && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    choiceof(default, 0, column MOTHERORIGIN Record 1) != (string)null && choiceof(default, 0, column MOTHERORIGIN Record 1).Length != 0 && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          choiceof(default, 0, column BIRTHCOUNTRY Record 1) != (string)null && choiceof(default, 0, column BIRTHCOUNTRY Record 1).Length != 0 && 
choiceof(default, 0, column CITIZENSHIP Record 1) != (string)null && choiceof(default, 0, column CITIZENSHIP Record 1).Length != 0 && choiceof(default, 0, Num Records) == 2 && 
u | 1u ^ 2u + s0) == uint.MaxValue && 680u + s2 >= 666u + s2 && (choiceof(default, 0, column MARITAL Record 0).Length != 4 || choiceof(default, 0, column MARITAL Record 0)[0] != 'e' || 
choiceof(default, 0, column MARITAL Record 0)[1] != 'v' || choiceof(default, 0, column MARITAL Record 0)[2] != 'i' || choiceof(default, 0, column MARITAL Record 0)[3] != 'l') && 
choiceof(default, 0, column MARITAL Record 1).Length != 4 || choiceof(default, 0, column MARITAL Record 1)[0] != 'e' || 
choiceof(default, 0, column MARITAL Record 1)[1] != 'v' || choiceof(default, 0, column MARITAL Record 1)[2] != 'i' || choiceof(default, 0, column MARITAL Record 1)[3] != 'l');
]]></pathCondition>
</generatedTest>
<test name="filterMaritalStatus2" state="success" duration="0.05"/>
<test name="filterMaritalStatus2" state="success" duration="0.27"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
1
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.05"/>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.05"/>
<test name="filterMaritalStatus2" state="success" duration="0.06"/>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.26"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
1
NAME :l
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.30"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
2
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<generatedTest id="dc5cd583-87dc-4d8e-a3c8-bfb660ebabd7" index="5" run="57" status="normaltermination" generated="true" new="true" assemblyName="TestDBApp" name="filterMaritalStatus2558"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="ffffffff" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="ffffffff" namespace="MyApplication"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="308" atot="816"/>
<rcov name="asserts" dcov="0" dtot="0" acov="5" atot="12"/>
<value name="result">2</value>
<code><![CDATA[int i;
IPexChoiceRecorder choices = PexChoose.Replay.Setup();
choices.DefaultSession
    .At(0, "Num Records", (object)2)
    .At(1, "column NAME Record 0", "e")
    .At(2, "column ZIP Record 0", "e")
    .At(5, "column SEX Record 0", "e")
    .At(6, "column MARITAL Record 0", "evil")
    .At(7, "column RACE Record 0", "e")
    .At(8, "column TAXSTAT Record 0", "e")
    .At(9, "column DETAIL Record 0", "e")
    .At(10, "column HOUSEHOLDDETAIL Record 0", "e")
    .At(11, "column FATHERORIGIN Record 0", "e")
    .At(12, "column MOTHERORIGIN Record 0", "e")
    .At(13, "column BIRTHCOUNTRY Record 0", "e")
    .At(14, "column CITIZENSHIP Record 0", "e")
    .At(15, "column NAME Record 1", "e")
    .At(16, "column ZIP Record 1", "e")
    .At(19, "column SEX Record 1", "e")
    .At(20, "column MARITAL Record 1", "evil")
    .At(21, "column RACE Record 1", "e")
    .At(22, "column TAXSTAT Record 1", "e")
    .At(23, "column DETAIL Record 1", "e")
    .At(24, "column HOUSEHOLDDETAIL Record 1", "e")
    .At(25, "column FATHERORIGIN Record 1", "e")
    .At(26, "column MOTHERORIGIN Record 1", "e")
    .At(27, "column BIRTHCOUNTRY Record 1", "e")
    .At(28, "column CITIZENSHIP Record 1", "e");
using (IPexObserveContext observer = PexObserve.NewTest())
{
  i = this.filterMaritalStatus2();
  Assert.AreEqual<int>(2, i);
  bool ov1 = observer.GetObservedValue<bool>("1");
  Assert.AreEqual<bool>(true, ov1);
  bool ov101 = observer.GetObservedValue<bool>("101");
  Assert.AreEqual<bool>(true, ov101);
}
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Generated;Microsoft.Pex.Framework;Microsoft.VisualStudio.TestTools.UnitTesting"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(PexTestClass))]
public void filterMaritalStatus2558()
{
    int i;
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.DefaultSession
        .At(0, "Num Records", (object)2)
        .At(1, "column NAME Record 0", "e")
        .At(2, "column ZIP Record 0", "e")
        .At(5, "column SEX Record 0", "e")
        .At(6, "column MARITAL Record 0", "evil")
        .At(7, "column RACE Record 0", "e")
        .At(8, "column TAXSTAT Record 0", "e")
        .At(9, "column DETAIL Record 0", "e")
        .At(10, "column HOUSEHOLDDETAIL Record 0", "e")
        .At(11, "column FATHERORIGIN Record 0", "e")
        .At(12, "column MOTHERORIGIN Record 0", "e")
        .At(13, "column BIRTHCOUNTRY Record 0", "e")
        .At(14, "column CITIZENSHIP Record 0", "e")
        .At(15, "column NAME Record 1", "e")
        .At(16, "column ZIP Record 1", "e")
        .At(19, "column SEX Record 1", "e")
        .At(20, "column MARITAL Record 1", "evil")
        .At(21, "column RACE Record 1", "e")
        .At(22, "column TAXSTAT Record 1", "e")
        .At(23, "column DETAIL Record 1", "e")
        .At(24, "column HOUSEHOLDDETAIL Record 1", "e")
        .At(25, "column FATHERORIGIN Record 1", "e")
        .At(26, "column MOTHERORIGIN Record 1", "e")
        .At(27, "column BIRTHCOUNTRY Record 1", "e")
        .At(28, "column CITIZENSHIP Record 1", "e");
    using (IPexObserveContext observer = PexObserve.NewTest())
    {
      i = this.filterMaritalStatus2();
      Assert.AreEqual<int>(2, i);
      bool ov1 = observer.GetObservedValue<bool>("1");
      Assert.AreEqual<bool>(true, ov1);
      bool ov101 = observer.GetObservedValue<bool>("101");
      Assert.AreEqual<bool>(true, ov101);
    }
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="TestDBApp" location="C:\TaintSQL\TestDBApp\bin\Debug\TestDBApp.dll"/>
<pathCondition><![CDATA[byte[] s1 = new;
uint s0 = &(sbyte[]).$Items + s1 + unchecked(0);
uint s2 = &(short[]).$Items + s1 + unchecked(0);
return s0 < 4294966956u && s2 < 4294965246u && 2u + s2 < 666u + s2 && (4294967293u | 2u ^ 2u + s0) != uint.MaxValue && 8u + s2 < 666u + s2 && 
                                                                                                                       24u + s2 < 666u + s2 && 40u + s2 < 666u + s2 && 56u + s2 < 666u + s2 && 72u + s2 < 666u + s2 && 88u + s2 < 666u + s2 && 104u + s2 < 666u + s2 && 120u + s2 < 666u + s2 && 136u + s2 < 666u + s2 && 
                                                                                                                                                                                                                                                                                                 152u + s2 < 666u + s2 && 168u + s2 < 666u + s2 && 184u + s2 < 666u + s2 && 200u + s2 < 666u + s2 && 216u + s2 < 666u + s2 && 232u + s2 < 666u + s2 && 248u + s2 < 666u + s2 && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                       264u + s2 < 666u + s2 && 280u + s2 < 666u + s2 && 296u + s2 < 666u + s2 && 312u + s2 < 666u + s2 && 328u + s2 < 666u + s2 && 344u + s2 < 666u + s2 && 360u + s2 < 666u + s2 && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             376u + s2 < 666u + s2 && 392u + s2 < 666u + s2 && 408u + s2 < 666u + s2 && 424u + s2 < 666u + s2 && 440u + s2 < 666u + s2 && 456u + s2 < 666u + s2 && 472u + s2 < 666u + s2 && 
u + s2 < 666u + s2 && 504u + s2 < 666u + s2 && 520u + s2 < 666u + s2 && 536u + s2 < 666u + s2 && 552u + s2 < 666u + s2 && 568u + s2 < 666u + s2 && 584u + s2 < 666u + s2 && 
u + s2 < 666u + s2 && 616u + s2 < 666u + s2 && 632u + s2 < 666u + s2 && 648u + s2 < 666u + s2 && 664u + s2 < 666u + s2 && choiceof(default, 0, column NAME Record 0) != (string)null && 
choiceof(default, 0, column NAME Record 0).Length != 0 && choiceof(default, 0, column ZIP Record 0) != (string)null && choiceof(default, 0, column ZIP Record 0).Length != 0 && 
choiceof(default, 0, column SEX Record 0) != (string)null && choiceof(default, 0, column SEX Record 0).Length != 0 && choiceof(default, 0, column MARITAL Record 0) != (string)null && 
choiceof(default, 0, column RACE Record 0) != (string)null && choiceof(default, 0, column RACE Record 0).Length != 0 && choiceof(default, 0, column TAXSTAT Record 0) != (string)null && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           choiceof(default, 0, column TAXSTAT Record 0).Length != 0 && choiceof(default, 0, column DETAIL Record 0) != (string)null && choiceof(default, 0, column DETAIL Record 0).Length != 0 && 
choiceof(default, 0, column HOUSEHOLDDETAIL Record 0) != (string)null && choiceof(default, 0, column HOUSEHOLDDETAIL Record 0).Length != 0 && 
choiceof(default, 0, column FATHERORIGIN Record 0) != (string)null && choiceof(default, 0, column FATHERORIGIN Record 0).Length != 0 && 
choiceof(default, 0, column MOTHERORIGIN Record 0) != (string)null && choiceof(default, 0, column MOTHERORIGIN Record 0).Length != 0 && 
choiceof(default, 0, column BIRTHCOUNTRY Record 0) != (string)null && choiceof(default, 0, column BIRTHCOUNTRY Record 0).Length != 0 && 
choiceof(default, 0, column CITIZENSHIP Record 0) != (string)null && choiceof(default, 0, column CITIZENSHIP Record 0).Length != 0 && choiceof(default, 0, column NAME Record 1) != (string)null && 
choiceof(default, 0, column NAME Record 1).Length != 0 && choiceof(default, 0, column ZIP Record 1) != (string)null && choiceof(default, 0, column ZIP Record 1).Length != 0 && 
choiceof(default, 0, column SEX Record 1) != (string)null && choiceof(default, 0, column SEX Record 1).Length != 0 && choiceof(default, 0, column MARITAL Record 1) != (string)null && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      choiceof(default, 0, column RACE Record 1) != (string)null && choiceof(default, 0, column RACE Record 1).Length != 0 && choiceof(default, 0, column TAXSTAT Record 1) != (string)null && 
choiceof(default, 0, column TAXSTAT Record 1).Length != 0 && choiceof(default, 0, column DETAIL Record 1) != (string)null && choiceof(default, 0, column DETAIL Record 1).Length != 0 && 
choiceof(default, 0, column HOUSEHOLDDETAIL Record 1) != (string)null && choiceof(default, 0, column HOUSEHOLDDETAIL Record 1).Length != 0 && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    choiceof(default, 0, column FATHERORIGIN Record 1) != (string)null && choiceof(default, 0, column FATHERORIGIN Record 1).Length != 0 && 
choiceof(default, 0, column MOTHERORIGIN Record 1) != (string)null && choiceof(default, 0, column MOTHERORIGIN Record 1).Length != 0 && 
choiceof(default, 0, column BIRTHCOUNTRY Record 1) != (string)null && choiceof(default, 0, column BIRTHCOUNTRY Record 1).Length != 0 && 
choiceof(default, 0, column CITIZENSHIP Record 1) != (string)null && choiceof(default, 0, column CITIZENSHIP Record 1).Length != 0 && 
choiceof(default, 0, Num Records) == 2 && (4294967294u | 1u ^ 2u + s0) == uint.MaxValue && 680u + s2 >= 666u + s2 && choiceof(default, 0, column MARITAL Record 0)[3] == 'l' && 
choiceof(default, 0, column MARITAL Record 0)[2] == 'i' && choiceof(default, 0, column MARITAL Record 0)[1] == 'v' && choiceof(default, 0, column MARITAL Record 0).Length == 4 && 
choiceof(default, 0, column MARITAL Record 0)[0] == 'e' && choiceof(default, 0, column MARITAL Record 1)[3] == 'l' && choiceof(default, 0, column MARITAL Record 1)[2] == 'i' && 
choiceof(default, 0, column MARITAL Record 1)[1] == 'v' && choiceof(default, 0, column MARITAL Record 1).Length == 4 && choiceof(default, 0, column MARITAL Record 1)[0] == 'e';
]]></pathCondition>
</generatedTest>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.06"/>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<log level="message" time="2020-12-18 05:22:18Z" category="progress" message="   67 runs, 308/816 blocks covered"/>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.26"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
0
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.29"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
1
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.33"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
2
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.31"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
1
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.34"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
2
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.09"/>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.31"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
2
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.34"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
3
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.29"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
1
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.09"/>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.09"/>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.07"/>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.29"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
0
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.31"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
1
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.34"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
2
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.09"/>
<test name="filterMaritalStatus2" state="success" duration="0.09"/>
<test name="filterMaritalStatus2" state="success" duration="0.32"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
1
NAME :l
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.34"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
2
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.36"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
3
NAME :\u0000
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :\u0000
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :\u0000
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.33"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
1
NAME :l
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.09"/>
<test name="filterMaritalStatus2" state="success" duration="0.39"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
3
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.39"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
3
NAME :\u0000
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :\u0000
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :\u0000
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.34"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
2
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<log level="message" time="2020-12-18 05:22:31Z" category="progress" message="  125 runs (20.00% satisfied assumptions), 308/816 blocks covered"/>
<test name="filterMaritalStatus2" state="success" duration="0.34"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
2
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.30"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
1
NAME :l
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.08"/>
<test name="filterMaritalStatus2" state="success" duration="0.35"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
2
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.09"/>
<test name="filterMaritalStatus2" state="success" duration="0.37"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
3
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.41"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
4
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.09"/>
<test name="filterMaritalStatus2" state="success" duration="0.09"/>
<test name="filterMaritalStatus2" state="success" duration="0.35"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
2
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.09"/>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.09"/>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.09"/>
<test name="filterMaritalStatus2" state="success" duration="0.09"/>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.09"/>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.11"/>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.33"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
0
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.38"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
1
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.38"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
2
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.39"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
3
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.39"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
2
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.34"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
1
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.38"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
2
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.33"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
1
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.36"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
1
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.39"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
3
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.33"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
1
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.43"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
3
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.09"/>
<test name="filterMaritalStatus2" state="success" duration="0.09"/>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.36"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
2
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.11"/>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.11"/>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<log level="message" time="2020-12-18 05:22:45Z" category="progress" message="  179 runs (24.58% satisfied assumptions), 308/816 blocks covered"/>
<test name="filterMaritalStatus2" state="success" duration="0.12"/>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.11"/>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.11"/>
<test name="filterMaritalStatus2" state="success" duration="0.36"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
0
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.37"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
1
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.11"/>
<test name="filterMaritalStatus2" state="success" duration="0.35"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
1
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.35"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
1
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.38"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
2
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.39"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
2
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.39"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
2
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.36"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
1
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.35"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
1
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.38"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
2
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.39"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
2
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.37"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
2
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.11"/>
<test name="filterMaritalStatus2" state="success" duration="0.42"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
3
NAME :\u0000
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :\u0000
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :\u0000
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<log level="message" time="2020-12-18 05:22:53Z" category="progress" message="  250 constraint systems (80.80% solved, 19.20% proven unsatisfiable), flipping location PexAssume.IsTrue(Boolean) at 0x0001 took 3s (38.20%)"/>
<test name="filterMaritalStatus2" state="success" duration="0.40"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
3
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.38"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
2
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.40"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
3
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.11"/>
<test name="filterMaritalStatus2" state="success" duration="0.45"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
4
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :e
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.11"/>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.38"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
2
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.11"/>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.11"/>
<test name="filterMaritalStatus2" state="success" duration="0.36"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
1
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.11"/>
<test name="filterMaritalStatus2" state="success" duration="0.43"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
3
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :v
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.12"/>
<test name="filterMaritalStatus2" state="success" duration="0.11"/>
<test name="filterMaritalStatus2" state="success" duration="0.44"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
4
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.41"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
3
NAME :\u0000
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :\u0000
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :\u0000
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.11"/>
<test name="filterMaritalStatus2" state="success" duration="0.11"/>
<test name="filterMaritalStatus2" state="success" duration="0.12"/>
<test name="filterMaritalStatus2" state="success" duration="0.11"/>
<test name="filterMaritalStatus2" state="success" duration="0.43"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
4
NAME :l
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :l
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :l
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :l
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.43"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
4
NAME :ii
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.11"/>
<log level="message" time="2020-12-18 05:23:01Z" category="progress" message="  227 runs (29.96% satisfied assumptions), 308/816 blocks covered"/>
<test name="filterMaritalStatus2" state="success" duration="0.11"/>
<test name="filterMaritalStatus2" state="success" duration="0.38"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
2
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :i
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.11"/>
<test name="filterMaritalStatus2" state="success" duration="0.10"/>
<test name="filterMaritalStatus2" state="success" duration="0.42"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
3
NAME :\u0000
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :\u0000
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :\u0000
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.42"><console stream="out" mode="memory"><![CDATA[WHERE
WHERE
3
NAME :\u0000
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :\u0000
NAME_tag:00000001
MA :evil
MA_tag:00000001
NAME :\u0000
NAME_tag:00000001
MA :evil
MA_tag:00000001
]]></console>
</test>
<test name="filterMaritalStatus2" state="success" duration="0.12"/>
<test name="filterMaritalStatus2" state="success" duration="0.11"/>
<test name="filterMaritalStatus2" state="success" duration="0.25"><console stream="out" mode="memory"><![CDATA[WHERE
]]></console>
</test>
<boundary kind="cancelled" value="true" message="cancellation requested"/>
<coverage domain="usercodeundertest" unit="block" covered="308" total="816" coveredRatio="0.37745098039215685"/>
<coverage domain="usercodeundertest" unit="asserts" covered="4" total="11" coveredRatio="0.36363636363636365"/>
<sourceCoverage xml="cov\e317\cov.xml" html="cov\e317\cov.html"/>
<goal kind="assert reachability by id" reached="true" runCount="236">all locations reached</goal>
<result name="filterMaritalStatus2()" state="success" duration="55.5186262290842"/>
<duration start="2020-12-18 05:22:09Z" end="2020-12-18 05:23:04Z" seconds="55.546875"/>
<trajectory><image src="fix\myapplicationpex637438945847057500.trajectories.png" width="800" height="1600"/>
</trajectory>
</exploration>
<coverage domain="usercodeundertest" unit="block" covered="308" total="816" coveredRatio="0.37745098039215685"/>
<coverage domain="usercodeundertest" unit="asserts" covered="4" total="11" coveredRatio="0.36363636363636365"/>
<sourceCoverage xml="cov\t567\cov.xml" html="cov\t567\cov.html"/>
<duration start="2020-12-18 05:22:09Z" end="2020-12-18 05:23:05Z" seconds="56.0625"/>
</fixture>
<coverage domain="usercodeundertest" unit="block" covered="308" total="816" coveredRatio="0.37745098039215685"/>
<coverage domain="usercodeundertest" unit="asserts" covered="4" total="11" coveredRatio="0.36363636363636365"/>
<sourceCoverage xml="cov\a32781230\cov.xml" html="cov\a32781230\cov.html"/>
<duration start="2020-12-18 05:22:09Z" end="2020-12-18 05:23:05Z" seconds="56.578125"/>
</assembly>
<duration start="2020-12-18 05:22:09Z" end="2020-12-18 05:23:05Z" seconds="56.71875"/>
<background/>
</pex>
