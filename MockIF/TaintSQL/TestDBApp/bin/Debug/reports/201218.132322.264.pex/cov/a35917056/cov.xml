<documents created="2020-12-18 05:24:22Z"><document src="C:\TaintSQL\MacroScopeCE\CaseInsensitiveStringStream.cs" renderPrefix="s0"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using Antlr.Runtime;

namespace MacroScope
{
    /// <summary>
    /// Look ahead for tokenizing is all lowercase, whereas the original case
    /// of an input stream is preserved.
    /// </summary>
    /// <remarks>
    /// Copied from <c>http://www.antlr.org/wiki/pages/viewpage.action?pageId=1782</c>.
    /// </remarks>
    public class CaseInsensitiveStringStream : ANTLRStringStream
    {
        public CaseInsensitiveStringStream(char[] data, int numberOfActualCharsInArray) : base(data, numberOfActualCharsInArray) { }

        public CaseInsensitiveStringStream() { }

        ]]></source>
</chunk>
<method name=".ctor" namespace="MacroScope" type="MacroScope.CaseInsensitiveStringStream" typeName="CaseInsensitiveStringStream" token="6000094" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
</hits>
<tags><tag offset="0002">call to uninstrumented method ANTLRStringStream..ctor(String)</tag>
</tags>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode" tag="true"><tooltip><![CDATA[call to uninstrumented method ANTLRStringStream..ctor(String)]]></tooltip>
<source><![CDATA[public CaseInsensitiveStringStream(string input) : base(input)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0008" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0009" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        // Only the lookahead is converted to lowercase. The original case is preserved in the stream.
        public override int LA(int i)
        ]]></source>
</chunk>
<method name="LA" namespace="MacroScope" type="MacroScope.CaseInsensitiveStringStream" typeName="CaseInsensitiveStringStream" token="6000095" module="MacroScope.dll"><hits><hit index="0" value="441"/>
<hit index="3" value="441"/>
<hit index="4" value="441"/>
<hit index="5" value="6"/>
<hit index="6" value="435"/>
<hit index="7" value="435"/>
<hit index="8" value="435"/>
<hit index="9" value="435"/>
<hit index="10" value="435"/>
<hit index="11" value="435"/>
<hit index="12" value="441"/>
<hit index="13" value="441"/>
<hit index="14" value="435"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="6" total="8" coveredRatio="0.75"/>
</method>
<chunk hits="441" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="441" offset="0001" domain="userortestcode"><source><![CDATA[if (i == 0)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[return 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="441" offset="0011" domain="userortestcode"><source><![CDATA[if (i < 0)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="001c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="001d" domain="userortestcode"><source><![CDATA[i++;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0022" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="441" offset="0023" domain="userortestcode"><source><![CDATA[if (((p + i) - 1) >= n)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0039" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="6" offset="003a" domain="userortestcode"><source><![CDATA[return (int)CharStreamConstants.EOF;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="435" offset="003e" domain="userortestcode"><source><![CDATA[return Char.ToLowerInvariant(data[(p + i) - 1]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ // This is how "case insensitive" is defined, i.e., could also use a special culture...
        ]]></source>
</chunk>
<chunk hits="441" offset="0057" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    }
}
]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MacroScopeCE\MacroScopeLexer.cs" renderPrefix="s1"><chunk hits="-1" domain="unknown"><source><![CDATA[// $ANTLR 3.0.1 MacroScope\\MacroScope.g 2008-01-12 20:02:55
namespace 
	MacroScope

{

using System;
using Antlr.Runtime;
using IList 		= System.Collections.IList;
using ArrayList 	= System.Collections.ArrayList;
using Stack 		= Antlr.Runtime.Collections.StackList;

using IDictionary	= System.Collections.IDictionary;
using Hashtable 	= System.Collections.Hashtable;


public class MacroScopeLexer : Lexer 
{
    public const int CAST = 62;
    public const int STAR = 40;
    public const int MOD = 76;
    public const int GREATERTHANOREQUALTO1 = 81;
    public const int DOT_STAR = 50;
    public const int CASE = 57;
    public const int DAY = 86;
    public const int NOT = 30;
    public const int ASSIGNEQUAL = 14;
    public const int EOF = -1;
    public const int MONTH = 85;
    public const int RPAREN = 7;
    public const int FULL = 44;
    public const int Variable = 52;
    public const int ESCAPE = 34;
    public const int INSERT = 4;
    public const int NonQuotedIdentifier = 56;
    public const int SELECT = 16;
    public const int INTO = 5;
    public const int DIVIDE = 75;
    public const int PLACEHOLDER = 51;
    public const int GREATERTHAN = 82;
    public const int SECOND = 89;
    public const int ASC = 24;
    public const int UnicodeStringLiteral = 64;
    public const int NULL = 32;
    public const int ELSE = 60;
    public const int ON = 48;
    public const int DELETE = 11;
    public const int GROUP = 26;
    public const int MAccessDateTime = 69;
    public const int OR = 28;
    public const int LESSTHANOREQUALTO1 = 79;
    public const int END = 61;
    public const int FROM = 12;
    public const int DISTINCT = 18;
    public const int Letter = 90;
    public const int WHERE = 21;
    public const int UnicodeStringRun = 96;
    public const int INNER = 41;
    public const int YEAR = 84;
    public const int ORDER = 22;
    public const int UPDATE = 9;
    public const int AsciiStringLiteral = 65;
    public const int Exponent = 92;
    public const int FOR = 54;
    public const int AND = 29;
    public const int CROSS = 47;
    public const int INTERVAL = 71;
    public const int LPAREN = 6;
    public const int AS = 49;
    public const int IN = 36;
    public const int THEN = 59;
    public const int Number = 93;
    public const int COMMA = 13;
    public const int IS = 31;
    public const int LEFT = 42;
    public const int SOME = 38;
    public const int ALL = 17;
    public const int Real = 67;
    public const int PLUS = 72;
    public const int EXISTS = 37;
    public const int EXTRACT = 55;
    public const int DOT = 63;
    public const int Whitespace = 98;
    public const int LIKE = 33;
    public const int OUTER = 45;
    public const int HexLiteral = 68;
    public const int BY = 23;
    public const int LESSTHAN = 80;
    public const int AsciiStringRun = 95;
    public const int DEFAULT = 15;
    public const int VALUES = 8;
    public const int RIGHT = 43;
    public const int SET = 10;
    public const int HAVING = 27;
    public const int MINUS = 73;
    public const int HOUR = 87;
    public const int Digit = 91;
    public const int Tokens = 99;
    public const int QuotedIdentifier = 66;
    public const int WordTail = 94;
    public const int JOIN = 46;
    public const int UNION = 83;
    public const int SUBSTRING = 53;
    public const int COLON = 97;
    public const int STRCONCAT = 74;
    public const int ANY = 39;
    public const int WHEN = 58;
    public const int NOTEQUAL1 = 77;
    public const int NOTEQUAL2 = 78;
    public const int DESC = 25;
    public const int MINUTE = 88;
    public const int TOP = 19;
    public const int BETWEEN = 35;
    public const int Integer = 20;
    public const int Iso8601DateTime = 70;
    
    	public override void ReportError(RecognitionException e)
    	{
    	}


    public MacroScopeLexer() 
    {
		InitializeCyclicDFAs();
    }
    ]]></source>
</chunk>
<method name=".ctor" namespace="MacroScope" type="MacroScope.MacroScopeLexer" typeName="MacroScopeLexer" token="6000003" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
</hits>
<tags><tag offset="0002">call to uninstrumented method Lexer..ctor(ICharStream)</tag>
</tags>
<coverage domain="userortestcode" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode" tag="true"><tooltip><![CDATA[call to uninstrumented method Lexer..ctor(ICharStream)]]></tooltip>
<source><![CDATA[public MacroScopeLexer(ICharStream input) 
		: base(input)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
	]]></source>
</chunk>
<chunk hits="2" offset="0008" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
		]]></source>
</chunk>
<chunk hits="2" offset="0009" domain="userortestcode"><source><![CDATA[InitializeCyclicDFAs();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0010" domain="userortestcode"><source><![CDATA[ruleMemo = new IDictionary[97+1];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
     ]]></source>
</chunk>
<chunk hits="4" offset="001d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
    override public string GrammarFileName
    {
    	get { return "MacroScope\\MacroScope.g";} 
    }

    // $ANTLR start ALL 
    public void mALL() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = ALL;
            // MacroScope\\MacroScope.g:801:5: ( 'all' )
            // MacroScope\\MacroScope.g:801:7: 'all'
            {
            	Match("all"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end ALL

    // $ANTLR start AND 
    public void mAND() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = AND;
            // MacroScope\\MacroScope.g:802:5: ( 'and' )
            // MacroScope\\MacroScope.g:802:7: 'and'
            {
            	Match("and"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end AND

    // $ANTLR start ANY 
    public void mANY() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = ANY;
            // MacroScope\\MacroScope.g:803:5: ( 'any' )
            // MacroScope\\MacroScope.g:803:7: 'any'
            {
            	Match("any"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end ANY

    // $ANTLR start AS 
    public void mAS() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = AS;
            // MacroScope\\MacroScope.g:804:4: ( 'as' )
            // MacroScope\\MacroScope.g:804:6: 'as'
            {
            	Match("as"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end AS

    // $ANTLR start ASC 
    public void mASC() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = ASC;
            // MacroScope\\MacroScope.g:805:5: ( 'asc' )
            // MacroScope\\MacroScope.g:805:7: 'asc'
            {
            	Match("asc"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end ASC

    // $ANTLR start BETWEEN 
    public void mBETWEEN() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = BETWEEN;
            // MacroScope\\MacroScope.g:806:9: ( 'between' )
            // MacroScope\\MacroScope.g:806:11: 'between'
            {
            	Match("between"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end BETWEEN

    // $ANTLR start BY 
    public void mBY() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = BY;
            // MacroScope\\MacroScope.g:807:4: ( 'by' )
            // MacroScope\\MacroScope.g:807:6: 'by'
            {
            	Match("by"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end BY

    // $ANTLR start CASE 
    public void mCASE() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = CASE;
            // MacroScope\\MacroScope.g:808:6: ( 'case' )
            // MacroScope\\MacroScope.g:808:8: 'case'
            {
            	Match("case"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end CASE

    // $ANTLR start CAST 
    public void mCAST() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = CAST;
            // MacroScope\\MacroScope.g:809:6: ( 'cast' )
            // MacroScope\\MacroScope.g:809:8: 'cast'
            {
            	Match("cast"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end CAST

    // $ANTLR start CROSS 
    public void mCROSS() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = CROSS;
            // MacroScope\\MacroScope.g:810:7: ( 'cross' )
            // MacroScope\\MacroScope.g:810:9: 'cross'
            {
            	Match("cross"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end CROSS

    // $ANTLR start DAY 
    public void mDAY() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = DAY;
            // MacroScope\\MacroScope.g:811:5: ( 'day' )
            // MacroScope\\MacroScope.g:811:7: 'day'
            {
            	Match("day"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end DAY

    // $ANTLR start DEFAULT 
    public void mDEFAULT() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = DEFAULT;
            // MacroScope\\MacroScope.g:812:9: ( 'default' )
            // MacroScope\\MacroScope.g:812:11: 'default'
            {
            	Match("default"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end DEFAULT

    // $ANTLR start DELETE 
    public void mDELETE() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = DELETE;
            // MacroScope\\MacroScope.g:813:8: ( 'delete' )
            // MacroScope\\MacroScope.g:813:10: 'delete'
            {
            	Match("delete"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end DELETE

    // $ANTLR start DESC 
    public void mDESC() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = DESC;
            // MacroScope\\MacroScope.g:814:6: ( 'desc' )
            // MacroScope\\MacroScope.g:814:8: 'desc'
            {
            	Match("desc"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end DESC

    // $ANTLR start DISTINCT 
    public void mDISTINCT() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = DISTINCT;
            // MacroScope\\MacroScope.g:815:10: ( 'distinct' )
            // MacroScope\\MacroScope.g:815:12: 'distinct'
            {
            	Match("distinct"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end DISTINCT

    // $ANTLR start ELSE 
    public void mELSE() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = ELSE;
            // MacroScope\\MacroScope.g:816:6: ( 'else' )
            // MacroScope\\MacroScope.g:816:8: 'else'
            {
            	Match("else"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end ELSE

    // $ANTLR start END 
    public void mEND() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = END;
            // MacroScope\\MacroScope.g:817:5: ( 'end' )
            // MacroScope\\MacroScope.g:817:7: 'end'
            {
            	Match("end"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end END

    // $ANTLR start ESCAPE 
    public void mESCAPE() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = ESCAPE;
            // MacroScope\\MacroScope.g:818:8: ( 'escape' )
            // MacroScope\\MacroScope.g:818:10: 'escape'
            {
            	Match("escape"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end ESCAPE

    // $ANTLR start EXISTS 
    public void mEXISTS() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = EXISTS;
            // MacroScope\\MacroScope.g:819:8: ( 'exists' )
            // MacroScope\\MacroScope.g:819:10: 'exists'
            {
            	Match("exists"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end EXISTS

    // $ANTLR start EXTRACT 
    public void mEXTRACT() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = EXTRACT;
            // MacroScope\\MacroScope.g:820:9: ( 'extract' )
            // MacroScope\\MacroScope.g:820:11: 'extract'
            {
            	Match("extract"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end EXTRACT

    // $ANTLR start FOR 
    public void mFOR() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = FOR;
            // MacroScope\\MacroScope.g:821:5: ( 'for' )
            // MacroScope\\MacroScope.g:821:7: 'for'
            {
            	Match("for"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end FOR

    // $ANTLR start FROM 
    public void mFROM() // throws RecognitionException [2]
    ]]></source>
</chunk>
<method name="mFROM" namespace="MacroScope" type="MacroScope.MacroScopeLexer" typeName="MacroScopeLexer" token="600001a" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="4"/>
<hit index="5" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="4" coveredRatio="0.75"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0002" domain="userortestcode"><source><![CDATA[int _type = FROM;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:822:6: ( 'from' )
            // MacroScope\\MacroScope.g:822:8: 'from'
            ]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0006" domain="userortestcode"><source><![CDATA[Match("from");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="6" offset="0012" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="001f" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            
            ]]></source>
</chunk>
<chunk hits="2" offset="0021" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
            ]]></source>
</chunk>
<chunk hits="2" offset="0022" domain="userortestcode"><source><![CDATA[this.type = _type;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0029" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        finally 
    	]]></source>
</chunk>
<chunk hits="4" offset="002c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="002d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="4" offset="0031" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end FROM

    // $ANTLR start FULL 
    public void mFULL() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = FULL;
            // MacroScope\\MacroScope.g:823:6: ( 'full' )
            // MacroScope\\MacroScope.g:823:8: 'full'
            {
            	Match("full"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end FULL

    // $ANTLR start GROUP 
    public void mGROUP() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = GROUP;
            // MacroScope\\MacroScope.g:824:7: ( 'group' )
            // MacroScope\\MacroScope.g:824:9: 'group'
            {
            	Match("group"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end GROUP

    // $ANTLR start HAVING 
    public void mHAVING() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = HAVING;
            // MacroScope\\MacroScope.g:825:8: ( 'having' )
            // MacroScope\\MacroScope.g:825:10: 'having'
            {
            	Match("having"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end HAVING

    // $ANTLR start HOUR 
    public void mHOUR() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = HOUR;
            // MacroScope\\MacroScope.g:826:6: ( 'hour' )
            // MacroScope\\MacroScope.g:826:8: 'hour'
            {
            	Match("hour"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end HOUR

    // $ANTLR start IN 
    public void mIN() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = IN;
            // MacroScope\\MacroScope.g:827:4: ( 'in' )
            // MacroScope\\MacroScope.g:827:6: 'in'
            {
            	Match("in"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end IN

    // $ANTLR start INNER 
    public void mINNER() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = INNER;
            // MacroScope\\MacroScope.g:828:7: ( 'inner' )
            // MacroScope\\MacroScope.g:828:9: 'inner'
            {
            	Match("inner"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end INNER

    // $ANTLR start INSERT 
    public void mINSERT() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = INSERT;
            // MacroScope\\MacroScope.g:829:8: ( 'insert' )
            // MacroScope\\MacroScope.g:829:10: 'insert'
            {
            	Match("insert"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end INSERT

    // $ANTLR start INTERVAL 
    public void mINTERVAL() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = INTERVAL;
            // MacroScope\\MacroScope.g:830:10: ( 'interval' )
            // MacroScope\\MacroScope.g:830:12: 'interval'
            {
            	Match("interval"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end INTERVAL

    // $ANTLR start INTO 
    public void mINTO() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = INTO;
            // MacroScope\\MacroScope.g:831:6: ( 'into' )
            // MacroScope\\MacroScope.g:831:8: 'into'
            {
            	Match("into"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end INTO

    // $ANTLR start IS 
    public void mIS() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = IS;
            // MacroScope\\MacroScope.g:832:4: ( 'is' )
            // MacroScope\\MacroScope.g:832:6: 'is'
            {
            	Match("is"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end IS

    // $ANTLR start JOIN 
    public void mJOIN() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = JOIN;
            // MacroScope\\MacroScope.g:833:6: ( 'join' )
            // MacroScope\\MacroScope.g:833:8: 'join'
            {
            	Match("join"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end JOIN

    // $ANTLR start LEFT 
    public void mLEFT() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = LEFT;
            // MacroScope\\MacroScope.g:834:6: ( 'left' )
            // MacroScope\\MacroScope.g:834:8: 'left'
            {
            	Match("left"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end LEFT

    // $ANTLR start LIKE 
    public void mLIKE() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = LIKE;
            // MacroScope\\MacroScope.g:835:6: ( 'like' )
            // MacroScope\\MacroScope.g:835:8: 'like'
            {
            	Match("like"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end LIKE

    // $ANTLR start MINUTE 
    public void mMINUTE() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = MINUTE;
            // MacroScope\\MacroScope.g:836:8: ( 'minute' )
            // MacroScope\\MacroScope.g:836:10: 'minute'
            {
            	Match("minute"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end MINUTE

    // $ANTLR start MONTH 
    public void mMONTH() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = MONTH;
            // MacroScope\\MacroScope.g:837:7: ( 'month' )
            // MacroScope\\MacroScope.g:837:9: 'month'
            {
            	Match("month"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end MONTH

    // $ANTLR start NOT 
    public void mNOT() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = NOT;
            // MacroScope\\MacroScope.g:838:5: ( 'not' )
            // MacroScope\\MacroScope.g:838:7: 'not'
            {
            	Match("not"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end NOT

    // $ANTLR start NULL 
    public void mNULL() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = NULL;
            // MacroScope\\MacroScope.g:839:6: ( 'null' )
            // MacroScope\\MacroScope.g:839:8: 'null'
            {
            	Match("null"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end NULL

    // $ANTLR start ON 
    public void mON() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = ON;
            // MacroScope\\MacroScope.g:840:4: ( 'on' )
            // MacroScope\\MacroScope.g:840:6: 'on'
            {
            	Match("on"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end ON

    // $ANTLR start OR 
    public void mOR() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = OR;
            // MacroScope\\MacroScope.g:841:4: ( 'or' )
            // MacroScope\\MacroScope.g:841:6: 'or'
            {
            	Match("or"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end OR

    // $ANTLR start ORDER 
    public void mORDER() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = ORDER;
            // MacroScope\\MacroScope.g:842:7: ( 'order' )
            // MacroScope\\MacroScope.g:842:9: 'order'
            {
            	Match("order"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end ORDER

    // $ANTLR start OUTER 
    public void mOUTER() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = OUTER;
            // MacroScope\\MacroScope.g:843:7: ( 'outer' )
            // MacroScope\\MacroScope.g:843:9: 'outer'
            {
            	Match("outer"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end OUTER

    // $ANTLR start RIGHT 
    public void mRIGHT() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = RIGHT;
            // MacroScope\\MacroScope.g:844:7: ( 'right' )
            // MacroScope\\MacroScope.g:844:9: 'right'
            {
            	Match("right"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end RIGHT

    // $ANTLR start SECOND 
    public void mSECOND() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = SECOND;
            // MacroScope\\MacroScope.g:845:8: ( 'second' )
            // MacroScope\\MacroScope.g:845:10: 'second'
            {
            	Match("second"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end SECOND

    // $ANTLR start SELECT 
    public void mSELECT() // throws RecognitionException [2]
    ]]></source>
</chunk>
<method name="mSELECT" namespace="MacroScope" type="MacroScope.MacroScopeLexer" typeName="MacroScopeLexer" token="6000032" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="4"/>
<hit index="5" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="4" coveredRatio="0.75"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0002" domain="userortestcode"><source><![CDATA[int _type = SELECT;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:846:8: ( 'select' )
            // MacroScope\\MacroScope.g:846:10: 'select'
            ]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0006" domain="userortestcode"><source><![CDATA[Match("select");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="6" offset="0012" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="001f" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            
            ]]></source>
</chunk>
<chunk hits="2" offset="0021" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
            ]]></source>
</chunk>
<chunk hits="2" offset="0022" domain="userortestcode"><source><![CDATA[this.type = _type;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0029" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        finally 
    	]]></source>
</chunk>
<chunk hits="4" offset="002c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="002d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="4" offset="0031" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end SELECT

    // $ANTLR start SET 
    public void mSET() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = SET;
            // MacroScope\\MacroScope.g:847:5: ( 'set' )
            // MacroScope\\MacroScope.g:847:7: 'set'
            {
            	Match("set"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end SET

    // $ANTLR start SOME 
    public void mSOME() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = SOME;
            // MacroScope\\MacroScope.g:848:6: ( 'some' )
            // MacroScope\\MacroScope.g:848:8: 'some'
            {
            	Match("some"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end SOME

    // $ANTLR start SUBSTRING 
    public void mSUBSTRING() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = SUBSTRING;
            // MacroScope\\MacroScope.g:849:11: ( 'substring' )
            // MacroScope\\MacroScope.g:849:13: 'substring'
            {
            	Match("substring"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end SUBSTRING

    // $ANTLR start THEN 
    public void mTHEN() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = THEN;
            // MacroScope\\MacroScope.g:850:6: ( 'then' )
            // MacroScope\\MacroScope.g:850:8: 'then'
            {
            	Match("then"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end THEN

    // $ANTLR start TOP 
    public void mTOP() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = TOP;
            // MacroScope\\MacroScope.g:851:5: ( 'top' )
            // MacroScope\\MacroScope.g:851:7: 'top'
            {
            	Match("top"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end TOP

    // $ANTLR start UNION 
    public void mUNION() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = UNION;
            // MacroScope\\MacroScope.g:852:7: ( 'union' )
            // MacroScope\\MacroScope.g:852:9: 'union'
            {
            	Match("union"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end UNION

    // $ANTLR start UPDATE 
    public void mUPDATE() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = UPDATE;
            // MacroScope\\MacroScope.g:853:8: ( 'update' )
            // MacroScope\\MacroScope.g:853:10: 'update'
            {
            	Match("update"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end UPDATE

    // $ANTLR start VALUES 
    public void mVALUES() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = VALUES;
            // MacroScope\\MacroScope.g:854:8: ( 'values' )
            // MacroScope\\MacroScope.g:854:10: 'values'
            {
            	Match("values"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end VALUES

    // $ANTLR start WHEN 
    public void mWHEN() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = WHEN;
            // MacroScope\\MacroScope.g:855:6: ( 'when' )
            // MacroScope\\MacroScope.g:855:8: 'when'
            {
            	Match("when"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end WHEN

    // $ANTLR start WHERE 
    public void mWHERE() // throws RecognitionException [2]
    ]]></source>
</chunk>
<method name="mWHERE" namespace="MacroScope" type="MacroScope.MacroScopeLexer" typeName="MacroScopeLexer" token="600003c" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="4"/>
<hit index="5" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="4" coveredRatio="0.75"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0002" domain="userortestcode"><source><![CDATA[int _type = WHERE;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:856:7: ( 'where' )
            // MacroScope\\MacroScope.g:856:9: 'where'
            ]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0006" domain="userortestcode"><source><![CDATA[Match("where");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="6" offset="0012" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="001f" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            
            ]]></source>
</chunk>
<chunk hits="2" offset="0021" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
            ]]></source>
</chunk>
<chunk hits="2" offset="0022" domain="userortestcode"><source><![CDATA[this.type = _type;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0029" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        finally 
    	]]></source>
</chunk>
<chunk hits="4" offset="002c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="002d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="4" offset="0031" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end WHERE

    // $ANTLR start YEAR 
    public void mYEAR() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = YEAR;
            // MacroScope\\MacroScope.g:857:6: ( 'year' )
            // MacroScope\\MacroScope.g:857:8: 'year'
            {
            	Match("year"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end YEAR

    // $ANTLR start DOT_STAR 
    public void mDOT_STAR() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = DOT_STAR;
            // MacroScope\\MacroScope.g:859:9: ( '.*' )
            // MacroScope\\MacroScope.g:859:11: '.*'
            {
            	Match(".*"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end DOT_STAR

    // $ANTLR start DOT 
    public void mDOT() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = DOT;
            // MacroScope\\MacroScope.g:860:5: ( '.' )
            // MacroScope\\MacroScope.g:860:7: '.'
            {
            	Match('.'); if (failed) return ;
            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end DOT

    // $ANTLR start COMMA 
    public void mCOMMA() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = COMMA;
            // MacroScope\\MacroScope.g:861:7: ( ',' )
            // MacroScope\\MacroScope.g:861:9: ','
            {
            	Match(','); if (failed) return ;
            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end COMMA

    // $ANTLR start LPAREN 
    public void mLPAREN() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = LPAREN;
            // MacroScope\\MacroScope.g:862:8: ( '(' )
            // MacroScope\\MacroScope.g:862:10: '('
            {
            	Match('('); if (failed) return ;
            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end LPAREN

    // $ANTLR start RPAREN 
    public void mRPAREN() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = RPAREN;
            // MacroScope\\MacroScope.g:863:8: ( ')' )
            // MacroScope\\MacroScope.g:863:10: ')'
            {
            	Match(')'); if (failed) return ;
            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end RPAREN

    // $ANTLR start ASSIGNEQUAL 
    public void mASSIGNEQUAL() // throws RecognitionException [2]
    ]]></source>
</chunk>
<method name="mASSIGNEQUAL" namespace="MacroScope" type="MacroScope.MacroScopeLexer" typeName="MacroScopeLexer" token="6000043" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="4"/>
<hit index="5" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="4" coveredRatio="0.75"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0002" domain="userortestcode"><source><![CDATA[int _type = ASSIGNEQUAL;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:865:13: ( '=' )
            // MacroScope\\MacroScope.g:865:15: '='
            ]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0006" domain="userortestcode"><source><![CDATA[Match('=');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="6" offset="000f" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="001c" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="2" offset="001e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
            ]]></source>
</chunk>
<chunk hits="2" offset="001f" domain="userortestcode"><source><![CDATA[this.type = _type;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0026" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        finally 
    	]]></source>
</chunk>
<chunk hits="4" offset="0029" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="002a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="4" offset="002e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end ASSIGNEQUAL

    // $ANTLR start NOTEQUAL1 
    public void mNOTEQUAL1() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = NOTEQUAL1;
            // MacroScope\\MacroScope.g:866:11: ( '<>' )
            // MacroScope\\MacroScope.g:866:13: '<>'
            {
            	Match("<>"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end NOTEQUAL1

    // $ANTLR start NOTEQUAL2 
    public void mNOTEQUAL2() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = NOTEQUAL2;
            // MacroScope\\MacroScope.g:867:11: ( '!=' )
            // MacroScope\\MacroScope.g:867:13: '!='
            {
            	Match("!="); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end NOTEQUAL2

    // $ANTLR start LESSTHANOREQUALTO1 
    public void mLESSTHANOREQUALTO1() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = LESSTHANOREQUALTO1;
            // MacroScope\\MacroScope.g:868:20: ( '<=' )
            // MacroScope\\MacroScope.g:868:22: '<='
            {
            	Match("<="); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end LESSTHANOREQUALTO1

    // $ANTLR start LESSTHAN 
    public void mLESSTHAN() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = LESSTHAN;
            // MacroScope\\MacroScope.g:869:10: ( '<' )
            // MacroScope\\MacroScope.g:869:12: '<'
            {
            	Match('<'); if (failed) return ;
            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end LESSTHAN

    // $ANTLR start GREATERTHANOREQUALTO1 
    public void mGREATERTHANOREQUALTO1() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = GREATERTHANOREQUALTO1;
            // MacroScope\\MacroScope.g:870:23: ( '>=' )
            // MacroScope\\MacroScope.g:870:25: '>='
            {
            	Match(">="); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end GREATERTHANOREQUALTO1

    // $ANTLR start GREATERTHAN 
    public void mGREATERTHAN() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = GREATERTHAN;
            // MacroScope\\MacroScope.g:871:13: ( '>' )
            // MacroScope\\MacroScope.g:871:15: '>'
            {
            	Match('>'); if (failed) return ;
            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end GREATERTHAN

    // $ANTLR start DIVIDE 
    public void mDIVIDE() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = DIVIDE;
            // MacroScope\\MacroScope.g:873:8: ( '/' )
            // MacroScope\\MacroScope.g:873:10: '/'
            {
            	Match('/'); if (failed) return ;
            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end DIVIDE

    // $ANTLR start PLUS 
    public void mPLUS() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = PLUS;
            // MacroScope\\MacroScope.g:874:6: ( '+' )
            // MacroScope\\MacroScope.g:874:8: '+'
            {
            	Match('+'); if (failed) return ;
            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end PLUS

    // $ANTLR start STAR 
    public void mSTAR() // throws RecognitionException [2]
    ]]></source>
</chunk>
<method name="mSTAR" namespace="MacroScope" type="MacroScope.MacroScopeLexer" typeName="MacroScopeLexer" token="600004c" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="4"/>
<hit index="5" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="4" coveredRatio="0.75"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0002" domain="userortestcode"><source><![CDATA[int _type = STAR;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:875:6: ( '*' )
            // MacroScope\\MacroScope.g:875:8: '*'
            ]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0006" domain="userortestcode"><source><![CDATA[Match('*');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="6" offset="000f" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="001c" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="2" offset="001e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
            ]]></source>
</chunk>
<chunk hits="2" offset="001f" domain="userortestcode"><source><![CDATA[this.type = _type;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0026" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        finally 
    	]]></source>
</chunk>
<chunk hits="4" offset="0029" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="002a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="4" offset="002e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end STAR

    // $ANTLR start MOD 
    public void mMOD() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = MOD;
            // MacroScope\\MacroScope.g:876:5: ( '%' )
            // MacroScope\\MacroScope.g:876:7: '%'
            {
            	Match('%'); if (failed) return ;
            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end MOD

    // $ANTLR start STRCONCAT 
    public void mSTRCONCAT() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = STRCONCAT;
            // MacroScope\\MacroScope.g:878:11: ( '||' )
            // MacroScope\\MacroScope.g:878:13: '||'
            {
            	Match("||"); if (failed) return ;

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end STRCONCAT

    // $ANTLR start PLACEHOLDER 
    public void mPLACEHOLDER() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = PLACEHOLDER;
            // MacroScope\\MacroScope.g:880:12: ( '?' )
            // MacroScope\\MacroScope.g:880:14: '?'
            {
            	Match('?'); if (failed) return ;
            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end PLACEHOLDER

    // $ANTLR start Letter 
    public void mLetter() // throws RecognitionException [2]
    ]]></source>
</chunk>
<method name="mLetter" namespace="MacroScope" type="MacroScope.MacroScopeLexer" typeName="MacroScopeLexer" token="6000050" module="MacroScope.dll"><hits><hit index="0" value="3"/>
<hit index="1" value="3"/>
<hit index="2" value="3"/>
<hit index="3" value="3"/>
<hit index="4" value="6"/>
<hit index="5" value="3"/>
<hit index="7" value="3"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="4" coveredRatio="0.75"/>
</method>
<chunk hits="3" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        try 
    	]]></source>
</chunk>
<chunk hits="3" offset="0001" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:883:8: ( 'a' .. 'z' )
            // MacroScope\\MacroScope.g:883:10: 'a' .. 'z'
            ]]></source>
</chunk>
<chunk hits="3" offset="0002" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="3" offset="0003" domain="userortestcode"><source><![CDATA[MatchRange('a','z');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="9" offset="000e" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="001b" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="3" offset="001d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="3" offset="001e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        finally 
    	]]></source>
</chunk>
<chunk hits="3" offset="0021" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="0022" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="3" offset="0026" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end Letter

    // $ANTLR start Digit 
    public void mDigit() // throws RecognitionException [2]
    ]]></source>
</chunk>
<method name="mDigit" namespace="MacroScope" type="MacroScope.MacroScopeLexer" typeName="MacroScopeLexer" token="6000051" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="4"/>
<hit index="5" value="2"/>
<hit index="7" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="4" coveredRatio="0.75"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:886:7: ( '0' .. '9' )
            // MacroScope\\MacroScope.g:886:9: '0' .. '9'
            ]]></source>
</chunk>
<chunk hits="2" offset="0002" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0003" domain="userortestcode"><source><![CDATA[MatchRange('0','9');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="6" offset="000e" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="001b" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="2" offset="001d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="001e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        finally 
    	]]></source>
</chunk>
<chunk hits="2" offset="0021" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0022" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="2" offset="0026" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end Digit

    // $ANTLR start Integer 
    public void mInteger() // throws RecognitionException [2]
    {
        try 
    	{
            // MacroScope\\MacroScope.g:889:9: ()
            // MacroScope\\MacroScope.g:889:10: 
            {
            }

        }
        finally 
    	{
        }
    }
    // $ANTLR end Integer

    // $ANTLR start Real 
    public void mReal() // throws RecognitionException [2]
    {
        try 
    	{
            // MacroScope\\MacroScope.g:892:6: ()
            // MacroScope\\MacroScope.g:892:7: 
            {
            }

        }
        finally 
    	{
        }
    }
    // $ANTLR end Real

    // $ANTLR start Exponent 
    public void mExponent() // throws RecognitionException [2]
    {
        try 
    	{
            // MacroScope\\MacroScope.g:895:10: ( 'e' ( '+' | '-' )? ( Digit )+ )
            // MacroScope\\MacroScope.g:896:2: 'e' ( '+' | '-' )? ( Digit )+
            {
            	Match('e'); if (failed) return ;
            	// MacroScope\\MacroScope.g:896:6: ( '+' | '-' )?
            	int alt1 = 2;
            	int LA1_0 = input.LA(1);
            	
            	if ( (LA1_0 == '+' || LA1_0 == '-') )
            	{
            	    alt1 = 1;
            	}
            	switch (alt1) 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:
            	        {
            	        	if ( input.LA(1) == '+' || input.LA(1) == '-' ) 
            	        	{
            	        	    input.Consume();
            	        	failed = false;
            	        	}
            	        	else 
            	        	{
            	        	    if ( backtracking > 0 ) {failed = true; return ;}
            	        	    MismatchedSetException mse =
            	        	        new MismatchedSetException(null,input);
            	        	    Recover(mse);    throw mse;
            	        	}

            	        
            	        }
            	        break;
            	
            	}

            	// MacroScope\\MacroScope.g:896:21: ( Digit )+
            	int cnt2 = 0;
            	do 
            	{
            	    int alt2 = 2;
            	    int LA2_0 = input.LA(1);
            	    
            	    if ( ((LA2_0 >= '0' && LA2_0 <= '9')) )
            	    {
            	        alt2 = 1;
            	    }
            	    
            	
            	    switch (alt2) 
            		{
            			case 1 :
            			    // MacroScope\\MacroScope.g:896:22: Digit
            			    {
            			    	mDigit(); if (failed) return ;
            			    
            			    }
            			    break;
            	
            			default:
            			    if ( cnt2 >= 1 ) goto loop2;
            			    if ( backtracking > 0 ) {failed = true; return ;}
            		            EarlyExitException eee =
            		                new EarlyExitException(2, input);
            		            throw eee;
            	    }
            	    cnt2++;
            	} while (true);
            	
            	loop2:
            		;	// Stops C# compiler whinging that label 'loop2' has no statements

            
            }

        }
        finally 
    	{
        }
    }
    // $ANTLR end Exponent

    // $ANTLR start MAccessDateTime 
    public void mMAccessDateTime() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = MAccessDateTime;
            // MacroScope\\MacroScope.g:899:17: ( '#' Digit Digit Digit Digit '-' Digit Digit '-' Digit Digit ' ' Digit Digit ':' Digit Digit ':' Digit Digit '#' )
            // MacroScope\\MacroScope.g:900:2: '#' Digit Digit Digit Digit '-' Digit Digit '-' Digit Digit ' ' Digit Digit ':' Digit Digit ':' Digit Digit '#'
            {
            	Match('#'); if (failed) return ;
            	mDigit(); if (failed) return ;
            	mDigit(); if (failed) return ;
            	mDigit(); if (failed) return ;
            	mDigit(); if (failed) return ;
            	Match('-'); if (failed) return ;
            	mDigit(); if (failed) return ;
            	mDigit(); if (failed) return ;
            	Match('-'); if (failed) return ;
            	mDigit(); if (failed) return ;
            	mDigit(); if (failed) return ;
            	Match(' '); if (failed) return ;
            	mDigit(); if (failed) return ;
            	mDigit(); if (failed) return ;
            	Match(':'); if (failed) return ;
            	mDigit(); if (failed) return ;
            	mDigit(); if (failed) return ;
            	Match(':'); if (failed) return ;
            	mDigit(); if (failed) return ;
            	mDigit(); if (failed) return ;
            	Match('#'); if (failed) return ;
            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end MAccessDateTime

    // $ANTLR start Iso8601DateTime 
    public void mIso8601DateTime() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = Iso8601DateTime;
            // MacroScope\\MacroScope.g:906:17: ( Digit Digit Digit Digit '-' Digit Digit '-' Digit Digit ( 't' | ' ' ) Digit Digit ':' Digit Digit ':' Digit Digit )
            // MacroScope\\MacroScope.g:907:2: Digit Digit Digit Digit '-' Digit Digit '-' Digit Digit ( 't' | ' ' ) Digit Digit ':' Digit Digit ':' Digit Digit
            {
            	mDigit(); if (failed) return ;
            	mDigit(); if (failed) return ;
            	mDigit(); if (failed) return ;
            	mDigit(); if (failed) return ;
            	Match('-'); if (failed) return ;
            	mDigit(); if (failed) return ;
            	mDigit(); if (failed) return ;
            	Match('-'); if (failed) return ;
            	mDigit(); if (failed) return ;
            	mDigit(); if (failed) return ;
            	if ( input.LA(1) == ' ' || input.LA(1) == 't' ) 
            	{
            	    input.Consume();
            	failed = false;
            	}
            	else 
            	{
            	    if ( backtracking > 0 ) {failed = true; return ;}
            	    MismatchedSetException mse =
            	        new MismatchedSetException(null,input);
            	    Recover(mse);    throw mse;
            	}

            	mDigit(); if (failed) return ;
            	mDigit(); if (failed) return ;
            	Match(':'); if (failed) return ;
            	mDigit(); if (failed) return ;
            	mDigit(); if (failed) return ;
            	Match(':'); if (failed) return ;
            	mDigit(); if (failed) return ;
            	mDigit(); if (failed) return ;
            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end Iso8601DateTime

    // $ANTLR start Number 
    public void mNumber() // throws RecognitionException [2]
    ]]></source>
</chunk>
<method name="mNumber" namespace="MacroScope" type="MacroScope.MacroScopeLexer" typeName="MacroScopeLexer" token="6000057" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="4"/>
<hit index="133" value="4"/>
<hit index="134" value="4"/>
<hit index="135" value="4"/>
<hit index="136" value="4"/>
<hit index="137" value="8"/>
<hit index="138" value="3"/>
<hit index="139" value="2"/>
<hit index="140" value="2"/>
<hit index="141" value="2"/>
<hit index="142" value="2"/>
<hit index="143" value="2"/>
<hit index="145" value="2"/>
<hit index="155" value="2"/>
<hit index="156" value="2"/>
<hit index="219" value="2"/>
<hit index="220" value="2"/>
<hit index="223" value="2"/>
<hit index="261" value="1"/>
<hit index="262" value="2"/>
<hit index="263" value="2"/>
<hit index="264" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="15" total="144" coveredRatio="0.10416666666666667"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0002" domain="userortestcode"><source><![CDATA[int _type = Number;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:912:8: ( ( ( Digit )+ ( '.' | 'e' ) )=> ( Digit )+ ( '.' ( Digit )* ( Exponent )? | Exponent ) | '.' ( ( Digit )+ ( Exponent )? )? | ( Digit )+ | '0x' ( 'a' .. 'f' | Digit )* )
            ]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="userortestcode"><source><![CDATA[int alt12 = 4;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[alt12 = dfa12.Predict(input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0019" domain="userortestcode"><source><![CDATA[switch (alt12)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
                case 1 :
                    // MacroScope\\MacroScope.g:913:2: ( ( Digit )+ ( '.' | 'e' ) )=> ( Digit )+ ( '.' ( Digit )* ( Exponent )? | Exponent )
                    ]]></source>
</chunk>
<chunk hits="0" offset="003a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	// MacroScope\\MacroScope.g:913:30: ( Digit )+
                    	]]></source>
</chunk>
<chunk hits="0" offset="003b" domain="userortestcode"><source><![CDATA[int cnt3 = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	do 
                    	]]></source>
</chunk>
<chunk hits="0" offset="003d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="003e" domain="userortestcode"><source><![CDATA[int alt3 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="0040" domain="userortestcode"><source><![CDATA[int LA3_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="004e" domain="userortestcode"><source><![CDATA[if ( ((LA3_0 >= '0' && LA3_0 <= '9')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="0063" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0064" domain="userortestcode"><source><![CDATA[alt3 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="0066" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    
                    	
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="0067" domain="userortestcode"><source><![CDATA[switch (alt3)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    		{
                    			case 1 :
                    			    // MacroScope\\MacroScope.g:913:31: Digit
                    			    ]]></source>
</chunk>
<chunk hits="0" offset="0071" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    			    	]]></source>
</chunk>
<chunk hits="0" offset="0072" domain="userortestcode"><source><![CDATA[mDigit();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0079" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0088" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    			    
                    			    ]]></source>
</chunk>
<chunk hits="0" offset="008d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    			    ]]></source>
</chunk>
<chunk hits="0" offset="008e" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	
                    			default:
                    			    ]]></source>
</chunk>
<chunk hits="0" offset="0090" domain="userortestcode"><source><![CDATA[if ( cnt3 >= 1 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="009a" domain="userortestcode"><source><![CDATA[goto loop3;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    			    ]]></source>
</chunk>
<chunk hits="0" offset="009c" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00ae" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="00af" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00b6" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
                    		            ]]></source>
</chunk>
<chunk hits="0" offset="00bb" domain="userortestcode"><source><![CDATA[EarlyExitException eee =
                    		                new EarlyExitException(3, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    		            ]]></source>
</chunk>
<chunk hits="0" offset="00c9" domain="userortestcode"><source><![CDATA[throw eee;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    }
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="00cc" domain="userortestcode"><source><![CDATA[cnt3++;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="00d0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00d1" domain="userortestcode"><source><![CDATA[while (true);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	
                    	loop3:
                    		;	// Stops C# compiler whinging that label 'loop3' has no statements

                    	// MacroScope\\MacroScope.g:913:39: ( '.' ( Digit )* ( Exponent )? | Exponent )
                    	]]></source>
</chunk>
<chunk hits="0" offset="00d9" domain="userortestcode"><source><![CDATA[int alt6 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="00dc" domain="userortestcode"><source><![CDATA[int LA6_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	
                    	]]></source>
</chunk>
<chunk hits="0" offset="00ea" domain="userortestcode"><source><![CDATA[if ( (LA6_0 == '.') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="00f9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="00fa" domain="userortestcode"><source><![CDATA[alt6 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="00fd" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	else ]]></source>
</chunk>
<chunk hits="0" offset="0100" domain="userortestcode"><source><![CDATA[if ( (LA6_0 == 'e') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="010f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="0110" domain="userortestcode"><source><![CDATA[alt6 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0113" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	else 
                    	]]></source>
</chunk>
<chunk hits="0" offset="0116" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="0117" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0129" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="012a" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0131" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="0136" domain="userortestcode"><source><![CDATA[NoViableAltException nvae_d6s0 =
                    	        new NoViableAltException("913:39: ( '.' ( Digit )* ( Exponent )? | Exponent )", 6, 0, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="014a" domain="userortestcode"><source><![CDATA[throw nvae_d6s0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	}
                    	]]></source>
</chunk>
<chunk hits="0" offset="014d" domain="userortestcode"><source><![CDATA[switch (alt6)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	{
                    	    case 1 :
                    	        // MacroScope\\MacroScope.g:913:41: '.' ( Digit )* ( Exponent )?
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0167" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0168" domain="userortestcode"><source><![CDATA[Match('.');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0171" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0180" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	// MacroScope\\MacroScope.g:913:45: ( Digit )*
                    	        	do 
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0185" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0186" domain="userortestcode"><source><![CDATA[int alt4 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0189" domain="userortestcode"><source><![CDATA[int LA4_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0197" domain="userortestcode"><source><![CDATA[if ( ((LA4_0 >= '0' && LA4_0 <= '9')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="01ac" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="01ad" domain="userortestcode"><source><![CDATA[alt4 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="01b0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    
                    	        	
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="01b1" domain="userortestcode"><source><![CDATA[switch (alt4)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        		{
                    	        			case 1 :
                    	        			    // MacroScope\\MacroScope.g:913:46: Digit
                    	        			    ]]></source>
</chunk>
<chunk hits="0" offset="01bc" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        			    	]]></source>
</chunk>
<chunk hits="0" offset="01bd" domain="userortestcode"><source><![CDATA[mDigit();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="01c4" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="01d3" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        			    
                    	        			    ]]></source>
</chunk>
<chunk hits="0" offset="01d8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        			    ]]></source>
</chunk>
<chunk hits="0" offset="01d9" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	
                    	        			default:
                    	        			    ]]></source>
</chunk>
<chunk hits="0" offset="01db" domain="userortestcode"><source><![CDATA[goto loop4;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    }
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="01dd" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="01de" domain="userortestcode"><source><![CDATA[while (true);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	
                    	        	loop4:
                    	        		;	// Stops C# compiler whinging that label 'loop4' has no statements

                    	        	// MacroScope\\MacroScope.g:913:54: ( Exponent )?
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="01e3" domain="userortestcode"><source><![CDATA[int alt5 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="01e6" domain="userortestcode"><source><![CDATA[int LA5_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="01f4" domain="userortestcode"><source><![CDATA[if ( (LA5_0 == 'e') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0203" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0204" domain="userortestcode"><source><![CDATA[alt5 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0207" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0208" domain="userortestcode"><source><![CDATA[switch (alt5)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	{
                    	        	    case 1 :
                    	        	        // MacroScope\\MacroScope.g:913:55: Exponent
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0213" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0214" domain="userortestcode"><source><![CDATA[mExponent();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="021b" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="022a" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="022f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0230" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	
                    	        	}

                    	        
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0232" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0233" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    case 2 :
                    	        // MacroScope\\MacroScope.g:913:68: Exponent
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0235" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0236" domain="userortestcode"><source><![CDATA[mExponent();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="023d" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="024c" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0251" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0252" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	
                    	}

                    	]]></source>
</chunk>
<chunk hits="0" offset="0254" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="0266" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	   ]]></source>
</chunk>
<chunk hits="0" offset="0267" domain="userortestcode"><source><![CDATA[_type = Real;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="026a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="026b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="026c" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 2 :
                    // MacroScope\\MacroScope.g:914:4: '.' ( ( Digit )+ ( Exponent )? )?
                    ]]></source>
</chunk>
<chunk hits="0" offset="0271" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0272" domain="userortestcode"><source><![CDATA[Match('.');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="027b" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="028a" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="028f" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="02a1" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	   ]]></source>
</chunk>
<chunk hits="0" offset="02a2" domain="userortestcode"><source><![CDATA[_type = DOT;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="02a5" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	// MacroScope\\MacroScope.g:914:25: ( ( Digit )+ ( Exponent )? )?
                    	]]></source>
</chunk>
<chunk hits="0" offset="02a6" domain="userortestcode"><source><![CDATA[int alt9 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="02a9" domain="userortestcode"><source><![CDATA[int LA9_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	
                    	]]></source>
</chunk>
<chunk hits="0" offset="02b7" domain="userortestcode"><source><![CDATA[if ( ((LA9_0 >= '0' && LA9_0 <= '9')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="02cc" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="02cd" domain="userortestcode"><source><![CDATA[alt9 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="02d0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="02d1" domain="userortestcode"><source><![CDATA[switch (alt9)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	{
                    	    case 1 :
                    	        // MacroScope\\MacroScope.g:914:27: ( Digit )+ ( Exponent )?
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="02df" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	// MacroScope\\MacroScope.g:914:27: ( Digit )+
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="02e0" domain="userortestcode"><source><![CDATA[int cnt7 = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	do 
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="02e3" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="02e4" domain="userortestcode"><source><![CDATA[int alt7 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="02e7" domain="userortestcode"><source><![CDATA[int LA7_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="02f5" domain="userortestcode"><source><![CDATA[if ( ((LA7_0 >= '0' && LA7_0 <= '9')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="030a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="030b" domain="userortestcode"><source><![CDATA[alt7 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="030e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    
                    	        	
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="030f" domain="userortestcode"><source><![CDATA[switch (alt7)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        		{
                    	        			case 1 :
                    	        			    // MacroScope\\MacroScope.g:914:28: Digit
                    	        			    ]]></source>
</chunk>
<chunk hits="0" offset="031a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        			    	]]></source>
</chunk>
<chunk hits="0" offset="031b" domain="userortestcode"><source><![CDATA[mDigit();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0322" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0331" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        			    
                    	        			    ]]></source>
</chunk>
<chunk hits="0" offset="0336" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        			    ]]></source>
</chunk>
<chunk hits="0" offset="0337" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	
                    	        			default:
                    	        			    ]]></source>
</chunk>
<chunk hits="0" offset="0339" domain="userortestcode"><source><![CDATA[if ( cnt7 >= 1 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0344" domain="userortestcode"><source><![CDATA[goto loop7;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        			    ]]></source>
</chunk>
<chunk hits="0" offset="0346" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0358" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="0359" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0360" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
                    	        		            ]]></source>
</chunk>
<chunk hits="0" offset="0365" domain="userortestcode"><source><![CDATA[EarlyExitException eee =
                    	        		                new EarlyExitException(7, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        		            ]]></source>
</chunk>
<chunk hits="0" offset="0373" domain="userortestcode"><source><![CDATA[throw eee;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    }
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0376" domain="userortestcode"><source><![CDATA[cnt7++;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="037c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="037d" domain="userortestcode"><source><![CDATA[while (true);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	
                    	        	loop7:
                    	        		;	// Stops C# compiler whinging that label 'loop7' has no statements

                    	        	// MacroScope\\MacroScope.g:914:36: ( Exponent )?
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0385" domain="userortestcode"><source><![CDATA[int alt8 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0388" domain="userortestcode"><source><![CDATA[int LA8_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0396" domain="userortestcode"><source><![CDATA[if ( (LA8_0 == 'e') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="03a5" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="03a6" domain="userortestcode"><source><![CDATA[alt8 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="03a9" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="03aa" domain="userortestcode"><source><![CDATA[switch (alt8)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	{
                    	        	    case 1 :
                    	        	        // MacroScope\\MacroScope.g:914:37: Exponent
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="03b5" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="03b6" domain="userortestcode"><source><![CDATA[mExponent();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="03bd" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="03cc" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="03d1" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="03d2" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	
                    	        	}

                    	        	]]></source>
</chunk>
<chunk hits="0" offset="03d4" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="03e6" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	   ]]></source>
</chunk>
<chunk hits="0" offset="03e7" domain="userortestcode"><source><![CDATA[_type = Real;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="03ea" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="03eb" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="03ec" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	
                    	}

                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="03ee" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="03ef" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 3 :
                    // MacroScope\\MacroScope.g:915:4: ( Digit )+
                    ]]></source>
</chunk>
<chunk hits="2" offset="03f4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	// MacroScope\\MacroScope.g:915:4: ( Digit )+
                    	]]></source>
</chunk>
<chunk hits="2" offset="03f5" domain="userortestcode"><source><![CDATA[int cnt10 = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	do 
                    	]]></source>
</chunk>
<chunk hits="4" offset="03f8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="4" offset="03f9" domain="userortestcode"><source><![CDATA[int alt10 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="4" offset="03fc" domain="userortestcode"><source><![CDATA[int LA10_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    
                    	    ]]></source>
</chunk>
<chunk hits="12" offset="040a" domain="userortestcode"><source><![CDATA[if ( ((LA10_0 >= '0' && LA10_0 <= '9')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="2" offset="041f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        ]]></source>
</chunk>
<chunk hits="2" offset="0420" domain="userortestcode"><source><![CDATA[alt10 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="2" offset="0423" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    
                    	
                    	    ]]></source>
</chunk>
<chunk hits="4" offset="0424" domain="userortestcode"><source><![CDATA[switch (alt10)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    		{
                    			case 1 :
                    			    // MacroScope\\MacroScope.g:915:5: Digit
                    			    ]]></source>
</chunk>
<chunk hits="2" offset="042f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    			    	]]></source>
</chunk>
<chunk hits="2" offset="0430" domain="userortestcode"><source><![CDATA[mDigit();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0437" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0446" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    			    
                    			    ]]></source>
</chunk>
<chunk hits="2" offset="044b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    			    ]]></source>
</chunk>
<chunk hits="2" offset="044c" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	
                    			default:
                    			    ]]></source>
</chunk>
<chunk hits="2" offset="044e" domain="userortestcode"><source><![CDATA[if ( cnt10 >= 1 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0459" domain="userortestcode"><source><![CDATA[goto loop10;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    			    ]]></source>
</chunk>
<chunk hits="0" offset="045b" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="046d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="046e" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0475" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
                    		            ]]></source>
</chunk>
<chunk hits="0" offset="047a" domain="userortestcode"><source><![CDATA[EarlyExitException eee =
                    		                new EarlyExitException(10, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    		            ]]></source>
</chunk>
<chunk hits="0" offset="0489" domain="userortestcode"><source><![CDATA[throw eee;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    }
                    	    ]]></source>
</chunk>
<chunk hits="2" offset="048c" domain="userortestcode"><source><![CDATA[cnt10++;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="0492" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0493" domain="userortestcode"><source><![CDATA[while (true);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	
                    	loop10:
                    		;	// Stops C# compiler whinging that label 'loop10' has no statements

                    	]]></source>
</chunk>
<chunk hits="2" offset="049b" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="2" offset="04ad" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	   ]]></source>
</chunk>
<chunk hits="2" offset="04ae" domain="userortestcode"><source><![CDATA[_type = Integer;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="2" offset="04b1" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="2" offset="04b2" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="04b3" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 4 :
                    // MacroScope\\MacroScope.g:916:4: '0x' ( 'a' .. 'f' | Digit )*
                    ]]></source>
</chunk>
<chunk hits="0" offset="04b8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="04b9" domain="userortestcode"><source><![CDATA[Match("0x");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="04c5" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="04d4" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                    	// MacroScope\\MacroScope.g:916:9: ( 'a' .. 'f' | Digit )*
                    	do 
                    	]]></source>
</chunk>
<chunk hits="0" offset="04d9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="04da" domain="userortestcode"><source><![CDATA[int alt11 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="04dd" domain="userortestcode"><source><![CDATA[int LA11_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="04eb" domain="userortestcode"><source><![CDATA[if ( ((LA11_0 >= '0' && LA11_0 <= '9') || (LA11_0 >= 'a' && LA11_0 <= 'f')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="050f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0510" domain="userortestcode"><source><![CDATA[alt11 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="0513" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    
                    	
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="0514" domain="userortestcode"><source><![CDATA[switch (alt11)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    		{
                    			case 1 :
                    			    // MacroScope\\MacroScope.g:
                    			    ]]></source>
</chunk>
<chunk hits="0" offset="0522" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    			    	]]></source>
</chunk>
<chunk hits="0" offset="0523" domain="userortestcode"><source><![CDATA[if ( (input.LA(1) >= '0' && input.LA(1) <= '9') || (input.LA(1) >= 'a' && input.LA(1) <= 'f') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    			    	]]></source>
</chunk>
<chunk hits="0" offset="056f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    			    	    ]]></source>
</chunk>
<chunk hits="0" offset="0570" domain="userortestcode"><source><![CDATA[input.Consume();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    			    	]]></source>
</chunk>
<chunk hits="0" offset="057c" domain="userortestcode"><source><![CDATA[failed = false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    			    	]]></source>
</chunk>
<chunk hits="0" offset="0583" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    			    	else 
                    			    	]]></source>
</chunk>
<chunk hits="0" offset="0586" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    			    	    ]]></source>
</chunk>
<chunk hits="0" offset="0587" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0599" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="059a" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="05a1" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
                    			    	    ]]></source>
</chunk>
<chunk hits="0" offset="05a3" domain="userortestcode"><source><![CDATA[MismatchedSetException mse =
                    			    	        new MismatchedSetException(null,input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    			    	    ]]></source>
</chunk>
<chunk hits="0" offset="05b1" domain="userortestcode"><source><![CDATA[Recover(mse);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[    ]]></source>
</chunk>
<chunk hits="0" offset="05ba" domain="userortestcode"><source><![CDATA[throw mse;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    			    	}

                    			    
                    			    ]]></source>
</chunk>
<chunk hits="0" offset="05bd" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    			    ]]></source>
</chunk>
<chunk hits="0" offset="05be" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	
                    			default:
                    			    ]]></source>
</chunk>
<chunk hits="0" offset="05c0" domain="userortestcode"><source><![CDATA[goto loop11;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    }
                    	]]></source>
</chunk>
<chunk hits="0" offset="05c2" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="05c3" domain="userortestcode"><source><![CDATA[while (true);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	
                    	loop11:
                    		;	// Stops C# compiler whinging that label 'loop11' has no statements

                    	]]></source>
</chunk>
<chunk hits="0" offset="05cb" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="05dd" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	   ]]></source>
</chunk>
<chunk hits="0" offset="05de" domain="userortestcode"><source><![CDATA[_type = HexLiteral;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="05e1" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="05e2" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="05e3" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            }
            ]]></source>
</chunk>
<chunk hits="2" offset="05e5" domain="userortestcode"><source><![CDATA[this.type = _type;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="05ec" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        finally 
    	]]></source>
</chunk>
<chunk hits="4" offset="05ef" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="05f0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="4" offset="05f4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end Number

    // $ANTLR start WordTail 
    public void mWordTail() // throws RecognitionException [2]
    ]]></source>
</chunk>
<method name="mWordTail" namespace="MacroScope" type="MacroScope.MacroScopeLexer" typeName="MacroScopeLexer" token="6000058" module="MacroScope.dll"><hits><hit index="0" value="3"/>
<hit index="1" value="27"/>
<hit index="2" value="27"/>
<hit index="3" value="27"/>
<hit index="4" value="27"/>
<hit index="5" value="54"/>
<hit index="6" value="24"/>
<hit index="7" value="24"/>
<hit index="8" value="27"/>
<hit index="9" value="24"/>
<hit index="10" value="24"/>
<hit index="11" value="3"/>
<hit index="12" value="24"/>
<hit index="13" value="24"/>
<hit index="14" value="24"/>
<hit index="15" value="24"/>
<hit index="16" value="48"/>
<hit index="17" value="24"/>
<hit index="18" value="24"/>
<hit index="19" value="24"/>
<hit index="20" value="24"/>
<hit index="21" value="24"/>
<hit index="22" value="48"/>
<hit index="23" value="24"/>
<hit index="24" value="24"/>
<hit index="25" value="24"/>
<hit index="26" value="24"/>
<hit index="27" value="24"/>
<hit index="28" value="48"/>
<hit index="29" value="24"/>
<hit index="30" value="24"/>
<hit index="31" value="24"/>
<hit index="32" value="24"/>
<hit index="33" value="24"/>
<hit index="34" value="48"/>
<hit index="35" value="24"/>
<hit index="36" value="24"/>
<hit index="37" value="24"/>
<hit index="38" value="24"/>
<hit index="39" value="24"/>
<hit index="40" value="48"/>
<hit index="41" value="24"/>
<hit index="42" value="24"/>
<hit index="43" value="24"/>
<hit index="44" value="24"/>
<hit index="45" value="24"/>
<hit index="46" value="48"/>
<hit index="47" value="24"/>
<hit index="48" value="24"/>
<hit index="62" value="3"/>
<hit index="65" value="3"/>
<hit index="66" value="3"/>
<hit index="67" value="24"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="22" total="30" coveredRatio="0.73333333333333328"/>
</method>
<chunk hits="3" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        try 
    	]]></source>
</chunk>
<chunk hits="3" offset="0001" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:920:10: ( ( Letter | Digit | '_' )* )
            // MacroScope\\MacroScope.g:921:2: ( Letter | Digit | '_' )*
            ]]></source>
</chunk>
<chunk hits="3" offset="0002" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	// MacroScope\\MacroScope.g:921:2: ( Letter | Digit | '_' )*
            	do 
            	]]></source>
</chunk>
<chunk hits="51" offset="0003" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="51" offset="0004" domain="userortestcode"><source><![CDATA[int alt13 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="51" offset="0006" domain="userortestcode"><source><![CDATA[int LA13_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	    ]]></source>
</chunk>
<chunk hits="81" offset="0013" domain="userortestcode"><source><![CDATA[if ( ((LA13_0 >= '0' && LA13_0 <= '9') || LA13_0 == '_' || (LA13_0 >= 'a' && LA13_0 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="24" offset="0036" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="24" offset="0037" domain="userortestcode"><source><![CDATA[alt13 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="24" offset="0039" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	
            	    ]]></source>
</chunk>
<chunk hits="27" offset="003a" domain="userortestcode"><source><![CDATA[switch (alt13)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            		{
            			case 1 :
            			    // MacroScope\\MacroScope.g:
            			    ]]></source>
</chunk>
<chunk hits="24" offset="0047" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="24" offset="0048" domain="userortestcode"><source><![CDATA[if ( (input.LA(1) >= '0' && input.LA(1) <= '9') || input.LA(1) == '_' || (input.LA(1) >= 'a' && input.LA(1) <= 'z') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            			    	]]></source>
</chunk>
<chunk hits="24" offset="00a2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	    ]]></source>
</chunk>
<chunk hits="24" offset="00a3" domain="userortestcode"><source><![CDATA[input.Consume();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="72" offset="00af" domain="userortestcode"><source><![CDATA[failed = false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="48" offset="00b6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	else 
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00b9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	    ]]></source>
</chunk>
<chunk hits="0" offset="00ba" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00ca" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="00cb" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00d2" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
            			    	    ]]></source>
</chunk>
<chunk hits="0" offset="00d4" domain="userortestcode"><source><![CDATA[MismatchedSetException mse =
            			    	        new MismatchedSetException(null,input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	    ]]></source>
</chunk>
<chunk hits="0" offset="00e1" domain="userortestcode"><source><![CDATA[Recover(mse);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[    ]]></source>
</chunk>
<chunk hits="0" offset="00e9" domain="userortestcode"><source><![CDATA[throw mse;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	}

            			    
            			    ]]></source>
</chunk>
<chunk hits="48" offset="00eb" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    ]]></source>
</chunk>
<chunk hits="48" offset="00ec" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            			default:
            			    ]]></source>
</chunk>
<chunk hits="3" offset="00ee" domain="userortestcode"><source><![CDATA[goto loop13;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    }
            	]]></source>
</chunk>
<chunk hits="48" offset="00f0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="48" offset="00f1" domain="userortestcode"><source><![CDATA[while (true);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	loop13:
            		;	// Stops C# compiler whinging that label 'loop13' has no statements

            
            ]]></source>
</chunk>
<chunk hits="3" offset="00f8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="3" offset="00f9" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        finally 
    	]]></source>
</chunk>
<chunk hits="3" offset="00fc" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="00fd" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="3" offset="0101" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end WordTail

    // $ANTLR start NonQuotedIdentifier 
    public void mNonQuotedIdentifier() // throws RecognitionException [2]
    ]]></source>
</chunk>
<method name="mNonQuotedIdentifier" namespace="MacroScope" type="MacroScope.MacroScopeLexer" typeName="MacroScopeLexer" token="6000059" module="MacroScope.dll"><hits><hit index="0" value="3"/>
<hit index="1" value="3"/>
<hit index="2" value="3"/>
<hit index="3" value="3"/>
<hit index="5" value="3"/>
<hit index="6" value="3"/>
<hit index="7" value="3"/>
<hit index="9" value="3"/>
<hit index="10" value="3"/>
<hit index="11" value="3"/>
<hit index="12" value="3"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="5" total="7" coveredRatio="0.7142857142857143"/>
</method>
<chunk hits="3" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        try 
    	]]></source>
</chunk>
<chunk hits="3" offset="0001" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="0002" domain="userortestcode"><source><![CDATA[int _type = NonQuotedIdentifier;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:924:21: ( Letter WordTail )
            // MacroScope\\MacroScope.g:924:23: Letter WordTail
            ]]></source>
</chunk>
<chunk hits="3" offset="0005" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="3" offset="0006" domain="userortestcode"><source><![CDATA[mLetter();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="3" offset="000d" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="001a" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="3" offset="001c" domain="userortestcode"><source><![CDATA[mWordTail();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="3" offset="0023" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0030" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="3" offset="0032" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
            ]]></source>
</chunk>
<chunk hits="3" offset="0033" domain="userortestcode"><source><![CDATA[this.type = _type;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="6" offset="003a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        finally 
    	]]></source>
</chunk>
<chunk hits="6" offset="003d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="6" offset="003e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="6" offset="0042" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end NonQuotedIdentifier

    // $ANTLR start QuotedIdentifier 
    public void mQuotedIdentifier() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = QuotedIdentifier;
            // MacroScope\\MacroScope.g:926:18: ( '[' (~ ']' )* ']' ( ']' (~ ']' )* ']' )* | '\"' (~ '\"' )* '\"' ( '\"' (~ '\"' )* '\"' )* | '`' (~ '`' )* '`' )
            int alt21 = 3;
            switch ( input.LA(1) ) 
            {
            case '[':
            	{
                alt21 = 1;
                }
                break;
            case '\"':
            	{
                alt21 = 2;
                }
                break;
            case '`':
            	{
                alt21 = 3;
                }
                break;
            	default:
            	    if ( backtracking > 0 ) {failed = true; return ;}
            	    NoViableAltException nvae_d21s0 =
            	        new NoViableAltException("926:1: QuotedIdentifier : ( '[' (~ ']' )* ']' ( ']' (~ ']' )* ']' )* | '\"' (~ '\"' )* '\"' ( '\"' (~ '\"' )* '\"' )* | '`' (~ '`' )* '`' );", 21, 0, input);
            
            	    throw nvae_d21s0;
            }
            
            switch (alt21) 
            {
                case 1 :
                    // MacroScope\\MacroScope.g:927:2: '[' (~ ']' )* ']' ( ']' (~ ']' )* ']' )*
                    {
                    	Match('['); if (failed) return ;
                    	// MacroScope\\MacroScope.g:927:6: (~ ']' )*
                    	do 
                    	{
                    	    int alt14 = 2;
                    	    int LA14_0 = input.LA(1);
                    	    
                    	    if ( ((LA14_0 >= '\u0000' && LA14_0 <= '\\') || (LA14_0 >= '^' && LA14_0 <= '\uFFFE')) )
                    	    {
                    	        alt14 = 1;
                    	    }
                    	    
                    	
                    	    switch (alt14) 
                    		{
                    			case 1 :
                    			    // MacroScope\\MacroScope.g:927:7: ~ ']'
                    			    {
                    			    	if ( (input.LA(1) >= '\u0000' && input.LA(1) <= '\\') || (input.LA(1) >= '^' && input.LA(1) <= '\uFFFE') ) 
                    			    	{
                    			    	    input.Consume();
                    			    	failed = false;
                    			    	}
                    			    	else 
                    			    	{
                    			    	    if ( backtracking > 0 ) {failed = true; return ;}
                    			    	    MismatchedSetException mse =
                    			    	        new MismatchedSetException(null,input);
                    			    	    Recover(mse);    throw mse;
                    			    	}

                    			    
                    			    }
                    			    break;
                    	
                    			default:
                    			    goto loop14;
                    	    }
                    	} while (true);
                    	
                    	loop14:
                    		;	// Stops C# compiler whinging that label 'loop14' has no statements

                    	Match(']'); if (failed) return ;
                    	// MacroScope\\MacroScope.g:927:18: ( ']' (~ ']' )* ']' )*
                    	do 
                    	{
                    	    int alt16 = 2;
                    	    int LA16_0 = input.LA(1);
                    	    
                    	    if ( (LA16_0 == ']') )
                    	    {
                    	        alt16 = 1;
                    	    }
                    	    
                    	
                    	    switch (alt16) 
                    		{
                    			case 1 :
                    			    // MacroScope\\MacroScope.g:927:19: ']' (~ ']' )* ']'
                    			    {
                    			    	Match(']'); if (failed) return ;
                    			    	// MacroScope\\MacroScope.g:927:23: (~ ']' )*
                    			    	do 
                    			    	{
                    			    	    int alt15 = 2;
                    			    	    int LA15_0 = input.LA(1);
                    			    	    
                    			    	    if ( ((LA15_0 >= '\u0000' && LA15_0 <= '\\') || (LA15_0 >= '^' && LA15_0 <= '\uFFFE')) )
                    			    	    {
                    			    	        alt15 = 1;
                    			    	    }
                    			    	    
                    			    	
                    			    	    switch (alt15) 
                    			    		{
                    			    			case 1 :
                    			    			    // MacroScope\\MacroScope.g:927:24: ~ ']'
                    			    			    {
                    			    			    	if ( (input.LA(1) >= '\u0000' && input.LA(1) <= '\\') || (input.LA(1) >= '^' && input.LA(1) <= '\uFFFE') ) 
                    			    			    	{
                    			    			    	    input.Consume();
                    			    			    	failed = false;
                    			    			    	}
                    			    			    	else 
                    			    			    	{
                    			    			    	    if ( backtracking > 0 ) {failed = true; return ;}
                    			    			    	    MismatchedSetException mse =
                    			    			    	        new MismatchedSetException(null,input);
                    			    			    	    Recover(mse);    throw mse;
                    			    			    	}

                    			    			    
                    			    			    }
                    			    			    break;
                    			    	
                    			    			default:
                    			    			    goto loop15;
                    			    	    }
                    			    	} while (true);
                    			    	
                    			    	loop15:
                    			    		;	// Stops C# compiler whinging that label 'loop15' has no statements

                    			    	Match(']'); if (failed) return ;
                    			    
                    			    }
                    			    break;
                    	
                    			default:
                    			    goto loop16;
                    	    }
                    	} while (true);
                    	
                    	loop16:
                    		;	// Stops C# compiler whinging that label 'loop16' has no statements

                    
                    }
                    break;
                case 2 :
                    // MacroScope\\MacroScope.g:928:4: '\"' (~ '\"' )* '\"' ( '\"' (~ '\"' )* '\"' )*
                    {
                    	Match('\"'); if (failed) return ;
                    	// MacroScope\\MacroScope.g:928:8: (~ '\"' )*
                    	do 
                    	{
                    	    int alt17 = 2;
                    	    int LA17_0 = input.LA(1);
                    	    
                    	    if ( ((LA17_0 >= '\u0000' && LA17_0 <= '!') || (LA17_0 >= '#' && LA17_0 <= '\uFFFE')) )
                    	    {
                    	        alt17 = 1;
                    	    }
                    	    
                    	
                    	    switch (alt17) 
                    		{
                    			case 1 :
                    			    // MacroScope\\MacroScope.g:928:9: ~ '\"'
                    			    {
                    			    	if ( (input.LA(1) >= '\u0000' && input.LA(1) <= '!') || (input.LA(1) >= '#' && input.LA(1) <= '\uFFFE') ) 
                    			    	{
                    			    	    input.Consume();
                    			    	failed = false;
                    			    	}
                    			    	else 
                    			    	{
                    			    	    if ( backtracking > 0 ) {failed = true; return ;}
                    			    	    MismatchedSetException mse =
                    			    	        new MismatchedSetException(null,input);
                    			    	    Recover(mse);    throw mse;
                    			    	}

                    			    
                    			    }
                    			    break;
                    	
                    			default:
                    			    goto loop17;
                    	    }
                    	} while (true);
                    	
                    	loop17:
                    		;	// Stops C# compiler whinging that label 'loop17' has no statements

                    	Match('\"'); if (failed) return ;
                    	// MacroScope\\MacroScope.g:928:20: ( '\"' (~ '\"' )* '\"' )*
                    	do 
                    	{
                    	    int alt19 = 2;
                    	    int LA19_0 = input.LA(1);
                    	    
                    	    if ( (LA19_0 == '\"') )
                    	    {
                    	        alt19 = 1;
                    	    }
                    	    
                    	
                    	    switch (alt19) 
                    		{
                    			case 1 :
                    			    // MacroScope\\MacroScope.g:928:21: '\"' (~ '\"' )* '\"'
                    			    {
                    			    	Match('\"'); if (failed) return ;
                    			    	// MacroScope\\MacroScope.g:928:25: (~ '\"' )*
                    			    	do 
                    			    	{
                    			    	    int alt18 = 2;
                    			    	    int LA18_0 = input.LA(1);
                    			    	    
                    			    	    if ( ((LA18_0 >= '\u0000' && LA18_0 <= '!') || (LA18_0 >= '#' && LA18_0 <= '\uFFFE')) )
                    			    	    {
                    			    	        alt18 = 1;
                    			    	    }
                    			    	    
                    			    	
                    			    	    switch (alt18) 
                    			    		{
                    			    			case 1 :
                    			    			    // MacroScope\\MacroScope.g:928:26: ~ '\"'
                    			    			    {
                    			    			    	if ( (input.LA(1) >= '\u0000' && input.LA(1) <= '!') || (input.LA(1) >= '#' && input.LA(1) <= '\uFFFE') ) 
                    			    			    	{
                    			    			    	    input.Consume();
                    			    			    	failed = false;
                    			    			    	}
                    			    			    	else 
                    			    			    	{
                    			    			    	    if ( backtracking > 0 ) {failed = true; return ;}
                    			    			    	    MismatchedSetException mse =
                    			    			    	        new MismatchedSetException(null,input);
                    			    			    	    Recover(mse);    throw mse;
                    			    			    	}

                    			    			    
                    			    			    }
                    			    			    break;
                    			    	
                    			    			default:
                    			    			    goto loop18;
                    			    	    }
                    			    	} while (true);
                    			    	
                    			    	loop18:
                    			    		;	// Stops C# compiler whinging that label 'loop18' has no statements

                    			    	Match('\"'); if (failed) return ;
                    			    
                    			    }
                    			    break;
                    	
                    			default:
                    			    goto loop19;
                    	    }
                    	} while (true);
                    	
                    	loop19:
                    		;	// Stops C# compiler whinging that label 'loop19' has no statements

                    
                    }
                    break;
                case 3 :
                    // MacroScope\\MacroScope.g:929:4: '`' (~ '`' )* '`'
                    {
                    	Match('`'); if (failed) return ;
                    	// MacroScope\\MacroScope.g:929:8: (~ '`' )*
                    	do 
                    	{
                    	    int alt20 = 2;
                    	    int LA20_0 = input.LA(1);
                    	    
                    	    if ( ((LA20_0 >= '\u0000' && LA20_0 <= '_') || (LA20_0 >= 'a' && LA20_0 <= '\uFFFE')) )
                    	    {
                    	        alt20 = 1;
                    	    }
                    	    
                    	
                    	    switch (alt20) 
                    		{
                    			case 1 :
                    			    // MacroScope\\MacroScope.g:929:9: ~ '`'
                    			    {
                    			    	if ( (input.LA(1) >= '\u0000' && input.LA(1) <= '_') || (input.LA(1) >= 'a' && input.LA(1) <= '\uFFFE') ) 
                    			    	{
                    			    	    input.Consume();
                    			    	failed = false;
                    			    	}
                    			    	else 
                    			    	{
                    			    	    if ( backtracking > 0 ) {failed = true; return ;}
                    			    	    MismatchedSetException mse =
                    			    	        new MismatchedSetException(null,input);
                    			    	    Recover(mse);    throw mse;
                    			    	}

                    			    
                    			    }
                    			    break;
                    	
                    			default:
                    			    goto loop20;
                    	    }
                    	} while (true);
                    	
                    	loop20:
                    		;	// Stops C# compiler whinging that label 'loop20' has no statements

                    	Match('`'); if (failed) return ;
                    
                    }
                    break;
            
            }
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end QuotedIdentifier

    // $ANTLR start Variable 
    public void mVariable() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = Variable;
            // MacroScope\\MacroScope.g:939:10: ( ( '@' | ':' ) Letter WordTail )
            // MacroScope\\MacroScope.g:940:2: ( '@' | ':' ) Letter WordTail
            {
            	if ( input.LA(1) == ':' || input.LA(1) == '@' ) 
            	{
            	    input.Consume();
            	failed = false;
            	}
            	else 
            	{
            	    if ( backtracking > 0 ) {failed = true; return ;}
            	    MismatchedSetException mse =
            	        new MismatchedSetException(null,input);
            	    Recover(mse);    throw mse;
            	}

            	mLetter(); if (failed) return ;
            	mWordTail(); if (failed) return ;
            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end Variable

    // $ANTLR start AsciiStringRun 
    public void mAsciiStringRun() // throws RecognitionException [2]
    ]]></source>
</chunk>
<method name="mAsciiStringRun" namespace="MacroScope" type="MacroScope.MacroScopeLexer" typeName="MacroScopeLexer" token="600005c" module="MacroScope.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="13"/>
<hit index="2" value="13"/>
<hit index="3" value="13"/>
<hit index="4" value="13"/>
<hit index="5" value="26"/>
<hit index="6" value="13"/>
<hit index="7" value="13"/>
<hit index="8" value="13"/>
<hit index="9" value="12"/>
<hit index="10" value="12"/>
<hit index="11" value="1"/>
<hit index="12" value="12"/>
<hit index="13" value="12"/>
<hit index="14" value="12"/>
<hit index="15" value="12"/>
<hit index="16" value="24"/>
<hit index="17" value="12"/>
<hit index="18" value="12"/>
<hit index="19" value="12"/>
<hit index="20" value="12"/>
<hit index="21" value="12"/>
<hit index="22" value="24"/>
<hit index="23" value="12"/>
<hit index="24" value="12"/>
<hit index="25" value="12"/>
<hit index="26" value="12"/>
<hit index="27" value="12"/>
<hit index="28" value="24"/>
<hit index="29" value="12"/>
<hit index="30" value="12"/>
<hit index="31" value="12"/>
<hit index="32" value="12"/>
<hit index="33" value="12"/>
<hit index="34" value="24"/>
<hit index="35" value="12"/>
<hit index="36" value="12"/>
<hit index="37" value="12"/>
<hit index="38" value="12"/>
<hit index="39" value="12"/>
<hit index="40" value="24"/>
<hit index="41" value="12"/>
<hit index="42" value="12"/>
<hit index="43" value="12"/>
<hit index="44" value="12"/>
<hit index="45" value="12"/>
<hit index="46" value="24"/>
<hit index="47" value="12"/>
<hit index="48" value="12"/>
<hit index="62" value="1"/>
<hit index="75" value="1"/>
<hit index="76" value="1"/>
<hit index="77" value="12"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="23" total="35" coveredRatio="0.65714285714285714"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        try 
    	]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:944:16: ( ( '\\t' | ' ' .. '&' | '(' .. '~' )+ )
            // MacroScope\\MacroScope.g:946:2: ( '\\t' | ' ' .. '&' | '(' .. '~' )+
            ]]></source>
</chunk>
<chunk hits="1" offset="0002" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	// MacroScope\\MacroScope.g:946:2: ( '\\t' | ' ' .. '&' | '(' .. '~' )+
            	]]></source>
</chunk>
<chunk hits="1" offset="0003" domain="userortestcode"><source><![CDATA[int cnt22 = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	do 
            	]]></source>
</chunk>
<chunk hits="25" offset="0005" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="25" offset="0006" domain="userortestcode"><source><![CDATA[int alt22 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="25" offset="0008" domain="userortestcode"><source><![CDATA[int LA22_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	    ]]></source>
</chunk>
<chunk hits="39" offset="0015" domain="userortestcode"><source><![CDATA[if ( (LA22_0 == '\t' || (LA22_0 >= ' ' && LA22_0 <= '&') || (LA22_0 >= '(' && LA22_0 <= '~')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="12" offset="003a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="12" offset="003b" domain="userortestcode"><source><![CDATA[alt22 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="12" offset="003d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	
            	    ]]></source>
</chunk>
<chunk hits="13" offset="003e" domain="userortestcode"><source><![CDATA[switch (alt22)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            		{
            			case 1 :
            			    // MacroScope\\MacroScope.g:
            			    ]]></source>
</chunk>
<chunk hits="12" offset="004b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="12" offset="004c" domain="userortestcode"><source><![CDATA[if ( input.LA(1) == '\t' || (input.LA(1) >= ' ' && input.LA(1) <= '&') || (input.LA(1) >= '(' && input.LA(1) <= '~') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            			    	]]></source>
</chunk>
<chunk hits="12" offset="00a8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	    ]]></source>
</chunk>
<chunk hits="12" offset="00a9" domain="userortestcode"><source><![CDATA[input.Consume();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="36" offset="00b5" domain="userortestcode"><source><![CDATA[failed = false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="24" offset="00bc" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	else 
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00bf" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	    ]]></source>
</chunk>
<chunk hits="0" offset="00c0" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00d2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="00d3" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00da" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
            			    	    ]]></source>
</chunk>
<chunk hits="0" offset="00dc" domain="userortestcode"><source><![CDATA[MismatchedSetException mse =
            			    	        new MismatchedSetException(null,input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	    ]]></source>
</chunk>
<chunk hits="0" offset="00e9" domain="userortestcode"><source><![CDATA[Recover(mse);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[    ]]></source>
</chunk>
<chunk hits="0" offset="00f1" domain="userortestcode"><source><![CDATA[throw mse;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	}

            			    
            			    ]]></source>
</chunk>
<chunk hits="24" offset="00f3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    ]]></source>
</chunk>
<chunk hits="24" offset="00f4" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            			default:
            			    ]]></source>
</chunk>
<chunk hits="1" offset="00f6" domain="userortestcode"><source><![CDATA[if ( cnt22 >= 1 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="0100" domain="userortestcode"><source><![CDATA[goto loop22;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    ]]></source>
</chunk>
<chunk hits="0" offset="0102" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0114" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="0115" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="011c" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
            		            ]]></source>
</chunk>
<chunk hits="0" offset="011e" domain="userortestcode"><source><![CDATA[EarlyExitException eee =
            		                new EarlyExitException(22, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            		            ]]></source>
</chunk>
<chunk hits="0" offset="012d" domain="userortestcode"><source><![CDATA[throw eee;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    }
            	    ]]></source>
</chunk>
<chunk hits="24" offset="0130" domain="userortestcode"><source><![CDATA[cnt22++;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="24" offset="0134" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="24" offset="0135" domain="userortestcode"><source><![CDATA[while (true);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	loop22:
            		;	// Stops C# compiler whinging that label 'loop22' has no statements

            
            ]]></source>
</chunk>
<chunk hits="1" offset="013d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="1" offset="013e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        finally 
    	]]></source>
</chunk>
<chunk hits="1" offset="0141" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0142" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="1" offset="0146" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end AsciiStringRun

    // $ANTLR start AsciiStringLiteral 
    public void mAsciiStringLiteral() // throws RecognitionException [2]
    ]]></source>
</chunk>
<method name="mAsciiStringLiteral" namespace="MacroScope" type="MacroScope.MacroScopeLexer" typeName="MacroScopeLexer" token="600005d" module="MacroScope.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="2"/>
<hit index="5" value="1"/>
<hit index="7" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
<hit index="10" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="2"/>
<hit index="16" value="1"/>
<hit index="17" value="1"/>
<hit index="18" value="1"/>
<hit index="19" value="1"/>
<hit index="20" value="1"/>
<hit index="22" value="1"/>
<hit index="23" value="1"/>
<hit index="24" value="1"/>
<hit index="25" value="2"/>
<hit index="26" value="1"/>
<hit index="27" value="1"/>
<hit index="28" value="1"/>
<hit index="30" value="1"/>
<hit index="31" value="1"/>
<hit index="32" value="1"/>
<hit index="33" value="1"/>
<hit index="34" value="2"/>
<hit index="35" value="1"/>
<hit index="37" value="1"/>
<hit index="38" value="1"/>
<hit index="39" value="1"/>
<hit index="40" value="1"/>
<hit index="41" value="1"/>
<hit index="42" value="1"/>
<hit index="43" value="2"/>
<hit index="44" value="1"/>
<hit index="45" value="1"/>
<hit index="46" value="1"/>
<hit index="47" value="1"/>
<hit index="48" value="1"/>
<hit index="49" value="2"/>
<hit index="50" value="1"/>
<hit index="52" value="1"/>
<hit index="53" value="1"/>
<hit index="54" value="1"/>
<hit index="55" value="1"/>
<hit index="56" value="2"/>
<hit index="58" value="1"/>
<hit index="116" value="1"/>
<hit index="117" value="1"/>
<hit index="118" value="1"/>
<hit index="125" value="1"/>
<hit index="126" value="1"/>
<hit index="128" value="1"/>
<hit index="129" value="1"/>
</hits>
<tags><tag offset="0088">call to uninstrumented method System.Int32 Antlr.Runtime.Lexer.get_CharIndex()</tag>
<tag offset="00bc">call to uninstrumented method CommonToken..ctor(ICharStream, Int32, Int32, Int32, Int32)</tag>
</tags>
<coverage domain="userortestcode" unit="block" covered="26" total="64" coveredRatio="0.40625"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        try 
    	]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0002" domain="userortestcode"><source><![CDATA[int _type = AsciiStringLiteral;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0005" domain="userortestcode"><source><![CDATA[Token s = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
            // MacroScope\\MacroScope.g:949:20: ( '\\'' (s= AsciiStringRun )? '\\'' ( '\\'' (s= AsciiStringRun )? '\\'' )* )
            // MacroScope\\MacroScope.g:950:2: '\\'' (s= AsciiStringRun )? '\\'' ( '\\'' (s= AsciiStringRun )? '\\'' )*
            ]]></source>
</chunk>
<chunk hits="1" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="1" offset="0008" domain="userortestcode"><source><![CDATA[Match('\'');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="3" offset="0011" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0020" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="1" offset="0025" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="1" offset="0037" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	   ]]></source>
</chunk>
<chunk hits="1" offset="0038" domain="userortestcode"><source><![CDATA[text = "";]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="0043" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	// MacroScope\\MacroScope.g:951:2: (s= AsciiStringRun )?
            	]]></source>
</chunk>
<chunk hits="2" offset="0044" domain="userortestcode"><source><![CDATA[int alt23 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0046" domain="userortestcode"><source><![CDATA[int LA23_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	]]></source>
</chunk>
<chunk hits="3" offset="0053" domain="userortestcode"><source><![CDATA[if ( (LA23_0 == '\t' || (LA23_0 >= ' ' && LA23_0 <= '&') || (LA23_0 >= '(' && LA23_0 <= '~')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="1" offset="0078" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="1" offset="0079" domain="userortestcode"><source><![CDATA[alt23 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="1" offset="007b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="1" offset="007c" domain="userortestcode"><source><![CDATA[switch (alt23)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:951:4: s= AsciiStringRun
            	        ]]></source>
</chunk>
<chunk hits="1" offset="0086" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="1" offset="0087" domain="userortestcode" tag="true"><tooltip><![CDATA[call to uninstrumented method System.Int32 Antlr.Runtime.Lexer.get_CharIndex()]]></tooltip>
<source><![CDATA[int sStart1227 = CharIndex;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="3" offset="008f" domain="userortestcode"><source><![CDATA[mAsciiStringRun();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="0096" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00a5" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="1" offset="00aa" domain="userortestcode" tag="true"><tooltip><![CDATA[call to uninstrumented method CommonToken..ctor(ICharStream, Int32, Int32, Int32, Int32)]]></tooltip>
<source><![CDATA[s = new CommonToken(input, Token.INVALID_TOKEN_TYPE, Token.DEFAULT_CHANNEL, sStart1227, CharIndex-1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="1" offset="00c2" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="1" offset="00d4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	   ]]></source>
</chunk>
<chunk hits="1" offset="00d5" domain="userortestcode"><source><![CDATA[text = s.Text;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="2" offset="00e1" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        
            	        ]]></source>
</chunk>
<chunk hits="2" offset="00e2" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="2" offset="00e3" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	}

            	]]></source>
</chunk>
<chunk hits="2" offset="00e5" domain="userortestcode"><source><![CDATA[Match('\'');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="3" offset="00ee" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00fd" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	// MacroScope\\MacroScope.g:952:2: ( '\\'' (s= AsciiStringRun )? '\\'' )*
            	do 
            	]]></source>
</chunk>
<chunk hits="1" offset="0102" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="1" offset="0103" domain="userortestcode"><source><![CDATA[int alt25 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="1" offset="0106" domain="userortestcode"><source><![CDATA[int LA25_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	    ]]></source>
</chunk>
<chunk hits="3" offset="0114" domain="userortestcode"><source><![CDATA[if ( (LA25_0 == '\'') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0123" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0124" domain="userortestcode"><source><![CDATA[alt25 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0127" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	
            	    ]]></source>
</chunk>
<chunk hits="1" offset="0128" domain="userortestcode"><source><![CDATA[switch (alt25)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            		{
            			case 1 :
            			    // MacroScope\\MacroScope.g:952:4: '\\'' (s= AsciiStringRun )? '\\''
            			    ]]></source>
</chunk>
<chunk hits="0" offset="0136" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="0137" domain="userortestcode"><source><![CDATA[Match('\'');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0140" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="014f" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="0154" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            			    	]]></source>
</chunk>
<chunk hits="0" offset="0166" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	  
            			    	  			]]></source>
</chunk>
<chunk hits="0" offset="0167" domain="userortestcode"><source><![CDATA[text = text + "\'";]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	  		
            			    	]]></source>
</chunk>
<chunk hits="0" offset="017d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	// MacroScope\\MacroScope.g:954:5: (s= AsciiStringRun )?
            			    	]]></source>
</chunk>
<chunk hits="0" offset="017e" domain="userortestcode"><source><![CDATA[int alt24 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="0181" domain="userortestcode"><source><![CDATA[int LA24_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	
            			    	]]></source>
</chunk>
<chunk hits="0" offset="018f" domain="userortestcode"><source><![CDATA[if ( (LA24_0 == '\t' || (LA24_0 >= ' ' && LA24_0 <= '&') || (LA24_0 >= '(' && LA24_0 <= '~')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="01b9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	    ]]></source>
</chunk>
<chunk hits="0" offset="01ba" domain="userortestcode"><source><![CDATA[alt24 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="01bd" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="01be" domain="userortestcode"><source><![CDATA[switch (alt24)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            			    	{
            			    	    case 1 :
            			    	        // MacroScope\\MacroScope.g:954:7: s= AsciiStringRun
            			    	        ]]></source>
</chunk>
<chunk hits="0" offset="01c9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	        	]]></source>
</chunk>
<chunk hits="0" offset="01ca" domain="userortestcode"><source><![CDATA[int sStart1249 = CharIndex;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	        	]]></source>
</chunk>
<chunk hits="0" offset="01d2" domain="userortestcode"><source><![CDATA[mAsciiStringRun();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="01d9" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="01e8" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	        	]]></source>
</chunk>
<chunk hits="0" offset="01ea" domain="userortestcode"><source><![CDATA[s = new CommonToken(input, Token.INVALID_TOKEN_TYPE, Token.DEFAULT_CHANNEL, sStart1249, CharIndex-1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	        	]]></source>
</chunk>
<chunk hits="0" offset="0202" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            			    	        	]]></source>
</chunk>
<chunk hits="0" offset="0214" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	        	   ]]></source>
</chunk>
<chunk hits="0" offset="0215" domain="userortestcode"><source><![CDATA[text = text + s.Text;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            			    	        	]]></source>
</chunk>
<chunk hits="0" offset="022c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	        
            			    	        ]]></source>
</chunk>
<chunk hits="0" offset="022d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	        ]]></source>
</chunk>
<chunk hits="0" offset="022e" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	
            			    	}

            			    	]]></source>
</chunk>
<chunk hits="0" offset="0230" domain="userortestcode"><source><![CDATA[Match('\'');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0239" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0248" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    
            			    ]]></source>
</chunk>
<chunk hits="0" offset="024a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    ]]></source>
</chunk>
<chunk hits="0" offset="024b" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            			default:
            			    ]]></source>
</chunk>
<chunk hits="1" offset="024d" domain="userortestcode"><source><![CDATA[goto loop25;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    }
            	]]></source>
</chunk>
<chunk hits="0" offset="024f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0250" domain="userortestcode"><source><![CDATA[while (true);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	loop25:
            		;	// Stops C# compiler whinging that label 'loop25' has no statements

            
            ]]></source>
</chunk>
<chunk hits="1" offset="0258" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
            ]]></source>
</chunk>
<chunk hits="1" offset="0259" domain="userortestcode"><source><![CDATA[this.type = _type;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0260" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        finally 
    	]]></source>
</chunk>
<chunk hits="2" offset="0263" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0264" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="2" offset="0268" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end AsciiStringLiteral

    // $ANTLR start UnicodeStringRun 
    public void mUnicodeStringRun() // throws RecognitionException [2]
    {
        try 
    	{
            // MacroScope\\MacroScope.g:959:18: ( (~ '\\'' )+ )
            // MacroScope\\MacroScope.g:960:2: (~ '\\'' )+
            {
            	// MacroScope\\MacroScope.g:960:2: (~ '\\'' )+
            	int cnt26 = 0;
            	do 
            	{
            	    int alt26 = 2;
            	    int LA26_0 = input.LA(1);
            	    
            	    if ( ((LA26_0 >= '\u0000' && LA26_0 <= '&') || (LA26_0 >= '(' && LA26_0 <= '\uFFFE')) )
            	    {
            	        alt26 = 1;
            	    }
            	    
            	
            	    switch (alt26) 
            		{
            			case 1 :
            			    // MacroScope\\MacroScope.g:960:3: ~ '\\''
            			    {
            			    	if ( (input.LA(1) >= '\u0000' && input.LA(1) <= '&') || (input.LA(1) >= '(' && input.LA(1) <= '\uFFFE') ) 
            			    	{
            			    	    input.Consume();
            			    	failed = false;
            			    	}
            			    	else 
            			    	{
            			    	    if ( backtracking > 0 ) {failed = true; return ;}
            			    	    MismatchedSetException mse =
            			    	        new MismatchedSetException(null,input);
            			    	    Recover(mse);    throw mse;
            			    	}

            			    
            			    }
            			    break;
            	
            			default:
            			    if ( cnt26 >= 1 ) goto loop26;
            			    if ( backtracking > 0 ) {failed = true; return ;}
            		            EarlyExitException eee =
            		                new EarlyExitException(26, input);
            		            throw eee;
            	    }
            	    cnt26++;
            	} while (true);
            	
            	loop26:
            		;	// Stops C# compiler whinging that label 'loop26' has no statements

            
            }

        }
        finally 
    	{
        }
    }
    // $ANTLR end UnicodeStringRun

    // $ANTLR start UnicodeStringLiteral 
    public void mUnicodeStringLiteral() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = UnicodeStringLiteral;
            Token s = null;
    
            // MacroScope\\MacroScope.g:963:22: ( 'n' '\\'' (s= UnicodeStringRun )? '\\'' ( '\\'' (s= UnicodeStringRun )? '\\'' )* )
            // MacroScope\\MacroScope.g:964:2: 'n' '\\'' (s= UnicodeStringRun )? '\\'' ( '\\'' (s= UnicodeStringRun )? '\\'' )*
            {
            	Match('n'); if (failed) return ;
            	Match('\''); if (failed) return ;
            	if ( backtracking == 0 ) 
            	{
            	   text = ""; 
            	}
            	// MacroScope\\MacroScope.g:965:2: (s= UnicodeStringRun )?
            	int alt27 = 2;
            	int LA27_0 = input.LA(1);
            	
            	if ( ((LA27_0 >= '\u0000' && LA27_0 <= '&') || (LA27_0 >= '(' && LA27_0 <= '\uFFFE')) )
            	{
            	    alt27 = 1;
            	}
            	switch (alt27) 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:965:4: s= UnicodeStringRun
            	        {
            	        	int sStart1305 = CharIndex;
            	        	mUnicodeStringRun(); if (failed) return ;
            	        	s = new CommonToken(input, Token.INVALID_TOKEN_TYPE, Token.DEFAULT_CHANNEL, sStart1305, CharIndex-1);
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	   text = s.Text; 
            	        	}
            	        
            	        }
            	        break;
            	
            	}

            	Match('\''); if (failed) return ;
            	// MacroScope\\MacroScope.g:966:2: ( '\\'' (s= UnicodeStringRun )? '\\'' )*
            	do 
            	{
            	    int alt29 = 2;
            	    int LA29_0 = input.LA(1);
            	    
            	    if ( (LA29_0 == '\'') )
            	    {
            	        alt29 = 1;
            	    }
            	    
            	
            	    switch (alt29) 
            		{
            			case 1 :
            			    // MacroScope\\MacroScope.g:966:4: '\\'' (s= UnicodeStringRun )? '\\''
            			    {
            			    	Match('\''); if (failed) return ;
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	  
            			    	  			text = text + "\'";
            			    	  		
            			    	}
            			    	// MacroScope\\MacroScope.g:968:5: (s= UnicodeStringRun )?
            			    	int alt28 = 2;
            			    	int LA28_0 = input.LA(1);
            			    	
            			    	if ( ((LA28_0 >= '\u0000' && LA28_0 <= '&') || (LA28_0 >= '(' && LA28_0 <= '\uFFFE')) )
            			    	{
            			    	    alt28 = 1;
            			    	}
            			    	switch (alt28) 
            			    	{
            			    	    case 1 :
            			    	        // MacroScope\\MacroScope.g:968:7: s= UnicodeStringRun
            			    	        {
            			    	        	int sStart1327 = CharIndex;
            			    	        	mUnicodeStringRun(); if (failed) return ;
            			    	        	s = new CommonToken(input, Token.INVALID_TOKEN_TYPE, Token.DEFAULT_CHANNEL, sStart1327, CharIndex-1);
            			    	        	if ( backtracking == 0 ) 
            			    	        	{
            			    	        	   text = text + s.Text; 
            			    	        	}
            			    	        
            			    	        }
            			    	        break;
            			    	
            			    	}

            			    	Match('\''); if (failed) return ;
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop29;
            	    }
            	} while (true);
            	
            	loop29:
            		;	// Stops C# compiler whinging that label 'loop29' has no statements

            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end UnicodeStringLiteral

    // $ANTLR start HexLiteral 
    public void mHexLiteral() // throws RecognitionException [2]
    {
        try 
    	{
            // MacroScope\\MacroScope.g:973:12: ()
            // MacroScope\\MacroScope.g:975:2: 
            {
            }

        }
        finally 
    	{
        }
    }
    // $ANTLR end HexLiteral

    // $ANTLR start MINUS 
    public void mMINUS() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = MINUS;
            // MacroScope\\MacroScope.g:977:7: ( '-' )
            // MacroScope\\MacroScope.g:977:9: '-'
            {
            	Match('-'); if (failed) return ;
            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end MINUS

    // $ANTLR start COLON 
    public void mCOLON() // throws RecognitionException [2]
    {
        try 
    	{
            int _type = COLON;
            // MacroScope\\MacroScope.g:978:7: ( ':' )
            // MacroScope\\MacroScope.g:978:9: ':'
            {
            	Match(':'); if (failed) return ;
            
            }
    
            this.type = _type;
        }
        finally 
    	{
        }
    }
    // $ANTLR end COLON

    // $ANTLR start Whitespace 
    public void mWhitespace() // throws RecognitionException [2]
    ]]></source>
</chunk>
<method name="mWhitespace" namespace="MacroScope" type="MacroScope.MacroScopeLexer" typeName="MacroScopeLexer" token="6000063" module="MacroScope.dll"><hits><hit index="0" value="12"/>
<hit index="1" value="24"/>
<hit index="2" value="24"/>
<hit index="3" value="24"/>
<hit index="4" value="24"/>
<hit index="5" value="48"/>
<hit index="6" value="24"/>
<hit index="7" value="24"/>
<hit index="8" value="24"/>
<hit index="9" value="12"/>
<hit index="10" value="12"/>
<hit index="11" value="12"/>
<hit index="12" value="12"/>
<hit index="13" value="12"/>
<hit index="14" value="12"/>
<hit index="15" value="24"/>
<hit index="16" value="12"/>
<hit index="17" value="12"/>
<hit index="18" value="12"/>
<hit index="19" value="12"/>
<hit index="20" value="12"/>
<hit index="21" value="24"/>
<hit index="22" value="12"/>
<hit index="23" value="12"/>
<hit index="24" value="12"/>
<hit index="25" value="12"/>
<hit index="26" value="12"/>
<hit index="27" value="24"/>
<hit index="28" value="12"/>
<hit index="29" value="12"/>
<hit index="30" value="12"/>
<hit index="31" value="12"/>
<hit index="32" value="12"/>
<hit index="33" value="24"/>
<hit index="34" value="12"/>
<hit index="35" value="12"/>
<hit index="36" value="12"/>
<hit index="37" value="12"/>
<hit index="38" value="12"/>
<hit index="39" value="24"/>
<hit index="40" value="12"/>
<hit index="41" value="12"/>
<hit index="55" value="12"/>
<hit index="65" value="12"/>
<hit index="66" value="12"/>
<hit index="67" value="12"/>
<hit index="68" value="12"/>
<hit index="69" value="12"/>
<hit index="70" value="12"/>
<hit index="74" value="12"/>
<hit index="75" value="12"/>
</hits>
<tags><tag offset="009d">call to uninstrumented method System.Void Antlr.Runtime.ANTLRStringStream.Consume()</tag>
</tags>
<coverage domain="userortestcode" unit="block" covered="21" total="32" coveredRatio="0.65625"/>
</method>
<chunk hits="12" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        try 
    	]]></source>
</chunk>
<chunk hits="12" offset="0001" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="12" offset="0002" domain="userortestcode"><source><![CDATA[int _type = Whitespace;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:980:12: ( ( '\\t' | ' ' | '\\r' | '\\n' )+ )
            // MacroScope\\MacroScope.g:980:14: ( '\\t' | ' ' | '\\r' | '\\n' )+
            ]]></source>
</chunk>
<chunk hits="12" offset="0005" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	// MacroScope\\MacroScope.g:980:14: ( '\\t' | ' ' | '\\r' | '\\n' )+
            	]]></source>
</chunk>
<chunk hits="12" offset="0006" domain="userortestcode"><source><![CDATA[int cnt30 = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	do 
            	]]></source>
</chunk>
<chunk hits="36" offset="0008" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="36" offset="0009" domain="userortestcode"><source><![CDATA[int alt30 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="36" offset="000b" domain="userortestcode"><source><![CDATA[int LA30_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	    ]]></source>
</chunk>
<chunk hits="72" offset="0018" domain="userortestcode"><source><![CDATA[if ( ((LA30_0 >= '\t' && LA30_0 <= '\n') || LA30_0 == '\r' || LA30_0 == ' ') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="12" offset="0038" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="12" offset="0039" domain="userortestcode"><source><![CDATA[alt30 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="12" offset="003b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	
            	    ]]></source>
</chunk>
<chunk hits="24" offset="003c" domain="userortestcode"><source><![CDATA[switch (alt30)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            		{
            			case 1 :
            			    // MacroScope\\MacroScope.g:
            			    ]]></source>
</chunk>
<chunk hits="12" offset="0049" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="12" offset="004a" domain="userortestcode"><source><![CDATA[if ( (input.LA(1) >= '\t' && input.LA(1) <= '\n') || input.LA(1) == '\r' || input.LA(1) == ' ' )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            			    	]]></source>
</chunk>
<chunk hits="12" offset="0096" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	    ]]></source>
</chunk>
<chunk hits="12" offset="0097" domain="userortestcode" tag="true"><tooltip><![CDATA[call to uninstrumented method System.Void Antlr.Runtime.ANTLRStringStream.Consume()]]></tooltip>
<source><![CDATA[input.Consume();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="36" offset="00a3" domain="userortestcode"><source><![CDATA[failed = false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="24" offset="00aa" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	else 
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00ad" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	    ]]></source>
</chunk>
<chunk hits="0" offset="00ae" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00c0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="00c1" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00c8" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
            			    	    ]]></source>
</chunk>
<chunk hits="0" offset="00cd" domain="userortestcode"><source><![CDATA[MismatchedSetException mse =
            			    	        new MismatchedSetException(null,input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	    ]]></source>
</chunk>
<chunk hits="0" offset="00db" domain="userortestcode"><source><![CDATA[Recover(mse);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[    ]]></source>
</chunk>
<chunk hits="0" offset="00e4" domain="userortestcode"><source><![CDATA[throw mse;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	}

            			    
            			    ]]></source>
</chunk>
<chunk hits="24" offset="00e7" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    ]]></source>
</chunk>
<chunk hits="24" offset="00e8" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            			default:
            			    ]]></source>
</chunk>
<chunk hits="12" offset="00ea" domain="userortestcode"><source><![CDATA[if ( cnt30 >= 1 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="12" offset="00f4" domain="userortestcode"><source><![CDATA[goto loop30;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    ]]></source>
</chunk>
<chunk hits="0" offset="00f6" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0108" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="0109" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0110" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
            		            ]]></source>
</chunk>
<chunk hits="0" offset="0112" domain="userortestcode"><source><![CDATA[EarlyExitException eee =
            		                new EarlyExitException(30, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            		            ]]></source>
</chunk>
<chunk hits="0" offset="0121" domain="userortestcode"><source><![CDATA[throw eee;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    }
            	    ]]></source>
</chunk>
<chunk hits="24" offset="0124" domain="userortestcode"><source><![CDATA[cnt30++;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="24" offset="0128" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="24" offset="0129" domain="userortestcode"><source><![CDATA[while (true);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	loop30:
            		;	// Stops C# compiler whinging that label 'loop30' has no statements

            	]]></source>
</chunk>
<chunk hits="12" offset="0131" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="12" offset="0143" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	   ]]></source>
</chunk>
<chunk hits="12" offset="0144" domain="userortestcode"><source><![CDATA[channel = HIDDEN;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="24" offset="014c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="24" offset="014d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
            ]]></source>
</chunk>
<chunk hits="24" offset="014e" domain="userortestcode"><source><![CDATA[this.type = _type;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="24" offset="0155" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        finally 
    	]]></source>
</chunk>
<chunk hits="24" offset="0158" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="24" offset="0159" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="24" offset="015d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end Whitespace

    override public void mTokens() // throws RecognitionException 
    ]]></source>
</chunk>
<method name="mTokens" namespace="MacroScope" type="MacroScope.MacroScopeLexer" typeName="MacroScopeLexer" token="6000064" module="MacroScope.dll"><hits><hit index="0" value="28"/>
<hit index="1" value="28"/>
<hit index="2" value="28"/>
<hit index="3" value="28"/>
<hit index="4" value="28"/>
<hit index="5" value="56"/>
<hit index="504" value="2"/>
<hit index="505" value="2"/>
<hit index="506" value="2"/>
<hit index="507" value="2"/>
<hit index="508" value="4"/>
<hit index="509" value="2"/>
<hit index="534" value="2"/>
<hit index="535" value="2"/>
<hit index="536" value="2"/>
<hit index="537" value="2"/>
<hit index="538" value="4"/>
<hit index="539" value="2"/>
<hit index="540" value="2"/>
<hit index="541" value="2"/>
<hit index="542" value="2"/>
<hit index="543" value="2"/>
<hit index="544" value="4"/>
<hit index="545" value="2"/>
<hit index="546" value="2"/>
<hit index="547" value="2"/>
<hit index="548" value="2"/>
<hit index="549" value="2"/>
<hit index="550" value="4"/>
<hit index="553" value="2"/>
<hit index="873" value="1"/>
<hit index="874" value="1"/>
<hit index="875" value="1"/>
<hit index="876" value="1"/>
<hit index="877" value="2"/>
<hit index="878" value="1"/>
<hit index="879" value="1"/>
<hit index="1097" value="2"/>
<hit index="1098" value="2"/>
<hit index="1099" value="2"/>
<hit index="1100" value="2"/>
<hit index="1101" value="4"/>
<hit index="1105" value="2"/>
<hit index="1106" value="2"/>
<hit index="1107" value="2"/>
<hit index="1108" value="2"/>
<hit index="1109" value="4"/>
<hit index="1110" value="2"/>
<hit index="1123" value="2"/>
<hit index="1124" value="2"/>
<hit index="1125" value="2"/>
<hit index="1126" value="2"/>
<hit index="1127" value="4"/>
<hit index="1128" value="2"/>
<hit index="1129" value="2"/>
<hit index="1130" value="2"/>
<hit index="1131" value="2"/>
<hit index="1132" value="2"/>
<hit index="1133" value="4"/>
<hit index="1134" value="2"/>
<hit index="1135" value="2"/>
<hit index="1136" value="2"/>
<hit index="1137" value="2"/>
<hit index="1138" value="2"/>
<hit index="1139" value="4"/>
<hit index="1140" value="2"/>
<hit index="1141" value="2"/>
<hit index="1142" value="2"/>
<hit index="1143" value="2"/>
<hit index="1144" value="2"/>
<hit index="1145" value="4"/>
<hit index="1148" value="2"/>
<hit index="1298" value="2"/>
<hit index="1299" value="2"/>
<hit index="1300" value="2"/>
<hit index="1301" value="2"/>
<hit index="1302" value="4"/>
<hit index="1303" value="2"/>
<hit index="1406" value="2"/>
<hit index="1407" value="2"/>
<hit index="1408" value="2"/>
<hit index="1409" value="2"/>
<hit index="1410" value="4"/>
<hit index="1411" value="2"/>
<hit index="1412" value="2"/>
<hit index="1413" value="2"/>
<hit index="1414" value="2"/>
<hit index="1415" value="2"/>
<hit index="1416" value="4"/>
<hit index="1417" value="2"/>
<hit index="1418" value="2"/>
<hit index="1419" value="2"/>
<hit index="1420" value="2"/>
<hit index="1421" value="2"/>
<hit index="1422" value="4"/>
<hit index="1423" value="2"/>
<hit index="1435" value="2"/>
<hit index="1436" value="2"/>
<hit index="1437" value="2"/>
<hit index="1438" value="2"/>
<hit index="1439" value="4"/>
<hit index="1440" value="2"/>
<hit index="1441" value="2"/>
<hit index="1442" value="2"/>
<hit index="1443" value="2"/>
<hit index="1444" value="2"/>
<hit index="1445" value="4"/>
<hit index="1448" value="2"/>
<hit index="1524" value="2"/>
<hit index="1525" value="2"/>
<hit index="1526" value="2"/>
<hit index="1527" value="2"/>
<hit index="1528" value="4"/>
<hit index="1529" value="1"/>
<hit index="1652" value="2"/>
<hit index="1653" value="2"/>
<hit index="1654" value="2"/>
<hit index="1748" value="2"/>
<hit index="1749" value="2"/>
<hit index="1750" value="2"/>
<hit index="1788" value="2"/>
<hit index="1789" value="2"/>
<hit index="1790" value="2"/>
<hit index="1816" value="2"/>
<hit index="1817" value="2"/>
<hit index="1818" value="2"/>
<hit index="1852" value="2"/>
<hit index="1853" value="2"/>
<hit index="1854" value="2"/>
<hit index="1876" value="2"/>
<hit index="1877" value="2"/>
<hit index="1878" value="2"/>
<hit index="1880" value="3"/>
<hit index="1881" value="3"/>
<hit index="1882" value="3"/>
<hit index="1892" value="1"/>
<hit index="1893" value="1"/>
<hit index="1894" value="1"/>
<hit index="1908" value="12"/>
<hit index="1909" value="12"/>
<hit index="1910" value="12"/>
<hit index="1935" value="12"/>
<hit index="1942" value="1"/>
<hit index="1945" value="2"/>
<hit index="1952" value="2"/>
<hit index="1964" value="2"/>
<hit index="2005" value="2"/>
<hit index="2012" value="1"/>
<hit index="2018" value="2"/>
<hit index="2020" value="2"/>
<hit index="2022" value="2"/>
<hit index="2226" value="2"/>
<hit index="2237" value="2"/>
<hit index="2240" value="2"/>
<hit index="2241" value="2"/>
<hit index="2480" value="2"/>
<hit index="2484" value="2"/>
<hit index="2494" value="2"/>
<hit index="2497" value="2"/>
<hit index="2498" value="2"/>
<hit index="2574" value="2"/>
<hit index="2581" value="2"/>
<hit index="2584" value="2"/>
<hit index="2585" value="2"/>
<hit index="2620" value="1"/>
<hit index="2621" value="2"/>
<hit index="2651" value="2"/>
<hit index="2675" value="2"/>
<hit index="2685" value="2"/>
<hit index="2692" value="2"/>
<hit index="2701" value="2"/>
<hit index="2707" value="2"/>
<hit index="2708" value="3"/>
<hit index="2711" value="1"/>
<hit index="2715" value="12"/>
<hit index="2737" value="2"/>
<hit index="2761" value="2"/>
<hit index="2771" value="2"/>
<hit index="2778" value="2"/>
<hit index="2787" value="2"/>
<hit index="2793" value="2"/>
<hit index="2794" value="3"/>
<hit index="2797" value="1"/>
<hit index="2801" value="12"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="91" total="1461" coveredRatio="0.062286105407255307"/>
</method>
<chunk hits="28" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        // MacroScope\\MacroScope.g:1:8: ( ALL | AND | ANY | AS | ASC | BETWEEN | BY | CASE | CAST | CROSS | DAY | DEFAULT | DELETE | DESC | DISTINCT | ELSE | END | ESCAPE | EXISTS | EXTRACT | FOR | FROM | FULL | GROUP | HAVING | HOUR | IN | INNER | INSERT | INTERVAL | INTO | IS | JOIN | LEFT | LIKE | MINUTE | MONTH | NOT | NULL | ON | OR | ORDER | OUTER | RIGHT | SECOND | SELECT | SET | SOME | SUBSTRING | THEN | TOP | UNION | UPDATE | VALUES | WHEN | WHERE | YEAR | DOT_STAR | DOT | COMMA | LPAREN | RPAREN | ASSIGNEQUAL | NOTEQUAL1 | NOTEQUAL2 | LESSTHANOREQUALTO1 | LESSTHAN | GREATERTHANOREQUALTO1 | GREATERTHAN | DIVIDE | PLUS | STAR | MOD | STRCONCAT | PLACEHOLDER | MAccessDateTime | Iso8601DateTime | Number | NonQuotedIdentifier | QuotedIdentifier | Variable | AsciiStringLiteral | UnicodeStringLiteral | MINUS | COLON | Whitespace )
        ]]></source>
</chunk>
<chunk hits="28" offset="0001" domain="userortestcode"><source><![CDATA[int alt31 = 86;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="28" offset="0004" domain="userortestcode"><source><![CDATA[switch ( input.LA(1) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
        {
        case 'a':
        	]]></source>
</chunk>
<chunk hits="0" offset="01f1" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="01f2" domain="userortestcode"><source><![CDATA[switch ( input.LA(2) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
            case 'n':
            	]]></source>
</chunk>
<chunk hits="0" offset="0224" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0225" domain="userortestcode"><source><![CDATA[switch ( input.LA(3) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                {
                case 'y':
                	]]></source>
</chunk>
<chunk hits="0" offset="0244" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0245" domain="userortestcode"><source><![CDATA[int LA31_100 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="0252" domain="userortestcode"><source><![CDATA[if ( ((LA31_100 >= '0' && LA31_100 <= '9') || LA31_100 == '_' || (LA31_100 >= 'a' && LA31_100 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0277" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0278" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="027b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="027e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="027f" domain="userortestcode"><source><![CDATA[alt31 = 3;]]></source>
</chunk>
<chunk hits="0" offset="0281" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0282" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0283" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 'd':
                	]]></source>
</chunk>
<chunk hits="0" offset="0285" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0286" domain="userortestcode"><source><![CDATA[int LA31_101 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="0293" domain="userortestcode"><source><![CDATA[if ( ((LA31_101 >= '0' && LA31_101 <= '9') || LA31_101 == '_' || (LA31_101 >= 'a' && LA31_101 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="02b8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="02b9" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="02bc" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="02bf" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="02c0" domain="userortestcode"><source><![CDATA[alt31 = 2;]]></source>
</chunk>
<chunk hits="0" offset="02c2" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="02c3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="02c4" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	default:
                    	]]></source>
</chunk>
<chunk hits="0" offset="02c6" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="02c9" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
            
                ]]></source>
</chunk>
<chunk hits="0" offset="02cb" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="02cc" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 'l':
            	]]></source>
</chunk>
<chunk hits="0" offset="02d1" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="02d2" domain="userortestcode"><source><![CDATA[int LA31_47 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="02df" domain="userortestcode"><source><![CDATA[if ( (LA31_47 == 'l') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="02ed" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="02ee" domain="userortestcode"><source><![CDATA[int LA31_102 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="02fc" domain="userortestcode"><source><![CDATA[if ( ((LA31_102 >= '0' && LA31_102 <= '9') || LA31_102 == '_' || (LA31_102 >= 'a' && LA31_102 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0326" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0327" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="032a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="032d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="032e" domain="userortestcode"><source><![CDATA[alt31 = 1;]]></source>
</chunk>
<chunk hits="0" offset="0330" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0331" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="0334" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0335" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0338" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0339" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="033a" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 's':
            	]]></source>
</chunk>
<chunk hits="0" offset="033f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0340" domain="userortestcode"><source><![CDATA[switch ( input.LA(3) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                {
                case 'c':
                	]]></source>
</chunk>
<chunk hits="0" offset="03fc" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="03fd" domain="userortestcode"><source><![CDATA[int LA31_103 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="040b" domain="userortestcode"><source><![CDATA[if ( ((LA31_103 >= '0' && LA31_103 <= '9') || LA31_103 == '_' || (LA31_103 >= 'a' && LA31_103 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0435" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0436" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0439" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="043c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="043d" domain="userortestcode"><source><![CDATA[alt31 = 5;]]></source>
</chunk>
<chunk hits="0" offset="043f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0440" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0441" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case '_':
                case 'a':
                case 'b':
                case 'd':
                case 'e':
                case 'f':
                case 'g':
                case 'h':
                case 'i':
                case 'j':
                case 'k':
                case 'l':
                case 'm':
                case 'n':
                case 'o':
                case 'p':
                case 'q':
                case 'r':
                case 's':
                case 't':
                case 'u':
                case 'v':
                case 'w':
                case 'x':
                case 'y':
                case 'z':
                	]]></source>
</chunk>
<chunk hits="0" offset="0443" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0444" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0447" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0448" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	default:
                    	]]></source>
</chunk>
<chunk hits="0" offset="044a" domain="userortestcode"><source><![CDATA[alt31 = 4;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="044c" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
            
                ]]></source>
</chunk>
<chunk hits="0" offset="044e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="044f" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	default:
                	]]></source>
</chunk>
<chunk hits="0" offset="0451" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="0454" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
        
            ]]></source>
</chunk>
<chunk hits="0" offset="0456" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0457" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case 'b':
        	]]></source>
</chunk>
<chunk hits="0" offset="045c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="045d" domain="userortestcode"><source><![CDATA[switch ( input.LA(2) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
            case 'e':
            	]]></source>
</chunk>
<chunk hits="0" offset="047f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0480" domain="userortestcode"><source><![CDATA[int LA31_49 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="048e" domain="userortestcode"><source><![CDATA[if ( (LA31_49 == 't') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="04a0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="04a1" domain="userortestcode"><source><![CDATA[int LA31_105 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="04af" domain="userortestcode"><source><![CDATA[if ( (LA31_105 == 'w') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="04c1" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="04c2" domain="userortestcode"><source><![CDATA[int LA31_159 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="04d0" domain="userortestcode"><source><![CDATA[if ( (LA31_159 == 'e') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="04e2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="04e3" domain="userortestcode"><source><![CDATA[int LA31_207 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="04f1" domain="userortestcode"><source><![CDATA[if ( (LA31_207 == 'e') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0500" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0501" domain="userortestcode"><source><![CDATA[int LA31_249 = input.LA(7);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                
                                ]]></source>
</chunk>
<chunk hits="0" offset="050f" domain="userortestcode"><source><![CDATA[if ( (LA31_249 == 'n') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="051e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="051f" domain="userortestcode"><source><![CDATA[int LA31_274 = input.LA(8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    
                                    ]]></source>
</chunk>
<chunk hits="0" offset="052d" domain="userortestcode"><source><![CDATA[if ( ((LA31_274 >= '0' && LA31_274 <= '9') || LA31_274 == '_' || (LA31_274 >= 'a' && LA31_274 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0557" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0558" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="055b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    else 
                                    ]]></source>
</chunk>
<chunk hits="0" offset="055e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="055f" domain="userortestcode"><source><![CDATA[alt31 = 6;]]></source>
</chunk>
<chunk hits="0" offset="0561" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0562" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else 
                                ]]></source>
</chunk>
<chunk hits="0" offset="0565" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0566" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0569" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="056a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="056d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="056e" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0571" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0572" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="0575" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0576" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0579" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="057a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="057d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="057e" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0581" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0582" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="0585" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0586" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0589" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="058a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="058b" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 'y':
            	]]></source>
</chunk>
<chunk hits="0" offset="058d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="058e" domain="userortestcode"><source><![CDATA[int LA31_50 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="059c" domain="userortestcode"><source><![CDATA[if ( ((LA31_50 >= '0' && LA31_50 <= '9') || LA31_50 == '_' || (LA31_50 >= 'a' && LA31_50 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="05c6" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="05c7" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="05ca" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="05cd" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="05ce" domain="userortestcode"><source><![CDATA[alt31 = 7;]]></source>
</chunk>
<chunk hits="0" offset="05d0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="05d1" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="05d2" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	default:
                	]]></source>
</chunk>
<chunk hits="0" offset="05d4" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="05d7" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
        
            ]]></source>
</chunk>
<chunk hits="0" offset="05d9" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="05da" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case 'c':
        	]]></source>
</chunk>
<chunk hits="0" offset="05df" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="05e0" domain="userortestcode"><source><![CDATA[switch ( input.LA(2) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
            case 'r':
            	]]></source>
</chunk>
<chunk hits="0" offset="0602" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0603" domain="userortestcode"><source><![CDATA[int LA31_51 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="0611" domain="userortestcode"><source><![CDATA[if ( (LA31_51 == 'o') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0623" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0624" domain="userortestcode"><source><![CDATA[int LA31_107 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="0632" domain="userortestcode"><source><![CDATA[if ( (LA31_107 == 's') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0641" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0642" domain="userortestcode"><source><![CDATA[int LA31_160 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="0650" domain="userortestcode"><source><![CDATA[if ( (LA31_160 == 's') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="065f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0660" domain="userortestcode"><source><![CDATA[int LA31_208 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="066e" domain="userortestcode"><source><![CDATA[if ( ((LA31_208 >= '0' && LA31_208 <= '9') || LA31_208 == '_' || (LA31_208 >= 'a' && LA31_208 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0698" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0699" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="069c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="069f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="06a0" domain="userortestcode"><source><![CDATA[alt31 = 10;]]></source>
</chunk>
<chunk hits="0" offset="06a3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="06a4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="06a7" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="06a8" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="06ab" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="06ac" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="06af" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="06b0" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="06b3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="06b4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="06b7" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="06b8" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="06bb" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="06bc" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="06bd" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 'a':
            	]]></source>
</chunk>
<chunk hits="0" offset="06c2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="06c3" domain="userortestcode"><source><![CDATA[int LA31_52 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="06d1" domain="userortestcode"><source><![CDATA[if ( (LA31_52 == 's') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="06e3" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="06e4" domain="userortestcode"><source><![CDATA[switch ( input.LA(4) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    {
                    case 'e':
                    	]]></source>
</chunk>
<chunk hits="0" offset="0703" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0704" domain="userortestcode"><source><![CDATA[int LA31_161 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="0712" domain="userortestcode"><source><![CDATA[if ( ((LA31_161 >= '0' && LA31_161 <= '9') || LA31_161 == '_' || (LA31_161 >= 'a' && LA31_161 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="073c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="073d" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0740" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="0743" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0744" domain="userortestcode"><source><![CDATA[alt31 = 8;]]></source>
</chunk>
<chunk hits="0" offset="0746" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0747" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0748" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    case 't':
                    	]]></source>
</chunk>
<chunk hits="0" offset="074a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="074b" domain="userortestcode"><source><![CDATA[int LA31_162 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="0759" domain="userortestcode"><source><![CDATA[if ( ((LA31_162 >= '0' && LA31_162 <= '9') || LA31_162 == '_' || (LA31_162 >= 'a' && LA31_162 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0783" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0784" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0787" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="078a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="078b" domain="userortestcode"><source><![CDATA[alt31 = 9;]]></source>
</chunk>
<chunk hits="0" offset="078e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="078f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0790" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	default:
                        	]]></source>
</chunk>
<chunk hits="0" offset="0792" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        	]]></source>
</chunk>
<chunk hits="0" offset="0795" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
                
                ]]></source>
</chunk>
<chunk hits="0" offset="0797" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="079a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="079b" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="079e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="079f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="07a0" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	default:
                	]]></source>
</chunk>
<chunk hits="0" offset="07a2" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="07a5" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
        
            ]]></source>
</chunk>
<chunk hits="0" offset="07a7" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="07a8" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case 'd':
        	]]></source>
</chunk>
<chunk hits="0" offset="07ad" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="07ae" domain="userortestcode"><source><![CDATA[switch ( input.LA(2) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
            case 'a':
            	]]></source>
</chunk>
<chunk hits="0" offset="07d6" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="07d7" domain="userortestcode"><source><![CDATA[int LA31_53 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="07e5" domain="userortestcode"><source><![CDATA[if ( (LA31_53 == 'y') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="07f4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="07f5" domain="userortestcode"><source><![CDATA[int LA31_109 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="0803" domain="userortestcode"><source><![CDATA[if ( ((LA31_109 >= '0' && LA31_109 <= '9') || LA31_109 == '_' || (LA31_109 >= 'a' && LA31_109 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="082d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="082e" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0831" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="0834" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0835" domain="userortestcode"><source><![CDATA[alt31 = 11;]]></source>
</chunk>
<chunk hits="0" offset="0838" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0839" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="083c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="083d" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0840" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0841" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0842" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 'e':
            	]]></source>
</chunk>
<chunk hits="0" offset="0847" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0848" domain="userortestcode"><source><![CDATA[switch ( input.LA(3) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                {
                case 'l':
                	]]></source>
</chunk>
<chunk hits="0" offset="0873" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0874" domain="userortestcode"><source><![CDATA[int LA31_110 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="0882" domain="userortestcode"><source><![CDATA[if ( (LA31_110 == 'e') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0894" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0895" domain="userortestcode"><source><![CDATA[int LA31_164 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="08a3" domain="userortestcode"><source><![CDATA[if ( (LA31_164 == 't') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="08b2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="08b3" domain="userortestcode"><source><![CDATA[int LA31_211 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="08c1" domain="userortestcode"><source><![CDATA[if ( (LA31_211 == 'e') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="08d0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="08d1" domain="userortestcode"><source><![CDATA[int LA31_251 = input.LA(7);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                
                                ]]></source>
</chunk>
<chunk hits="0" offset="08df" domain="userortestcode"><source><![CDATA[if ( ((LA31_251 >= '0' && LA31_251 <= '9') || LA31_251 == '_' || (LA31_251 >= 'a' && LA31_251 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0909" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="090a" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="090d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else 
                                ]]></source>
</chunk>
<chunk hits="0" offset="0910" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0911" domain="userortestcode"><source><![CDATA[alt31 = 13;]]></source>
</chunk>
<chunk hits="0" offset="0914" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0915" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="0918" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0919" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="091c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="091d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="0920" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0921" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0924" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0925" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="0928" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0929" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="092c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="092d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="092e" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 's':
                	]]></source>
</chunk>
<chunk hits="0" offset="0933" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0934" domain="userortestcode"><source><![CDATA[int LA31_111 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="0942" domain="userortestcode"><source><![CDATA[if ( (LA31_111 == 'c') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0951" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0952" domain="userortestcode"><source><![CDATA[int LA31_165 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="0960" domain="userortestcode"><source><![CDATA[if ( ((LA31_165 >= '0' && LA31_165 <= '9') || LA31_165 == '_' || (LA31_165 >= 'a' && LA31_165 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="098a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="098b" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="098e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="0991" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0992" domain="userortestcode"><source><![CDATA[alt31 = 14;]]></source>
</chunk>
<chunk hits="0" offset="0995" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0996" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="0999" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="099a" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="099d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="099e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="099f" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 'f':
                	]]></source>
</chunk>
<chunk hits="0" offset="09a4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="09a5" domain="userortestcode"><source><![CDATA[int LA31_112 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="09b3" domain="userortestcode"><source><![CDATA[if ( (LA31_112 == 'a') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="09c5" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="09c6" domain="userortestcode"><source><![CDATA[int LA31_166 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="09d4" domain="userortestcode"><source><![CDATA[if ( (LA31_166 == 'u') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="09e6" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="09e7" domain="userortestcode"><source><![CDATA[int LA31_213 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="09f5" domain="userortestcode"><source><![CDATA[if ( (LA31_213 == 'l') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0a04" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0a05" domain="userortestcode"><source><![CDATA[int LA31_252 = input.LA(7);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                
                                ]]></source>
</chunk>
<chunk hits="0" offset="0a13" domain="userortestcode"><source><![CDATA[if ( (LA31_252 == 't') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0a22" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0a23" domain="userortestcode"><source><![CDATA[int LA31_276 = input.LA(8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0a31" domain="userortestcode"><source><![CDATA[if ( ((LA31_276 >= '0' && LA31_276 <= '9') || LA31_276 == '_' || (LA31_276 >= 'a' && LA31_276 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0a5b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0a5c" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0a5f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    else 
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0a62" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0a63" domain="userortestcode"><source><![CDATA[alt31 = 12;]]></source>
</chunk>
<chunk hits="0" offset="0a66" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0a67" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else 
                                ]]></source>
</chunk>
<chunk hits="0" offset="0a6a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0a6b" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0a6e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0a6f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="0a72" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0a73" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0a76" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0a77" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="0a7a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0a7b" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0a7e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0a7f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="0a82" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0a83" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0a86" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0a87" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0a88" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	default:
                    	]]></source>
</chunk>
<chunk hits="0" offset="0a8a" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0a8d" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
            
                ]]></source>
</chunk>
<chunk hits="0" offset="0a8f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0a90" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 'i':
            	]]></source>
</chunk>
<chunk hits="0" offset="0a95" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0a96" domain="userortestcode"><source><![CDATA[int LA31_55 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="0aa4" domain="userortestcode"><source><![CDATA[if ( (LA31_55 == 's') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0ab6" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0ab7" domain="userortestcode"><source><![CDATA[int LA31_113 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="0ac5" domain="userortestcode"><source><![CDATA[if ( (LA31_113 == 't') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0ad7" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0ad8" domain="userortestcode"><source><![CDATA[int LA31_167 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="0ae6" domain="userortestcode"><source><![CDATA[if ( (LA31_167 == 'i') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0af8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0af9" domain="userortestcode"><source><![CDATA[int LA31_214 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="0b07" domain="userortestcode"><source><![CDATA[if ( (LA31_214 == 'n') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0b19" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0b1a" domain="userortestcode"><source><![CDATA[int LA31_253 = input.LA(7);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                
                                ]]></source>
</chunk>
<chunk hits="0" offset="0b28" domain="userortestcode"><source><![CDATA[if ( (LA31_253 == 'c') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0b37" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0b38" domain="userortestcode"><source><![CDATA[int LA31_277 = input.LA(8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0b46" domain="userortestcode"><source><![CDATA[if ( (LA31_277 == 't') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0b55" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0b56" domain="userortestcode"><source><![CDATA[int LA31_292 = input.LA(9);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0b65" domain="userortestcode"><source><![CDATA[if ( ((LA31_292 >= '0' && LA31_292 <= '9') || LA31_292 == '_' || (LA31_292 >= 'a' && LA31_292 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0b8f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="0b90" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0b93" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        else 
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0b96" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="0b97" domain="userortestcode"><source><![CDATA[alt31 = 15;]]></source>
</chunk>
<chunk hits="0" offset="0b9a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0b9b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    else 
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0b9e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0b9f" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0ba2" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0ba3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else 
                                ]]></source>
</chunk>
<chunk hits="0" offset="0ba6" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0ba7" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0baa" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0bab" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="0bae" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0baf" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0bb2" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0bb3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="0bb6" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0bb7" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0bba" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0bbb" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="0bbe" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0bbf" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0bc2" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0bc3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="0bc6" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0bc7" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0bca" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0bcb" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0bcc" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	default:
                	]]></source>
</chunk>
<chunk hits="0" offset="0bce" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="0bd1" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
        
            ]]></source>
</chunk>
<chunk hits="0" offset="0bd3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0bd4" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case 'e':
        	]]></source>
</chunk>
<chunk hits="0" offset="0bd9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0bda" domain="userortestcode"><source><![CDATA[switch ( input.LA(2) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
            case 'x':
            	]]></source>
</chunk>
<chunk hits="0" offset="0c12" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0c13" domain="userortestcode"><source><![CDATA[switch ( input.LA(3) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                {
                case 'i':
                	]]></source>
</chunk>
<chunk hits="0" offset="0c35" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0c36" domain="userortestcode"><source><![CDATA[int LA31_114 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="0c44" domain="userortestcode"><source><![CDATA[if ( (LA31_114 == 's') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0c56" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0c57" domain="userortestcode"><source><![CDATA[int LA31_168 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="0c65" domain="userortestcode"><source><![CDATA[if ( (LA31_168 == 't') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0c74" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0c75" domain="userortestcode"><source><![CDATA[int LA31_215 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="0c83" domain="userortestcode"><source><![CDATA[if ( (LA31_215 == 's') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0c92" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0c93" domain="userortestcode"><source><![CDATA[int LA31_254 = input.LA(7);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                
                                ]]></source>
</chunk>
<chunk hits="0" offset="0ca1" domain="userortestcode"><source><![CDATA[if ( ((LA31_254 >= '0' && LA31_254 <= '9') || LA31_254 == '_' || (LA31_254 >= 'a' && LA31_254 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0ccb" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0ccc" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0ccf" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else 
                                ]]></source>
</chunk>
<chunk hits="0" offset="0cd2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0cd3" domain="userortestcode"><source><![CDATA[alt31 = 19;]]></source>
</chunk>
<chunk hits="0" offset="0cd6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0cd7" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="0cda" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0cdb" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0cde" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0cdf" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="0ce2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0ce3" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0ce6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0ce7" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="0cea" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0ceb" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0cee" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0cef" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0cf0" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 't':
                	]]></source>
</chunk>
<chunk hits="0" offset="0cf5" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0cf6" domain="userortestcode"><source><![CDATA[int LA31_115 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="0d04" domain="userortestcode"><source><![CDATA[if ( (LA31_115 == 'r') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0d16" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0d17" domain="userortestcode"><source><![CDATA[int LA31_169 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="0d25" domain="userortestcode"><source><![CDATA[if ( (LA31_169 == 'a') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0d37" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0d38" domain="userortestcode"><source><![CDATA[int LA31_216 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="0d46" domain="userortestcode"><source><![CDATA[if ( (LA31_216 == 'c') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0d55" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0d56" domain="userortestcode"><source><![CDATA[int LA31_255 = input.LA(7);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                
                                ]]></source>
</chunk>
<chunk hits="0" offset="0d64" domain="userortestcode"><source><![CDATA[if ( (LA31_255 == 't') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0d73" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0d74" domain="userortestcode"><source><![CDATA[int LA31_279 = input.LA(8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0d82" domain="userortestcode"><source><![CDATA[if ( ((LA31_279 >= '0' && LA31_279 <= '9') || LA31_279 == '_' || (LA31_279 >= 'a' && LA31_279 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0dac" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0dad" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0db0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    else 
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0db3" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0db4" domain="userortestcode"><source><![CDATA[alt31 = 20;]]></source>
</chunk>
<chunk hits="0" offset="0db7" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0db8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else 
                                ]]></source>
</chunk>
<chunk hits="0" offset="0dbb" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0dbc" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0dbf" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0dc0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="0dc3" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0dc4" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0dc7" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0dc8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="0dcb" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0dcc" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0dcf" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0dd0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="0dd3" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0dd4" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0dd7" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0dd8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0dd9" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	default:
                    	]]></source>
</chunk>
<chunk hits="0" offset="0ddb" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0dde" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
            
                ]]></source>
</chunk>
<chunk hits="0" offset="0de0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0de1" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 's':
            	]]></source>
</chunk>
<chunk hits="0" offset="0de6" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0de7" domain="userortestcode"><source><![CDATA[int LA31_57 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="0df5" domain="userortestcode"><source><![CDATA[if ( (LA31_57 == 'c') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0e07" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0e08" domain="userortestcode"><source><![CDATA[int LA31_116 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="0e16" domain="userortestcode"><source><![CDATA[if ( (LA31_116 == 'a') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0e28" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0e29" domain="userortestcode"><source><![CDATA[int LA31_170 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="0e37" domain="userortestcode"><source><![CDATA[if ( (LA31_170 == 'p') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0e46" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0e47" domain="userortestcode"><source><![CDATA[int LA31_217 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="0e55" domain="userortestcode"><source><![CDATA[if ( (LA31_217 == 'e') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0e64" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0e65" domain="userortestcode"><source><![CDATA[int LA31_256 = input.LA(7);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                
                                ]]></source>
</chunk>
<chunk hits="0" offset="0e73" domain="userortestcode"><source><![CDATA[if ( ((LA31_256 >= '0' && LA31_256 <= '9') || LA31_256 == '_' || (LA31_256 >= 'a' && LA31_256 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0e9d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0e9e" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0ea1" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else 
                                ]]></source>
</chunk>
<chunk hits="0" offset="0ea4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0ea5" domain="userortestcode"><source><![CDATA[alt31 = 18;]]></source>
</chunk>
<chunk hits="0" offset="0ea8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0ea9" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="0eac" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0ead" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0eb0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0eb1" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="0eb4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0eb5" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0eb8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0eb9" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="0ebc" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0ebd" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0ec0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0ec1" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="0ec4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0ec5" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0ec8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0ec9" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0eca" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 'n':
            	]]></source>
</chunk>
<chunk hits="0" offset="0ecf" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0ed0" domain="userortestcode"><source><![CDATA[int LA31_58 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="0ede" domain="userortestcode"><source><![CDATA[if ( (LA31_58 == 'd') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0eed" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0eee" domain="userortestcode"><source><![CDATA[int LA31_117 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="0efc" domain="userortestcode"><source><![CDATA[if ( ((LA31_117 >= '0' && LA31_117 <= '9') || LA31_117 == '_' || (LA31_117 >= 'a' && LA31_117 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0f26" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0f27" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0f2a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="0f2d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0f2e" domain="userortestcode"><source><![CDATA[alt31 = 17;]]></source>
</chunk>
<chunk hits="0" offset="0f31" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0f32" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="0f35" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0f36" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0f39" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0f3a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0f3b" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 'l':
            	]]></source>
</chunk>
<chunk hits="0" offset="0f40" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0f41" domain="userortestcode"><source><![CDATA[int LA31_59 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="0f4f" domain="userortestcode"><source><![CDATA[if ( (LA31_59 == 's') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0f5e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0f5f" domain="userortestcode"><source><![CDATA[int LA31_118 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="0f6d" domain="userortestcode"><source><![CDATA[if ( (LA31_118 == 'e') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0f7c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0f7d" domain="userortestcode"><source><![CDATA[int LA31_172 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="0f8b" domain="userortestcode"><source><![CDATA[if ( ((LA31_172 >= '0' && LA31_172 <= '9') || LA31_172 == '_' || (LA31_172 >= 'a' && LA31_172 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0fb5" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0fb6" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0fb9" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="0fbc" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0fbd" domain="userortestcode"><source><![CDATA[alt31 = 16;]]></source>
</chunk>
<chunk hits="0" offset="0fc0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0fc1" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="0fc4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0fc5" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0fc8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0fc9" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="0fcc" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0fcd" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="0fd0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0fd1" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0fd2" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	default:
                	]]></source>
</chunk>
<chunk hits="0" offset="0fd4" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="0fd7" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
        
            ]]></source>
</chunk>
<chunk hits="0" offset="0fd9" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0fda" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case 'f':
        	]]></source>
</chunk>
<chunk hits="2" offset="0fdf" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0fe0" domain="userortestcode"><source><![CDATA[switch ( input.LA(2) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
            case 'u':
            	]]></source>
</chunk>
<chunk hits="0" offset="100b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="100c" domain="userortestcode"><source><![CDATA[int LA31_60 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="101a" domain="userortestcode"><source><![CDATA[if ( (LA31_60 == 'l') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1029" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="102a" domain="userortestcode"><source><![CDATA[int LA31_119 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="1038" domain="userortestcode"><source><![CDATA[if ( (LA31_119 == 'l') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1047" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1048" domain="userortestcode"><source><![CDATA[int LA31_173 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="1056" domain="userortestcode"><source><![CDATA[if ( ((LA31_173 >= '0' && LA31_173 <= '9') || LA31_173 == '_' || (LA31_173 >= 'a' && LA31_173 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1080" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1081" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1084" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="1087" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1088" domain="userortestcode"><source><![CDATA[alt31 = 23;]]></source>
</chunk>
<chunk hits="0" offset="108b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="108c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="108f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1090" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1093" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1094" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="1097" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1098" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="109b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="109c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="109d" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 'r':
            	]]></source>
</chunk>
<chunk hits="2" offset="10a2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="10a3" domain="userortestcode"><source><![CDATA[int LA31_61 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="6" offset="10b1" domain="userortestcode"><source><![CDATA[if ( (LA31_61 == 'o') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="10c0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="10c1" domain="userortestcode"><source><![CDATA[int LA31_120 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="6" offset="10cf" domain="userortestcode"><source><![CDATA[if ( (LA31_120 == 'm') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="10de" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="10df" domain="userortestcode"><source><![CDATA[int LA31_174 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="6" offset="10ed" domain="userortestcode"><source><![CDATA[if ( ((LA31_174 >= '0' && LA31_174 <= '9') || LA31_174 == '_' || (LA31_174 >= 'a' && LA31_174 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1117" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1118" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="111b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="2" offset="111e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="2" offset="111f" domain="userortestcode"><source><![CDATA[alt31 = 22;]]></source>
</chunk>
<chunk hits="2" offset="1122" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="1123" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="1126" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1127" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="112a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="112b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="112e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="112f" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1132" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="1133" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="1134" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 'o':
            	]]></source>
</chunk>
<chunk hits="0" offset="1136" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1137" domain="userortestcode"><source><![CDATA[int LA31_62 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="1145" domain="userortestcode"><source><![CDATA[if ( (LA31_62 == 'r') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1154" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1155" domain="userortestcode"><source><![CDATA[int LA31_121 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="1163" domain="userortestcode"><source><![CDATA[if ( ((LA31_121 >= '0' && LA31_121 <= '9') || LA31_121 == '_' || (LA31_121 >= 'a' && LA31_121 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="118d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="118e" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1191" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="1194" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1195" domain="userortestcode"><source><![CDATA[alt31 = 21;]]></source>
</chunk>
<chunk hits="0" offset="1198" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1199" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="119c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="119d" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="11a0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="11a1" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="11a2" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	default:
                	]]></source>
</chunk>
<chunk hits="0" offset="11a4" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="11a7" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
        
            ]]></source>
</chunk>
<chunk hits="2" offset="11a9" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="11aa" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case 'g':
        	]]></source>
</chunk>
<chunk hits="0" offset="11af" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="11b0" domain="userortestcode"><source><![CDATA[int LA31_7 = input.LA(2);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="0" offset="11be" domain="userortestcode"><source><![CDATA[if ( (LA31_7 == 'r') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="11d0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="11d1" domain="userortestcode"><source><![CDATA[int LA31_63 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="11df" domain="userortestcode"><source><![CDATA[if ( (LA31_63 == 'o') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="11f1" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="11f2" domain="userortestcode"><source><![CDATA[int LA31_122 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="1200" domain="userortestcode"><source><![CDATA[if ( (LA31_122 == 'u') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="120f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1210" domain="userortestcode"><source><![CDATA[int LA31_176 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="121e" domain="userortestcode"><source><![CDATA[if ( (LA31_176 == 'p') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="122d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="122e" domain="userortestcode"><source><![CDATA[int LA31_221 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="123c" domain="userortestcode"><source><![CDATA[if ( ((LA31_221 >= '0' && LA31_221 <= '9') || LA31_221 == '_' || (LA31_221 >= 'a' && LA31_221 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1266" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="1267" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="126a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="126d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="126e" domain="userortestcode"><source><![CDATA[alt31 = 24;]]></source>
</chunk>
<chunk hits="0" offset="1271" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1272" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="1275" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1276" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1279" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="127a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="127d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="127e" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1281" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1282" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="1285" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1286" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1289" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="128a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else 
            ]]></source>
</chunk>
<chunk hits="0" offset="128d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="128e" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1291" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="1292" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="1293" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case 'h':
        	]]></source>
</chunk>
<chunk hits="0" offset="1298" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="1299" domain="userortestcode"><source><![CDATA[switch ( input.LA(2) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
            case 'a':
            	]]></source>
</chunk>
<chunk hits="0" offset="12bb" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="12bc" domain="userortestcode"><source><![CDATA[int LA31_64 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="12ca" domain="userortestcode"><source><![CDATA[if ( (LA31_64 == 'v') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="12dc" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="12dd" domain="userortestcode"><source><![CDATA[int LA31_123 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="12eb" domain="userortestcode"><source><![CDATA[if ( (LA31_123 == 'i') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="12fd" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="12fe" domain="userortestcode"><source><![CDATA[int LA31_177 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="130c" domain="userortestcode"><source><![CDATA[if ( (LA31_177 == 'n') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="131b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="131c" domain="userortestcode"><source><![CDATA[int LA31_222 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="132a" domain="userortestcode"><source><![CDATA[if ( (LA31_222 == 'g') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1339" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="133a" domain="userortestcode"><source><![CDATA[int LA31_258 = input.LA(7);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                
                                ]]></source>
</chunk>
<chunk hits="0" offset="1348" domain="userortestcode"><source><![CDATA[if ( ((LA31_258 >= '0' && LA31_258 <= '9') || LA31_258 == '_' || (LA31_258 >= 'a' && LA31_258 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="1372" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="1373" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="1376" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else 
                                ]]></source>
</chunk>
<chunk hits="0" offset="1379" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="137a" domain="userortestcode"><source><![CDATA[alt31 = 25;]]></source>
</chunk>
<chunk hits="0" offset="137d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="137e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="1381" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="1382" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1385" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1386" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="1389" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="138a" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="138d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="138e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="1391" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1392" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1395" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1396" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="1399" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="139a" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="139d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="139e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="139f" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 'o':
            	]]></source>
</chunk>
<chunk hits="0" offset="13a4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="13a5" domain="userortestcode"><source><![CDATA[int LA31_65 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="13b3" domain="userortestcode"><source><![CDATA[if ( (LA31_65 == 'u') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="13c2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="13c3" domain="userortestcode"><source><![CDATA[int LA31_124 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="13d1" domain="userortestcode"><source><![CDATA[if ( (LA31_124 == 'r') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="13e0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="13e1" domain="userortestcode"><source><![CDATA[int LA31_178 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="13ef" domain="userortestcode"><source><![CDATA[if ( ((LA31_178 >= '0' && LA31_178 <= '9') || LA31_178 == '_' || (LA31_178 >= 'a' && LA31_178 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1419" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="141a" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="141d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="1420" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1421" domain="userortestcode"><source><![CDATA[alt31 = 26;]]></source>
</chunk>
<chunk hits="0" offset="1424" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1425" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="1428" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1429" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="142c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="142d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="1430" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1431" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1434" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1435" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1436" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	default:
                	]]></source>
</chunk>
<chunk hits="0" offset="1438" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="143b" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
        
            ]]></source>
</chunk>
<chunk hits="0" offset="143d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="143e" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case 'i':
        	]]></source>
</chunk>
<chunk hits="0" offset="1443" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="1444" domain="userortestcode"><source><![CDATA[switch ( input.LA(2) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
            case 'n':
            	]]></source>
</chunk>
<chunk hits="0" offset="1466" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1467" domain="userortestcode"><source><![CDATA[switch ( input.LA(3) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                {
                case 's':
                	]]></source>
</chunk>
<chunk hits="0" offset="1526" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1527" domain="userortestcode"><source><![CDATA[int LA31_125 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="1535" domain="userortestcode"><source><![CDATA[if ( (LA31_125 == 'e') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1547" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1548" domain="userortestcode"><source><![CDATA[int LA31_179 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="1556" domain="userortestcode"><source><![CDATA[if ( (LA31_179 == 'r') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1565" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1566" domain="userortestcode"><source><![CDATA[int LA31_224 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="1574" domain="userortestcode"><source><![CDATA[if ( (LA31_224 == 't') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1583" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="1584" domain="userortestcode"><source><![CDATA[int LA31_259 = input.LA(7);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                
                                ]]></source>
</chunk>
<chunk hits="0" offset="1592" domain="userortestcode"><source><![CDATA[if ( ((LA31_259 >= '0' && LA31_259 <= '9') || LA31_259 == '_' || (LA31_259 >= 'a' && LA31_259 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="15bc" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="15bd" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="15c0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else 
                                ]]></source>
</chunk>
<chunk hits="0" offset="15c3" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="15c4" domain="userortestcode"><source><![CDATA[alt31 = 29;]]></source>
</chunk>
<chunk hits="0" offset="15c7" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="15c8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="15cb" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="15cc" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="15cf" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="15d0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="15d3" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="15d4" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="15d7" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="15d8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="15db" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="15dc" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="15df" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="15e0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="15e1" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 't':
                	]]></source>
</chunk>
<chunk hits="0" offset="15e6" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="15e7" domain="userortestcode"><source><![CDATA[switch ( input.LA(4) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    {
                    case 'o':
                    	]]></source>
</chunk>
<chunk hits="0" offset="1606" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1607" domain="userortestcode"><source><![CDATA[int LA31_180 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="1615" domain="userortestcode"><source><![CDATA[if ( ((LA31_180 >= '0' && LA31_180 <= '9') || LA31_180 == '_' || (LA31_180 >= 'a' && LA31_180 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="163f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1640" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1643" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="1646" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1647" domain="userortestcode"><source><![CDATA[alt31 = 31;]]></source>
</chunk>
<chunk hits="0" offset="164a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="164b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="164c" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    case 'e':
                    	]]></source>
</chunk>
<chunk hits="0" offset="1651" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1652" domain="userortestcode"><source><![CDATA[int LA31_181 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="1660" domain="userortestcode"><source><![CDATA[if ( (LA31_181 == 'r') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1672" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1673" domain="userortestcode"><source><![CDATA[int LA31_226 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="1681" domain="userortestcode"><source><![CDATA[if ( (LA31_226 == 'v') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1693" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="1694" domain="userortestcode"><source><![CDATA[int LA31_260 = input.LA(7);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                
                                ]]></source>
</chunk>
<chunk hits="0" offset="16a2" domain="userortestcode"><source><![CDATA[if ( (LA31_260 == 'a') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="16b1" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="16b2" domain="userortestcode"><source><![CDATA[int LA31_283 = input.LA(8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    
                                    ]]></source>
</chunk>
<chunk hits="0" offset="16c0" domain="userortestcode"><source><![CDATA[if ( (LA31_283 == 'l') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="16cf" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="16d0" domain="userortestcode"><source><![CDATA[int LA31_294 = input.LA(9);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        
                                        ]]></source>
</chunk>
<chunk hits="0" offset="16df" domain="userortestcode"><source><![CDATA[if ( ((LA31_294 >= '0' && LA31_294 <= '9') || LA31_294 == '_' || (LA31_294 >= 'a' && LA31_294 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="1709" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="170a" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="170d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        else 
                                        ]]></source>
</chunk>
<chunk hits="0" offset="1710" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="1711" domain="userortestcode"><source><![CDATA[alt31 = 30;]]></source>
</chunk>
<chunk hits="0" offset="1714" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="1715" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    else 
                                    ]]></source>
</chunk>
<chunk hits="0" offset="1718" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="1719" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="171c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="171d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else 
                                ]]></source>
</chunk>
<chunk hits="0" offset="1720" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="1721" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1724" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1725" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="1728" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="1729" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="172c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="172d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="1730" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1731" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1734" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1735" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1736" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	default:
                        	]]></source>
</chunk>
<chunk hits="0" offset="1738" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        	]]></source>
</chunk>
<chunk hits="0" offset="173b" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
                
                    ]]></source>
</chunk>
<chunk hits="0" offset="173d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="173e" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 'n':
                	]]></source>
</chunk>
<chunk hits="0" offset="1743" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1744" domain="userortestcode"><source><![CDATA[int LA31_127 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="1752" domain="userortestcode"><source><![CDATA[if ( (LA31_127 == 'e') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1761" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1762" domain="userortestcode"><source><![CDATA[int LA31_182 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="1770" domain="userortestcode"><source><![CDATA[if ( (LA31_182 == 'r') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="177f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1780" domain="userortestcode"><source><![CDATA[int LA31_227 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="178e" domain="userortestcode"><source><![CDATA[if ( ((LA31_227 >= '0' && LA31_227 <= '9') || LA31_227 == '_' || (LA31_227 >= 'a' && LA31_227 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="17b8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="17b9" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="17bc" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="17bf" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="17c0" domain="userortestcode"><source><![CDATA[alt31 = 28;]]></source>
</chunk>
<chunk hits="0" offset="17c3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="17c4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="17c7" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="17c8" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="17cb" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="17cc" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="17cf" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="17d0" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="17d3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="17d4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="17d5" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case '_':
                case 'a':
                case 'b':
                case 'c':
                case 'd':
                case 'e':
                case 'f':
                case 'g':
                case 'h':
                case 'i':
                case 'j':
                case 'k':
                case 'l':
                case 'm':
                case 'o':
                case 'p':
                case 'q':
                case 'r':
                case 'u':
                case 'v':
                case 'w':
                case 'x':
                case 'y':
                case 'z':
                	]]></source>
</chunk>
<chunk hits="0" offset="17d7" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="17d8" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="17db" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="17dc" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	default:
                    	]]></source>
</chunk>
<chunk hits="0" offset="17de" domain="userortestcode"><source><![CDATA[alt31 = 27;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="17e1" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
            
                ]]></source>
</chunk>
<chunk hits="0" offset="17e3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="17e4" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 's':
            	]]></source>
</chunk>
<chunk hits="0" offset="17e6" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="17e7" domain="userortestcode"><source><![CDATA[int LA31_67 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="17f5" domain="userortestcode"><source><![CDATA[if ( ((LA31_67 >= '0' && LA31_67 <= '9') || LA31_67 == '_' || (LA31_67 >= 'a' && LA31_67 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="181f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1820" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1823" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="1826" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1827" domain="userortestcode"><source><![CDATA[alt31 = 32;]]></source>
</chunk>
<chunk hits="0" offset="182a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="182b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="182c" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	default:
                	]]></source>
</chunk>
<chunk hits="0" offset="182e" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="1831" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
        
            ]]></source>
</chunk>
<chunk hits="0" offset="1833" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="1834" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case 'j':
        	]]></source>
</chunk>
<chunk hits="0" offset="1839" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="183a" domain="userortestcode"><source><![CDATA[int LA31_10 = input.LA(2);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="0" offset="1848" domain="userortestcode"><source><![CDATA[if ( (LA31_10 == 'o') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="185a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="185b" domain="userortestcode"><source><![CDATA[int LA31_68 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="1869" domain="userortestcode"><source><![CDATA[if ( (LA31_68 == 'i') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1878" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1879" domain="userortestcode"><source><![CDATA[int LA31_130 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="1887" domain="userortestcode"><source><![CDATA[if ( (LA31_130 == 'n') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1896" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1897" domain="userortestcode"><source><![CDATA[int LA31_183 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="18a5" domain="userortestcode"><source><![CDATA[if ( ((LA31_183 >= '0' && LA31_183 <= '9') || LA31_183 == '_' || (LA31_183 >= 'a' && LA31_183 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="18cf" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="18d0" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="18d3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="18d6" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="18d7" domain="userortestcode"><source><![CDATA[alt31 = 33;]]></source>
</chunk>
<chunk hits="0" offset="18da" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="18db" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="18de" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="18df" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="18e2" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="18e3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="18e6" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="18e7" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="18ea" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="18eb" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else 
            ]]></source>
</chunk>
<chunk hits="0" offset="18ee" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="18ef" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="18f2" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="18f3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="18f4" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case 'l':
        	]]></source>
</chunk>
<chunk hits="0" offset="18f9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="18fa" domain="userortestcode"><source><![CDATA[switch ( input.LA(2) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
            case 'i':
            	]]></source>
</chunk>
<chunk hits="0" offset="191c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="191d" domain="userortestcode"><source><![CDATA[int LA31_69 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="192b" domain="userortestcode"><source><![CDATA[if ( (LA31_69 == 'k') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="193a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="193b" domain="userortestcode"><source><![CDATA[int LA31_131 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="1949" domain="userortestcode"><source><![CDATA[if ( (LA31_131 == 'e') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1958" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1959" domain="userortestcode"><source><![CDATA[int LA31_184 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="1967" domain="userortestcode"><source><![CDATA[if ( ((LA31_184 >= '0' && LA31_184 <= '9') || LA31_184 == '_' || (LA31_184 >= 'a' && LA31_184 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1991" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1992" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1995" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="1998" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1999" domain="userortestcode"><source><![CDATA[alt31 = 35;]]></source>
</chunk>
<chunk hits="0" offset="199c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="199d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="19a0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="19a1" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="19a4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="19a5" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="19a8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="19a9" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="19ac" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="19ad" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="19ae" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 'e':
            	]]></source>
</chunk>
<chunk hits="0" offset="19b3" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="19b4" domain="userortestcode"><source><![CDATA[int LA31_70 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="19c2" domain="userortestcode"><source><![CDATA[if ( (LA31_70 == 'f') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="19d1" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="19d2" domain="userortestcode"><source><![CDATA[int LA31_132 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="19e0" domain="userortestcode"><source><![CDATA[if ( (LA31_132 == 't') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="19ef" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="19f0" domain="userortestcode"><source><![CDATA[int LA31_185 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="19fe" domain="userortestcode"><source><![CDATA[if ( ((LA31_185 >= '0' && LA31_185 <= '9') || LA31_185 == '_' || (LA31_185 >= 'a' && LA31_185 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1a28" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1a29" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1a2c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="1a2f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1a30" domain="userortestcode"><source><![CDATA[alt31 = 34;]]></source>
</chunk>
<chunk hits="0" offset="1a33" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1a34" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="1a37" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1a38" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1a3b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1a3c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="1a3f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1a40" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1a43" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1a44" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1a45" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	default:
                	]]></source>
</chunk>
<chunk hits="0" offset="1a47" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="1a4a" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
        
            ]]></source>
</chunk>
<chunk hits="0" offset="1a4c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="1a4d" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case 'm':
        	]]></source>
</chunk>
<chunk hits="1" offset="1a52" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="1a53" domain="userortestcode"><source><![CDATA[switch ( input.LA(2) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
            case 'i':
            	]]></source>
</chunk>
<chunk hits="0" offset="1a75" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1a76" domain="userortestcode"><source><![CDATA[int LA31_71 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="1a84" domain="userortestcode"><source><![CDATA[if ( (LA31_71 == 'n') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1a96" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1a97" domain="userortestcode"><source><![CDATA[int LA31_133 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="1aa5" domain="userortestcode"><source><![CDATA[if ( (LA31_133 == 'u') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1ab7" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1ab8" domain="userortestcode"><source><![CDATA[int LA31_186 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="1ac6" domain="userortestcode"><source><![CDATA[if ( (LA31_186 == 't') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1ad5" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1ad6" domain="userortestcode"><source><![CDATA[int LA31_231 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="1ae4" domain="userortestcode"><source><![CDATA[if ( (LA31_231 == 'e') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1af3" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="1af4" domain="userortestcode"><source><![CDATA[int LA31_262 = input.LA(7);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                
                                ]]></source>
</chunk>
<chunk hits="0" offset="1b02" domain="userortestcode"><source><![CDATA[if ( ((LA31_262 >= '0' && LA31_262 <= '9') || LA31_262 == '_' || (LA31_262 >= 'a' && LA31_262 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="1b2c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="1b2d" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="1b30" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else 
                                ]]></source>
</chunk>
<chunk hits="0" offset="1b33" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="1b34" domain="userortestcode"><source><![CDATA[alt31 = 36;]]></source>
</chunk>
<chunk hits="0" offset="1b37" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1b38" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="1b3b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="1b3c" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1b3f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1b40" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="1b43" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1b44" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1b47" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1b48" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="1b4b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1b4c" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1b4f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1b50" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="1b53" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1b54" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1b57" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1b58" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1b59" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 'o':
            	]]></source>
</chunk>
<chunk hits="0" offset="1b5e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1b5f" domain="userortestcode"><source><![CDATA[int LA31_72 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="1b6d" domain="userortestcode"><source><![CDATA[if ( (LA31_72 == 'n') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1b7f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1b80" domain="userortestcode"><source><![CDATA[int LA31_134 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="1b8e" domain="userortestcode"><source><![CDATA[if ( (LA31_134 == 't') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1b9d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1b9e" domain="userortestcode"><source><![CDATA[int LA31_187 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="1bac" domain="userortestcode"><source><![CDATA[if ( (LA31_187 == 'h') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1bbb" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1bbc" domain="userortestcode"><source><![CDATA[int LA31_232 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="1bca" domain="userortestcode"><source><![CDATA[if ( ((LA31_232 >= '0' && LA31_232 <= '9') || LA31_232 == '_' || (LA31_232 >= 'a' && LA31_232 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1bf4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="1bf5" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1bf8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="1bfb" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="1bfc" domain="userortestcode"><source><![CDATA[alt31 = 37;]]></source>
</chunk>
<chunk hits="0" offset="1bff" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1c00" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="1c03" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1c04" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1c07" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1c08" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="1c0b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1c0c" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1c0f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1c10" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="1c13" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1c14" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1c17" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1c18" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1c19" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	default:
                	]]></source>
</chunk>
<chunk hits="1" offset="1c1b" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="1" offset="1c1e" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
        
            ]]></source>
</chunk>
<chunk hits="1" offset="1c20" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="1c21" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case 'n':
        	]]></source>
</chunk>
<chunk hits="0" offset="1c26" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="1c27" domain="userortestcode"><source><![CDATA[switch ( input.LA(2) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
            case '\'':
            	]]></source>
</chunk>
<chunk hits="0" offset="1c4f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1c50" domain="userortestcode"><source><![CDATA[alt31 = 83;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1c53" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1c54" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 'o':
            	]]></source>
</chunk>
<chunk hits="0" offset="1c59" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1c5a" domain="userortestcode"><source><![CDATA[int LA31_74 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="1c68" domain="userortestcode"><source><![CDATA[if ( (LA31_74 == 't') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1c77" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1c78" domain="userortestcode"><source><![CDATA[int LA31_135 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="1c86" domain="userortestcode"><source><![CDATA[if ( ((LA31_135 >= '0' && LA31_135 <= '9') || LA31_135 == '_' || (LA31_135 >= 'a' && LA31_135 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1cb0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1cb1" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1cb4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="1cb7" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1cb8" domain="userortestcode"><source><![CDATA[alt31 = 38;]]></source>
</chunk>
<chunk hits="0" offset="1cbb" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1cbc" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="1cbf" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1cc0" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1cc3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1cc4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1cc5" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 'u':
            	]]></source>
</chunk>
<chunk hits="0" offset="1cca" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1ccb" domain="userortestcode"><source><![CDATA[int LA31_75 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="1cd9" domain="userortestcode"><source><![CDATA[if ( (LA31_75 == 'l') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1ce8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1ce9" domain="userortestcode"><source><![CDATA[int LA31_136 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="1cf7" domain="userortestcode"><source><![CDATA[if ( (LA31_136 == 'l') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1d06" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1d07" domain="userortestcode"><source><![CDATA[int LA31_189 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="1d15" domain="userortestcode"><source><![CDATA[if ( ((LA31_189 >= '0' && LA31_189 <= '9') || LA31_189 == '_' || (LA31_189 >= 'a' && LA31_189 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1d3f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1d40" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1d43" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="1d46" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1d47" domain="userortestcode"><source><![CDATA[alt31 = 39;]]></source>
</chunk>
<chunk hits="0" offset="1d4a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1d4b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="1d4e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1d4f" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1d52" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1d53" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="1d56" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1d57" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1d5a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1d5b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1d5c" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	default:
                	]]></source>
</chunk>
<chunk hits="0" offset="1d5e" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="1d61" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
        
            ]]></source>
</chunk>
<chunk hits="0" offset="1d63" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="1d64" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case 'o':
        	]]></source>
</chunk>
<chunk hits="0" offset="1d69" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="1d6a" domain="userortestcode"><source><![CDATA[switch ( input.LA(2) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
            case 'r':
            	]]></source>
</chunk>
<chunk hits="0" offset="1d95" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1d96" domain="userortestcode"><source><![CDATA[switch ( input.LA(3) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                {
                case 'd':
                	]]></source>
</chunk>
<chunk hits="0" offset="1e55" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1e56" domain="userortestcode"><source><![CDATA[int LA31_137 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="1e64" domain="userortestcode"><source><![CDATA[if ( (LA31_137 == 'e') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1e73" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1e74" domain="userortestcode"><source><![CDATA[int LA31_190 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="1e82" domain="userortestcode"><source><![CDATA[if ( (LA31_190 == 'r') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1e91" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1e92" domain="userortestcode"><source><![CDATA[int LA31_234 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="1ea0" domain="userortestcode"><source><![CDATA[if ( ((LA31_234 >= '0' && LA31_234 <= '9') || LA31_234 == '_' || (LA31_234 >= 'a' && LA31_234 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1eca" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="1ecb" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1ece" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="1ed1" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="1ed2" domain="userortestcode"><source><![CDATA[alt31 = 42;]]></source>
</chunk>
<chunk hits="0" offset="1ed5" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1ed6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="1ed9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1eda" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1edd" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1ede" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="1ee1" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1ee2" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1ee5" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1ee6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1ee7" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case '_':
                case 'a':
                case 'b':
                case 'c':
                case 'e':
                case 'f':
                case 'g':
                case 'h':
                case 'i':
                case 'j':
                case 'k':
                case 'l':
                case 'm':
                case 'n':
                case 'o':
                case 'p':
                case 'q':
                case 'r':
                case 's':
                case 't':
                case 'u':
                case 'v':
                case 'w':
                case 'x':
                case 'y':
                case 'z':
                	]]></source>
</chunk>
<chunk hits="0" offset="1ee9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1eea" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1eed" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1eee" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	default:
                    	]]></source>
</chunk>
<chunk hits="0" offset="1ef0" domain="userortestcode"><source><![CDATA[alt31 = 41;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="1ef3" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
            
                ]]></source>
</chunk>
<chunk hits="0" offset="1ef5" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1ef6" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 'u':
            	]]></source>
</chunk>
<chunk hits="0" offset="1efb" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1efc" domain="userortestcode"><source><![CDATA[int LA31_77 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="1f0a" domain="userortestcode"><source><![CDATA[if ( (LA31_77 == 't') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1f1c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1f1d" domain="userortestcode"><source><![CDATA[int LA31_139 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="1f2b" domain="userortestcode"><source><![CDATA[if ( (LA31_139 == 'e') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1f3a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1f3b" domain="userortestcode"><source><![CDATA[int LA31_191 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="1f49" domain="userortestcode"><source><![CDATA[if ( (LA31_191 == 'r') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1f58" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1f59" domain="userortestcode"><source><![CDATA[int LA31_235 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="1f67" domain="userortestcode"><source><![CDATA[if ( ((LA31_235 >= '0' && LA31_235 <= '9') || LA31_235 == '_' || (LA31_235 >= 'a' && LA31_235 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1f91" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="1f92" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1f95" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="1f98" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="1f99" domain="userortestcode"><source><![CDATA[alt31 = 43;]]></source>
</chunk>
<chunk hits="0" offset="1f9c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1f9d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="1fa0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="1fa1" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1fa4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1fa5" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="1fa8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="1fa9" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1fac" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1fad" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="1fb0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1fb1" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="1fb4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1fb5" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1fb6" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 'n':
            	]]></source>
</chunk>
<chunk hits="0" offset="1fb8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1fb9" domain="userortestcode"><source><![CDATA[int LA31_78 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="1fc7" domain="userortestcode"><source><![CDATA[if ( ((LA31_78 >= '0' && LA31_78 <= '9') || LA31_78 == '_' || (LA31_78 >= 'a' && LA31_78 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1ff1" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1ff2" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1ff5" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="1ff8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="1ff9" domain="userortestcode"><source><![CDATA[alt31 = 40;]]></source>
</chunk>
<chunk hits="0" offset="1ffc" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1ffd" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="1ffe" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	default:
                	]]></source>
</chunk>
<chunk hits="0" offset="2000" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="2003" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
        
            ]]></source>
</chunk>
<chunk hits="0" offset="2005" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2006" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case 'r':
        	]]></source>
</chunk>
<chunk hits="0" offset="200b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="200c" domain="userortestcode"><source><![CDATA[int LA31_15 = input.LA(2);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="0" offset="201a" domain="userortestcode"><source><![CDATA[if ( (LA31_15 == 'i') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="202c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="202d" domain="userortestcode"><source><![CDATA[int LA31_79 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="203b" domain="userortestcode"><source><![CDATA[if ( (LA31_79 == 'g') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="204d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="204e" domain="userortestcode"><source><![CDATA[int LA31_141 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="205c" domain="userortestcode"><source><![CDATA[if ( (LA31_141 == 'h') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="206b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="206c" domain="userortestcode"><source><![CDATA[int LA31_192 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="207a" domain="userortestcode"><source><![CDATA[if ( (LA31_192 == 't') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2089" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="208a" domain="userortestcode"><source><![CDATA[int LA31_236 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="2098" domain="userortestcode"><source><![CDATA[if ( ((LA31_236 >= '0' && LA31_236 <= '9') || LA31_236 == '_' || (LA31_236 >= 'a' && LA31_236 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="20c2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="20c3" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="20c6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="20c9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="20ca" domain="userortestcode"><source><![CDATA[alt31 = 44;]]></source>
</chunk>
<chunk hits="0" offset="20cd" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="20ce" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="20d1" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="20d2" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="20d5" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="20d6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="20d9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="20da" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="20dd" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="20de" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="20e1" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="20e2" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="20e5" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="20e6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else 
            ]]></source>
</chunk>
<chunk hits="0" offset="20e9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="20ea" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="20ed" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="20ee" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="20ef" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case 's':
        	]]></source>
</chunk>
<chunk hits="2" offset="20f4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="20f5" domain="userortestcode"><source><![CDATA[switch ( input.LA(2) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
            case 'e':
            	]]></source>
</chunk>
<chunk hits="2" offset="2120" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="2121" domain="userortestcode"><source><![CDATA[switch ( input.LA(3) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                {
                case 't':
                	]]></source>
</chunk>
<chunk hits="0" offset="2149" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="214a" domain="userortestcode"><source><![CDATA[int LA31_142 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="2158" domain="userortestcode"><source><![CDATA[if ( ((LA31_142 >= '0' && LA31_142 <= '9') || LA31_142 == '_' || (LA31_142 >= 'a' && LA31_142 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2182" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2183" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2186" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="2189" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="218a" domain="userortestcode"><source><![CDATA[alt31 = 47;]]></source>
</chunk>
<chunk hits="0" offset="218d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="218e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="218f" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 'l':
                	]]></source>
</chunk>
<chunk hits="2" offset="2194" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="2195" domain="userortestcode"><source><![CDATA[int LA31_143 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="6" offset="21a3" domain="userortestcode"><source><![CDATA[if ( (LA31_143 == 'e') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="21b5" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="21b6" domain="userortestcode"><source><![CDATA[int LA31_194 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="6" offset="21c4" domain="userortestcode"><source><![CDATA[if ( (LA31_194 == 'c') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="21d3" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="2" offset="21d4" domain="userortestcode"><source><![CDATA[int LA31_237 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="6" offset="21e2" domain="userortestcode"><source><![CDATA[if ( (LA31_237 == 't') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="2" offset="21f1" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="2" offset="21f2" domain="userortestcode"><source><![CDATA[int LA31_267 = input.LA(7);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                
                                ]]></source>
</chunk>
<chunk hits="6" offset="2200" domain="userortestcode"><source><![CDATA[if ( ((LA31_267 >= '0' && LA31_267 <= '9') || LA31_267 == '_' || (LA31_267 >= 'a' && LA31_267 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="222a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="222b" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="222e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else 
                                ]]></source>
</chunk>
<chunk hits="2" offset="2231" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="2" offset="2232" domain="userortestcode"><source><![CDATA[alt31 = 46;]]></source>
</chunk>
<chunk hits="2" offset="2235" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="2" offset="2236" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="2239" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="223a" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="223d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="223e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="2241" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="2242" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="2245" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="2246" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="2249" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="224a" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="224d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="224e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="224f" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 'c':
                	]]></source>
</chunk>
<chunk hits="0" offset="2254" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2255" domain="userortestcode"><source><![CDATA[int LA31_144 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="2263" domain="userortestcode"><source><![CDATA[if ( (LA31_144 == 'o') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2275" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2276" domain="userortestcode"><source><![CDATA[int LA31_195 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="2284" domain="userortestcode"><source><![CDATA[if ( (LA31_195 == 'n') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2293" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="2294" domain="userortestcode"><source><![CDATA[int LA31_238 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="22a2" domain="userortestcode"><source><![CDATA[if ( (LA31_238 == 'd') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="22b1" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="22b2" domain="userortestcode"><source><![CDATA[int LA31_268 = input.LA(7);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                
                                ]]></source>
</chunk>
<chunk hits="0" offset="22c0" domain="userortestcode"><source><![CDATA[if ( ((LA31_268 >= '0' && LA31_268 <= '9') || LA31_268 == '_' || (LA31_268 >= 'a' && LA31_268 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="22ea" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="22eb" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="22ee" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else 
                                ]]></source>
</chunk>
<chunk hits="0" offset="22f1" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="22f2" domain="userortestcode"><source><![CDATA[alt31 = 45;]]></source>
</chunk>
<chunk hits="0" offset="22f5" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="22f6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="22f9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="22fa" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="22fd" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="22fe" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="2301" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="2302" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="2305" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2306" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="2309" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="230a" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="230d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="230e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="230f" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	default:
                    	]]></source>
</chunk>
<chunk hits="0" offset="2311" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="2314" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
            
                ]]></source>
</chunk>
<chunk hits="2" offset="2316" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="2317" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 'u':
            	]]></source>
</chunk>
<chunk hits="0" offset="231c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="231d" domain="userortestcode"><source><![CDATA[int LA31_81 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="232b" domain="userortestcode"><source><![CDATA[if ( (LA31_81 == 'b') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="233d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="233e" domain="userortestcode"><source><![CDATA[int LA31_145 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="234c" domain="userortestcode"><source><![CDATA[if ( (LA31_145 == 's') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="235e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="235f" domain="userortestcode"><source><![CDATA[int LA31_196 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="236d" domain="userortestcode"><source><![CDATA[if ( (LA31_196 == 't') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="237f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="2380" domain="userortestcode"><source><![CDATA[int LA31_239 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="238e" domain="userortestcode"><source><![CDATA[if ( (LA31_239 == 'r') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="23a0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="23a1" domain="userortestcode"><source><![CDATA[int LA31_269 = input.LA(7);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                
                                ]]></source>
</chunk>
<chunk hits="0" offset="23af" domain="userortestcode"><source><![CDATA[if ( (LA31_269 == 'i') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="23c1" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="23c2" domain="userortestcode"><source><![CDATA[int LA31_287 = input.LA(8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    
                                    ]]></source>
</chunk>
<chunk hits="0" offset="23d0" domain="userortestcode"><source><![CDATA[if ( (LA31_287 == 'n') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="23df" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="23e0" domain="userortestcode"><source><![CDATA[int LA31_295 = input.LA(9);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        
                                        ]]></source>
</chunk>
<chunk hits="0" offset="23ef" domain="userortestcode"><source><![CDATA[if ( (LA31_295 == 'g') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="23fe" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="23ff" domain="userortestcode"><source><![CDATA[int LA31_298 = input.LA(10);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            
                                            ]]></source>
</chunk>
<chunk hits="0" offset="240e" domain="userortestcode"><source><![CDATA[if ( ((LA31_298 >= '0' && LA31_298 <= '9') || LA31_298 == '_' || (LA31_298 >= 'a' && LA31_298 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="2438" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                                ]]></source>
</chunk>
<chunk hits="0" offset="2439" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="243c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            else 
                                            ]]></source>
</chunk>
<chunk hits="0" offset="243f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                                ]]></source>
</chunk>
<chunk hits="0" offset="2440" domain="userortestcode"><source><![CDATA[alt31 = 49;]]></source>
</chunk>
<chunk hits="0" offset="2443" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="2444" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        else 
                                        ]]></source>
</chunk>
<chunk hits="0" offset="2447" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="2448" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="244b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="244c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    else 
                                    ]]></source>
</chunk>
<chunk hits="0" offset="244f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="2450" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="2453" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="2454" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else 
                                ]]></source>
</chunk>
<chunk hits="0" offset="2457" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="2458" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="245b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="245c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="245f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="2460" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="2463" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2464" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="2467" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="2468" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="246b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="246c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="246f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2470" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="2473" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2474" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="2477" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2478" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="247b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="247c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="247d" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 'o':
            	]]></source>
</chunk>
<chunk hits="0" offset="2482" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2483" domain="userortestcode"><source><![CDATA[int LA31_82 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="2491" domain="userortestcode"><source><![CDATA[if ( (LA31_82 == 'm') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="24a0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="24a1" domain="userortestcode"><source><![CDATA[int LA31_146 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="24af" domain="userortestcode"><source><![CDATA[if ( (LA31_146 == 'e') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="24be" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="24bf" domain="userortestcode"><source><![CDATA[int LA31_197 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="24cd" domain="userortestcode"><source><![CDATA[if ( ((LA31_197 >= '0' && LA31_197 <= '9') || LA31_197 == '_' || (LA31_197 >= 'a' && LA31_197 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="24f7" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="24f8" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="24fb" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="24fe" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="24ff" domain="userortestcode"><source><![CDATA[alt31 = 48;]]></source>
</chunk>
<chunk hits="0" offset="2502" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2503" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="2506" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2507" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="250a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="250b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="250e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="250f" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="2512" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2513" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2514" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	default:
                	]]></source>
</chunk>
<chunk hits="0" offset="2516" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="2519" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
        
            ]]></source>
</chunk>
<chunk hits="2" offset="251b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="251c" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case 't':
        	]]></source>
</chunk>
<chunk hits="0" offset="2521" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2522" domain="userortestcode"><source><![CDATA[switch ( input.LA(2) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
            case 'h':
            	]]></source>
</chunk>
<chunk hits="0" offset="2544" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2545" domain="userortestcode"><source><![CDATA[int LA31_83 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="2553" domain="userortestcode"><source><![CDATA[if ( (LA31_83 == 'e') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2562" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2563" domain="userortestcode"><source><![CDATA[int LA31_147 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="2571" domain="userortestcode"><source><![CDATA[if ( (LA31_147 == 'n') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2580" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2581" domain="userortestcode"><source><![CDATA[int LA31_198 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="258f" domain="userortestcode"><source><![CDATA[if ( ((LA31_198 >= '0' && LA31_198 <= '9') || LA31_198 == '_' || (LA31_198 >= 'a' && LA31_198 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="25b9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="25ba" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="25bd" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="25c0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="25c1" domain="userortestcode"><source><![CDATA[alt31 = 50;]]></source>
</chunk>
<chunk hits="0" offset="25c4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="25c5" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="25c8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="25c9" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="25cc" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="25cd" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="25d0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="25d1" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="25d4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="25d5" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="25d6" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 'o':
            	]]></source>
</chunk>
<chunk hits="0" offset="25d8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="25d9" domain="userortestcode"><source><![CDATA[int LA31_84 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="25e7" domain="userortestcode"><source><![CDATA[if ( (LA31_84 == 'p') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="25f6" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="25f7" domain="userortestcode"><source><![CDATA[int LA31_148 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="2605" domain="userortestcode"><source><![CDATA[if ( ((LA31_148 >= '0' && LA31_148 <= '9') || LA31_148 == '_' || (LA31_148 >= 'a' && LA31_148 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="262f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2630" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2633" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="2636" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2637" domain="userortestcode"><source><![CDATA[alt31 = 51;]]></source>
</chunk>
<chunk hits="0" offset="263a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="263b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="263e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="263f" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="2642" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2643" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2644" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	default:
                	]]></source>
</chunk>
<chunk hits="0" offset="2646" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="2649" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
        
            ]]></source>
</chunk>
<chunk hits="0" offset="264b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="264c" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case 'u':
        	]]></source>
</chunk>
<chunk hits="2" offset="2651" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="2652" domain="userortestcode"><source><![CDATA[switch ( input.LA(2) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
            case 'p':
            	]]></source>
</chunk>
<chunk hits="0" offset="267b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="267c" domain="userortestcode"><source><![CDATA[int LA31_85 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="268a" domain="userortestcode"><source><![CDATA[if ( (LA31_85 == 'd') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="269c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="269d" domain="userortestcode"><source><![CDATA[int LA31_149 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="26ab" domain="userortestcode"><source><![CDATA[if ( (LA31_149 == 'a') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="26bd" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="26be" domain="userortestcode"><source><![CDATA[int LA31_200 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="26cc" domain="userortestcode"><source><![CDATA[if ( (LA31_200 == 't') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="26db" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="26dc" domain="userortestcode"><source><![CDATA[int LA31_242 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="26ea" domain="userortestcode"><source><![CDATA[if ( (LA31_242 == 'e') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="26f9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="26fa" domain="userortestcode"><source><![CDATA[int LA31_270 = input.LA(7);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                
                                ]]></source>
</chunk>
<chunk hits="0" offset="2708" domain="userortestcode"><source><![CDATA[if ( ((LA31_270 >= '0' && LA31_270 <= '9') || LA31_270 == '_' || (LA31_270 >= 'a' && LA31_270 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="2732" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="2733" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="2736" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else 
                                ]]></source>
</chunk>
<chunk hits="0" offset="2739" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="273a" domain="userortestcode"><source><![CDATA[alt31 = 53;]]></source>
</chunk>
<chunk hits="0" offset="273d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="273e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="2741" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="2742" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="2745" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2746" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="2749" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="274a" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="274d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="274e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="2751" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2752" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="2755" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2756" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="2759" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="275a" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="275d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="275e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="275f" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 'n':
            	]]></source>
</chunk>
<chunk hits="0" offset="2764" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2765" domain="userortestcode"><source><![CDATA[int LA31_86 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="2773" domain="userortestcode"><source><![CDATA[if ( (LA31_86 == 'i') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2785" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2786" domain="userortestcode"><source><![CDATA[int LA31_150 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="2794" domain="userortestcode"><source><![CDATA[if ( (LA31_150 == 'o') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="27a3" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="27a4" domain="userortestcode"><source><![CDATA[int LA31_201 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="27b2" domain="userortestcode"><source><![CDATA[if ( (LA31_201 == 'n') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="27c1" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="27c2" domain="userortestcode"><source><![CDATA[int LA31_243 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="27d0" domain="userortestcode"><source><![CDATA[if ( ((LA31_243 >= '0' && LA31_243 <= '9') || LA31_243 == '_' || (LA31_243 >= 'a' && LA31_243 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="27fa" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="27fb" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="27fe" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="2801" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="2802" domain="userortestcode"><source><![CDATA[alt31 = 52;]]></source>
</chunk>
<chunk hits="0" offset="2805" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2806" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="2809" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="280a" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="280d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="280e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="2811" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2812" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="2815" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2816" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="2819" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="281a" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="281d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="281e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="281f" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	default:
                	]]></source>
</chunk>
<chunk hits="2" offset="2821" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="2" offset="2824" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
        
            ]]></source>
</chunk>
<chunk hits="2" offset="2826" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="2827" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case 'v':
        	]]></source>
</chunk>
<chunk hits="0" offset="282c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="282d" domain="userortestcode"><source><![CDATA[int LA31_19 = input.LA(2);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="0" offset="283b" domain="userortestcode"><source><![CDATA[if ( (LA31_19 == 'a') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="284d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="284e" domain="userortestcode"><source><![CDATA[int LA31_87 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="285c" domain="userortestcode"><source><![CDATA[if ( (LA31_87 == 'l') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="286e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="286f" domain="userortestcode"><source><![CDATA[int LA31_151 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="287d" domain="userortestcode"><source><![CDATA[if ( (LA31_151 == 'u') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="288f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2890" domain="userortestcode"><source><![CDATA[int LA31_202 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="289e" domain="userortestcode"><source><![CDATA[if ( (LA31_202 == 'e') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="28ad" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="28ae" domain="userortestcode"><source><![CDATA[int LA31_244 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="28bc" domain="userortestcode"><source><![CDATA[if ( (LA31_244 == 's') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="28cb" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="28cc" domain="userortestcode"><source><![CDATA[int LA31_272 = input.LA(7);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                
                                ]]></source>
</chunk>
<chunk hits="0" offset="28da" domain="userortestcode"><source><![CDATA[if ( ((LA31_272 >= '0' && LA31_272 <= '9') || LA31_272 == '_' || (LA31_272 >= 'a' && LA31_272 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="2904" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="2905" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="2908" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else 
                                ]]></source>
</chunk>
<chunk hits="0" offset="290b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="290c" domain="userortestcode"><source><![CDATA[alt31 = 54;]]></source>
</chunk>
<chunk hits="0" offset="290f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="2910" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="0" offset="2913" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="2914" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="2917" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2918" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="291b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="291c" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="291f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2920" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="2923" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2924" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="2927" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2928" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="292b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="292c" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="292f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2930" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else 
            ]]></source>
</chunk>
<chunk hits="0" offset="2933" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2934" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="2937" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2938" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2939" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case 'w':
        	]]></source>
</chunk>
<chunk hits="2" offset="293e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="293f" domain="userortestcode"><source><![CDATA[int LA31_20 = input.LA(2);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="6" offset="294d" domain="userortestcode"><source><![CDATA[if ( (LA31_20 == 'h') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="295f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="2960" domain="userortestcode"><source><![CDATA[int LA31_88 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="6" offset="296e" domain="userortestcode"><source><![CDATA[if ( (LA31_88 == 'e') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="2980" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="2981" domain="userortestcode"><source><![CDATA[switch ( input.LA(4) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    {
                    case 'n':
                    	]]></source>
</chunk>
<chunk hits="0" offset="29a0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="29a1" domain="userortestcode"><source><![CDATA[int LA31_203 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="29af" domain="userortestcode"><source><![CDATA[if ( ((LA31_203 >= '0' && LA31_203 <= '9') || LA31_203 == '_' || (LA31_203 >= 'a' && LA31_203 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="29d9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="29da" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="29dd" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="29e0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="29e1" domain="userortestcode"><source><![CDATA[alt31 = 55;]]></source>
</chunk>
<chunk hits="0" offset="29e4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="29e5" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="29e6" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    case 'r':
                    	]]></source>
</chunk>
<chunk hits="2" offset="29e8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="29e9" domain="userortestcode"><source><![CDATA[int LA31_204 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="6" offset="29f7" domain="userortestcode"><source><![CDATA[if ( (LA31_204 == 'e') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="2a06" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="2" offset="2a07" domain="userortestcode"><source><![CDATA[int LA31_246 = input.LA(6);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="6" offset="2a15" domain="userortestcode"><source><![CDATA[if ( ((LA31_246 >= '0' && LA31_246 <= '9') || LA31_246 == '_' || (LA31_246 >= 'a' && LA31_246 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="2a3f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="2a40" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="2a43" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else 
                            ]]></source>
</chunk>
<chunk hits="2" offset="2a46" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="2" offset="2a47" domain="userortestcode"><source><![CDATA[alt31 = 56;]]></source>
</chunk>
<chunk hits="2" offset="2a4a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="2a4b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="2a4e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="2a4f" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="2a52" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="2a53" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="2a54" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	default:
                        	]]></source>
</chunk>
<chunk hits="0" offset="2a56" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        	]]></source>
</chunk>
<chunk hits="0" offset="2a59" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
                
                ]]></source>
</chunk>
<chunk hits="2" offset="2a5b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="2a5e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2a5f" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="2a62" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="2a63" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else 
            ]]></source>
</chunk>
<chunk hits="0" offset="2a66" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2a67" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="2a6a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="2a6b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="2a6c" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case 'y':
        	]]></source>
</chunk>
<chunk hits="0" offset="2a71" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2a72" domain="userortestcode"><source><![CDATA[int LA31_21 = input.LA(2);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="0" offset="2a80" domain="userortestcode"><source><![CDATA[if ( (LA31_21 == 'e') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2a92" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2a93" domain="userortestcode"><source><![CDATA[int LA31_89 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="2aa1" domain="userortestcode"><source><![CDATA[if ( (LA31_89 == 'a') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2ab0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2ab1" domain="userortestcode"><source><![CDATA[int LA31_153 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="2abf" domain="userortestcode"><source><![CDATA[if ( (LA31_153 == 'r') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2ace" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2acf" domain="userortestcode"><source><![CDATA[int LA31_205 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="2add" domain="userortestcode"><source><![CDATA[if ( ((LA31_205 >= '0' && LA31_205 <= '9') || LA31_205 == '_' || (LA31_205 >= 'a' && LA31_205 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2b07" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="2b08" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2b0b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="2b0e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="2b0f" domain="userortestcode"><source><![CDATA[alt31 = 57;]]></source>
</chunk>
<chunk hits="0" offset="2b12" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2b13" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="2b16" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2b17" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="2b1a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2b1b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="2b1e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2b1f" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="2b22" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2b23" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else 
            ]]></source>
</chunk>
<chunk hits="0" offset="2b26" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2b27" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="0" offset="2b2a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2b2b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2b2c" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case '.':
        	]]></source>
</chunk>
<chunk hits="0" offset="2b31" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2b32" domain="userortestcode"><source><![CDATA[switch ( input.LA(2) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
            case '*':
            	]]></source>
</chunk>
<chunk hits="0" offset="2b8c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2b8d" domain="userortestcode"><source><![CDATA[alt31 = 58;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2b90" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2b91" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            	]]></source>
</chunk>
<chunk hits="0" offset="2b93" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2b94" domain="userortestcode"><source><![CDATA[alt31 = 78;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2b97" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2b98" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	default:
                	]]></source>
</chunk>
<chunk hits="0" offset="2b9a" domain="userortestcode"><source><![CDATA[alt31 = 59;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="2b9d" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
        
            ]]></source>
</chunk>
<chunk hits="0" offset="2b9f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2ba0" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case ',':
        	]]></source>
</chunk>
<chunk hits="0" offset="2ba5" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2ba6" domain="userortestcode"><source><![CDATA[alt31 = 60;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2ba9" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2baa" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case '(':
        	]]></source>
</chunk>
<chunk hits="0" offset="2baf" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2bb0" domain="userortestcode"><source><![CDATA[alt31 = 61;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2bb3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2bb4" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case ')':
        	]]></source>
</chunk>
<chunk hits="0" offset="2bb9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2bba" domain="userortestcode"><source><![CDATA[alt31 = 62;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2bbd" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2bbe" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case '=':
        	]]></source>
</chunk>
<chunk hits="2" offset="2bc3" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="2bc4" domain="userortestcode"><source><![CDATA[alt31 = 63;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="2bc7" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="2bc8" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case '<':
        	]]></source>
</chunk>
<chunk hits="0" offset="2bcd" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2bce" domain="userortestcode"><source><![CDATA[switch ( input.LA(2) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
            case '=':
            	]]></source>
</chunk>
<chunk hits="0" offset="2bf0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2bf1" domain="userortestcode"><source><![CDATA[alt31 = 66;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2bf4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2bf5" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case '>':
            	]]></source>
</chunk>
<chunk hits="0" offset="2bf7" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2bf8" domain="userortestcode"><source><![CDATA[alt31 = 64;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2bfb" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2bfc" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	default:
                	]]></source>
</chunk>
<chunk hits="0" offset="2bfe" domain="userortestcode"><source><![CDATA[alt31 = 67;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="2c01" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
        
            ]]></source>
</chunk>
<chunk hits="0" offset="2c03" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c04" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case '!':
        	]]></source>
</chunk>
<chunk hits="0" offset="2c09" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c0a" domain="userortestcode"><source><![CDATA[alt31 = 65;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c0d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c0e" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case '>':
        	]]></source>
</chunk>
<chunk hits="0" offset="2c13" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c14" domain="userortestcode"><source><![CDATA[int LA31_29 = input.LA(2);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="0" offset="2c22" domain="userortestcode"><source><![CDATA[if ( (LA31_29 == '=') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c31" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2c32" domain="userortestcode"><source><![CDATA[alt31 = 68;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c35" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else 
            ]]></source>
</chunk>
<chunk hits="0" offset="2c38" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2c39" domain="userortestcode"><source><![CDATA[alt31 = 69;]]></source>
</chunk>
<chunk hits="0" offset="2c3c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c3d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c3e" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case '/':
        	]]></source>
</chunk>
<chunk hits="0" offset="2c43" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c44" domain="userortestcode"><source><![CDATA[alt31 = 70;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c47" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c48" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case '+':
        	]]></source>
</chunk>
<chunk hits="0" offset="2c4d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c4e" domain="userortestcode"><source><![CDATA[alt31 = 71;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c51" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c52" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case '*':
        	]]></source>
</chunk>
<chunk hits="2" offset="2c57" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="2c58" domain="userortestcode"><source><![CDATA[alt31 = 72;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="2c5b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="2c5c" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case '%':
        	]]></source>
</chunk>
<chunk hits="0" offset="2c61" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c62" domain="userortestcode"><source><![CDATA[alt31 = 73;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c65" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c66" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case '|':
        	]]></source>
</chunk>
<chunk hits="0" offset="2c6b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c6c" domain="userortestcode"><source><![CDATA[alt31 = 74;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c6f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c70" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case '?':
        	]]></source>
</chunk>
<chunk hits="0" offset="2c75" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c76" domain="userortestcode"><source><![CDATA[alt31 = 75;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c79" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c7a" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case '#':
        	]]></source>
</chunk>
<chunk hits="0" offset="2c7f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c80" domain="userortestcode"><source><![CDATA[alt31 = 76;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c83" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c84" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case '0':
        	]]></source>
</chunk>
<chunk hits="0" offset="2c89" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2c8a" domain="userortestcode"><source><![CDATA[int LA31_37 = input.LA(2);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="0" offset="2c98" domain="userortestcode"><source><![CDATA[if ( ((LA31_37 >= '0' && LA31_37 <= '9')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2cb0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2cb1" domain="userortestcode"><source><![CDATA[int LA31_98 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="2cbf" domain="userortestcode"><source><![CDATA[if ( ((LA31_98 >= '0' && LA31_98 <= '9')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2cd4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2cd5" domain="userortestcode"><source><![CDATA[int LA31_154 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="2ce3" domain="userortestcode"><source><![CDATA[if ( ((LA31_154 >= '0' && LA31_154 <= '9')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2cf8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2cf9" domain="userortestcode"><source><![CDATA[int LA31_206 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="2d07" domain="userortestcode"><source><![CDATA[if ( (LA31_206 == '-') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2d16" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="2d17" domain="userortestcode"><source><![CDATA[alt31 = 77;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2d1a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="2d1d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="2d1e" domain="userortestcode"><source><![CDATA[alt31 = 78;]]></source>
</chunk>
<chunk hits="0" offset="2d21" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2d22" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="2d25" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2d26" domain="userortestcode"><source><![CDATA[alt31 = 78;]]></source>
</chunk>
<chunk hits="0" offset="2d29" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2d2a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="2d2d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2d2e" domain="userortestcode"><source><![CDATA[alt31 = 78;]]></source>
</chunk>
<chunk hits="0" offset="2d31" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2d32" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else 
            ]]></source>
</chunk>
<chunk hits="0" offset="2d35" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2d36" domain="userortestcode"><source><![CDATA[alt31 = 78;]]></source>
</chunk>
<chunk hits="0" offset="2d39" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2d3a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2d3b" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        	]]></source>
</chunk>
<chunk hits="2" offset="2d40" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="2d41" domain="userortestcode"><source><![CDATA[int LA31_38 = input.LA(2);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="6" offset="2d4f" domain="userortestcode"><source><![CDATA[if ( ((LA31_38 >= '0' && LA31_38 <= '9')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2d67" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2d68" domain="userortestcode"><source><![CDATA[int LA31_98 = input.LA(3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="2d76" domain="userortestcode"><source><![CDATA[if ( ((LA31_98 >= '0' && LA31_98 <= '9')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2d8b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2d8c" domain="userortestcode"><source><![CDATA[int LA31_154 = input.LA(4);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="2d9a" domain="userortestcode"><source><![CDATA[if ( ((LA31_154 >= '0' && LA31_154 <= '9')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2daf" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2db0" domain="userortestcode"><source><![CDATA[int LA31_206 = input.LA(5);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="2dbe" domain="userortestcode"><source><![CDATA[if ( (LA31_206 == '-') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2dcd" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="2dce" domain="userortestcode"><source><![CDATA[alt31 = 77;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2dd1" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else 
                        ]]></source>
</chunk>
<chunk hits="0" offset="2dd4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="2dd5" domain="userortestcode"><source><![CDATA[alt31 = 78;]]></source>
</chunk>
<chunk hits="0" offset="2dd8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2dd9" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else 
                    ]]></source>
</chunk>
<chunk hits="0" offset="2ddc" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="2ddd" domain="userortestcode"><source><![CDATA[alt31 = 78;]]></source>
</chunk>
<chunk hits="0" offset="2de0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2de1" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="2de4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="2de5" domain="userortestcode"><source><![CDATA[alt31 = 78;]]></source>
</chunk>
<chunk hits="0" offset="2de8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2de9" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else 
            ]]></source>
</chunk>
<chunk hits="2" offset="2dec" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="2ded" domain="userortestcode"><source><![CDATA[alt31 = 78;]]></source>
</chunk>
<chunk hits="2" offset="2df0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="2df1" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="2df2" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case 'k':
        case 'p':
        case 'q':
        case 'x':
        case 'z':
        	]]></source>
</chunk>
<chunk hits="0" offset="2df7" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2df8" domain="userortestcode"><source><![CDATA[alt31 = 79;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2dfb" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2dfc" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case '\"':
        case '[':
        case '`':
        	]]></source>
</chunk>
<chunk hits="0" offset="2e01" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2e02" domain="userortestcode"><source><![CDATA[alt31 = 80;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2e05" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2e06" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case ':':
        	]]></source>
</chunk>
<chunk hits="0" offset="2e0b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2e0c" domain="userortestcode"><source><![CDATA[int LA31_41 = input.LA(2);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="0" offset="2e1a" domain="userortestcode"><source><![CDATA[if ( ((LA31_41 >= 'a' && LA31_41 <= 'z')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2e2f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2e30" domain="userortestcode"><source><![CDATA[alt31 = 81;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2e33" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else 
            ]]></source>
</chunk>
<chunk hits="0" offset="2e36" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="2e37" domain="userortestcode"><source><![CDATA[alt31 = 85;]]></source>
</chunk>
<chunk hits="0" offset="2e3a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2e3b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2e3c" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case '\'':
        	]]></source>
</chunk>
<chunk hits="1" offset="2e3e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="2e3f" domain="userortestcode"><source><![CDATA[alt31 = 82;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="2e42" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="2e43" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case '-':
        	]]></source>
</chunk>
<chunk hits="0" offset="2e45" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2e46" domain="userortestcode"><source><![CDATA[alt31 = 84;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2e49" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2e4a" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case '@':
        	]]></source>
</chunk>
<chunk hits="0" offset="2e4c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2e4d" domain="userortestcode"><source><![CDATA[alt31 = 81;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2e50" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="2e51" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        case '\t':
        case '\n':
        case '\r':
        case ' ':
        	]]></source>
</chunk>
<chunk hits="12" offset="2e53" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="12" offset="2e54" domain="userortestcode"><source><![CDATA[alt31 = 86;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="12" offset="2e57" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="12" offset="2e58" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        	default:
        	    ]]></source>
</chunk>
<chunk hits="0" offset="2e5a" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="2e6c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="2e6d" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="2e74" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
        	    ]]></source>
</chunk>
<chunk hits="0" offset="2e79" domain="userortestcode"><source><![CDATA[NoViableAltException nvae_d31s0 =
        	        new NoViableAltException("1:1: Tokens : ( ALL | AND | ANY | AS | ASC | BETWEEN | BY | CASE | CAST | CROSS | DAY | DEFAULT | DELETE | DESC | DISTINCT | ELSE | END | ESCAPE | EXISTS | EXTRACT | FOR | FROM | FULL | GROUP | HAVING | HOUR | IN | INNER | INSERT | INTERVAL | INTO | IS | JOIN | LEFT | LIKE | MINUTE | MONTH | NOT | NULL | ON | OR | ORDER | OUTER | RIGHT | SECOND | SELECT | SET | SOME | SUBSTRING | THEN | TOP | UNION | UPDATE | VALUES | WHEN | WHERE | YEAR | DOT_STAR | DOT | COMMA | LPAREN | RPAREN | ASSIGNEQUAL | NOTEQUAL1 | NOTEQUAL2 | LESSTHANOREQUALTO1 | LESSTHAN | GREATERTHANOREQUALTO1 | GREATERTHAN | DIVIDE | PLUS | STAR | MOD | STRCONCAT | PLACEHOLDER | MAccessDateTime | Iso8601DateTime | Number | NonQuotedIdentifier | QuotedIdentifier | Variable | AsciiStringLiteral | UnicodeStringLiteral | MINUS | COLON | Whitespace );", 31, 0, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        	    ]]></source>
</chunk>
<chunk hits="0" offset="2e8e" domain="userortestcode"><source><![CDATA[throw nvae_d31s0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }
        
        ]]></source>
</chunk>
<chunk hits="28" offset="2e91" domain="userortestcode"><source><![CDATA[switch (alt31)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
        {
            case 1 :
                // MacroScope\\MacroScope.g:1:10: ALL
                ]]></source>
</chunk>
<chunk hits="0" offset="2ffa" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="2ffb" domain="userortestcode"><source><![CDATA[mALL();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3002" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3011" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3016" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3017" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 2 :
                // MacroScope\\MacroScope.g:1:14: AND
                ]]></source>
</chunk>
<chunk hits="0" offset="301c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="301d" domain="userortestcode"><source><![CDATA[mAND();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3024" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3033" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3038" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3039" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 3 :
                // MacroScope\\MacroScope.g:1:18: ANY
                ]]></source>
</chunk>
<chunk hits="0" offset="303e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="303f" domain="userortestcode"><source><![CDATA[mANY();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3046" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3055" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="305a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="305b" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 4 :
                // MacroScope\\MacroScope.g:1:22: AS
                ]]></source>
</chunk>
<chunk hits="0" offset="3060" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3061" domain="userortestcode"><source><![CDATA[mAS();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3068" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3077" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="307c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="307d" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 5 :
                // MacroScope\\MacroScope.g:1:25: ASC
                ]]></source>
</chunk>
<chunk hits="0" offset="3082" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3083" domain="userortestcode"><source><![CDATA[mASC();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="308a" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3099" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="309e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="309f" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 6 :
                // MacroScope\\MacroScope.g:1:29: BETWEEN
                ]]></source>
</chunk>
<chunk hits="0" offset="30a4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="30a5" domain="userortestcode"><source><![CDATA[mBETWEEN();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="30ac" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="30bb" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="30c0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="30c1" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 7 :
                // MacroScope\\MacroScope.g:1:37: BY
                ]]></source>
</chunk>
<chunk hits="0" offset="30c6" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="30c7" domain="userortestcode"><source><![CDATA[mBY();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="30ce" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="30dd" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="30e2" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="30e3" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 8 :
                // MacroScope\\MacroScope.g:1:40: CASE
                ]]></source>
</chunk>
<chunk hits="0" offset="30e8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="30e9" domain="userortestcode"><source><![CDATA[mCASE();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="30f0" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="30ff" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3104" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3105" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 9 :
                // MacroScope\\MacroScope.g:1:45: CAST
                ]]></source>
</chunk>
<chunk hits="0" offset="310a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="310b" domain="userortestcode"><source><![CDATA[mCAST();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3112" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3121" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3126" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3127" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 10 :
                // MacroScope\\MacroScope.g:1:50: CROSS
                ]]></source>
</chunk>
<chunk hits="0" offset="312c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="312d" domain="userortestcode"><source><![CDATA[mCROSS();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3134" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3143" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3148" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3149" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 11 :
                // MacroScope\\MacroScope.g:1:56: DAY
                ]]></source>
</chunk>
<chunk hits="0" offset="314e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="314f" domain="userortestcode"><source><![CDATA[mDAY();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3156" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3165" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="316a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="316b" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 12 :
                // MacroScope\\MacroScope.g:1:60: DEFAULT
                ]]></source>
</chunk>
<chunk hits="0" offset="3170" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3171" domain="userortestcode"><source><![CDATA[mDEFAULT();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3178" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3187" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="318c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="318d" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 13 :
                // MacroScope\\MacroScope.g:1:68: DELETE
                ]]></source>
</chunk>
<chunk hits="0" offset="3192" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3193" domain="userortestcode"><source><![CDATA[mDELETE();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="319a" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="31a9" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="31ae" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="31af" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 14 :
                // MacroScope\\MacroScope.g:1:75: DESC
                ]]></source>
</chunk>
<chunk hits="0" offset="31b4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="31b5" domain="userortestcode"><source><![CDATA[mDESC();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="31bc" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="31cb" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="31d0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="31d1" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 15 :
                // MacroScope\\MacroScope.g:1:80: DISTINCT
                ]]></source>
</chunk>
<chunk hits="0" offset="31d6" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="31d7" domain="userortestcode"><source><![CDATA[mDISTINCT();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="31de" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="31ed" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="31f2" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="31f3" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 16 :
                // MacroScope\\MacroScope.g:1:89: ELSE
                ]]></source>
</chunk>
<chunk hits="0" offset="31f8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="31f9" domain="userortestcode"><source><![CDATA[mELSE();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3200" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="320f" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3214" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3215" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 17 :
                // MacroScope\\MacroScope.g:1:94: END
                ]]></source>
</chunk>
<chunk hits="0" offset="321a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="321b" domain="userortestcode"><source><![CDATA[mEND();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3222" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3231" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3236" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3237" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 18 :
                // MacroScope\\MacroScope.g:1:98: ESCAPE
                ]]></source>
</chunk>
<chunk hits="0" offset="323c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="323d" domain="userortestcode"><source><![CDATA[mESCAPE();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3244" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3253" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3258" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3259" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 19 :
                // MacroScope\\MacroScope.g:1:105: EXISTS
                ]]></source>
</chunk>
<chunk hits="0" offset="325e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="325f" domain="userortestcode"><source><![CDATA[mEXISTS();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3266" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3275" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="327a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="327b" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 20 :
                // MacroScope\\MacroScope.g:1:112: EXTRACT
                ]]></source>
</chunk>
<chunk hits="0" offset="3280" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3281" domain="userortestcode"><source><![CDATA[mEXTRACT();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3288" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3297" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="329c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="329d" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 21 :
                // MacroScope\\MacroScope.g:1:120: FOR
                ]]></source>
</chunk>
<chunk hits="0" offset="32a2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="32a3" domain="userortestcode"><source><![CDATA[mFOR();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="32aa" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="32b9" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="32be" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="32bf" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 22 :
                // MacroScope\\MacroScope.g:1:124: FROM
                ]]></source>
</chunk>
<chunk hits="2" offset="32c4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="2" offset="32c5" domain="userortestcode"><source><![CDATA[mFROM();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="32cc" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="32db" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="2" offset="32e0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="32e1" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 23 :
                // MacroScope\\MacroScope.g:1:129: FULL
                ]]></source>
</chunk>
<chunk hits="0" offset="32e6" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="32e7" domain="userortestcode"><source><![CDATA[mFULL();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="32ee" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="32fd" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3302" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3303" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 24 :
                // MacroScope\\MacroScope.g:1:134: GROUP
                ]]></source>
</chunk>
<chunk hits="0" offset="3308" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3309" domain="userortestcode"><source><![CDATA[mGROUP();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3310" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="331f" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3324" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3325" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 25 :
                // MacroScope\\MacroScope.g:1:140: HAVING
                ]]></source>
</chunk>
<chunk hits="0" offset="332a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="332b" domain="userortestcode"><source><![CDATA[mHAVING();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3332" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3341" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3346" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3347" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 26 :
                // MacroScope\\MacroScope.g:1:147: HOUR
                ]]></source>
</chunk>
<chunk hits="0" offset="334c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="334d" domain="userortestcode"><source><![CDATA[mHOUR();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3354" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3363" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3368" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3369" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 27 :
                // MacroScope\\MacroScope.g:1:152: IN
                ]]></source>
</chunk>
<chunk hits="0" offset="336e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="336f" domain="userortestcode"><source><![CDATA[mIN();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3376" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3385" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="338a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="338b" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 28 :
                // MacroScope\\MacroScope.g:1:155: INNER
                ]]></source>
</chunk>
<chunk hits="0" offset="3390" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3391" domain="userortestcode"><source><![CDATA[mINNER();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3398" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="33a7" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="33ac" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="33ad" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 29 :
                // MacroScope\\MacroScope.g:1:161: INSERT
                ]]></source>
</chunk>
<chunk hits="0" offset="33b2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="33b3" domain="userortestcode"><source><![CDATA[mINSERT();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="33ba" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="33c9" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="33ce" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="33cf" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 30 :
                // MacroScope\\MacroScope.g:1:168: INTERVAL
                ]]></source>
</chunk>
<chunk hits="0" offset="33d4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="33d5" domain="userortestcode"><source><![CDATA[mINTERVAL();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="33dc" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="33eb" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="33f0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="33f1" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 31 :
                // MacroScope\\MacroScope.g:1:177: INTO
                ]]></source>
</chunk>
<chunk hits="0" offset="33f6" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="33f7" domain="userortestcode"><source><![CDATA[mINTO();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="33fe" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="340d" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3412" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3413" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 32 :
                // MacroScope\\MacroScope.g:1:182: IS
                ]]></source>
</chunk>
<chunk hits="0" offset="3418" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3419" domain="userortestcode"><source><![CDATA[mIS();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3420" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="342f" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3434" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3435" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 33 :
                // MacroScope\\MacroScope.g:1:185: JOIN
                ]]></source>
</chunk>
<chunk hits="0" offset="343a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="343b" domain="userortestcode"><source><![CDATA[mJOIN();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3442" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3451" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3456" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3457" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 34 :
                // MacroScope\\MacroScope.g:1:190: LEFT
                ]]></source>
</chunk>
<chunk hits="0" offset="345c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="345d" domain="userortestcode"><source><![CDATA[mLEFT();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3464" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3473" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3478" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3479" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 35 :
                // MacroScope\\MacroScope.g:1:195: LIKE
                ]]></source>
</chunk>
<chunk hits="0" offset="347e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="347f" domain="userortestcode"><source><![CDATA[mLIKE();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3486" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3495" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="349a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="349b" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 36 :
                // MacroScope\\MacroScope.g:1:200: MINUTE
                ]]></source>
</chunk>
<chunk hits="0" offset="34a0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="34a1" domain="userortestcode"><source><![CDATA[mMINUTE();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="34a8" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="34b7" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="34bc" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="34bd" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 37 :
                // MacroScope\\MacroScope.g:1:207: MONTH
                ]]></source>
</chunk>
<chunk hits="0" offset="34c2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="34c3" domain="userortestcode"><source><![CDATA[mMONTH();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="34ca" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="34d9" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="34de" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="34df" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 38 :
                // MacroScope\\MacroScope.g:1:213: NOT
                ]]></source>
</chunk>
<chunk hits="0" offset="34e4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="34e5" domain="userortestcode"><source><![CDATA[mNOT();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="34ec" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="34fb" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3500" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3501" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 39 :
                // MacroScope\\MacroScope.g:1:217: NULL
                ]]></source>
</chunk>
<chunk hits="0" offset="3506" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3507" domain="userortestcode"><source><![CDATA[mNULL();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="350e" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="351d" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3522" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3523" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 40 :
                // MacroScope\\MacroScope.g:1:222: ON
                ]]></source>
</chunk>
<chunk hits="0" offset="3528" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3529" domain="userortestcode"><source><![CDATA[mON();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3530" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="353f" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3544" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3545" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 41 :
                // MacroScope\\MacroScope.g:1:225: OR
                ]]></source>
</chunk>
<chunk hits="0" offset="354a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="354b" domain="userortestcode"><source><![CDATA[mOR();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3552" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3561" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3566" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3567" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 42 :
                // MacroScope\\MacroScope.g:1:228: ORDER
                ]]></source>
</chunk>
<chunk hits="0" offset="356c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="356d" domain="userortestcode"><source><![CDATA[mORDER();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3574" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3583" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3588" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3589" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 43 :
                // MacroScope\\MacroScope.g:1:234: OUTER
                ]]></source>
</chunk>
<chunk hits="0" offset="358e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="358f" domain="userortestcode"><source><![CDATA[mOUTER();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3596" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="35a5" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="35aa" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="35ab" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 44 :
                // MacroScope\\MacroScope.g:1:240: RIGHT
                ]]></source>
</chunk>
<chunk hits="0" offset="35b0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="35b1" domain="userortestcode"><source><![CDATA[mRIGHT();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="35b8" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="35c7" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="35cc" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="35cd" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 45 :
                // MacroScope\\MacroScope.g:1:246: SECOND
                ]]></source>
</chunk>
<chunk hits="0" offset="35d2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="35d3" domain="userortestcode"><source><![CDATA[mSECOND();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="35da" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="35e9" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="35ee" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="35ef" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 46 :
                // MacroScope\\MacroScope.g:1:253: SELECT
                ]]></source>
</chunk>
<chunk hits="2" offset="35f4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="2" offset="35f5" domain="userortestcode"><source><![CDATA[mSELECT();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="35fc" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="360b" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="2" offset="3610" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="3611" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 47 :
                // MacroScope\\MacroScope.g:1:260: SET
                ]]></source>
</chunk>
<chunk hits="0" offset="3616" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3617" domain="userortestcode"><source><![CDATA[mSET();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="361e" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="362d" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3632" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3633" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 48 :
                // MacroScope\\MacroScope.g:1:264: SOME
                ]]></source>
</chunk>
<chunk hits="0" offset="3638" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3639" domain="userortestcode"><source><![CDATA[mSOME();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3640" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="364f" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3654" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3655" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 49 :
                // MacroScope\\MacroScope.g:1:269: SUBSTRING
                ]]></source>
</chunk>
<chunk hits="0" offset="365a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="365b" domain="userortestcode"><source><![CDATA[mSUBSTRING();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3662" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3671" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3676" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3677" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 50 :
                // MacroScope\\MacroScope.g:1:279: THEN
                ]]></source>
</chunk>
<chunk hits="0" offset="367c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="367d" domain="userortestcode"><source><![CDATA[mTHEN();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3684" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3693" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3698" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3699" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 51 :
                // MacroScope\\MacroScope.g:1:284: TOP
                ]]></source>
</chunk>
<chunk hits="0" offset="369e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="369f" domain="userortestcode"><source><![CDATA[mTOP();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="36a6" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="36b5" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="36ba" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="36bb" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 52 :
                // MacroScope\\MacroScope.g:1:288: UNION
                ]]></source>
</chunk>
<chunk hits="0" offset="36c0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="36c1" domain="userortestcode"><source><![CDATA[mUNION();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="36c8" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="36d7" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="36dc" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="36dd" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 53 :
                // MacroScope\\MacroScope.g:1:294: UPDATE
                ]]></source>
</chunk>
<chunk hits="0" offset="36e2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="36e3" domain="userortestcode"><source><![CDATA[mUPDATE();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="36ea" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="36f9" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="36fe" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="36ff" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 54 :
                // MacroScope\\MacroScope.g:1:301: VALUES
                ]]></source>
</chunk>
<chunk hits="0" offset="3704" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3705" domain="userortestcode"><source><![CDATA[mVALUES();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="370c" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="371b" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3720" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3721" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 55 :
                // MacroScope\\MacroScope.g:1:308: WHEN
                ]]></source>
</chunk>
<chunk hits="0" offset="3726" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3727" domain="userortestcode"><source><![CDATA[mWHEN();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="372e" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="373d" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3742" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3743" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 56 :
                // MacroScope\\MacroScope.g:1:313: WHERE
                ]]></source>
</chunk>
<chunk hits="2" offset="3748" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="2" offset="3749" domain="userortestcode"><source><![CDATA[mWHERE();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="3750" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="375f" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="2" offset="3764" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="3765" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 57 :
                // MacroScope\\MacroScope.g:1:319: YEAR
                ]]></source>
</chunk>
<chunk hits="0" offset="376a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="376b" domain="userortestcode"><source><![CDATA[mYEAR();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3772" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3781" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3786" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3787" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 58 :
                // MacroScope\\MacroScope.g:1:324: DOT_STAR
                ]]></source>
</chunk>
<chunk hits="0" offset="378c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="378d" domain="userortestcode"><source><![CDATA[mDOT_STAR();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3794" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="37a3" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="37a8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="37a9" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 59 :
                // MacroScope\\MacroScope.g:1:333: DOT
                ]]></source>
</chunk>
<chunk hits="0" offset="37ae" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="37af" domain="userortestcode"><source><![CDATA[mDOT();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="37b6" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="37c5" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="37ca" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="37cb" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 60 :
                // MacroScope\\MacroScope.g:1:337: COMMA
                ]]></source>
</chunk>
<chunk hits="0" offset="37d0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="37d1" domain="userortestcode"><source><![CDATA[mCOMMA();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="37d8" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="37e7" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="37ec" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="37ed" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 61 :
                // MacroScope\\MacroScope.g:1:343: LPAREN
                ]]></source>
</chunk>
<chunk hits="0" offset="37f2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="37f3" domain="userortestcode"><source><![CDATA[mLPAREN();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="37fa" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3809" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="380e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="380f" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 62 :
                // MacroScope\\MacroScope.g:1:350: RPAREN
                ]]></source>
</chunk>
<chunk hits="0" offset="3814" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3815" domain="userortestcode"><source><![CDATA[mRPAREN();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="381c" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="382b" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3830" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3831" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 63 :
                // MacroScope\\MacroScope.g:1:357: ASSIGNEQUAL
                ]]></source>
</chunk>
<chunk hits="2" offset="3836" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="2" offset="3837" domain="userortestcode"><source><![CDATA[mASSIGNEQUAL();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="383e" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="384d" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="2" offset="3852" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="3853" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 64 :
                // MacroScope\\MacroScope.g:1:369: NOTEQUAL1
                ]]></source>
</chunk>
<chunk hits="0" offset="3858" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3859" domain="userortestcode"><source><![CDATA[mNOTEQUAL1();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3860" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="386f" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3874" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3875" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 65 :
                // MacroScope\\MacroScope.g:1:379: NOTEQUAL2
                ]]></source>
</chunk>
<chunk hits="0" offset="387a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="387b" domain="userortestcode"><source><![CDATA[mNOTEQUAL2();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3882" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3891" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3896" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3897" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 66 :
                // MacroScope\\MacroScope.g:1:389: LESSTHANOREQUALTO1
                ]]></source>
</chunk>
<chunk hits="0" offset="389c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="389d" domain="userortestcode"><source><![CDATA[mLESSTHANOREQUALTO1();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="38a4" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="38b3" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="38b8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="38b9" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 67 :
                // MacroScope\\MacroScope.g:1:408: LESSTHAN
                ]]></source>
</chunk>
<chunk hits="0" offset="38be" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="38bf" domain="userortestcode"><source><![CDATA[mLESSTHAN();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="38c6" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="38d5" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="38da" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="38db" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 68 :
                // MacroScope\\MacroScope.g:1:417: GREATERTHANOREQUALTO1
                ]]></source>
</chunk>
<chunk hits="0" offset="38e0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="38e1" domain="userortestcode"><source><![CDATA[mGREATERTHANOREQUALTO1();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="38e8" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="38f7" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="38fc" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="38fd" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 69 :
                // MacroScope\\MacroScope.g:1:439: GREATERTHAN
                ]]></source>
</chunk>
<chunk hits="0" offset="3902" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3903" domain="userortestcode"><source><![CDATA[mGREATERTHAN();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="390a" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3919" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="391e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="391f" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 70 :
                // MacroScope\\MacroScope.g:1:451: DIVIDE
                ]]></source>
</chunk>
<chunk hits="0" offset="3924" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3925" domain="userortestcode"><source><![CDATA[mDIVIDE();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="392c" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="393b" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3940" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3941" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 71 :
                // MacroScope\\MacroScope.g:1:458: PLUS
                ]]></source>
</chunk>
<chunk hits="0" offset="3946" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3947" domain="userortestcode"><source><![CDATA[mPLUS();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="394e" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="395d" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3962" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3963" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 72 :
                // MacroScope\\MacroScope.g:1:463: STAR
                ]]></source>
</chunk>
<chunk hits="2" offset="3968" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="2" offset="3969" domain="userortestcode"><source><![CDATA[mSTAR();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="3970" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="397f" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="2" offset="3984" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="3985" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 73 :
                // MacroScope\\MacroScope.g:1:468: MOD
                ]]></source>
</chunk>
<chunk hits="0" offset="398a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="398b" domain="userortestcode"><source><![CDATA[mMOD();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3992" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="39a1" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="39a6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="39a7" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 74 :
                // MacroScope\\MacroScope.g:1:472: STRCONCAT
                ]]></source>
</chunk>
<chunk hits="0" offset="39ac" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="39ad" domain="userortestcode"><source><![CDATA[mSTRCONCAT();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="39b4" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="39c3" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="39c8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="39c9" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 75 :
                // MacroScope\\MacroScope.g:1:482: PLACEHOLDER
                ]]></source>
</chunk>
<chunk hits="0" offset="39ce" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="39cf" domain="userortestcode"><source><![CDATA[mPLACEHOLDER();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="39d6" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="39e5" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="39ea" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="39eb" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 76 :
                // MacroScope\\MacroScope.g:1:494: MAccessDateTime
                ]]></source>
</chunk>
<chunk hits="0" offset="39f0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="39f1" domain="userortestcode"><source><![CDATA[mMAccessDateTime();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="39f8" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3a07" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3a0c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3a0d" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 77 :
                // MacroScope\\MacroScope.g:1:510: Iso8601DateTime
                ]]></source>
</chunk>
<chunk hits="0" offset="3a12" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3a13" domain="userortestcode"><source><![CDATA[mIso8601DateTime();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3a1a" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3a29" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3a2e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3a2f" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 78 :
                // MacroScope\\MacroScope.g:1:526: Number
                ]]></source>
</chunk>
<chunk hits="2" offset="3a34" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="2" offset="3a35" domain="userortestcode"><source><![CDATA[mNumber();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="3a3c" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3a4b" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="2" offset="3a50" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="3a51" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 79 :
                // MacroScope\\MacroScope.g:1:533: NonQuotedIdentifier
                ]]></source>
</chunk>
<chunk hits="3" offset="3a56" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="3" offset="3a57" domain="userortestcode"><source><![CDATA[mNonQuotedIdentifier();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="3" offset="3a5e" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3a6d" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="3" offset="3a72" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="3" offset="3a73" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 80 :
                // MacroScope\\MacroScope.g:1:553: QuotedIdentifier
                ]]></source>
</chunk>
<chunk hits="0" offset="3a78" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3a79" domain="userortestcode"><source><![CDATA[mQuotedIdentifier();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3a80" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3a8f" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3a94" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3a95" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 81 :
                // MacroScope\\MacroScope.g:1:570: Variable
                ]]></source>
</chunk>
<chunk hits="0" offset="3a9a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3a9b" domain="userortestcode"><source><![CDATA[mVariable();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3aa2" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3ab1" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3ab6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3ab7" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 82 :
                // MacroScope\\MacroScope.g:1:579: AsciiStringLiteral
                ]]></source>
</chunk>
<chunk hits="1" offset="3abc" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="1" offset="3abd" domain="userortestcode"><source><![CDATA[mAsciiStringLiteral();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="3ac4" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3ad3" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="1" offset="3ad5" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="3ad6" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 83 :
                // MacroScope\\MacroScope.g:1:598: UnicodeStringLiteral
                ]]></source>
</chunk>
<chunk hits="0" offset="3ad8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3ad9" domain="userortestcode"><source><![CDATA[mUnicodeStringLiteral();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3ae0" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3aef" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3af1" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3af2" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 84 :
                // MacroScope\\MacroScope.g:1:619: MINUS
                ]]></source>
</chunk>
<chunk hits="0" offset="3af4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3af5" domain="userortestcode"><source><![CDATA[mMINUS();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3afc" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3b0b" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3b0d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3b0e" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 85 :
                // MacroScope\\MacroScope.g:1:625: COLON
                ]]></source>
</chunk>
<chunk hits="0" offset="3b10" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="0" offset="3b11" domain="userortestcode"><source><![CDATA[mCOLON();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3b18" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3b27" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="0" offset="3b29" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="3b2a" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case 86 :
                // MacroScope\\MacroScope.g:1:631: Whitespace
                ]]></source>
</chunk>
<chunk hits="12" offset="3b2c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                	]]></source>
</chunk>
<chunk hits="12" offset="3b2d" domain="userortestcode"><source><![CDATA[mWhitespace();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="12" offset="3b34" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="3b43" domain="userortestcode"><source><![CDATA[return ;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="12" offset="3b45" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="12" offset="3b46" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        }
    
    ]]></source>
</chunk>
<chunk hits="28" offset="3b48" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

    // $ANTLR start synpred1
    public void synpred1_fragment() //throws RecognitionException
    {   
        // MacroScope\\MacroScope.g:913:2: ( ( Digit )+ ( '.' | 'e' ) )
        // MacroScope\\MacroScope.g:913:4: ( Digit )+ ( '.' | 'e' )
        {
        	// MacroScope\\MacroScope.g:913:4: ( Digit )+
        	int cnt32 = 0;
        	do 
        	{
        	    int alt32 = 2;
        	    int LA32_0 = input.LA(1);
        	    
        	    if ( ((LA32_0 >= '0' && LA32_0 <= '9')) )
        	    {
        	        alt32 = 1;
        	    }
        	    
        	
        	    switch (alt32) 
        		{
        			case 1 :
        			    // MacroScope\\MacroScope.g:913:5: Digit
        			    {
        			    	mDigit(); if (failed) return ;
        			    
        			    }
        			    break;
        	
        			default:
        			    if ( cnt32 >= 1 ) goto loop32;
        			    if ( backtracking > 0 ) {failed = true; return ;}
        		            EarlyExitException eee =
        		                new EarlyExitException(32, input);
        		            throw eee;
        	    }
        	    cnt32++;
        	} while (true);
        	
        	loop32:
        		;	// Stops C# compiler whinging that label 'loop32' has no statements

        	if ( input.LA(1) == '.' || input.LA(1) == 'e' ) 
        	{
        	    input.Consume();
        	failed = false;
        	}
        	else 
        	{
        	    if ( backtracking > 0 ) {failed = true; return ;}
        	    MismatchedSetException mse =
        	        new MismatchedSetException(null,input);
        	    Recover(mse);    throw mse;
        	}

        
        }
    }
    // $ANTLR end synpred1

   	public bool synpred1() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred1_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}


    protected DFA12 dfa12;
	private void InitializeCyclicDFAs()
	]]></source>
</chunk>
<method name="InitializeCyclicDFAs" namespace="MacroScope" type="MacroScope.MacroScopeLexer" typeName="MacroScopeLexer" token="6000067" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="9" value="2"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
	    ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[this.dfa12 = new DFA12(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
	    ]]></source>
</chunk>
<chunk hits="4" offset="000d" domain="userortestcode"><source><![CDATA[this.dfa12.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA12_SpecialStateTransition);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
	]]></source>
</chunk>
<chunk hits="4" offset="0024" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

    static readonly short[] DFA12_eot = {
        -1, 5, -1, 5, -1, -1, -1, -1
        };
    static readonly short[] DFA12_eof = {
        -1, -1, -1, -1, -1, -1, -1, -1
        };
    static readonly int[] DFA12_min = {
        46, 46, 0, 46, 0, 0, 0, 0
        };
    static readonly int[] DFA12_max = {
        57, 120, 0, 101, 0, 0, 0, 0
        };
    static readonly short[] DFA12_accept = {
        -1, -1, 2, -1, 4, 3, 1, 1
        };
    static readonly short[] DFA12_special = {
        -1, 1, -1, 0, -1, -1, -1, -1
        };
    
    static readonly short[] dfa12_transition_null = null;

    static readonly short[] dfa12_transition0 = {
    	2, -1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3
    	};
    static readonly short[] dfa12_transition1 = {
    	6, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, 
    	    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    	    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    	    -1, -1, -1, 7
    	};
    static readonly short[] dfa12_transition2 = {
    	6, -1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, 
    	    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    	    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    	    -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    	    -1, -1, -1, -1, -1, -1, 4
    	};
    
    static readonly short[][] DFA12_transition = {
    	dfa12_transition0,
    	dfa12_transition2,
    	dfa12_transition_null,
    	dfa12_transition1,
    	dfa12_transition_null,
    	dfa12_transition_null,
    	dfa12_transition_null,
    	dfa12_transition_null
        };
    
    protected class DFA12 : DFA
    {
        ]]></source>
</chunk>
<method name=".ctor" namespace="MacroScope" type="MacroScope.MacroScopeLexer+DFA12" typeName="MacroScopeLexer+DFA12" token="600006a" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="2"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="16" value="2"/>
<hit index="17" value="2"/>
<hit index="18" value="2"/>
<hit index="19" value="2"/>
<hit index="20" value="2"/>
</hits>
<tags><tag offset="0001">call to uninstrumented method DFA..ctor()</tag>
</tags>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode" tag="true"><tooltip><![CDATA[call to uninstrumented method DFA..ctor()]]></tooltip>
<source><![CDATA[public DFA12(BaseRecognizer recognizer)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
        ]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0008" domain="userortestcode"><source><![CDATA[this.recognizer = recognizer;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="000f" domain="userortestcode"><source><![CDATA[this.decisionNumber = 12;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0017" domain="userortestcode"><source><![CDATA[this.eot = DFA12_eot;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0022" domain="userortestcode"><source><![CDATA[this.eof = DFA12_eof;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="002d" domain="userortestcode"><source><![CDATA[this.min = DFA12_min;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0038" domain="userortestcode"><source><![CDATA[this.max = DFA12_max;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0043" domain="userortestcode"><source><![CDATA[this.accept     = DFA12_accept;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="004e" domain="userortestcode"><source><![CDATA[this.special    = DFA12_special;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0059" domain="userortestcode"><source><![CDATA[this.transition = DFA12_transition;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0064" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        override public string Description
        {
            get { return "912:1: Number : ( ( ( Digit )+ ( '.' | 'e' ) )=> ( Digit )+ ( '.' ( Digit )* ( Exponent )? | Exponent ) | '.' ( ( Digit )+ ( Exponent )? )? | ( Digit )+ | '0x' ( 'a' .. 'f' | Digit )* );"; }
        }
    
    }
    
    
    protected internal int DFA12_SpecialStateTransition(DFA dfa, int s, IIntStream input) //throws NoViableAltException
    ]]></source>
</chunk>
<method name="DFA12_SpecialStateTransition" namespace="MacroScope" type="MacroScope.MacroScopeLexer" typeName="MacroScopeLexer" token="6000068" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="4"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="4"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="4"/>
<hit index="14" value="1"/>
<hit index="24" value="2"/>
<hit index="25" value="2"/>
<hit index="26" value="2"/>
<hit index="27" value="4"/>
<hit index="28" value="2"/>
<hit index="73" value="2"/>
<hit index="75" value="1"/>
<hit index="76" value="2"/>
<hit index="77" value="2"/>
<hit index="78" value="2"/>
<hit index="79" value="2"/>
<hit index="80" value="2"/>
</hits>
<tags><tag offset="0023">call to uninstrumented method System.Int32 Antlr.Runtime.ANTLRStringStream.Index()</tag>
<tag offset="008e">call to uninstrumented method System.Void Antlr.Runtime.ANTLRStringStream.Seek(System.Int32 index)</tag>
</tags>
<coverage domain="userortestcode" unit="block" covered="14" total="51" coveredRatio="0.27450980392156865"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    	]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[int _s = s;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0003" domain="userortestcode"><source><![CDATA[switch ( s )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        {

               	case 0 : 
                   	]]></source>
</chunk>
<chunk hits="2" offset="001a" domain="userortestcode"><source><![CDATA[int LA12_3 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                   	
                   	 
                   	]]></source>
</chunk>
<chunk hits="6" offset="0022" domain="userortestcode" tag="true"><tooltip><![CDATA[call to uninstrumented method System.Int32 Antlr.Runtime.ANTLRStringStream.Index()]]></tooltip>
<source><![CDATA[int index12_3 = input.Index();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                   	]]></source>
</chunk>
<chunk hits="6" offset="0029" domain="userortestcode"><source><![CDATA[input.Rewind();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                   	]]></source>
</chunk>
<chunk hits="6" offset="0030" domain="userortestcode"><source><![CDATA[s = -1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                   	]]></source>
</chunk>
<chunk hits="6" offset="0033" domain="userortestcode"><source><![CDATA[if ( ((LA12_3 >= '0' && LA12_3 <= '9')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0046" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0047" domain="userortestcode"><source><![CDATA[s = 3;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="004a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                   	else ]]></source>
</chunk>
<chunk hits="2" offset="004d" domain="userortestcode"><source><![CDATA[if ( (LA12_3 == '.') && (synpred1()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0064" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0065" domain="userortestcode"><source><![CDATA[s = 6;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0068" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                   	else ]]></source>
</chunk>
<chunk hits="2" offset="006b" domain="userortestcode"><source><![CDATA[if ( (LA12_3 == 'e') && (synpred1()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0082" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0083" domain="userortestcode"><source><![CDATA[s = 7;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0086" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                   	else ]]></source>
</chunk>
<chunk hits="2" offset="0089" domain="userortestcode"><source><![CDATA[s = 5;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                   	
                   	 
                   	]]></source>
</chunk>
<chunk hits="2" offset="008c" domain="userortestcode" tag="true"><tooltip><![CDATA[call to uninstrumented method System.Void Antlr.Runtime.ANTLRStringStream.Seek(System.Int32 index)]]></tooltip>
<source><![CDATA[input.Seek(index12_3);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                   	]]></source>
</chunk>
<chunk hits="6" offset="0094" domain="userortestcode"><source><![CDATA[if ( s >= 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="009e" domain="userortestcode"><source><![CDATA[return s;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                   	]]></source>
</chunk>
<chunk hits="0" offset="00a6" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

               	case 1 : 
                   	]]></source>
</chunk>
<chunk hits="0" offset="00ab" domain="userortestcode"><source><![CDATA[int LA12_1 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                   	
                   	 
                   	]]></source>
</chunk>
<chunk hits="0" offset="00b3" domain="userortestcode"><source><![CDATA[int index12_1 = input.Index();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                   	]]></source>
</chunk>
<chunk hits="0" offset="00bb" domain="userortestcode"><source><![CDATA[input.Rewind();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                   	]]></source>
</chunk>
<chunk hits="0" offset="00c2" domain="userortestcode"><source><![CDATA[s = -1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                   	]]></source>
</chunk>
<chunk hits="0" offset="00c5" domain="userortestcode"><source><![CDATA[if ( (LA12_1 == 'x') )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00d3" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00d4" domain="userortestcode"><source><![CDATA[s = 4;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00d7" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                   	else ]]></source>
</chunk>
<chunk hits="0" offset="00da" domain="userortestcode"><source><![CDATA[if ( ((LA12_1 >= '0' && LA12_1 <= '9')) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00ed" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00ee" domain="userortestcode"><source><![CDATA[s = 3;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00f1" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                   	else ]]></source>
</chunk>
<chunk hits="0" offset="00f4" domain="userortestcode"><source><![CDATA[if ( (LA12_1 == '.') && (synpred1()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="010b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="010c" domain="userortestcode"><source><![CDATA[s = 6;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="010f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                   	else ]]></source>
</chunk>
<chunk hits="0" offset="0112" domain="userortestcode"><source><![CDATA[if ( (LA12_1 == 'e') && (synpred1()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0129" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="012a" domain="userortestcode"><source><![CDATA[s = 7;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="012d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                   	else ]]></source>
</chunk>
<chunk hits="0" offset="0130" domain="userortestcode"><source><![CDATA[s = 5;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                   	
                   	 
                   	]]></source>
</chunk>
<chunk hits="0" offset="0133" domain="userortestcode"><source><![CDATA[input.Seek(index12_1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                   	]]></source>
</chunk>
<chunk hits="0" offset="013c" domain="userortestcode"><source><![CDATA[if ( s >= 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0146" domain="userortestcode"><source><![CDATA[return s;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                   	]]></source>
</chunk>
<chunk hits="0" offset="014b" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }
        ]]></source>
</chunk>
<chunk hits="0" offset="014d" domain="userortestcode"><source><![CDATA[if (backtracking > 0)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="015f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="0160" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0167" domain="userortestcode"><source><![CDATA[return -1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
        ]]></source>
</chunk>
<chunk hits="0" offset="016c" domain="userortestcode"><source><![CDATA[NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 12, _s, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="0" offset="017d" domain="userortestcode"><source><![CDATA[dfa.Error(nvae);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="0" offset="0186" domain="userortestcode"><source><![CDATA[throw nvae;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="2" offset="0189" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
 
    
}
}]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MacroScopeCE\MacroScopeParser.cs" renderPrefix="s2"><chunk hits="-1" domain="unknown"><source><![CDATA[// $ANTLR 3.0.1 MacroScope\\MacroScope.g 2008-01-12 20:02:54
namespace 
	MacroScope

{

using System;
using Antlr.Runtime;
using IList 		= System.Collections.IList;
using ArrayList 	= System.Collections.ArrayList;
using Stack 		= Antlr.Runtime.Collections.StackList;

using IDictionary	= System.Collections.IDictionary;
using Hashtable 	= System.Collections.Hashtable;


public class MacroScopeParser : Parser 
{
    public static readonly string[] tokenNames = new string[] 
	{
        "<invalid>", 
		"<EOR>", 
		"<DOWN>", 
		"<UP>", 
		"INSERT", 
		"INTO", 
		"LPAREN", 
		"RPAREN", 
		"VALUES", 
		"UPDATE", 
		"SET", 
		"DELETE", 
		"FROM", 
		"COMMA", 
		"ASSIGNEQUAL", 
		"DEFAULT", 
		"SELECT", 
		"ALL", 
		"DISTINCT", 
		"TOP", 
		"Integer", 
		"WHERE", 
		"ORDER", 
		"BY", 
		"ASC", 
		"DESC", 
		"GROUP", 
		"HAVING", 
		"OR", 
		"AND", 
		"NOT", 
		"IS", 
		"NULL", 
		"LIKE", 
		"ESCAPE", 
		"BETWEEN", 
		"IN", 
		"EXISTS", 
		"SOME", 
		"ANY", 
		"STAR", 
		"INNER", 
		"LEFT", 
		"RIGHT", 
		"FULL", 
		"OUTER", 
		"JOIN", 
		"CROSS", 
		"ON", 
		"AS", 
		"DOT_STAR", 
		"PLACEHOLDER", 
		"Variable", 
		"SUBSTRING", 
		"FOR", 
		"EXTRACT", 
		"NonQuotedIdentifier", 
		"CASE", 
		"WHEN", 
		"THEN", 
		"ELSE", 
		"END", 
		"CAST", 
		"DOT", 
		"UnicodeStringLiteral", 
		"AsciiStringLiteral", 
		"QuotedIdentifier", 
		"Real", 
		"HexLiteral", 
		"MAccessDateTime", 
		"Iso8601DateTime", 
		"INTERVAL", 
		"PLUS", 
		"MINUS", 
		"STRCONCAT", 
		"DIVIDE", 
		"MOD", 
		"NOTEQUAL1", 
		"NOTEQUAL2", 
		"LESSTHANOREQUALTO1", 
		"LESSTHAN", 
		"GREATERTHANOREQUALTO1", 
		"GREATERTHAN", 
		"UNION", 
		"YEAR", 
		"MONTH", 
		"DAY", 
		"HOUR", 
		"MINUTE", 
		"SECOND", 
		"Letter", 
		"Digit", 
		"Exponent", 
		"Number", 
		"WordTail", 
		"AsciiStringRun", 
		"UnicodeStringRun", 
		"COLON", 
		"Whitespace"
    };

    public const int CAST = 62;
    public const int STAR = 40;
    public const int MOD = 76;
    public const int GREATERTHANOREQUALTO1 = 81;
    public const int DOT_STAR = 50;
    public const int CASE = 57;
    public const int DAY = 86;
    public const int NOT = 30;
    public const int ASSIGNEQUAL = 14;
    public const int EOF = -1;
    public const int MONTH = 85;
    public const int RPAREN = 7;
    public const int FULL = 44;
    public const int Variable = 52;
    public const int ESCAPE = 34;
    public const int INSERT = 4;
    public const int NonQuotedIdentifier = 56;
    public const int SELECT = 16;
    public const int INTO = 5;
    public const int DIVIDE = 75;
    public const int PLACEHOLDER = 51;
    public const int GREATERTHAN = 82;
    public const int SECOND = 89;
    public const int ASC = 24;
    public const int UnicodeStringLiteral = 64;
    public const int NULL = 32;
    public const int ELSE = 60;
    public const int ON = 48;
    public const int DELETE = 11;
    public const int GROUP = 26;
    public const int MAccessDateTime = 69;
    public const int OR = 28;
    public const int LESSTHANOREQUALTO1 = 79;
    public const int FROM = 12;
    public const int END = 61;
    public const int DISTINCT = 18;
    public const int Letter = 90;
    public const int WHERE = 21;
    public const int UnicodeStringRun = 96;
    public const int INNER = 41;
    public const int YEAR = 84;
    public const int ORDER = 22;
    public const int UPDATE = 9;
    public const int AsciiStringLiteral = 65;
    public const int Exponent = 92;
    public const int FOR = 54;
    public const int AND = 29;
    public const int CROSS = 47;
    public const int INTERVAL = 71;
    public const int LPAREN = 6;
    public const int AS = 49;
    public const int IN = 36;
    public const int THEN = 59;
    public const int Number = 93;
    public const int COMMA = 13;
    public const int IS = 31;
    public const int LEFT = 42;
    public const int SOME = 38;
    public const int ALL = 17;
    public const int Real = 67;
    public const int PLUS = 72;
    public const int EXISTS = 37;
    public const int EXTRACT = 55;
    public const int DOT = 63;
    public const int Whitespace = 98;
    public const int LIKE = 33;
    public const int OUTER = 45;
    public const int HexLiteral = 68;
    public const int BY = 23;
    public const int LESSTHAN = 80;
    public const int AsciiStringRun = 95;
    public const int DEFAULT = 15;
    public const int VALUES = 8;
    public const int RIGHT = 43;
    public const int SET = 10;
    public const int HAVING = 27;
    public const int MINUS = 73;
    public const int HOUR = 87;
    public const int Digit = 91;
    public const int QuotedIdentifier = 66;
    public const int WordTail = 94;
    public const int JOIN = 46;
    public const int UNION = 83;
    public const int SUBSTRING = 53;
    public const int COLON = 97;
    public const int STRCONCAT = 74;
    public const int ANY = 39;
    public const int WHEN = 58;
    public const int NOTEQUAL1 = 77;
    public const int NOTEQUAL2 = 78;
    public const int DESC = 25;
    public const int MINUTE = 88;
    public const int TOP = 19;
    public const int BETWEEN = 35;
    public const int Integer = 20;
    public const int Iso8601DateTime = 70;
    
    
        ]]></source>
</chunk>
<method name=".ctor" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="60000e4" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
</hits>
<tags><tag offset="0002">call to uninstrumented method Parser..ctor(ITokenStream)</tag>
</tags>
<coverage domain="userortestcode" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode" tag="true"><tooltip><![CDATA[call to uninstrumented method Parser..ctor(ITokenStream)]]></tooltip>
<source><![CDATA[public MacroScopeParser(ITokenStream input) 
    		: base(input)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    	]]></source>
</chunk>
<chunk hits="2" offset="0008" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    		]]></source>
</chunk>
<chunk hits="2" offset="0009" domain="userortestcode"><source><![CDATA[InitializeCyclicDFAs();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0010" domain="userortestcode"><source><![CDATA[ruleMemo = new IDictionary[70+1];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
         ]]></source>
</chunk>
<chunk hits="4" offset="001d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        

    override public string[] TokenNames
	{
		get { return tokenNames; }
	}

    override public string GrammarFileName
	{
		get { return "MacroScope\\MacroScope.g"; }
	}


    
    // $ANTLR start statement
    // MacroScope\\MacroScope.g:27:1: statement returns [ IStatement value ] : (i= insertStatement EOF | s= selectStatement EOF | u= updateStatement EOF | d= deleteStatement EOF );
    public IStatement statement() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="statement" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="60000e7" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="4"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="37" value="2"/>
<hit index="38" value="2"/>
<hit index="39" value="2"/>
<hit index="40" value="2"/>
<hit index="41" value="2"/>
<hit index="42" value="2"/>
<hit index="43" value="2"/>
<hit index="44" value="2"/>
<hit index="46" value="2"/>
<hit index="47" value="2"/>
<hit index="48" value="2"/>
<hit index="49" value="2"/>
<hit index="50" value="4"/>
<hit index="51" value="2"/>
<hit index="53" value="2"/>
<hit index="54" value="2"/>
<hit index="97" value="2"/>
<hit index="100" value="2"/>
<hit index="106" value="2"/>
<hit index="107" value="2"/>
</hits>
<tags><tag offset="014e">call to uninstrumented method BaseRecognizer.PushFollow(BitSet)</tag>
</tags>
<coverage domain="userortestcode" unit="block" covered="13" total="54" coveredRatio="0.24074074074074073"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[IStatement value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0003" domain="userortestcode"><source><![CDATA[InsertStatement i = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="userortestcode"><source><![CDATA[SelectStatement s = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[UpdateStatement u = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="0009" domain="userortestcode"><source><![CDATA[DeleteStatement d = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
    
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:27:40: (i= insertStatement EOF | s= selectStatement EOF | u= updateStatement EOF | d= deleteStatement EOF )
            ]]></source>
</chunk>
<chunk hits="2" offset="000d" domain="userortestcode"><source><![CDATA[int alt1 = 4;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0010" domain="userortestcode"><source><![CDATA[switch ( input.LA(1) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
            case INSERT:
            	]]></source>
</chunk>
<chunk hits="0" offset="0051" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0052" domain="userortestcode"><source><![CDATA[alt1 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0055" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0056" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case LPAREN:
            case SELECT:
            	]]></source>
</chunk>
<chunk hits="2" offset="0058" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0059" domain="userortestcode"><source><![CDATA[alt1 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="005c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="005d" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case UPDATE:
            	]]></source>
</chunk>
<chunk hits="0" offset="005f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0060" domain="userortestcode"><source><![CDATA[alt1 = 3;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0063" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0064" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case DELETE:
            	]]></source>
</chunk>
<chunk hits="0" offset="0066" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0067" domain="userortestcode"><source><![CDATA[alt1 = 4;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="006a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="006b" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	default:
            	    ]]></source>
</chunk>
<chunk hits="0" offset="006d" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="007f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="0080" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0087" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
            	    ]]></source>
</chunk>
<chunk hits="0" offset="008f" domain="userortestcode"><source><![CDATA[NoViableAltException nvae_d1s0 =
            	        new NoViableAltException("27:1: statement returns [ IStatement value ] : (i= insertStatement EOF | s= selectStatement EOF | u= updateStatement EOF | d= deleteStatement EOF );", 1, 0, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            	    ]]></source>
</chunk>
<chunk hits="0" offset="00a3" domain="userortestcode"><source><![CDATA[throw nvae_d1s0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }
            
            ]]></source>
</chunk>
<chunk hits="2" offset="00a6" domain="userortestcode"><source><![CDATA[switch (alt1)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
                case 1 :
                    // MacroScope\\MacroScope.g:28:2: i= insertStatement EOF
                    ]]></source>
</chunk>
<chunk hits="0" offset="00c8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="00c9" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_insertStatement_in_statement66);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="00d5" domain="userortestcode"><source><![CDATA[i = insertStatement();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="00dc" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="00ea" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00f9" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0101" domain="userortestcode"><source><![CDATA[Match(input,EOF,FOLLOW_EOF_in_statement68);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0114" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0123" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="012b" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="013d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	   ]]></source>
</chunk>
<chunk hits="0" offset="013e" domain="userortestcode"><source><![CDATA[value =  i;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="0140" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="0141" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0142" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 2 :
                    // MacroScope\\MacroScope.g:29:4: s= selectStatement EOF
                    ]]></source>
</chunk>
<chunk hits="2" offset="0147" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="0148" domain="userortestcode" tag="true"><tooltip><![CDATA[call to uninstrumented method BaseRecognizer.PushFollow(BitSet)]]></tooltip>
<source><![CDATA[PushFollow(FOLLOW_selectStatement_in_statement79);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="0154" domain="userortestcode"><source><![CDATA[s = selectStatement();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="015b" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="4" offset="0169" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0178" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="0180" domain="userortestcode"><source><![CDATA[Match(input,EOF,FOLLOW_EOF_in_statement81);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="6" offset="0193" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="01a2" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="01aa" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="2" offset="01bc" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	   ]]></source>
</chunk>
<chunk hits="2" offset="01bd" domain="userortestcode"><source><![CDATA[value =  s;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="2" offset="01bf" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="2" offset="01c0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="01c1" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 3 :
                    // MacroScope\\MacroScope.g:30:4: u= updateStatement EOF
                    ]]></source>
</chunk>
<chunk hits="0" offset="01c6" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="01c7" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_updateStatement_in_statement92);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="01d3" domain="userortestcode"><source><![CDATA[u = updateStatement();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="01da" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="01e8" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="01f7" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="01ff" domain="userortestcode"><source><![CDATA[Match(input,EOF,FOLLOW_EOF_in_statement94);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0212" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0221" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0229" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="023b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	   ]]></source>
</chunk>
<chunk hits="0" offset="023c" domain="userortestcode"><source><![CDATA[value =  u;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="023e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="023f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0240" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 4 :
                    // MacroScope\\MacroScope.g:31:4: d= deleteStatement EOF
                    ]]></source>
</chunk>
<chunk hits="0" offset="0242" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0243" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_deleteStatement_in_statement105);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="024f" domain="userortestcode"><source><![CDATA[d = deleteStatement();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0257" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0265" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0274" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0279" domain="userortestcode"><source><![CDATA[Match(input,EOF,FOLLOW_EOF_in_statement107);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="028c" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="029b" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="02a0" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="02b2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	   ]]></source>
</chunk>
<chunk hits="0" offset="02b3" domain="userortestcode"><source><![CDATA[value =  d;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="02b6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="02b7" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="02b8" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            }
        ]]></source>
</chunk>
<chunk hits="2" offset="02ba" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="2" offset="02bd" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="02be" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="02c1" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="2" offset="02c7" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end statement

    
    // $ANTLR start insertStatement
    // MacroScope\\MacroScope.g:34:1: insertStatement returns [ InsertStatement value ] : INSERT ( INTO )? o= dbObject LPAREN c= columnNameList RPAREN VALUES LPAREN e= columnValueList RPAREN ;
    public InsertStatement insertStatement() // throws RecognitionException [1]
    {   

        InsertStatement value = null;
    
        DbObject o = null;

        AliasedItem c = null;

        ExpressionItem e = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:34:51: ( INSERT ( INTO )? o= dbObject LPAREN c= columnNameList RPAREN VALUES LPAREN e= columnValueList RPAREN )
            // MacroScope\\MacroScope.g:36:2: INSERT ( INTO )? o= dbObject LPAREN c= columnNameList RPAREN VALUES LPAREN e= columnValueList RPAREN
            {
            	Match(input,INSERT,FOLLOW_INSERT_in_insertStatement126); if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	   value =  new InsertStatement(); 
            	}
            	// MacroScope\\MacroScope.g:36:45: ( INTO )?
            	int alt2 = 2;
            	int LA2_0 = input.LA(1);
            	
            	if ( (LA2_0 == INTO) )
            	{
            	    alt2 = 1;
            	}
            	switch (alt2) 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:36:47: INTO
            	        {
            	        	Match(input,INTO,FOLLOW_INTO_in_insertStatement132); if (failed) return value;
            	        
            	        }
            	        break;
            	
            	}

            	PushFollow(FOLLOW_dbObject_in_insertStatement143);
            	o = dbObject();
            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	  
            	  			value.Table = o;
            	  		
            	}
            	Match(input,LPAREN,FOLLOW_LPAREN_in_insertStatement155); if (failed) return value;
            	PushFollow(FOLLOW_columnNameList_in_insertStatement161);
            	c = columnNameList();
            	followingStackPointer_--;
            	if (failed) return value;
            	Match(input,RPAREN,FOLLOW_RPAREN_in_insertStatement163); if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	  
            	  			value.ColumnNames = c;
            	  		
            	}
            	Match(input,VALUES,FOLLOW_VALUES_in_insertStatement169); if (failed) return value;
            	Match(input,LPAREN,FOLLOW_LPAREN_in_insertStatement171); if (failed) return value;
            	PushFollow(FOLLOW_columnValueList_in_insertStatement177);
            	e = columnValueList();
            	followingStackPointer_--;
            	if (failed) return value;
            	Match(input,RPAREN,FOLLOW_RPAREN_in_insertStatement179); if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	  
            	  			value.ColumnValues = e;
            	  		
            	}
            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end insertStatement

    
    // $ANTLR start selectStatement
    // MacroScope\\MacroScope.g:52:1: selectStatement returns [ SelectStatement value ] : q= queryExpression ;
    public SelectStatement selectStatement() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="selectStatement" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="60000e9" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="7" total="8" coveredRatio="0.875"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[SelectStatement value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0003" domain="userortestcode"><source><![CDATA[QueryExpression q = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
    
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:52:51: (q= queryExpression )
            // MacroScope\\MacroScope.g:53:2: q= queryExpression
            ]]></source>
</chunk>
<chunk hits="2" offset="0006" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_queryExpression_in_selectStatement206);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0013" domain="userortestcode"><source><![CDATA[q = queryExpression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="001a" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="4" offset="0028" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0035" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0039" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="0049" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	   ]]></source>
</chunk>
<chunk hits="2" offset="004a" domain="userortestcode"><source><![CDATA[value =  new SelectStatement(q);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="0051" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="2" offset="0052" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0053" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="2" offset="0056" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0057" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="005a" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="2" offset="005f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end selectStatement

    
    // $ANTLR start updateStatement
    // MacroScope\\MacroScope.g:56:1: updateStatement returns [ UpdateStatement value ] : UPDATE o= dbObject SET a= assignmentList (w= whereClause )? ;
    public UpdateStatement updateStatement() // throws RecognitionException [1]
    {   

        UpdateStatement value = null;
    
        DbObject o = null;

        Assignment a = null;

        IExpression w = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:56:51: ( UPDATE o= dbObject SET a= assignmentList (w= whereClause )? )
            // MacroScope\\MacroScope.g:58:2: UPDATE o= dbObject SET a= assignmentList (w= whereClause )?
            {
            	Match(input,UPDATE,FOLLOW_UPDATE_in_updateStatement225); if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	   value =  new UpdateStatement(); 
            	}
            	PushFollow(FOLLOW_dbObject_in_updateStatement235);
            	o = dbObject();
            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	   value.Table = o; 
            	}
            	Match(input,SET,FOLLOW_SET_in_updateStatement241); if (failed) return value;
            	PushFollow(FOLLOW_assignmentList_in_updateStatement247);
            	a = assignmentList();
            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	  
            	  			value.Assignments = a;
            	  		
            	}
            	// MacroScope\\MacroScope.g:64:3: (w= whereClause )?
            	int alt3 = 2;
            	int LA3_0 = input.LA(1);
            	
            	if ( (LA3_0 == WHERE) )
            	{
            	    alt3 = 1;
            	}
            	switch (alt3) 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:65:4: w= whereClause
            	        {
            	        	PushFollow(FOLLOW_whereClause_in_updateStatement266);
            	        	w = whereClause();
            	        	followingStackPointer_--;
            	        	if (failed) return value;
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	   value.Where = w; 
            	        	}
            	        
            	        }
            	        break;
            	
            	}

            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end updateStatement

    
    // $ANTLR start deleteStatement
    // MacroScope\\MacroScope.g:70:1: deleteStatement returns [ DeleteStatement value ] : DELETE ( FROM )? o= dbObject (w= whereClause )? ;
    public DeleteStatement deleteStatement() // throws RecognitionException [1]
    {   

        DeleteStatement value = null;
    
        DbObject o = null;

        IExpression w = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:70:51: ( DELETE ( FROM )? o= dbObject (w= whereClause )? )
            // MacroScope\\MacroScope.g:72:2: DELETE ( FROM )? o= dbObject (w= whereClause )?
            {
            	Match(input,DELETE,FOLLOW_DELETE_in_deleteStatement293); if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	   value =  new DeleteStatement(); 
            	}
            	// MacroScope\\MacroScope.g:72:45: ( FROM )?
            	int alt4 = 2;
            	int LA4_0 = input.LA(1);
            	
            	if ( (LA4_0 == FROM) )
            	{
            	    alt4 = 1;
            	}
            	switch (alt4) 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:72:47: FROM
            	        {
            	        	Match(input,FROM,FOLLOW_FROM_in_deleteStatement299); if (failed) return value;
            	        
            	        }
            	        break;
            	
            	}

            	PushFollow(FOLLOW_dbObject_in_deleteStatement310);
            	o = dbObject();
            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	   value.Table = o; 
            	}
            	// MacroScope\\MacroScope.g:74:3: (w= whereClause )?
            	int alt5 = 2;
            	int LA5_0 = input.LA(1);
            	
            	if ( (LA5_0 == WHERE) )
            	{
            	    alt5 = 1;
            	}
            	switch (alt5) 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:75:4: w= whereClause
            	        {
            	        	PushFollow(FOLLOW_whereClause_in_deleteStatement326);
            	        	w = whereClause();
            	        	followingStackPointer_--;
            	        	if (failed) return value;
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	   value.Where = w; 
            	        	}
            	        
            	        }
            	        break;
            	
            	}

            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end deleteStatement

    
    // $ANTLR start assignmentList
    // MacroScope\\MacroScope.g:80:1: assignmentList returns [ Assignment value ] : a= assignment ( COMMA a= assignment )* ;
    public Assignment assignmentList() // throws RecognitionException [1]
    {   

        Assignment value = null;
    
        Assignment a = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:80:45: (a= assignment ( COMMA a= assignment )* )
            // MacroScope\\MacroScope.g:81:2: a= assignment ( COMMA a= assignment )*
            {
            	PushFollow(FOLLOW_assignment_in_assignmentList356);
            	a = assignment();
            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	  
            	  		value =  a;
            	  	
            	}
            	// MacroScope\\MacroScope.g:83:4: ( COMMA a= assignment )*
            	do 
            	{
            	    int alt6 = 2;
            	    int LA6_0 = input.LA(1);
            	    
            	    if ( (LA6_0 == COMMA) )
            	    {
            	        alt6 = 1;
            	    }
            	    
            	
            	    switch (alt6) 
            		{
            			case 1 :
            			    // MacroScope\\MacroScope.g:83:6: COMMA a= assignment
            			    {
            			    	Match(input,COMMA,FOLLOW_COMMA_in_assignmentList362); if (failed) return value;
            			    	PushFollow(FOLLOW_assignment_in_assignmentList368);
            			    	a = assignment();
            			    	followingStackPointer_--;
            			    	if (failed) return value;
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	  
            			    	  			value.Add(a);
            			    	  		
            			    	}
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop6;
            	    }
            	} while (true);
            	
            	loop6:
            		;	// Stops C# compiler whinging that label 'loop6' has no statements

            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end assignmentList

    
    // $ANTLR start assignment
    // MacroScope\\MacroScope.g:88:1: assignment returns [ Assignment value ] : c= column ASSIGNEQUAL v= columnValue ;
    public Assignment assignment() // throws RecognitionException [1]
    {   

        Assignment value = null;
    
        DbObject c = null;

        INode v = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:88:41: (c= column ASSIGNEQUAL v= columnValue )
            // MacroScope\\MacroScope.g:89:2: c= column ASSIGNEQUAL v= columnValue
            {
            	PushFollow(FOLLOW_column_in_assignment392);
            	c = column();
            	followingStackPointer_--;
            	if (failed) return value;
            	Match(input,ASSIGNEQUAL,FOLLOW_ASSIGNEQUAL_in_assignment394); if (failed) return value;
            	PushFollow(FOLLOW_columnValue_in_assignment400);
            	v = columnValue();
            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	  
            	  		value =  new Assignment(c, v);
            	  	
            	}
            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end assignment

    
    // $ANTLR start columnNameList
    // MacroScope\\MacroScope.g:94:1: columnNameList returns [ AliasedItem value ] : c= column ( COMMA c= column )* ;
    public AliasedItem columnNameList() // throws RecognitionException [1]
    {   

        AliasedItem value = null;
    
        DbObject c = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:94:46: (c= column ( COMMA c= column )* )
            // MacroScope\\MacroScope.g:95:2: c= column ( COMMA c= column )*
            {
            	PushFollow(FOLLOW_column_in_columnNameList421);
            	c = column();
            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	   value =  new AliasedItem(c); 
            	}
            	// MacroScope\\MacroScope.g:96:3: ( COMMA c= column )*
            	do 
            	{
            	    int alt7 = 2;
            	    int LA7_0 = input.LA(1);
            	    
            	    if ( (LA7_0 == COMMA) )
            	    {
            	        alt7 = 1;
            	    }
            	    
            	
            	    switch (alt7) 
            		{
            			case 1 :
            			    // MacroScope\\MacroScope.g:96:5: COMMA c= column
            			    {
            			    	Match(input,COMMA,FOLLOW_COMMA_in_columnNameList429); if (failed) return value;
            			    	PushFollow(FOLLOW_column_in_columnNameList435);
            			    	c = column();
            			    	followingStackPointer_--;
            			    	if (failed) return value;
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	  
            			    	  			value.Add(new AliasedItem(c));
            			    	  		
            			    	}
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop7;
            	    }
            	} while (true);
            	
            	loop7:
            		;	// Stops C# compiler whinging that label 'loop7' has no statements

            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end columnNameList

    
    // $ANTLR start columnValueList
    // MacroScope\\MacroScope.g:101:1: columnValueList returns [ ExpressionItem value ] : v= columnValue ( COMMA v= columnValue )* ;
    public ExpressionItem columnValueList() // throws RecognitionException [1]
    {   

        ExpressionItem value = null;
    
        INode v = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:101:50: (v= columnValue ( COMMA v= columnValue )* )
            // MacroScope\\MacroScope.g:102:2: v= columnValue ( COMMA v= columnValue )*
            {
            	PushFollow(FOLLOW_columnValue_in_columnValueList459);
            	v = columnValue();
            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	  
            	  		value =  new ExpressionItem(v);
            	  	
            	}
            	// MacroScope\\MacroScope.g:104:4: ( COMMA v= columnValue )*
            	do 
            	{
            	    int alt8 = 2;
            	    int LA8_0 = input.LA(1);
            	    
            	    if ( (LA8_0 == COMMA) )
            	    {
            	        alt8 = 1;
            	    }
            	    
            	
            	    switch (alt8) 
            		{
            			case 1 :
            			    // MacroScope\\MacroScope.g:104:6: COMMA v= columnValue
            			    {
            			    	Match(input,COMMA,FOLLOW_COMMA_in_columnValueList465); if (failed) return value;
            			    	PushFollow(FOLLOW_columnValue_in_columnValueList471);
            			    	v = columnValue();
            			    	followingStackPointer_--;
            			    	if (failed) return value;
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	  
            			    	  			value.Add(new ExpressionItem(v));
            			    	  		
            			    	}
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop8;
            	    }
            	} while (true);
            	
            	loop8:
            		;	// Stops C# compiler whinging that label 'loop8' has no statements

            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end columnValueList

    
    // $ANTLR start columnValue
    // MacroScope\\MacroScope.g:109:1: columnValue returns [ INode value ] : ( DEFAULT | e= expression );
    public INode columnValue() // throws RecognitionException [1]
    {   

        INode value = null;
    
        IExpression e = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:109:37: ( DEFAULT | e= expression )
            int alt9 = 2;
            int LA9_0 = input.LA(1);
            
            if ( (LA9_0 == DEFAULT) )
            {
                alt9 = 1;
            }
            else if ( (LA9_0 == LPAREN || LA9_0 == Integer || LA9_0 == NULL || (LA9_0 >= LEFT && LA9_0 <= RIGHT) || (LA9_0 >= PLACEHOLDER && LA9_0 <= SUBSTRING) || (LA9_0 >= EXTRACT && LA9_0 <= CASE) || LA9_0 == CAST || (LA9_0 >= UnicodeStringLiteral && LA9_0 <= MINUS)) )
            {
                alt9 = 2;
            }
            else 
            {
                if ( backtracking > 0 ) {failed = true; return value;}
                NoViableAltException nvae_d9s0 =
                    new NoViableAltException("109:1: columnValue returns [ INode value ] : ( DEFAULT | e= expression );", 9, 0, input);
            
                throw nvae_d9s0;
            }
            switch (alt9) 
            {
                case 1 :
                    // MacroScope\\MacroScope.g:110:2: DEFAULT
                    {
                    	Match(input,DEFAULT,FOLLOW_DEFAULT_in_columnValue491); if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	   value =  DefaultValue.Value; 
                    	}
                    
                    }
                    break;
                case 2 :
                    // MacroScope\\MacroScope.g:111:4: e= expression
                    {
                    	PushFollow(FOLLOW_expression_in_columnValue502);
                    	e = expression();
                    	followingStackPointer_--;
                    	if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	   value =  e; 
                    	}
                    
                    }
                    break;
            
            }
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end columnValue

    
    // $ANTLR start queryExpression
    // MacroScope\\MacroScope.g:114:1: queryExpression returns [ QueryExpression value ] : s= subQueryExpression (u= unionOperator s= subQueryExpression )* (o= orderByClause )? ;
    public QueryExpression queryExpression() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="queryExpression" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="60000f1" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="2"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="16" value="4"/>
<hit index="18" value="2"/>
<hit index="47" value="2"/>
<hit index="48" value="2"/>
<hit index="49" value="2"/>
<hit index="50" value="2"/>
<hit index="51" value="4"/>
<hit index="53" value="2"/>
<hit index="69" value="2"/>
<hit index="71" value="2"/>
<hit index="76" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="12" total="36" coveredRatio="0.33333333333333331"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[QueryExpression value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0003" domain="userortestcode"><source><![CDATA[QueryExpression s = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="userortestcode"><source><![CDATA[bool u = false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[OrderExpression o = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
    
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="0009" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:114:51: (s= subQueryExpression (u= unionOperator s= subQueryExpression )* (o= orderByClause )? )
            // MacroScope\\MacroScope.g:115:2: s= subQueryExpression (u= unionOperator s= subQueryExpression )* (o= orderByClause )?
            ]]></source>
</chunk>
<chunk hits="2" offset="000a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="000b" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_subQueryExpression_in_queryExpression523);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0017" domain="userortestcode"><source><![CDATA[s = subQueryExpression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="001e" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="4" offset="002c" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="003b" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0043" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="0055" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	   ]]></source>
</chunk>
<chunk hits="2" offset="0056" domain="userortestcode"><source><![CDATA[value =  s;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="0058" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	// MacroScope\\MacroScope.g:116:2: (u= unionOperator s= subQueryExpression )*
            	do 
            	]]></source>
</chunk>
<chunk hits="2" offset="0059" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="2" offset="005a" domain="userortestcode"><source><![CDATA[int alt10 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="2" offset="005d" domain="userortestcode"><source><![CDATA[int LA10_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	    ]]></source>
</chunk>
<chunk hits="6" offset="006b" domain="userortestcode"><source><![CDATA[if ( (LA10_0 == UNION) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="007a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="007b" domain="userortestcode"><source><![CDATA[alt10 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="007e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	
            	    ]]></source>
</chunk>
<chunk hits="2" offset="007f" domain="userortestcode"><source><![CDATA[switch (alt10)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            		{
            			case 1 :
            			    // MacroScope\\MacroScope.g:116:4: u= unionOperator s= subQueryExpression
            			    ]]></source>
</chunk>
<chunk hits="0" offset="008d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="008e" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_unionOperator_in_queryExpression535);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="009a" domain="userortestcode"><source><![CDATA[u = unionOperator();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00a1" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00af" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00be" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00c6" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_subQueryExpression_in_queryExpression543);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00d2" domain="userortestcode"><source><![CDATA[s = subQueryExpression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00d9" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00e7" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00f6" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00fe" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            			    	]]></source>
</chunk>
<chunk hits="0" offset="0110" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	  
            			    	  			]]></source>
</chunk>
<chunk hits="0" offset="0111" domain="userortestcode"><source><![CDATA[s.All = u;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	  			]]></source>
</chunk>
<chunk hits="0" offset="0119" domain="userortestcode"><source><![CDATA[value.Add(s);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	  		
            			    	]]></source>
</chunk>
<chunk hits="0" offset="0121" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    
            			    ]]></source>
</chunk>
<chunk hits="0" offset="0122" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    ]]></source>
</chunk>
<chunk hits="0" offset="0123" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            			default:
            			    ]]></source>
</chunk>
<chunk hits="2" offset="0125" domain="userortestcode"><source><![CDATA[goto loop10;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    }
            	]]></source>
</chunk>
<chunk hits="0" offset="0127" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0128" domain="userortestcode"><source><![CDATA[while (true);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	loop10:
            		;	// Stops C# compiler whinging that label 'loop10' has no statements

            	// MacroScope\\MacroScope.g:122:2: (o= orderByClause )?
            	]]></source>
</chunk>
<chunk hits="2" offset="0130" domain="userortestcode"><source><![CDATA[int alt11 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0133" domain="userortestcode"><source><![CDATA[int LA11_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	]]></source>
</chunk>
<chunk hits="6" offset="0141" domain="userortestcode"><source><![CDATA[if ( (LA11_0 == ORDER) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="0150" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0151" domain="userortestcode"><source><![CDATA[alt11 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="0154" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0155" domain="userortestcode"><source><![CDATA[switch (alt11)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:122:4: o= orderByClause
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0160" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0161" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_orderByClause_in_queryExpression558);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="016d" domain="userortestcode"><source><![CDATA[o = orderByClause();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0174" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0182" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0191" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0196" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="0" offset="01a8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	   ]]></source>
</chunk>
<chunk hits="0" offset="01a9" domain="userortestcode"><source><![CDATA[value.SetOrderBy(o);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="0" offset="01b1" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        
            	        ]]></source>
</chunk>
<chunk hits="0" offset="01b2" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="01b3" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	}

            
            ]]></source>
</chunk>
<chunk hits="2" offset="01b5" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="01b6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="2" offset="01b9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="01ba" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="01bd" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="2" offset="01c3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end queryExpression

    
    // $ANTLR start subQueryExpression
    // MacroScope\\MacroScope.g:125:1: subQueryExpression returns [ QueryExpression value ] : (s= querySpecification | LPAREN s= queryExpression RPAREN );
    public QueryExpression subQueryExpression() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="subQueryExpression" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="60000f2" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="4"/>
<hit index="6" value="2"/>
<hit index="18" value="2"/>
<hit index="19" value="2"/>
<hit index="20" value="2"/>
<hit index="21" value="2"/>
<hit index="22" value="2"/>
<hit index="23" value="2"/>
<hit index="24" value="2"/>
<hit index="25" value="2"/>
<hit index="27" value="2"/>
<hit index="28" value="2"/>
<hit index="57" value="2"/>
<hit index="59" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="9" total="30" coveredRatio="0.3"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[QueryExpression value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0003" domain="userortestcode"><source><![CDATA[QueryExpression s = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
    
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:125:54: (s= querySpecification | LPAREN s= queryExpression RPAREN )
            ]]></source>
</chunk>
<chunk hits="2" offset="0006" domain="userortestcode"><source><![CDATA[int alt12 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0008" domain="userortestcode"><source><![CDATA[int LA12_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="6" offset="0015" domain="userortestcode"><source><![CDATA[if ( (LA12_0 == SELECT) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0023" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0024" domain="userortestcode"><source><![CDATA[alt12 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0026" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="0" offset="0029" domain="userortestcode"><source><![CDATA[if ( (LA12_0 == LPAREN) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0036" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0037" domain="userortestcode"><source><![CDATA[alt12 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0039" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else 
            ]]></source>
</chunk>
<chunk hits="0" offset="003c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="003d" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="004f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="0050" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0057" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
                ]]></source>
</chunk>
<chunk hits="0" offset="005f" domain="userortestcode"><source><![CDATA[NoViableAltException nvae_d12s0 =
                    new NoViableAltException("125:1: subQueryExpression returns [ QueryExpression value ] : (s= querySpecification | LPAREN s= queryExpression RPAREN );", 12, 0, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
                ]]></source>
</chunk>
<chunk hits="0" offset="0074" domain="userortestcode"><source><![CDATA[throw nvae_d12s0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }
            ]]></source>
</chunk>
<chunk hits="2" offset="0077" domain="userortestcode"><source><![CDATA[switch (alt12)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
                case 1 :
                    // MacroScope\\MacroScope.g:126:2: s= querySpecification
                    ]]></source>
</chunk>
<chunk hits="2" offset="0090" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="0091" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_querySpecification_in_subQueryExpression582);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="009d" domain="userortestcode"><source><![CDATA[s = querySpecification();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="00a4" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="4" offset="00b2" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00c1" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="00c9" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="2" offset="00db" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	   ]]></source>
</chunk>
<chunk hits="2" offset="00dc" domain="userortestcode"><source><![CDATA[value =  s;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="2" offset="00de" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="2" offset="00df" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="00e0" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 2 :
                    // MacroScope\\MacroScope.g:127:4: LPAREN s= queryExpression RPAREN
                    ]]></source>
</chunk>
<chunk hits="0" offset="00e5" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="00e6" domain="userortestcode"><source><![CDATA[Match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpression590);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00f9" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0108" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0110" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_queryExpression_in_subQueryExpression596);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="011c" domain="userortestcode"><source><![CDATA[s = queryExpression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0123" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0131" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0140" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0145" domain="userortestcode"><source><![CDATA[Match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpression598);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0158" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0167" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="016c" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="017e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	   ]]></source>
</chunk>
<chunk hits="0" offset="017f" domain="userortestcode"><source><![CDATA[value =  s;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="0181" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="0182" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0183" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            }
        ]]></source>
</chunk>
<chunk hits="2" offset="0185" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="2" offset="0188" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0189" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="018c" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="2" offset="0192" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end subQueryExpression

    
    // $ANTLR start querySpecification
    // MacroScope\\MacroScope.g:130:1: querySpecification returns [ QueryExpression value ] : s= selectClause (f= fromClause )? (w= whereClause )? (g= groupByClause (h= havingClause )? )? ;
    public QueryExpression querySpecification() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="querySpecification" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="60000f3" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="2"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="16" value="4"/>
<hit index="17" value="2"/>
<hit index="19" value="2"/>
<hit index="20" value="2"/>
<hit index="21" value="2"/>
<hit index="22" value="2"/>
<hit index="23" value="2"/>
<hit index="24" value="2"/>
<hit index="25" value="2"/>
<hit index="26" value="2"/>
<hit index="28" value="2"/>
<hit index="29" value="2"/>
<hit index="30" value="2"/>
<hit index="31" value="2"/>
<hit index="32" value="2"/>
<hit index="33" value="4"/>
<hit index="34" value="2"/>
<hit index="35" value="2"/>
<hit index="36" value="2"/>
<hit index="37" value="2"/>
<hit index="38" value="4"/>
<hit index="39" value="2"/>
<hit index="41" value="2"/>
<hit index="42" value="2"/>
<hit index="43" value="2"/>
<hit index="44" value="2"/>
<hit index="45" value="2"/>
<hit index="46" value="2"/>
<hit index="47" value="2"/>
<hit index="48" value="2"/>
<hit index="50" value="2"/>
<hit index="51" value="2"/>
<hit index="52" value="2"/>
<hit index="53" value="2"/>
<hit index="54" value="2"/>
<hit index="55" value="4"/>
<hit index="56" value="2"/>
<hit index="57" value="2"/>
<hit index="58" value="2"/>
<hit index="59" value="2"/>
<hit index="60" value="4"/>
<hit index="62" value="2"/>
<hit index="104" value="2"/>
<hit index="107" value="2"/>
<hit index="108" value="2"/>
<hit index="111" value="2"/>
<hit index="112" value="2"/>
<hit index="114" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="29" total="56" coveredRatio="0.5178571428571429"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[QueryExpression value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0003" domain="userortestcode"><source><![CDATA[QueryExpression s = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="userortestcode"><source><![CDATA[AliasedItem f = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[IExpression w = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="0009" domain="userortestcode"><source><![CDATA[GroupByClause g = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="000c" domain="userortestcode"><source><![CDATA[IExpression h = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
    
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="000f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:130:54: (s= selectClause (f= fromClause )? (w= whereClause )? (g= groupByClause (h= havingClause )? )? )
            // MacroScope\\MacroScope.g:131:2: s= selectClause (f= fromClause )? (w= whereClause )? (g= groupByClause (h= havingClause )? )?
            ]]></source>
</chunk>
<chunk hits="2" offset="0010" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0011" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_selectClause_in_querySpecification619);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="001d" domain="userortestcode"><source><![CDATA[s = selectClause();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0024" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="4" offset="0032" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0041" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0049" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="005b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	   ]]></source>
</chunk>
<chunk hits="2" offset="005c" domain="userortestcode"><source><![CDATA[value =  s;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="005e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	// MacroScope\\MacroScope.g:132:2: (f= fromClause )?
            	]]></source>
</chunk>
<chunk hits="2" offset="005f" domain="userortestcode"><source><![CDATA[int alt13 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0062" domain="userortestcode"><source><![CDATA[int LA13_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	]]></source>
</chunk>
<chunk hits="6" offset="0070" domain="userortestcode"><source><![CDATA[if ( (LA13_0 == FROM) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="007f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="2" offset="0080" domain="userortestcode"><source><![CDATA[alt13 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0083" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0084" domain="userortestcode"><source><![CDATA[switch (alt13)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:132:4: f= fromClause
            	        ]]></source>
</chunk>
<chunk hits="2" offset="008f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="2" offset="0090" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_fromClause_in_querySpecification630);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="2" offset="009c" domain="userortestcode"><source><![CDATA[f = fromClause();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="2" offset="00a3" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="4" offset="00b1" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00c0" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="2" offset="00c8" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="2" offset="00da" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	   ]]></source>
</chunk>
<chunk hits="2" offset="00db" domain="userortestcode"><source><![CDATA[value.From = f;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="6" offset="00e3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        
            	        ]]></source>
</chunk>
<chunk hits="6" offset="00e4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="6" offset="00e5" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	}

            	// MacroScope\\MacroScope.g:133:2: (w= whereClause )?
            	]]></source>
</chunk>
<chunk hits="6" offset="00e7" domain="userortestcode"><source><![CDATA[int alt14 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="6" offset="00ea" domain="userortestcode"><source><![CDATA[int LA14_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	]]></source>
</chunk>
<chunk hits="6" offset="00f8" domain="userortestcode"><source><![CDATA[if ( (LA14_0 == WHERE) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0107" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="2" offset="0108" domain="userortestcode"><source><![CDATA[alt14 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="010b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="010c" domain="userortestcode"><source><![CDATA[switch (alt14)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:133:4: w= whereClause
            	        ]]></source>
</chunk>
<chunk hits="2" offset="0117" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="2" offset="0118" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_whereClause_in_querySpecification644);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="2" offset="0124" domain="userortestcode"><source><![CDATA[w = whereClause();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="2" offset="012b" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="4" offset="0139" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0148" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="2" offset="0150" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="2" offset="0162" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	   ]]></source>
</chunk>
<chunk hits="2" offset="0163" domain="userortestcode"><source><![CDATA[value.Where = w;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="6" offset="016b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        
            	        ]]></source>
</chunk>
<chunk hits="6" offset="016c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="6" offset="016d" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	}

            	// MacroScope\\MacroScope.g:134:2: (g= groupByClause (h= havingClause )? )?
            	]]></source>
</chunk>
<chunk hits="6" offset="016f" domain="userortestcode"><source><![CDATA[int alt16 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="6" offset="0172" domain="userortestcode"><source><![CDATA[int LA16_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	]]></source>
</chunk>
<chunk hits="6" offset="0180" domain="userortestcode"><source><![CDATA[if ( (LA16_0 == GROUP) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="018f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0190" domain="userortestcode"><source><![CDATA[alt16 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="0193" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0194" domain="userortestcode"><source><![CDATA[switch (alt16)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:134:4: g= groupByClause (h= havingClause )?
            	        ]]></source>
</chunk>
<chunk hits="0" offset="01a2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="01a3" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_groupByClause_in_querySpecification658);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="01af" domain="userortestcode"><source><![CDATA[g = groupByClause();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="01b7" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="01c5" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="01d4" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="01dc" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="0" offset="01ee" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	   ]]></source>
</chunk>
<chunk hits="0" offset="01ef" domain="userortestcode"><source><![CDATA[value.GroupBy = g;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="0" offset="01f8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	// MacroScope\\MacroScope.g:135:3: (h= havingClause )?
            	        	]]></source>
</chunk>
<chunk hits="0" offset="01f9" domain="userortestcode"><source><![CDATA[int alt15 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="01fc" domain="userortestcode"><source><![CDATA[int LA15_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	
            	        	]]></source>
</chunk>
<chunk hits="0" offset="020a" domain="userortestcode"><source><![CDATA[if ( (LA15_0 == HAVING) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0219" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	    ]]></source>
</chunk>
<chunk hits="0" offset="021a" domain="userortestcode"><source><![CDATA[alt15 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="021d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="021e" domain="userortestcode"><source><![CDATA[switch (alt15)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	{
            	        	    case 1 :
            	        	        // MacroScope\\MacroScope.g:135:5: h= havingClause
            	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0229" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	        	]]></source>
</chunk>
<chunk hits="0" offset="022a" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_havingClause_in_querySpecification670);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0236" domain="userortestcode"><source><![CDATA[h = havingClause();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	        	]]></source>
</chunk>
<chunk hits="0" offset="023e" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	        	]]></source>
</chunk>
<chunk hits="0" offset="024c" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="025b" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0260" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0272" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	        	   ]]></source>
</chunk>
<chunk hits="0" offset="0273" domain="userortestcode"><source><![CDATA[value.GroupBy.Having = h;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0281" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	        
            	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0282" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0283" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	
            	        	}

            	        
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0285" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0286" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	}

            
            ]]></source>
</chunk>
<chunk hits="2" offset="0288" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0289" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="2" offset="028c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="028d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0290" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="2" offset="0296" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end querySpecification

    
    // $ANTLR start selectClause
    // MacroScope\\MacroScope.g:139:1: selectClause returns [ QueryExpression value ] : SELECT ( ALL | DISTINCT )? ( TOP Integer )? s= selectList ;
    public QueryExpression selectClause() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="selectClause" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="60000f4" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="4"/>
<hit index="6" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
<hit index="10" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="2"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="16" value="2"/>
<hit index="17" value="4"/>
<hit index="20" value="2"/>
<hit index="41" value="2"/>
<hit index="42" value="2"/>
<hit index="43" value="2"/>
<hit index="44" value="2"/>
<hit index="45" value="4"/>
<hit index="47" value="2"/>
<hit index="82" value="2"/>
<hit index="83" value="2"/>
<hit index="84" value="2"/>
<hit index="85" value="2"/>
<hit index="86" value="2"/>
<hit index="87" value="2"/>
<hit index="88" value="2"/>
<hit index="89" value="2"/>
<hit index="91" value="2"/>
<hit index="92" value="2"/>
<hit index="93" value="2"/>
<hit index="94" value="2"/>
<hit index="95" value="2"/>
<hit index="96" value="4"/>
<hit index="97" value="2"/>
<hit index="99" value="2"/>
<hit index="100" value="2"/>
<hit index="106" value="2"/>
<hit index="111" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="19" total="49" coveredRatio="0.38775510204081631"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[QueryExpression value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0003" domain="userortestcode"><source><![CDATA[IToken Integer1 = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="userortestcode"><source><![CDATA[AliasedItem s = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
    
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:139:48: ( SELECT ( ALL | DISTINCT )? ( TOP Integer )? s= selectList )
            // MacroScope\\MacroScope.g:140:2: SELECT ( ALL | DISTINCT )? ( TOP Integer )? s= selectList
            ]]></source>
</chunk>
<chunk hits="2" offset="0008" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0009" domain="userortestcode"><source><![CDATA[Match(input,SELECT,FOLLOW_SELECT_in_selectClause694);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="6" offset="001d" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="002c" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0034" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="0046" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	   ]]></source>
</chunk>
<chunk hits="2" offset="0047" domain="userortestcode"><source><![CDATA[value =  new QueryExpression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="004d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	// MacroScope\\MacroScope.g:141:2: ( ALL | DISTINCT )?
            	]]></source>
</chunk>
<chunk hits="2" offset="004e" domain="userortestcode"><source><![CDATA[int alt17 = 3;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0050" domain="userortestcode"><source><![CDATA[int LA17_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	]]></source>
</chunk>
<chunk hits="6" offset="005e" domain="userortestcode"><source><![CDATA[if ( (LA17_0 == ALL) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="006d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="006e" domain="userortestcode"><source><![CDATA[alt17 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="0070" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	else ]]></source>
</chunk>
<chunk hits="2" offset="0073" domain="userortestcode"><source><![CDATA[if ( (LA17_0 == DISTINCT) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="0082" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0083" domain="userortestcode"><source><![CDATA[alt17 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="0085" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0086" domain="userortestcode"><source><![CDATA[switch (alt17)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:141:4: ALL
            	        ]]></source>
</chunk>
<chunk hits="0" offset="009c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="009d" domain="userortestcode"><source><![CDATA[Match(input,ALL,FOLLOW_ALL_in_selectClause701);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00b1" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00c0" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        
            	        ]]></source>
</chunk>
<chunk hits="0" offset="00c8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="00c9" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    case 2 :
            	        // MacroScope\\MacroScope.g:141:10: DISTINCT
            	        ]]></source>
</chunk>
<chunk hits="0" offset="00cb" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="00cc" domain="userortestcode"><source><![CDATA[Match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause705);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00e0" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00ef" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="00f7" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0109" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	   ]]></source>
</chunk>
<chunk hits="0" offset="010a" domain="userortestcode"><source><![CDATA[value.Distinct = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0112" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0113" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0114" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	}

            	// MacroScope\\MacroScope.g:142:2: ( TOP Integer )?
            	]]></source>
</chunk>
<chunk hits="2" offset="0116" domain="userortestcode"><source><![CDATA[int alt18 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0119" domain="userortestcode"><source><![CDATA[int LA18_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	]]></source>
</chunk>
<chunk hits="6" offset="0127" domain="userortestcode"><source><![CDATA[if ( (LA18_0 == TOP) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="0136" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0137" domain="userortestcode"><source><![CDATA[alt18 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="013a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="013b" domain="userortestcode"><source><![CDATA[switch (alt18)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:142:3: TOP Integer
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0149" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="014a" domain="userortestcode"><source><![CDATA[Match(input,TOP,FOLLOW_TOP_in_selectClause714);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="015e" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="016d" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0175" domain="userortestcode"><source><![CDATA[Integer1 = (IToken)input.LT(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0182" domain="userortestcode"><source><![CDATA[Match(input,Integer,FOLLOW_Integer_in_selectClause716);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0196" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="01a5" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="01ad" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="0" offset="01bf" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	   ]]></source>
</chunk>
<chunk hits="0" offset="01c0" domain="userortestcode"><source><![CDATA[value.Top = int.Parse(Integer1.Text);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="0" offset="01d7" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        
            	        ]]></source>
</chunk>
<chunk hits="0" offset="01d8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="01d9" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	}

            	]]></source>
</chunk>
<chunk hits="2" offset="01db" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_selectList_in_selectClause728);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="01e7" domain="userortestcode"><source><![CDATA[s = selectList();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="01ee" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="4" offset="01fc" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="020b" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0210" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="0222" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	   ]]></source>
</chunk>
<chunk hits="2" offset="0223" domain="userortestcode"><source><![CDATA[value.SelectItems = s;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="6" offset="022b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="6" offset="022c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="6" offset="022d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="6" offset="0230" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="6" offset="0231" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="6" offset="0234" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="6" offset="023a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end selectClause

    
    // $ANTLR start whereClause
    // MacroScope\\MacroScope.g:146:1: whereClause returns [ IExpression value ] : WHERE c= searchCondition ;
    public IExpression whereClause() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="whereClause" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="60000f5" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="4"/>
<hit index="6" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="2"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="17" value="2"/>
<hit index="18" value="2"/>
<hit index="19" value="2"/>
<hit index="20" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="8" total="10" coveredRatio="0.8"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[IExpression value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0003" domain="userortestcode"><source><![CDATA[IExpression c = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
    
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:146:43: ( WHERE c= searchCondition )
            // MacroScope\\MacroScope.g:147:2: WHERE c= searchCondition
            ]]></source>
</chunk>
<chunk hits="2" offset="0006" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[Match(input,WHERE,FOLLOW_WHERE_in_whereClause745);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="6" offset="001b" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0028" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="002c" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_searchCondition_in_whereClause751);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0038" domain="userortestcode"><source><![CDATA[c = searchCondition();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="003f" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="4" offset="004d" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="005a" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="005e" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="006e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	   ]]></source>
</chunk>
<chunk hits="2" offset="006f" domain="userortestcode"><source><![CDATA[value =  c;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="0071" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="2" offset="0072" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0073" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="2" offset="0076" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0077" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="007a" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="2" offset="007f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end whereClause

    
    // $ANTLR start orderByClause
    // MacroScope\\MacroScope.g:150:1: orderByClause returns [ OrderExpression value ] : ORDER BY e= orderExpression ( COMMA e= orderExpression )* ;
    public OrderExpression orderByClause() // throws RecognitionException [1]
    {   

        OrderExpression value = null;
    
        OrderExpression e = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:150:49: ( ORDER BY e= orderExpression ( COMMA e= orderExpression )* )
            // MacroScope\\MacroScope.g:151:2: ORDER BY e= orderExpression ( COMMA e= orderExpression )*
            {
            	Match(input,ORDER,FOLLOW_ORDER_in_orderByClause768); if (failed) return value;
            	Match(input,BY,FOLLOW_BY_in_orderByClause770); if (failed) return value;
            	PushFollow(FOLLOW_orderExpression_in_orderByClause777);
            	e = orderExpression();
            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	   value =  e; 
            	}
            	// MacroScope\\MacroScope.g:153:2: ( COMMA e= orderExpression )*
            	do 
            	{
            	    int alt19 = 2;
            	    int LA19_0 = input.LA(1);
            	    
            	    if ( (LA19_0 == COMMA) )
            	    {
            	        alt19 = 1;
            	    }
            	    
            	
            	    switch (alt19) 
            		{
            			case 1 :
            			    // MacroScope\\MacroScope.g:153:4: COMMA e= orderExpression
            			    {
            			    	Match(input,COMMA,FOLLOW_COMMA_in_orderByClause784); if (failed) return value;
            			    	PushFollow(FOLLOW_orderExpression_in_orderByClause790);
            			    	e = orderExpression();
            			    	followingStackPointer_--;
            			    	if (failed) return value;
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	   value.Add(e); 
            			    	}
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop19;
            	    }
            	} while (true);
            	
            	loop19:
            		;	// Stops C# compiler whinging that label 'loop19' has no statements

            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end orderByClause

    
    // $ANTLR start orderExpression
    // MacroScope\\MacroScope.g:156:1: orderExpression returns [ OrderExpression value ] : e= expression ( ASC | DESC )? ;
    public OrderExpression orderExpression() // throws RecognitionException [1]
    {   

        OrderExpression value = null;
    
        IExpression e = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:156:51: (e= expression ( ASC | DESC )? )
            // MacroScope\\MacroScope.g:157:2: e= expression ( ASC | DESC )?
            {
            	PushFollow(FOLLOW_expression_in_orderExpression814);
            	e = expression();
            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	   value =  new OrderExpression(e); 
            	}
            	// MacroScope\\MacroScope.g:158:2: ( ASC | DESC )?
            	int alt20 = 3;
            	int LA20_0 = input.LA(1);
            	
            	if ( (LA20_0 == ASC) )
            	{
            	    alt20 = 1;
            	}
            	else if ( (LA20_0 == DESC) )
            	{
            	    alt20 = 2;
            	}
            	switch (alt20) 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:158:4: ASC
            	        {
            	        	Match(input,ASC,FOLLOW_ASC_in_orderExpression821); if (failed) return value;
            	        
            	        }
            	        break;
            	    case 2 :
            	        // MacroScope\\MacroScope.g:158:10: DESC
            	        {
            	        	Match(input,DESC,FOLLOW_DESC_in_orderExpression825); if (failed) return value;
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	   value.Asc = false; 
            	        	}
            	        
            	        }
            	        break;
            	
            	}

            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end orderExpression

    
    // $ANTLR start groupByClause
    // MacroScope\\MacroScope.g:161:1: groupByClause returns [ GroupByClause value ] : GROUP BY ( ALL )? e= expression ( COMMA e= expression )* ;
    public GroupByClause groupByClause() // throws RecognitionException [1]
    {   

        GroupByClause value = null;
    
        IExpression e = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:161:47: ( GROUP BY ( ALL )? e= expression ( COMMA e= expression )* )
            // MacroScope\\MacroScope.g:162:2: GROUP BY ( ALL )? e= expression ( COMMA e= expression )*
            {
            	Match(input,GROUP,FOLLOW_GROUP_in_groupByClause845); if (failed) return value;
            	Match(input,BY,FOLLOW_BY_in_groupByClause847); if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	   value =  new GroupByClause(); 
            	}
            	// MacroScope\\MacroScope.g:163:3: ( ALL )?
            	int alt21 = 2;
            	int LA21_0 = input.LA(1);
            	
            	if ( (LA21_0 == ALL) )
            	{
            	    alt21 = 1;
            	}
            	switch (alt21) 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:163:5: ALL
            	        {
            	        	Match(input,ALL,FOLLOW_ALL_in_groupByClause855); if (failed) return value;
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	   value.All = true; 
            	        	}
            	        
            	        }
            	        break;
            	
            	}

            	PushFollow(FOLLOW_expression_in_groupByClause868);
            	e = expression();
            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	  
            	  			value.Expression = new ExpressionItem(e);
            	  		
            	}
            	// MacroScope\\MacroScope.g:166:5: ( COMMA e= expression )*
            	do 
            	{
            	    int alt22 = 2;
            	    int LA22_0 = input.LA(1);
            	    
            	    if ( (LA22_0 == COMMA) )
            	    {
            	        alt22 = 1;
            	    }
            	    
            	
            	    switch (alt22) 
            		{
            			case 1 :
            			    // MacroScope\\MacroScope.g:166:7: COMMA e= expression
            			    {
            			    	Match(input,COMMA,FOLLOW_COMMA_in_groupByClause874); if (failed) return value;
            			    	PushFollow(FOLLOW_expression_in_groupByClause880);
            			    	e = expression();
            			    	followingStackPointer_--;
            			    	if (failed) return value;
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	  
            			    	  				value.Expression.Add(
            			    	  					new ExpressionItem(e));
            			    	  			
            			    	}
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop22;
            	    }
            	} while (true);
            	
            	loop22:
            		;	// Stops C# compiler whinging that label 'loop22' has no statements

            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end groupByClause

    
    // $ANTLR start havingClause
    // MacroScope\\MacroScope.g:172:1: havingClause returns [ IExpression value ] : HAVING c= searchCondition ;
    public IExpression havingClause() // throws RecognitionException [1]
    {   

        IExpression value = null;
    
        IExpression c = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:172:44: ( HAVING c= searchCondition )
            // MacroScope\\MacroScope.g:173:2: HAVING c= searchCondition
            {
            	Match(input,HAVING,FOLLOW_HAVING_in_havingClause900); if (failed) return value;
            	PushFollow(FOLLOW_searchCondition_in_havingClause906);
            	c = searchCondition();
            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	   value =  c; 
            	}
            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end havingClause

    
    // $ANTLR start searchCondition
    // MacroScope\\MacroScope.g:176:1: searchCondition returns [ IExpression value ] : e= additiveSubSearchCondition ( OR r= additiveSubSearchCondition )* ;
    public IExpression searchCondition() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="searchCondition" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="60000fa" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="2"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="16" value="4"/>
<hit index="18" value="2"/>
<hit index="42" value="2"/>
<hit index="44" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="9" total="23" coveredRatio="0.391304347826087"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[IExpression value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0003" domain="userortestcode"><source><![CDATA[IExpression e = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="userortestcode"><source><![CDATA[IExpression r = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
    
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:176:47: (e= additiveSubSearchCondition ( OR r= additiveSubSearchCondition )* )
            // MacroScope\\MacroScope.g:177:2: e= additiveSubSearchCondition ( OR r= additiveSubSearchCondition )*
            ]]></source>
</chunk>
<chunk hits="2" offset="0008" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0009" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_additiveSubSearchCondition_in_searchCondition927);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0015" domain="userortestcode"><source><![CDATA[e = additiveSubSearchCondition();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="001c" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="4" offset="002a" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0039" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0041" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="0053" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	   ]]></source>
</chunk>
<chunk hits="2" offset="0054" domain="userortestcode"><source><![CDATA[value =  e;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="0056" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	// MacroScope\\MacroScope.g:178:3: ( OR r= additiveSubSearchCondition )*
            	do 
            	]]></source>
</chunk>
<chunk hits="2" offset="0057" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="2" offset="0058" domain="userortestcode"><source><![CDATA[int alt23 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="2" offset="005a" domain="userortestcode"><source><![CDATA[int LA23_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	    ]]></source>
</chunk>
<chunk hits="6" offset="0068" domain="userortestcode"><source><![CDATA[if ( (LA23_0 == OR) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0077" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0078" domain="userortestcode"><source><![CDATA[alt23 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="007a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	
            	    ]]></source>
</chunk>
<chunk hits="2" offset="007b" domain="userortestcode"><source><![CDATA[switch (alt23)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            		{
            			case 1 :
            			    // MacroScope\\MacroScope.g:178:5: OR r= additiveSubSearchCondition
            			    ]]></source>
</chunk>
<chunk hits="0" offset="0088" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="0089" domain="userortestcode"><source><![CDATA[Match(input,OR,FOLLOW_OR_in_searchCondition935);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="009d" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00ac" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00b1" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_additiveSubSearchCondition_in_searchCondition941);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00bd" domain="userortestcode"><source><![CDATA[r = additiveSubSearchCondition();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00c4" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00d2" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00e1" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00e6" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00f8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	  
            			    	  			]]></source>
</chunk>
<chunk hits="0" offset="00f9" domain="userortestcode"><source><![CDATA[value =  new Expression(value,
            			    	  				ExpressionOperator.Or,
            			    	  				r);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	  		
            			    	]]></source>
</chunk>
<chunk hits="0" offset="0106" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    
            			    ]]></source>
</chunk>
<chunk hits="0" offset="0107" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    ]]></source>
</chunk>
<chunk hits="0" offset="0108" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            			default:
            			    ]]></source>
</chunk>
<chunk hits="2" offset="010a" domain="userortestcode"><source><![CDATA[goto loop23;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    }
            	]]></source>
</chunk>
<chunk hits="0" offset="010c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="010d" domain="userortestcode"><source><![CDATA[while (true);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	loop23:
            		;	// Stops C# compiler whinging that label 'loop23' has no statements

            
            ]]></source>
</chunk>
<chunk hits="2" offset="0115" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0116" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="2" offset="0119" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="011a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="011d" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="2" offset="0123" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end searchCondition

    
    // $ANTLR start additiveSubSearchCondition
    // MacroScope\\MacroScope.g:186:1: additiveSubSearchCondition returns [ IExpression value ] : e= subSearchCondition ( AND r= subSearchCondition )* ;
    public IExpression additiveSubSearchCondition() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="additiveSubSearchCondition" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="60000fb" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="2"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="16" value="4"/>
<hit index="18" value="2"/>
<hit index="42" value="2"/>
<hit index="44" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="9" total="23" coveredRatio="0.391304347826087"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[IExpression value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0003" domain="userortestcode"><source><![CDATA[IExpression e = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="userortestcode"><source><![CDATA[IExpression r = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
    
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:186:58: (e= subSearchCondition ( AND r= subSearchCondition )* )
            // MacroScope\\MacroScope.g:187:2: e= subSearchCondition ( AND r= subSearchCondition )*
            ]]></source>
</chunk>
<chunk hits="2" offset="0008" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0009" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_subSearchCondition_in_additiveSubSearchCondition967);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0015" domain="userortestcode"><source><![CDATA[e = subSearchCondition();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="001c" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="4" offset="002a" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0039" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0041" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="0053" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	   ]]></source>
</chunk>
<chunk hits="2" offset="0054" domain="userortestcode"><source><![CDATA[value =  e;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="0056" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	// MacroScope\\MacroScope.g:188:3: ( AND r= subSearchCondition )*
            	do 
            	]]></source>
</chunk>
<chunk hits="2" offset="0057" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="2" offset="0058" domain="userortestcode"><source><![CDATA[int alt24 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="2" offset="005a" domain="userortestcode"><source><![CDATA[int LA24_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	    ]]></source>
</chunk>
<chunk hits="6" offset="0068" domain="userortestcode"><source><![CDATA[if ( (LA24_0 == AND) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0077" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0078" domain="userortestcode"><source><![CDATA[alt24 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="007a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	
            	    ]]></source>
</chunk>
<chunk hits="2" offset="007b" domain="userortestcode"><source><![CDATA[switch (alt24)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            		{
            			case 1 :
            			    // MacroScope\\MacroScope.g:188:5: AND r= subSearchCondition
            			    ]]></source>
</chunk>
<chunk hits="0" offset="0088" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="0089" domain="userortestcode"><source><![CDATA[Match(input,AND,FOLLOW_AND_in_additiveSubSearchCondition975);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="009d" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00ac" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00b1" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_subSearchCondition_in_additiveSubSearchCondition981);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00bd" domain="userortestcode"><source><![CDATA[r = subSearchCondition();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00c4" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00d2" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00e1" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00e6" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00f8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	  
            			    	  			]]></source>
</chunk>
<chunk hits="0" offset="00f9" domain="userortestcode"><source><![CDATA[value =  new Expression(value,
            			    	  				ExpressionOperator.And,
            			    	  				r);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	  		
            			    	]]></source>
</chunk>
<chunk hits="0" offset="0106" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    
            			    ]]></source>
</chunk>
<chunk hits="0" offset="0107" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    ]]></source>
</chunk>
<chunk hits="0" offset="0108" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            			default:
            			    ]]></source>
</chunk>
<chunk hits="2" offset="010a" domain="userortestcode"><source><![CDATA[goto loop24;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    }
            	]]></source>
</chunk>
<chunk hits="0" offset="010c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="010d" domain="userortestcode"><source><![CDATA[while (true);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	loop24:
            		;	// Stops C# compiler whinging that label 'loop24' has no statements

            
            ]]></source>
</chunk>
<chunk hits="2" offset="0115" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0116" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="2" offset="0119" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="011a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="011d" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="2" offset="0123" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end additiveSubSearchCondition

    
    // $ANTLR start bracketedSearchCondition
    // MacroScope\\MacroScope.g:196:1: bracketedSearchCondition returns [ IExpression value ] : LPAREN e= searchCondition RPAREN ;
    public IExpression bracketedSearchCondition() // throws RecognitionException [1]
    {   

        IExpression value = null;
    
        IExpression e = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:196:56: ( LPAREN e= searchCondition RPAREN )
            // MacroScope\\MacroScope.g:197:2: LPAREN e= searchCondition RPAREN
            {
            	Match(input,LPAREN,FOLLOW_LPAREN_in_bracketedSearchCondition1003); if (failed) return value;
            	PushFollow(FOLLOW_searchCondition_in_bracketedSearchCondition1009);
            	e = searchCondition();
            	followingStackPointer_--;
            	if (failed) return value;
            	Match(input,RPAREN,FOLLOW_RPAREN_in_bracketedSearchCondition1011); if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	  
            	  		value =  e;
            	  	
            	}
            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end bracketedSearchCondition

    
    // $ANTLR start subSearchCondition
    // MacroScope\\MacroScope.g:202:1: subSearchCondition returns [ IExpression value ] : ( NOT )? ( ( bracketedSearchCondition )=>e= bracketedSearchCondition | p= predicate ) ;
    public IExpression subSearchCondition() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="subSearchCondition" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="60000fd" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="4"/>
<hit index="7" value="2"/>
<hit index="17" value="2"/>
<hit index="18" value="2"/>
<hit index="19" value="2"/>
<hit index="20" value="2"/>
<hit index="21" value="4"/>
<hit index="31" value="1"/>
<hit index="32" value="1"/>
<hit index="33" value="1"/>
<hit index="34" value="1"/>
<hit index="35" value="1"/>
<hit index="36" value="1"/>
<hit index="37" value="1"/>
<hit index="38" value="1"/>
<hit index="42" value="2"/>
<hit index="78" value="2"/>
<hit index="79" value="2"/>
<hit index="80" value="2"/>
<hit index="81" value="2"/>
<hit index="82" value="2"/>
<hit index="83" value="2"/>
<hit index="84" value="2"/>
<hit index="85" value="2"/>
<hit index="87" value="2"/>
<hit index="88" value="2"/>
<hit index="89" value="2"/>
<hit index="103" value="2"/>
<hit index="107" value="2"/>
<hit index="109" value="1"/>
<hit index="117" value="1"/>
<hit index="123" value="2"/>
<hit index="127" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="23" total="63" coveredRatio="0.36507936507936506"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[IExpression value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0003" domain="userortestcode"><source><![CDATA[IExpression e = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="userortestcode"><source><![CDATA[IExpression p = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
    
         ]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[bool negated = false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="0009" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:203:33: ( ( NOT )? ( ( bracketedSearchCondition )=>e= bracketedSearchCondition | p= predicate ) )
            // MacroScope\\MacroScope.g:204:2: ( NOT )? ( ( bracketedSearchCondition )=>e= bracketedSearchCondition | p= predicate )
            ]]></source>
</chunk>
<chunk hits="2" offset="000a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	// MacroScope\\MacroScope.g:204:2: ( NOT )?
            	]]></source>
</chunk>
<chunk hits="2" offset="000b" domain="userortestcode"><source><![CDATA[int alt25 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="000e" domain="userortestcode"><source><![CDATA[int LA25_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	]]></source>
</chunk>
<chunk hits="6" offset="001c" domain="userortestcode"><source><![CDATA[if ( (LA25_0 == NOT) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="002b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="002c" domain="userortestcode"><source><![CDATA[alt25 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="002f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0030" domain="userortestcode"><source><![CDATA[switch (alt25)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:204:4: NOT
            	        ]]></source>
</chunk>
<chunk hits="0" offset="003b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="003c" domain="userortestcode"><source><![CDATA[Match(input,NOT,FOLLOW_NOT_in_subSearchCondition1035);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0050" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="005f" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0067" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0079" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	   ]]></source>
</chunk>
<chunk hits="0" offset="007a" domain="userortestcode"><source><![CDATA[negated = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="0" offset="007c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        
            	        ]]></source>
</chunk>
<chunk hits="0" offset="007d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="007e" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	}

            	// MacroScope\\MacroScope.g:204:31: ( ( bracketedSearchCondition )=>e= bracketedSearchCondition | p= predicate )
            	]]></source>
</chunk>
<chunk hits="2" offset="0080" domain="userortestcode"><source><![CDATA[int alt26 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0083" domain="userortestcode"><source><![CDATA[int LA26_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	]]></source>
</chunk>
<chunk hits="6" offset="0091" domain="userortestcode"><source><![CDATA[if ( (LA26_0 == LPAREN) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="009f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="00a0" domain="userortestcode"><source><![CDATA[int LA26_1 = input.LA(2);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	    ]]></source>
</chunk>
<chunk hits="0" offset="00ae" domain="userortestcode"><source><![CDATA[if ( (synpred1()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="00bd" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="00be" domain="userortestcode"><source><![CDATA[alt26 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="00c1" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    else ]]></source>
</chunk>
<chunk hits="0" offset="00c4" domain="userortestcode"><source><![CDATA[if ( (true) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="00c7" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="00c8" domain="userortestcode"><source><![CDATA[alt26 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="00cb" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    else 
            	    {
            	        if ( backtracking > 0 ) {failed = true; return value;}
            	        NoViableAltException nvae_d26s1 =
            	            new NoViableAltException("204:31: ( ( bracketedSearchCondition )=>e= bracketedSearchCondition | p= predicate )", 26, 1, input);
            	    
            	        throw nvae_d26s1;
            	    }
            	]]></source>
</chunk>
<chunk hits="0" offset="00ce" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	else ]]></source>
</chunk>
<chunk hits="2" offset="00d4" domain="userortestcode"><source><![CDATA[if ( (LA26_0 == Integer || LA26_0 == NULL || LA26_0 == EXISTS || (LA26_0 >= LEFT && LA26_0 <= RIGHT) || (LA26_0 >= PLACEHOLDER && LA26_0 <= SUBSTRING) || (LA26_0 >= EXTRACT && LA26_0 <= CASE) || LA26_0 == CAST || (LA26_0 >= UnicodeStringLiteral && LA26_0 <= MINUS)) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0128" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="2" offset="0129" domain="userortestcode"><source><![CDATA[alt26 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="012c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	else 
            	]]></source>
</chunk>
<chunk hits="0" offset="012f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0130" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0142" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="0143" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="014a" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0152" domain="userortestcode"><source><![CDATA[NoViableAltException nvae_d26s0 =
            	        new NoViableAltException("204:31: ( ( bracketedSearchCondition )=>e= bracketedSearchCondition | p= predicate )", 26, 0, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0167" domain="userortestcode"><source><![CDATA[throw nvae_d26s0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	}
            	]]></source>
</chunk>
<chunk hits="2" offset="016a" domain="userortestcode"><source><![CDATA[switch (alt26)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:205:3: ( bracketedSearchCondition )=>e= bracketedSearchCondition
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0184" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0185" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_bracketedSearchCondition_in_subSearchCondition1059);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0191" domain="userortestcode"><source><![CDATA[e = bracketedSearchCondition();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0198" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="01a6" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="01b5" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="01bd" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="0" offset="01cf" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="01d0" domain="userortestcode"><source><![CDATA[if (!negated)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="01d7" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  					]]></source>
</chunk>
<chunk hits="0" offset="01d8" domain="userortestcode"><source><![CDATA[value =  e;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="01da" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  				else
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="01dd" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  					]]></source>
</chunk>
<chunk hits="0" offset="01de" domain="userortestcode"><source><![CDATA[Expression output = new Expression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  					]]></source>
</chunk>
<chunk hits="0" offset="01e5" domain="userortestcode"><source><![CDATA[output.Operator =
            	        	  						ExpressionOperator.Not;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  					]]></source>
</chunk>
<chunk hits="0" offset="01f2" domain="userortestcode"><source><![CDATA[output.Right = e;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  					]]></source>
</chunk>
<chunk hits="0" offset="01fb" domain="userortestcode"><source><![CDATA[value =  output;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="01fe" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  		
            	        	]]></source>
</chunk>
<chunk hits="0" offset="01ff" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0200" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0201" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    case 2 :
            	        // MacroScope\\MacroScope.g:220:5: p= predicate
            	        ]]></source>
</chunk>
<chunk hits="2" offset="0203" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="2" offset="0204" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_predicate_in_subSearchCondition1071);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="2" offset="0210" domain="userortestcode"><source><![CDATA[p = predicate();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="2" offset="0217" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="4" offset="0225" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0234" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="2" offset="0239" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="2" offset="024b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  
            	        	  			]]></source>
</chunk>
<chunk hits="2" offset="024c" domain="userortestcode"><source><![CDATA[if (!negated)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  			]]></source>
</chunk>
<chunk hits="2" offset="0253" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  				]]></source>
</chunk>
<chunk hits="2" offset="0254" domain="userortestcode"><source><![CDATA[value =  p;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  			]]></source>
</chunk>
<chunk hits="2" offset="0256" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  			else
            	        	  			]]></source>
</chunk>
<chunk hits="0" offset="0259" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="025a" domain="userortestcode"><source><![CDATA[Expression output = new Expression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="0261" domain="userortestcode"><source><![CDATA[output.Operator = ExpressionOperator.Not;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="026e" domain="userortestcode"><source><![CDATA[output.Right = p;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="0277" domain="userortestcode"><source><![CDATA[value =  output;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  			]]></source>
</chunk>
<chunk hits="0" offset="027a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  		
            	        	]]></source>
</chunk>
<chunk hits="2" offset="027b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        
            	        ]]></source>
</chunk>
<chunk hits="2" offset="027c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="2" offset="027d" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	}

            
            ]]></source>
</chunk>
<chunk hits="2" offset="027f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0280" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="2" offset="0283" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0284" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0287" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="2" offset="028d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end subSearchCondition

    
    // $ANTLR start predicate
    // MacroScope\\MacroScope.g:236:1: predicate returns [ IExpression value ] : (l= expression (o= comparisonOperator (r= expression | q= quantifierSpec LPAREN s= selectStatement RPAREN ) | IS ( NOT )? NULL | ( NOT )? ( LIKE e= expression ( ESCAPE f= expression )? | BETWEEN e= expression AND f= expression | IN LPAREN ( ( selectStatement )=>s= selectStatement | e= expression ( COMMA e= expression )* ) RPAREN ) ) | EXISTS LPAREN s= selectStatement RPAREN );
    public IExpression predicate() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="predicate" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="60000fe" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="4"/>
<hit index="6" value="2"/>
<hit index="7" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
<hit index="10" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="17" value="2"/>
<hit index="29" value="2"/>
<hit index="30" value="2"/>
<hit index="31" value="2"/>
<hit index="32" value="2"/>
<hit index="33" value="2"/>
<hit index="34" value="2"/>
<hit index="35" value="2"/>
<hit index="36" value="2"/>
<hit index="38" value="2"/>
<hit index="39" value="2"/>
<hit index="40" value="2"/>
<hit index="41" value="2"/>
<hit index="42" value="4"/>
<hit index="56" value="2"/>
<hit index="57" value="2"/>
<hit index="58" value="2"/>
<hit index="59" value="2"/>
<hit index="60" value="2"/>
<hit index="61" value="2"/>
<hit index="62" value="2"/>
<hit index="63" value="2"/>
<hit index="65" value="2"/>
<hit index="66" value="2"/>
<hit index="67" value="2"/>
<hit index="68" value="2"/>
<hit index="69" value="4"/>
<hit index="70" value="2"/>
<hit index="71" value="1"/>
<hit index="72" value="1"/>
<hit index="73" value="1"/>
<hit index="74" value="1"/>
<hit index="75" value="1"/>
<hit index="76" value="1"/>
<hit index="77" value="1"/>
<hit index="78" value="1"/>
<hit index="79" value="1"/>
<hit index="80" value="1"/>
<hit index="81" value="2"/>
<hit index="95" value="2"/>
<hit index="96" value="2"/>
<hit index="97" value="2"/>
<hit index="98" value="2"/>
<hit index="99" value="2"/>
<hit index="100" value="2"/>
<hit index="101" value="2"/>
<hit index="102" value="2"/>
<hit index="104" value="2"/>
<hit index="105" value="2"/>
<hit index="106" value="2"/>
<hit index="108" value="2"/>
<hit index="545" value="1"/>
<hit index="552" value="1"/>
<hit index="558" value="2"/>
<hit index="560" value="2"/>
<hit index="561" value="2"/>
<hit index="576" value="2"/>
<hit index="579" value="2"/>
<hit index="581" value="1"/>
<hit index="596" value="2"/>
<hit index="598" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="43" total="310" coveredRatio="0.13870967741935483"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[IExpression value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0003" domain="userortestcode"><source><![CDATA[IExpression l = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="userortestcode"><source><![CDATA[ExpressionOperator o = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[IExpression r = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="0009" domain="userortestcode"><source><![CDATA[PredicateQuantifier q = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="000c" domain="userortestcode"><source><![CDATA[SelectStatement s = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="000f" domain="userortestcode"><source><![CDATA[IExpression e = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="0012" domain="userortestcode"><source><![CDATA[IExpression f = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
    
        
        	]]></source>
</chunk>
<chunk hits="2" offset="0015" domain="userortestcode"><source><![CDATA[bool negated = false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
        	]]></source>
</chunk>
<chunk hits="2" offset="0018" domain="userortestcode"><source><![CDATA[ExpressionItem inSet = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="001b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:240:3: (l= expression (o= comparisonOperator (r= expression | q= quantifierSpec LPAREN s= selectStatement RPAREN ) | IS ( NOT )? NULL | ( NOT )? ( LIKE e= expression ( ESCAPE f= expression )? | BETWEEN e= expression AND f= expression | IN LPAREN ( ( selectStatement )=>s= selectStatement | e= expression ( COMMA e= expression )* ) RPAREN ) ) | EXISTS LPAREN s= selectStatement RPAREN )
            ]]></source>
</chunk>
<chunk hits="2" offset="001c" domain="userortestcode"><source><![CDATA[int alt35 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="001f" domain="userortestcode"><source><![CDATA[int LA35_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="6" offset="002d" domain="userortestcode"><source><![CDATA[if ( (LA35_0 == LPAREN || LA35_0 == Integer || LA35_0 == NULL || (LA35_0 >= LEFT && LA35_0 <= RIGHT) || (LA35_0 >= PLACEHOLDER && LA35_0 <= SUBSTRING) || (LA35_0 >= EXTRACT && LA35_0 <= CASE) || LA35_0 == CAST || (LA35_0 >= UnicodeStringLiteral && LA35_0 <= MINUS)) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0080" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0081" domain="userortestcode"><source><![CDATA[alt35 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0084" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="0" offset="0087" domain="userortestcode"><source><![CDATA[if ( (LA35_0 == EXISTS) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0096" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0097" domain="userortestcode"><source><![CDATA[alt35 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="009a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else 
            ]]></source>
</chunk>
<chunk hits="0" offset="009d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="009e" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00b0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="00b1" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00b8" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
                ]]></source>
</chunk>
<chunk hits="0" offset="00c0" domain="userortestcode"><source><![CDATA[NoViableAltException nvae_d35s0 =
                    new NoViableAltException("236:1: predicate returns [ IExpression value ] : (l= expression (o= comparisonOperator (r= expression | q= quantifierSpec LPAREN s= selectStatement RPAREN ) | IS ( NOT )? NULL | ( NOT )? ( LIKE e= expression ( ESCAPE f= expression )? | BETWEEN e= expression AND f= expression | IN LPAREN ( ( selectStatement )=>s= selectStatement | e= expression ( COMMA e= expression )* ) RPAREN ) ) | EXISTS LPAREN s= selectStatement RPAREN );", 35, 0, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
                ]]></source>
</chunk>
<chunk hits="0" offset="00d5" domain="userortestcode"><source><![CDATA[throw nvae_d35s0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }
            ]]></source>
</chunk>
<chunk hits="2" offset="00d8" domain="userortestcode"><source><![CDATA[switch (alt35)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
                case 1 :
                    // MacroScope\\MacroScope.g:241:2: l= expression (o= comparisonOperator (r= expression | q= quantifierSpec LPAREN s= selectStatement RPAREN ) | IS ( NOT )? NULL | ( NOT )? ( LIKE e= expression ( ESCAPE f= expression )? | BETWEEN e= expression AND f= expression | IN LPAREN ( ( selectStatement )=>s= selectStatement | e= expression ( COMMA e= expression )* ) RPAREN ) )
                    ]]></source>
</chunk>
<chunk hits="2" offset="00f2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="00f3" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_expression_in_predicate1101);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="00ff" domain="userortestcode"><source><![CDATA[l = expression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="0106" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="4" offset="0114" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0123" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	// MacroScope\\MacroScope.g:241:17: (o= comparisonOperator (r= expression | q= quantifierSpec LPAREN s= selectStatement RPAREN ) | IS ( NOT )? NULL | ( NOT )? ( LIKE e= expression ( ESCAPE f= expression )? | BETWEEN e= expression AND f= expression | IN LPAREN ( ( selectStatement )=>s= selectStatement | e= expression ( COMMA e= expression )* ) RPAREN ) )
                    	]]></source>
</chunk>
<chunk hits="2" offset="012b" domain="userortestcode"><source><![CDATA[int alt34 = 3;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="012e" domain="userortestcode"><source><![CDATA[switch ( input.LA(1) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	{
                    	case ASSIGNEQUAL:
                    	case NOTEQUAL1:
                    	case NOTEQUAL2:
                    	case LESSTHANOREQUALTO1:
                    	case LESSTHAN:
                    	case GREATERTHANOREQUALTO1:
                    	case GREATERTHAN:
                    		]]></source>
</chunk>
<chunk hits="2" offset="018c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="2" offset="018d" domain="userortestcode"><source><![CDATA[alt34 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="2" offset="0190" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="2" offset="0191" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	case IS:
                    		]]></source>
</chunk>
<chunk hits="0" offset="0193" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="0194" domain="userortestcode"><source><![CDATA[alt34 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="0197" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="0198" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	case NOT:
                    	case LIKE:
                    	case BETWEEN:
                    	case IN:
                    		]]></source>
</chunk>
<chunk hits="0" offset="019a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="019b" domain="userortestcode"><source><![CDATA[alt34 = 3;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="019e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="019f" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    		default:
                    		    ]]></source>
</chunk>
<chunk hits="0" offset="01a1" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="01b3" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="01b4" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="01bb" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
                    		    ]]></source>
</chunk>
<chunk hits="0" offset="01c3" domain="userortestcode"><source><![CDATA[NoViableAltException nvae_d34s0 =
                    		        new NoViableAltException("241:17: (o= comparisonOperator (r= expression | q= quantifierSpec LPAREN s= selectStatement RPAREN ) | IS ( NOT )? NULL | ( NOT )? ( LIKE e= expression ( ESCAPE f= expression )? | BETWEEN e= expression AND f= expression | IN LPAREN ( ( selectStatement )=>s= selectStatement | e= expression ( COMMA e= expression )* ) RPAREN ) )", 34, 0, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	
                    		    ]]></source>
</chunk>
<chunk hits="0" offset="01d8" domain="userortestcode"><source><![CDATA[throw nvae_d34s0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	}
                    	
                    	]]></source>
</chunk>
<chunk hits="2" offset="01db" domain="userortestcode"><source><![CDATA[switch (alt34)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	{
                    	    case 1 :
                    	        // MacroScope\\MacroScope.g:242:10: o= comparisonOperator (r= expression | q= quantifierSpec LPAREN s= selectStatement RPAREN )
                    	        ]]></source>
</chunk>
<chunk hits="2" offset="01f9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="2" offset="01fa" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_comparisonOperator_in_predicate1118);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="2" offset="0206" domain="userortestcode"><source><![CDATA[o = comparisonOperator();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="2" offset="020d" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="4" offset="021b" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="022a" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	// MacroScope\\MacroScope.g:242:33: (r= expression | q= quantifierSpec LPAREN s= selectStatement RPAREN )
                    	        	]]></source>
</chunk>
<chunk hits="2" offset="0232" domain="userortestcode"><source><![CDATA[int alt27 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="2" offset="0235" domain="userortestcode"><source><![CDATA[int LA27_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	
                    	        	]]></source>
</chunk>
<chunk hits="6" offset="0243" domain="userortestcode"><source><![CDATA[if ( (LA27_0 == LPAREN || LA27_0 == Integer || LA27_0 == NULL || (LA27_0 >= LEFT && LA27_0 <= RIGHT) || (LA27_0 >= PLACEHOLDER && LA27_0 <= SUBSTRING) || (LA27_0 >= EXTRACT && LA27_0 <= CASE) || LA27_0 == CAST || (LA27_0 >= UnicodeStringLiteral && LA27_0 <= MINUS)) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="2" offset="0296" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="2" offset="0297" domain="userortestcode"><source><![CDATA[alt27 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="2" offset="029a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	else ]]></source>
</chunk>
<chunk hits="0" offset="029d" domain="userortestcode"><source><![CDATA[if ( (LA27_0 == ALL || (LA27_0 >= SOME && LA27_0 <= ANY)) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="02bb" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="02bc" domain="userortestcode"><source><![CDATA[alt27 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="02bf" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	else 
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="02c2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="02c3" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="02d5" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="02d6" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="02dd" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="02e5" domain="userortestcode"><source><![CDATA[NoViableAltException nvae_d27s0 =
                    	        	        new NoViableAltException("242:33: (r= expression | q= quantifierSpec LPAREN s= selectStatement RPAREN )", 27, 0, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="02fa" domain="userortestcode"><source><![CDATA[throw nvae_d27s0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	}
                    	        	]]></source>
</chunk>
<chunk hits="2" offset="02fd" domain="userortestcode"><source><![CDATA[switch (alt27)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	{
                    	        	    case 1 :
                    	        	        // MacroScope\\MacroScope.g:243:15: r= expression
                    	        	        ]]></source>
</chunk>
<chunk hits="2" offset="0317" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="2" offset="0318" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_expression_in_predicate1140);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="2" offset="0324" domain="userortestcode"><source><![CDATA[r = expression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="2" offset="032b" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="4" offset="0339" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0348" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="2" offset="0350" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	        	]]></source>
</chunk>
<chunk hits="2" offset="0362" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  
                    	        	        	  				]]></source>
</chunk>
<chunk hits="2" offset="0363" domain="userortestcode"><source><![CDATA[value =  new Expression(l,
                    	        	        	  					o, r);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  			
                    	        	        	]]></source>
</chunk>
<chunk hits="2" offset="036c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        
                    	        	        ]]></source>
</chunk>
<chunk hits="2" offset="036d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        ]]></source>
</chunk>
<chunk hits="2" offset="036e" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    case 2 :
                    	        	        // MacroScope\\MacroScope.g:247:6: q= quantifierSpec LPAREN s= selectStatement RPAREN
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0373" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0374" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_quantifierSpec_in_predicate1153);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0380" domain="userortestcode"><source><![CDATA[q = quantifierSpec();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0388" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0396" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="03a5" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="03ad" domain="userortestcode"><source><![CDATA[Match(input,LPAREN,FOLLOW_LPAREN_in_predicate1159);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="03c0" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="03cf" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="03d7" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_selectStatement_in_predicate1165);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="03e3" domain="userortestcode"><source><![CDATA[s = selectStatement();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="03eb" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="03f9" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0408" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0410" domain="userortestcode"><source><![CDATA[Match(input,RPAREN,FOLLOW_RPAREN_in_predicate1167);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0423" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0432" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="043a" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="044c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  
                    	        	        	  					]]></source>
</chunk>
<chunk hits="0" offset="044d" domain="userortestcode"><source><![CDATA[BracketedExpression expr =
                    	        	        	  						new BracketedExpression(
                    	        	        	  							s);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  					]]></source>
</chunk>
<chunk hits="0" offset="0456" domain="userortestcode"><source><![CDATA[expr.Spaced = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  					]]></source>
</chunk>
<chunk hits="0" offset="045f" domain="userortestcode"><source><![CDATA[value =  new PredicateExpression(
                    	        	        	  						l, o,
                    	        	        	  						q, expr);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  				
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="046b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="046c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="046d" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	
                    	        	}

                    	        
                    	        ]]></source>
</chunk>
<chunk hits="2" offset="046f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        ]]></source>
</chunk>
<chunk hits="2" offset="0470" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    case 2 :
                    	        // MacroScope\\MacroScope.g:258:5: IS ( NOT )? NULL
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0475" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0476" domain="userortestcode"><source><![CDATA[Match(input,IS,FOLLOW_IS_in_predicate1188);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="048a" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0499" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="04a1" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="04b3" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	  
                    	        	  			]]></source>
</chunk>
<chunk hits="0" offset="04b4" domain="userortestcode"><source><![CDATA[value =  new Expression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	  			]]></source>
</chunk>
<chunk hits="0" offset="04ba" domain="userortestcode"><source><![CDATA[((Expression)value).Left = l;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	  			]]></source>
</chunk>
<chunk hits="0" offset="04c7" domain="userortestcode"><source><![CDATA[((Expression)value).Operator =
                    	        	  				ExpressionOperator.IsNull;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	  		
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="04d8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	// MacroScope\\MacroScope.g:264:4: ( NOT )?
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="04d9" domain="userortestcode"><source><![CDATA[int alt28 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="04dc" domain="userortestcode"><source><![CDATA[int LA28_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="04ea" domain="userortestcode"><source><![CDATA[if ( (LA28_0 == NOT) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="04f9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="04fa" domain="userortestcode"><source><![CDATA[alt28 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="04fd" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="04fe" domain="userortestcode"><source><![CDATA[switch (alt28)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	{
                    	        	    case 1 :
                    	        	        // MacroScope\\MacroScope.g:264:6: NOT
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0509" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="050a" domain="userortestcode"><source><![CDATA[Match(input,NOT,FOLLOW_NOT_in_predicate1198);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="051e" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="052d" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0535" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0547" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  
                    	        	        	  				]]></source>
</chunk>
<chunk hits="0" offset="0548" domain="userortestcode"><source><![CDATA[((Expression)value).Operator =
                    	        	        	  					ExpressionOperator.IsNotNull;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  			
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0559" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="055a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="055b" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	
                    	        	}

                    	        	]]></source>
</chunk>
<chunk hits="0" offset="055d" domain="userortestcode"><source><![CDATA[Match(input,NULL,FOLLOW_NULL_in_predicate1208);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0571" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0580" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0588" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0589" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    case 3 :
                    	        // MacroScope\\MacroScope.g:269:5: ( NOT )? ( LIKE e= expression ( ESCAPE f= expression )? | BETWEEN e= expression AND f= expression | IN LPAREN ( ( selectStatement )=>s= selectStatement | e= expression ( COMMA e= expression )* ) RPAREN )
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="058e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	// MacroScope\\MacroScope.g:269:5: ( NOT )?
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="058f" domain="userortestcode"><source><![CDATA[int alt29 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0592" domain="userortestcode"><source><![CDATA[int LA29_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="05a0" domain="userortestcode"><source><![CDATA[if ( (LA29_0 == NOT) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="05af" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="05b0" domain="userortestcode"><source><![CDATA[alt29 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="05b3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="05b4" domain="userortestcode"><source><![CDATA[switch (alt29)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	{
                    	        	    case 1 :
                    	        	        // MacroScope\\MacroScope.g:269:7: NOT
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="05bf" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="05c0" domain="userortestcode"><source><![CDATA[Match(input,NOT,FOLLOW_NOT_in_predicate1216);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="05d4" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="05e3" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="05eb" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="05fd" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	   ]]></source>
</chunk>
<chunk hits="0" offset="05fe" domain="userortestcode"><source><![CDATA[negated = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0601" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0602" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0603" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	
                    	        	}

                    	        	// MacroScope\\MacroScope.g:269:34: ( LIKE e= expression ( ESCAPE f= expression )? | BETWEEN e= expression AND f= expression | IN LPAREN ( ( selectStatement )=>s= selectStatement | e= expression ( COMMA e= expression )* ) RPAREN )
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0605" domain="userortestcode"><source><![CDATA[int alt33 = 3;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0608" domain="userortestcode"><source><![CDATA[switch ( input.LA(1) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	{
                    	        	case LIKE:
                    	        		]]></source>
</chunk>
<chunk hits="0" offset="0632" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0633" domain="userortestcode"><source><![CDATA[alt33 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0636" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0637" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	case BETWEEN:
                    	        		]]></source>
</chunk>
<chunk hits="0" offset="0639" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="063a" domain="userortestcode"><source><![CDATA[alt33 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="063d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="063e" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	case IN:
                    	        		]]></source>
</chunk>
<chunk hits="0" offset="0640" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0641" domain="userortestcode"><source><![CDATA[alt33 = 3;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0644" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0645" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        		default:
                    	        		    ]]></source>
</chunk>
<chunk hits="0" offset="0647" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0659" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="065a" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0661" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
                    	        		    ]]></source>
</chunk>
<chunk hits="0" offset="0669" domain="userortestcode"><source><![CDATA[NoViableAltException nvae_d33s0 =
                    	        		        new NoViableAltException("269:34: ( LIKE e= expression ( ESCAPE f= expression )? | BETWEEN e= expression AND f= expression | IN LPAREN ( ( selectStatement )=>s= selectStatement | e= expression ( COMMA e= expression )* ) RPAREN )", 33, 0, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	
                    	        		    ]]></source>
</chunk>
<chunk hits="0" offset="067e" domain="userortestcode"><source><![CDATA[throw nvae_d33s0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	}
                    	        	
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0681" domain="userortestcode"><source><![CDATA[switch (alt33)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	{
                    	        	    case 1 :
                    	        	        // MacroScope\\MacroScope.g:270:4: LIKE e= expression ( ESCAPE f= expression )?
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="069f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="06a0" domain="userortestcode"><source><![CDATA[Match(input,LIKE,FOLLOW_LIKE_in_predicate1228);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="06b4" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="06c3" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="06cb" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_expression_in_predicate1234);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="06d7" domain="userortestcode"><source><![CDATA[e = expression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="06df" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="06ed" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="06fc" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0704" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0716" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  
                    	        	        	  				]]></source>
</chunk>
<chunk hits="0" offset="0717" domain="userortestcode"><source><![CDATA[value =  new PatternExpression(
                    	        	        	  					e);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  			
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="071f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	// MacroScope\\MacroScope.g:275:5: ( ESCAPE f= expression )?
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0720" domain="userortestcode"><source><![CDATA[int alt30 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0723" domain="userortestcode"><source><![CDATA[int LA30_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0731" domain="userortestcode"><source><![CDATA[if ( (LA30_0 == ESCAPE) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0740" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0741" domain="userortestcode"><source><![CDATA[alt30 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0744" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0745" domain="userortestcode"><source><![CDATA[switch (alt30)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	        	{
                    	        	        	    case 1 :
                    	        	        	        // MacroScope\\MacroScope.g:275:7: ESCAPE f= expression
                    	        	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0753" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0754" domain="userortestcode"><source><![CDATA[Match(input,ESCAPE,FOLLOW_ESCAPE_in_predicate1249);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0768" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0777" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="077f" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_expression_in_predicate1255);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="078b" domain="userortestcode"><source><![CDATA[f = expression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0793" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="07a1" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="07b0" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="07b8" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="07ca" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	  
                    	        	        	        	  					]]></source>
</chunk>
<chunk hits="0" offset="07cb" domain="userortestcode"><source><![CDATA[((PatternExpression)value).Escape =
                    	        	        	        	  						f;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	  				
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="07d9" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        
                    	        	        	        ]]></source>
</chunk>
<chunk hits="0" offset="07da" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        ]]></source>
</chunk>
<chunk hits="0" offset="07db" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	
                    	        	        	}

                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="07dd" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="07ef" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  
                    	        	        	  					]]></source>
</chunk>
<chunk hits="0" offset="07f0" domain="userortestcode"><source><![CDATA[if (!negated)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  					]]></source>
</chunk>
<chunk hits="0" offset="07f8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  						]]></source>
</chunk>
<chunk hits="0" offset="07f9" domain="userortestcode"><source><![CDATA[value =  new Expression(l, ExpressionOperator.Like, value);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  					]]></source>
</chunk>
<chunk hits="0" offset="0806" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  					else
                    	        	        	  					]]></source>
</chunk>
<chunk hits="0" offset="0809" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  						]]></source>
</chunk>
<chunk hits="0" offset="080a" domain="userortestcode"><source><![CDATA[value =  new Expression(l, ExpressionOperator.NotLike, value);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  					]]></source>
</chunk>
<chunk hits="0" offset="0817" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  				
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0818" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0819" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="081a" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    case 2 :
                    	        	        // MacroScope\\MacroScope.g:289:6: BETWEEN e= expression AND f= expression
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="081f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0820" domain="userortestcode"><source><![CDATA[Match(input,BETWEEN,FOLLOW_BETWEEN_in_predicate1273);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0834" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0843" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="084b" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_expression_in_predicate1279);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0857" domain="userortestcode"><source><![CDATA[e = expression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="085f" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="086d" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="087c" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0884" domain="userortestcode"><source><![CDATA[Match(input,AND,FOLLOW_AND_in_predicate1281);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0898" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="08a7" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="08af" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_expression_in_predicate1287);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="08bb" domain="userortestcode"><source><![CDATA[f = expression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="08c3" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="08d1" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="08e0" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="08e8" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="08fa" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  
                    	        	        	  				]]></source>
</chunk>
<chunk hits="0" offset="08fb" domain="userortestcode"><source><![CDATA[Expression inner = new Expression(l,
                    	        	        	  					ExpressionOperator.Between,
                    	        	        	  					new Range(e, f));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  				]]></source>
</chunk>
<chunk hits="0" offset="0911" domain="userortestcode"><source><![CDATA[if (!negated)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  				]]></source>
</chunk>
<chunk hits="0" offset="0919" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  					]]></source>
</chunk>
<chunk hits="0" offset="091a" domain="userortestcode"><source><![CDATA[value =  inner;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  				]]></source>
</chunk>
<chunk hits="0" offset="091d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  				else
                    	        	        	  				]]></source>
</chunk>
<chunk hits="0" offset="0920" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  					]]></source>
</chunk>
<chunk hits="0" offset="0921" domain="userortestcode"><source><![CDATA[value =  new Expression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  					]]></source>
</chunk>
<chunk hits="0" offset="0927" domain="userortestcode"><source><![CDATA[((Expression)value).Operator =
                    	        	        	  						ExpressionOperator.Not;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  					]]></source>
</chunk>
<chunk hits="0" offset="0938" domain="userortestcode"><source><![CDATA[((Expression)value).Right = inner;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  				]]></source>
</chunk>
<chunk hits="0" offset="0946" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  			
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0947" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0948" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0949" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    case 3 :
                    	        	        // MacroScope\\MacroScope.g:305:6: IN LPAREN ( ( selectStatement )=>s= selectStatement | e= expression ( COMMA e= expression )* ) RPAREN
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="094e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="094f" domain="userortestcode"><source><![CDATA[Match(input,IN,FOLLOW_IN_in_predicate1296);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0963" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0972" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="097a" domain="userortestcode"><source><![CDATA[Match(input,LPAREN,FOLLOW_LPAREN_in_predicate1298);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="098d" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="099c" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	// MacroScope\\MacroScope.g:305:16: ( ( selectStatement )=>s= selectStatement | e= expression ( COMMA e= expression )* )
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="09a4" domain="userortestcode"><source><![CDATA[int alt32 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="09a7" domain="userortestcode"><source><![CDATA[int LA32_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="09b5" domain="userortestcode"><source><![CDATA[if ( (LA32_0 == SELECT) && (synpred2()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="09cd" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	    ]]></source>
</chunk>
<chunk hits="0" offset="09ce" domain="userortestcode"><source><![CDATA[alt32 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="09d1" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	else ]]></source>
</chunk>
<chunk hits="0" offset="09d7" domain="userortestcode"><source><![CDATA[if ( (LA32_0 == LPAREN) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="09e5" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	    ]]></source>
</chunk>
<chunk hits="0" offset="09e6" domain="userortestcode"><source><![CDATA[int LA32_2 = input.LA(2);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	    
                    	        	        	    ]]></source>
</chunk>
<chunk hits="0" offset="09f4" domain="userortestcode"><source><![CDATA[if ( (synpred2()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0a03" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0a04" domain="userortestcode"><source><![CDATA[alt32 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0a07" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	    else ]]></source>
</chunk>
<chunk hits="0" offset="0a0a" domain="userortestcode"><source><![CDATA[if ( (true) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0a0d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0a0e" domain="userortestcode"><source><![CDATA[alt32 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0a11" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	    else 
                    	        	        	    {
                    	        	        	        if ( backtracking > 0 ) {failed = true; return value;}
                    	        	        	        NoViableAltException nvae_d32s2 =
                    	        	        	            new NoViableAltException("305:16: ( ( selectStatement )=>s= selectStatement | e= expression ( COMMA e= expression )* )", 32, 2, input);
                    	        	        	    
                    	        	        	        throw nvae_d32s2;
                    	        	        	    }
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0a14" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	else ]]></source>
</chunk>
<chunk hits="0" offset="0a1a" domain="userortestcode"><source><![CDATA[if ( (LA32_0 == Integer || LA32_0 == NULL || (LA32_0 >= LEFT && LA32_0 <= RIGHT) || (LA32_0 >= PLACEHOLDER && LA32_0 <= SUBSTRING) || (LA32_0 >= EXTRACT && LA32_0 <= CASE) || LA32_0 == CAST || (LA32_0 >= UnicodeStringLiteral && LA32_0 <= MINUS)) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0a68" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0a69" domain="userortestcode"><source><![CDATA[alt32 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0a6c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	else 
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0a6f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0a70" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0a82" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="0a83" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0a8a" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
                    	        	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0a92" domain="userortestcode"><source><![CDATA[NoViableAltException nvae_d32s0 =
                    	        	        	        new NoViableAltException("305:16: ( ( selectStatement )=>s= selectStatement | e= expression ( COMMA e= expression )* )", 32, 0, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	
                    	        	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0aa7" domain="userortestcode"><source><![CDATA[throw nvae_d32s0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	}
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0aaa" domain="userortestcode"><source><![CDATA[switch (alt32)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	        	{
                    	        	        	    case 1 :
                    	        	        	        // MacroScope\\MacroScope.g:306:5: ( selectStatement )=>s= selectStatement
                    	        	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0ac4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0ac5" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_selectStatement_in_predicate1323);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0ad1" domain="userortestcode"><source><![CDATA[s = selectStatement();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0ad9" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0ae7" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0af6" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0afe" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0b10" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	  
                    	        	        	        	  						]]></source>
</chunk>
<chunk hits="0" offset="0b11" domain="userortestcode"><source><![CDATA[value =  new Expression(l, negated ? ExpressionOperator.NotIn : ExpressionOperator.In, s);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	  					
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0b2a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        
                    	        	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0b2b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0b2c" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	    case 2 :
                    	        	        	        // MacroScope\\MacroScope.g:310:7: e= expression ( COMMA e= expression )*
                    	        	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0b31" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0b32" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_expression_in_predicate1337);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0b3e" domain="userortestcode"><source><![CDATA[e = expression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0b46" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0b54" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0b63" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0b6b" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0b7d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	  
                    	        	        	        	  					]]></source>
</chunk>
<chunk hits="0" offset="0b7e" domain="userortestcode"><source><![CDATA[inSet = new ExpressionItem(e);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	  				
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0b87" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	// MacroScope\\MacroScope.g:313:6: ( COMMA e= expression )*
                    	        	        	        	do 
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0b88" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0b89" domain="userortestcode"><source><![CDATA[int alt31 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0b8c" domain="userortestcode"><source><![CDATA[int LA31_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	    
                    	        	        	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0b9a" domain="userortestcode"><source><![CDATA[if ( (LA31_0 == COMMA) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0ba9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0baa" domain="userortestcode"><source><![CDATA[alt31 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0bad" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	    
                    	        	        	        	
                    	        	        	        	    ]]></source>
</chunk>
<chunk hits="0" offset="0bae" domain="userortestcode"><source><![CDATA[switch (alt31)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	        	        		{
                    	        	        	        			case 1 :
                    	        	        	        			    // MacroScope\\MacroScope.g:313:8: COMMA e= expression
                    	        	        	        			    ]]></source>
</chunk>
<chunk hits="0" offset="0bbc" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        			    	]]></source>
</chunk>
<chunk hits="0" offset="0bbd" domain="userortestcode"><source><![CDATA[Match(input,COMMA,FOLLOW_COMMA_in_predicate1348);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0bd1" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0be0" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        			    	]]></source>
</chunk>
<chunk hits="0" offset="0be8" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_expression_in_predicate1354);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        			    	]]></source>
</chunk>
<chunk hits="0" offset="0bf4" domain="userortestcode"><source><![CDATA[e = expression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        			    	]]></source>
</chunk>
<chunk hits="0" offset="0bfc" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        			    	]]></source>
</chunk>
<chunk hits="0" offset="0c0a" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0c19" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        			    	]]></source>
</chunk>
<chunk hits="0" offset="0c21" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	        	        			    	]]></source>
</chunk>
<chunk hits="0" offset="0c33" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        			    	  
                    	        	        	        			    	  						]]></source>
</chunk>
<chunk hits="0" offset="0c34" domain="userortestcode"><source><![CDATA[inSet.Add(new ExpressionItem(
                    	        	        	        			    	  							e));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        			    	  					
                    	        	        	        			    	]]></source>
</chunk>
<chunk hits="0" offset="0c43" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        			    
                    	        	        	        			    ]]></source>
</chunk>
<chunk hits="0" offset="0c44" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        			    ]]></source>
</chunk>
<chunk hits="0" offset="0c45" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	
                    	        	        	        			default:
                    	        	        	        			    ]]></source>
</chunk>
<chunk hits="0" offset="0c47" domain="userortestcode"><source><![CDATA[goto loop31;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	    }
                    	        	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0c49" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0c4a" domain="userortestcode"><source><![CDATA[while (true);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        	
                    	        	        	        	loop31:
                    	        	        	        		;	// Stops C# compiler whinging that label 'loop31' has no statements

                    	        	        	        
                    	        	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0c52" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0c53" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	
                    	        	        	}

                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0c55" domain="userortestcode"><source><![CDATA[Match(input,RPAREN,FOLLOW_RPAREN_in_predicate1367);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0c68" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0c77" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0c7f" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0c91" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  
                    	        	        	  					]]></source>
</chunk>
<chunk hits="0" offset="0c92" domain="userortestcode"><source><![CDATA[if (value == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  					]]></source>
</chunk>
<chunk hits="0" offset="0c9f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  						]]></source>
</chunk>
<chunk hits="0" offset="0ca0" domain="userortestcode"><source><![CDATA[value =  new Expression(l, negated ? ExpressionOperator.NotIn : ExpressionOperator.In, inSet);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  					]]></source>
</chunk>
<chunk hits="0" offset="0cb9" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	  				
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0cba" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0cbb" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0cbc" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	
                    	        	}

                    	        
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0cbe" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0cbf" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	
                    	}

                    
                    ]]></source>
</chunk>
<chunk hits="2" offset="0cc1" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="0cc2" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 2 :
                    // MacroScope\\MacroScope.g:325:4: EXISTS LPAREN s= selectStatement RPAREN
                    ]]></source>
</chunk>
<chunk hits="0" offset="0cc7" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0cc8" domain="userortestcode"><source><![CDATA[Match(input,EXISTS,FOLLOW_EXISTS_in_predicate1382);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0cdc" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0ceb" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0cf3" domain="userortestcode"><source><![CDATA[Match(input,LPAREN,FOLLOW_LPAREN_in_predicate1384);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0d06" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0d15" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0d1d" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_selectStatement_in_predicate1390);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0d29" domain="userortestcode"><source><![CDATA[s = selectStatement();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0d31" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0d3f" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0d4e" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0d53" domain="userortestcode"><source><![CDATA[Match(input,RPAREN,FOLLOW_RPAREN_in_predicate1392);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0d66" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0d75" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0d7a" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="0d8c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	  
                    	  		]]></source>
</chunk>
<chunk hits="0" offset="0d8d" domain="userortestcode"><source><![CDATA[value =  new Expression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	  		]]></source>
</chunk>
<chunk hits="0" offset="0d93" domain="userortestcode"><source><![CDATA[((Expression)value).Operator = ExpressionOperator.Exists;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	  		]]></source>
</chunk>
<chunk hits="0" offset="0da4" domain="userortestcode"><source><![CDATA[((Expression)value).Right = s;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	  	
                    	]]></source>
</chunk>
<chunk hits="0" offset="0db2" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="0db3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0db4" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            }
        ]]></source>
</chunk>
<chunk hits="2" offset="0db6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="2" offset="0db9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0dba" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0dbd" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="2" offset="0dc3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end predicate

    
    // $ANTLR start quantifierSpec
    // MacroScope\\MacroScope.g:332:1: quantifierSpec returns [ PredicateQuantifier value ] : ( ALL | SOME | ANY );
    public PredicateQuantifier quantifierSpec() // throws RecognitionException [1]
    {   

        PredicateQuantifier value = null;
    
        try 
    	{
            // MacroScope\\MacroScope.g:332:54: ( ALL | SOME | ANY )
            int alt36 = 3;
            switch ( input.LA(1) ) 
            {
            case ALL:
            	{
                alt36 = 1;
                }
                break;
            case SOME:
            	{
                alt36 = 2;
                }
                break;
            case ANY:
            	{
                alt36 = 3;
                }
                break;
            	default:
            	    if ( backtracking > 0 ) {failed = true; return value;}
            	    NoViableAltException nvae_d36s0 =
            	        new NoViableAltException("332:1: quantifierSpec returns [ PredicateQuantifier value ] : ( ALL | SOME | ANY );", 36, 0, input);
            
            	    throw nvae_d36s0;
            }
            
            switch (alt36) 
            {
                case 1 :
                    // MacroScope\\MacroScope.g:333:2: ALL
                    {
                    	Match(input,ALL,FOLLOW_ALL_in_quantifierSpec1409); if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	   value =  PredicateQuantifier.All; 
                    	}
                    
                    }
                    break;
                case 2 :
                    // MacroScope\\MacroScope.g:334:4: SOME
                    {
                    	Match(input,SOME,FOLLOW_SOME_in_quantifierSpec1416); if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	   value =  PredicateQuantifier.Any; 
                    	}
                    
                    }
                    break;
                case 3 :
                    // MacroScope\\MacroScope.g:335:4: ANY
                    {
                    	Match(input,ANY,FOLLOW_ANY_in_quantifierSpec1423); if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	   value =  PredicateQuantifier.Any; 
                    	}
                    
                    }
                    break;
            
            }
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end quantifierSpec

    
    // $ANTLR start selectList
    // MacroScope\\MacroScope.g:338:1: selectList returns [ AliasedItem value ] : s= selectItem ( COMMA t= selectItem )* ;
    public AliasedItem selectList() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="selectList" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="6000100" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="2"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="16" value="4"/>
<hit index="18" value="2"/>
<hit index="41" value="2"/>
<hit index="43" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="9" total="22" coveredRatio="0.40909090909090912"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[AliasedItem value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0003" domain="userortestcode"><source><![CDATA[AliasedItem s = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="userortestcode"><source><![CDATA[AliasedItem t = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
    
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:338:42: (s= selectItem ( COMMA t= selectItem )* )
            // MacroScope\\MacroScope.g:339:2: s= selectItem ( COMMA t= selectItem )*
            ]]></source>
</chunk>
<chunk hits="2" offset="0008" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0009" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_selectItem_in_selectList1444);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0015" domain="userortestcode"><source><![CDATA[s = selectItem();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="001c" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="4" offset="002a" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0039" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0041" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="0053" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	   ]]></source>
</chunk>
<chunk hits="2" offset="0054" domain="userortestcode"><source><![CDATA[value =  s;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="0056" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	// MacroScope\\MacroScope.g:340:3: ( COMMA t= selectItem )*
            	do 
            	]]></source>
</chunk>
<chunk hits="2" offset="0057" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="2" offset="0058" domain="userortestcode"><source><![CDATA[int alt37 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="2" offset="005a" domain="userortestcode"><source><![CDATA[int LA37_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	    ]]></source>
</chunk>
<chunk hits="6" offset="0068" domain="userortestcode"><source><![CDATA[if ( (LA37_0 == COMMA) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0077" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0078" domain="userortestcode"><source><![CDATA[alt37 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="007a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	
            	    ]]></source>
</chunk>
<chunk hits="2" offset="007b" domain="userortestcode"><source><![CDATA[switch (alt37)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            		{
            			case 1 :
            			    // MacroScope\\MacroScope.g:340:5: COMMA t= selectItem
            			    ]]></source>
</chunk>
<chunk hits="0" offset="0085" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="0086" domain="userortestcode"><source><![CDATA[Match(input,COMMA,FOLLOW_COMMA_in_selectList1452);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="009a" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00a9" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00ae" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_selectItem_in_selectList1458);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00ba" domain="userortestcode"><source><![CDATA[t = selectItem();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00c1" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00cf" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00de" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00e3" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00f5" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	   ]]></source>
</chunk>
<chunk hits="0" offset="00f6" domain="userortestcode"><source><![CDATA[value.Add(t);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00fe" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    
            			    ]]></source>
</chunk>
<chunk hits="0" offset="00ff" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    ]]></source>
</chunk>
<chunk hits="0" offset="0100" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            			default:
            			    ]]></source>
</chunk>
<chunk hits="2" offset="0102" domain="userortestcode"><source><![CDATA[goto loop37;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    }
            	]]></source>
</chunk>
<chunk hits="0" offset="0104" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0105" domain="userortestcode"><source><![CDATA[while (true);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	loop37:
            		;	// Stops C# compiler whinging that label 'loop37' has no statements

            
            ]]></source>
</chunk>
<chunk hits="2" offset="010d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="010e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="2" offset="0111" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0112" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0115" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="2" offset="011b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end selectList

    
    // $ANTLR start selectItem
    // MacroScope\\MacroScope.g:343:1: selectItem returns [ AliasedItem value ] : ( STAR | ( ( alias2 )=> (a= alias2 e= expression ) | ( tableColumns )=>t= tableColumns | e= expression (a= alias1 )? ) );
    public AliasedItem selectItem() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="selectItem" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="6000101" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="4"/>
<hit index="6" value="2"/>
<hit index="29" value="2"/>
<hit index="30" value="2"/>
<hit index="31" value="2"/>
<hit index="32" value="2"/>
<hit index="33" value="4"/>
<hit index="34" value="2"/>
<hit index="36" value="2"/>
<hit index="37" value="2"/>
<hit index="38" value="2"/>
<hit index="39" value="2"/>
<hit index="40" value="2"/>
<hit index="42" value="2"/>
<hit index="143" value="2"/>
<hit index="145" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="10" total="78" coveredRatio="0.12820512820512819"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[AliasedItem value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0003" domain="userortestcode"><source><![CDATA[Identifier a = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="userortestcode"><source><![CDATA[IExpression e = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[TableWildcard t = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
    
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="0009" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:343:42: ( STAR | ( ( alias2 )=> (a= alias2 e= expression ) | ( tableColumns )=>t= tableColumns | e= expression (a= alias1 )? ) )
            ]]></source>
</chunk>
<chunk hits="2" offset="000a" domain="userortestcode"><source><![CDATA[int alt40 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="000d" domain="userortestcode"><source><![CDATA[int LA40_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="6" offset="001b" domain="userortestcode"><source><![CDATA[if ( (LA40_0 == STAR) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="002a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="002b" domain="userortestcode"><source><![CDATA[alt40 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="002e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="0" offset="0034" domain="userortestcode"><source><![CDATA[if ( (LA40_0 == LPAREN || LA40_0 == Integer || LA40_0 == NULL || (LA40_0 >= LEFT && LA40_0 <= RIGHT) || (LA40_0 >= PLACEHOLDER && LA40_0 <= SUBSTRING) || (LA40_0 >= EXTRACT && LA40_0 <= CASE) || LA40_0 == CAST || (LA40_0 >= UnicodeStringLiteral && LA40_0 <= MINUS)) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0087" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0088" domain="userortestcode"><source><![CDATA[alt40 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="008b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else 
            ]]></source>
</chunk>
<chunk hits="0" offset="008e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="008f" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00a1" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="00a2" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00a9" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
                ]]></source>
</chunk>
<chunk hits="0" offset="00b1" domain="userortestcode"><source><![CDATA[NoViableAltException nvae_d40s0 =
                    new NoViableAltException("343:1: selectItem returns [ AliasedItem value ] : ( STAR | ( ( alias2 )=> (a= alias2 e= expression ) | ( tableColumns )=>t= tableColumns | e= expression (a= alias1 )? ) );", 40, 0, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
                ]]></source>
</chunk>
<chunk hits="0" offset="00c6" domain="userortestcode"><source><![CDATA[throw nvae_d40s0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }
            ]]></source>
</chunk>
<chunk hits="2" offset="00c9" domain="userortestcode"><source><![CDATA[switch (alt40)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
                case 1 :
                    // MacroScope\\MacroScope.g:344:2: STAR
                    ]]></source>
</chunk>
<chunk hits="2" offset="00e3" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="00e4" domain="userortestcode"><source><![CDATA[Match(input,STAR,FOLLOW_STAR_in_selectItem1478);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="6" offset="00f8" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0107" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="010f" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="2" offset="0121" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	  
                    	  		]]></source>
</chunk>
<chunk hits="2" offset="0122" domain="userortestcode"><source><![CDATA[value =  new AliasedItem(Wildcard.Value);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	  	
                    	]]></source>
</chunk>
<chunk hits="2" offset="012d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="2" offset="012e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="012f" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 2 :
                    // MacroScope\\MacroScope.g:347:4: ( ( alias2 )=> (a= alias2 e= expression ) | ( tableColumns )=>t= tableColumns | e= expression (a= alias1 )? )
                    ]]></source>
</chunk>
<chunk hits="0" offset="0134" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	// MacroScope\\MacroScope.g:347:4: ( ( alias2 )=> (a= alias2 e= expression ) | ( tableColumns )=>t= tableColumns | e= expression (a= alias1 )? )
                    	]]></source>
</chunk>
<chunk hits="0" offset="0135" domain="userortestcode"><source><![CDATA[int alt39 = 3;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0138" domain="userortestcode"><source><![CDATA[alt39 = dfa39.Predict(input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="014b" domain="userortestcode"><source><![CDATA[switch (alt39)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	{
                    	    case 1 :
                    	        // MacroScope\\MacroScope.g:349:3: ( alias2 )=> (a= alias2 e= expression )
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0169" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	// MacroScope\\MacroScope.g:349:15: (a= alias2 e= expression )
                    	        	// MacroScope\\MacroScope.g:350:4: a= alias2 e= expression
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="016a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        		]]></source>
</chunk>
<chunk hits="0" offset="016b" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_alias2_in_selectItem1508);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        		]]></source>
</chunk>
<chunk hits="0" offset="0177" domain="userortestcode"><source><![CDATA[a = alias2();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        		]]></source>
</chunk>
<chunk hits="0" offset="017e" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        		]]></source>
</chunk>
<chunk hits="0" offset="018c" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="019b" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        		]]></source>
</chunk>
<chunk hits="0" offset="01a3" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_expression_in_selectItem1514);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        		]]></source>
</chunk>
<chunk hits="0" offset="01af" domain="userortestcode"><source><![CDATA[e = expression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        		]]></source>
</chunk>
<chunk hits="0" offset="01b6" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        		]]></source>
</chunk>
<chunk hits="0" offset="01c4" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="01d3" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        		]]></source>
</chunk>
<chunk hits="0" offset="01db" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        		]]></source>
</chunk>
<chunk hits="0" offset="01ed" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        		  
                    	        		  				]]></source>
</chunk>
<chunk hits="0" offset="01ee" domain="userortestcode"><source><![CDATA[value =  new AliasedItem(e);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        		  				]]></source>
</chunk>
<chunk hits="0" offset="01f5" domain="userortestcode"><source><![CDATA[value.Alias = a;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        		  			
                    	        		]]></source>
</chunk>
<chunk hits="0" offset="01fd" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="01fe" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                    	        
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="01ff" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0200" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    case 2 :
                    	        // MacroScope\\MacroScope.g:357:5: ( tableColumns )=>t= tableColumns
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0205" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0206" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_tableColumns_in_selectItem1540);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0212" domain="userortestcode"><source><![CDATA[t = tableColumns();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0219" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0227" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0236" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="023e" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0250" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	  
                    	        	  			]]></source>
</chunk>
<chunk hits="0" offset="0251" domain="userortestcode"><source><![CDATA[value =  new AliasedItem(t);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	  		
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0258" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0259" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="025a" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    case 3 :
                    	        // MacroScope\\MacroScope.g:361:5: e= expression (a= alias1 )?
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="025f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0260" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_expression_in_selectItem1553);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="026c" domain="userortestcode"><source><![CDATA[e = expression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0273" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0281" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0290" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0298" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="02aa" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	  
                    	        	  			]]></source>
</chunk>
<chunk hits="0" offset="02ab" domain="userortestcode"><source><![CDATA[value =  new AliasedItem(e);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	  		
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="02b2" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	// MacroScope\\MacroScope.g:364:4: (a= alias1 )?
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="02b3" domain="userortestcode"><source><![CDATA[int alt38 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="02b6" domain="userortestcode"><source><![CDATA[int LA38_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="02c4" domain="userortestcode"><source><![CDATA[if ( (LA38_0 == AS || LA38_0 == NonQuotedIdentifier || LA38_0 == QuotedIdentifier) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="02e2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	    ]]></source>
</chunk>
<chunk hits="0" offset="02e3" domain="userortestcode"><source><![CDATA[alt38 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="02e6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="02e7" domain="userortestcode"><source><![CDATA[switch (alt38)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	{
                    	        	    case 1 :
                    	        	        // MacroScope\\MacroScope.g:364:6: a= alias1
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="02f2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="02f3" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_alias1_in_selectItem1566);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="02ff" domain="userortestcode"><source><![CDATA[a = alias1();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0306" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0314" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0323" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0328" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="033a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        	   ]]></source>
</chunk>
<chunk hits="0" offset="033b" domain="userortestcode"><source><![CDATA[value.Alias = a;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	        	]]></source>
</chunk>
<chunk hits="0" offset="0343" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0344" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	        ]]></source>
</chunk>
<chunk hits="0" offset="0345" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	
                    	        	}

                    	        
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0347" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0348" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	
                    	}

                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="034a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="034b" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            }
        ]]></source>
</chunk>
<chunk hits="2" offset="034d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="2" offset="0350" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0351" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0354" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="2" offset="035a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end selectItem

    
    // $ANTLR start fromClause
    // MacroScope\\MacroScope.g:368:1: fromClause returns [ AliasedItem value ] : FROM t= tableSource ( COMMA t= tableSource )* ;
    public AliasedItem fromClause() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="fromClause" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="6000102" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="4"/>
<hit index="6" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="2"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="17" value="2"/>
<hit index="18" value="2"/>
<hit index="19" value="2"/>
<hit index="21" value="2"/>
<hit index="22" value="2"/>
<hit index="23" value="2"/>
<hit index="24" value="2"/>
<hit index="25" value="2"/>
<hit index="26" value="4"/>
<hit index="28" value="2"/>
<hit index="54" value="2"/>
<hit index="55" value="2"/>
<hit index="57" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="12" total="27" coveredRatio="0.44444444444444442"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[AliasedItem value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0003" domain="userortestcode"><source><![CDATA[Table t = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
    
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:368:42: ( FROM t= tableSource ( COMMA t= tableSource )* )
            // MacroScope\\MacroScope.g:369:2: FROM t= tableSource ( COMMA t= tableSource )*
            ]]></source>
</chunk>
<chunk hits="2" offset="0006" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[Match(input,FROM,FOLLOW_FROM_in_fromClause1589);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="6" offset="001b" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="002a" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0032" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_tableSource_in_fromClause1595);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="003e" domain="userortestcode"><source><![CDATA[t = tableSource();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0045" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="4" offset="0053" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0062" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="006a" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="007c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	   ]]></source>
</chunk>
<chunk hits="2" offset="007d" domain="userortestcode"><source><![CDATA[value =  new AliasedItem(t);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="0084" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	// MacroScope\\MacroScope.g:370:2: ( COMMA t= tableSource )*
            	do 
            	]]></source>
</chunk>
<chunk hits="2" offset="0085" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="2" offset="0086" domain="userortestcode"><source><![CDATA[int alt41 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="2" offset="0088" domain="userortestcode"><source><![CDATA[int LA41_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	    ]]></source>
</chunk>
<chunk hits="6" offset="0095" domain="userortestcode"><source><![CDATA[if ( (LA41_0 == COMMA) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="00a3" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="00a4" domain="userortestcode"><source><![CDATA[alt41 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="00a6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	
            	    ]]></source>
</chunk>
<chunk hits="2" offset="00a7" domain="userortestcode"><source><![CDATA[switch (alt41)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            		{
            			case 1 :
            			    // MacroScope\\MacroScope.g:370:4: COMMA t= tableSource
            			    ]]></source>
</chunk>
<chunk hits="0" offset="00b4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00b5" domain="userortestcode"><source><![CDATA[Match(input,COMMA,FOLLOW_COMMA_in_fromClause1602);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00c9" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00d8" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00dd" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_tableSource_in_fromClause1608);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00e9" domain="userortestcode"><source><![CDATA[t = tableSource();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00f0" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00fe" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="010d" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="0112" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            			    	]]></source>
</chunk>
<chunk hits="0" offset="0124" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	  
            			    	  		]]></source>
</chunk>
<chunk hits="0" offset="0125" domain="userortestcode"><source><![CDATA[value.Add(new AliasedItem(t));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	  	
            			    	]]></source>
</chunk>
<chunk hits="0" offset="0132" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    
            			    ]]></source>
</chunk>
<chunk hits="0" offset="0133" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    ]]></source>
</chunk>
<chunk hits="0" offset="0134" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            			default:
            			    ]]></source>
</chunk>
<chunk hits="2" offset="0136" domain="userortestcode"><source><![CDATA[goto loop41;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    }
            	]]></source>
</chunk>
<chunk hits="0" offset="0138" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0139" domain="userortestcode"><source><![CDATA[while (true);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	loop41:
            		;	// Stops C# compiler whinging that label 'loop41' has no statements

            
            ]]></source>
</chunk>
<chunk hits="2" offset="0141" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0142" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="2" offset="0145" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0146" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0149" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="2" offset="014f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end fromClause

    
    // $ANTLR start tableSource
    // MacroScope\\MacroScope.g:375:1: tableSource returns [ Table value ] : t= subTableSource (t= joinedTable )* ;
    public Table tableSource() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="tableSource" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="6000103" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="2"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="16" value="4"/>
<hit index="21" value="2"/>
<hit index="37" value="2"/>
<hit index="39" value="2"/>
<hit index="41" value="2"/>
<hit index="42" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="11" total="24" coveredRatio="0.45833333333333331"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[Table value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0003" domain="userortestcode"><source><![CDATA[Table t = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
    
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:375:37: (t= subTableSource (t= joinedTable )* )
            // MacroScope\\MacroScope.g:376:2: t= subTableSource (t= joinedTable )*
            ]]></source>
</chunk>
<chunk hits="2" offset="0006" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_subTableSource_in_tableSource1632);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0013" domain="userortestcode"><source><![CDATA[t = subTableSource();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="001a" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="4" offset="0028" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0037" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="003f" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="0051" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	   ]]></source>
</chunk>
<chunk hits="2" offset="0052" domain="userortestcode"><source><![CDATA[value =  t;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="0054" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	// MacroScope\\MacroScope.g:377:2: (t= joinedTable )*
            	do 
            	]]></source>
</chunk>
<chunk hits="2" offset="0055" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="2" offset="0056" domain="userortestcode"><source><![CDATA[int alt42 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="2" offset="0058" domain="userortestcode"><source><![CDATA[int LA42_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	    ]]></source>
</chunk>
<chunk hits="6" offset="0065" domain="userortestcode"><source><![CDATA[if ( ((LA42_0 >= INNER && LA42_0 <= FULL) || (LA42_0 >= JOIN && LA42_0 <= CROSS)) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0085" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0086" domain="userortestcode"><source><![CDATA[alt42 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0088" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	
            	    ]]></source>
</chunk>
<chunk hits="2" offset="0089" domain="userortestcode"><source><![CDATA[switch (alt42)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            		{
            			case 1 :
            			    // MacroScope\\MacroScope.g:377:4: t= joinedTable
            			    ]]></source>
</chunk>
<chunk hits="0" offset="0093" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="0094" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_joinedTable_in_tableSource1643);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00a0" domain="userortestcode"><source><![CDATA[t = joinedTable();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00a7" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00b5" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00c4" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00c9" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00db" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	   ]]></source>
</chunk>
<chunk hits="0" offset="00dc" domain="userortestcode"><source><![CDATA[value.Add(t);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00e4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    
            			    ]]></source>
</chunk>
<chunk hits="0" offset="00e5" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    ]]></source>
</chunk>
<chunk hits="0" offset="00e6" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            			default:
            			    ]]></source>
</chunk>
<chunk hits="2" offset="00e8" domain="userortestcode"><source><![CDATA[goto loop42;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    }
            	]]></source>
</chunk>
<chunk hits="0" offset="00ea" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00eb" domain="userortestcode"><source><![CDATA[while (true);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	loop42:
            		;	// Stops C# compiler whinging that label 'loop42' has no statements

            
            ]]></source>
</chunk>
<chunk hits="2" offset="00f3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="00f4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="2" offset="00f7" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="00f8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="00fb" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="2" offset="0101" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end tableSource

    
    // $ANTLR start subTableSource
    // MacroScope\\MacroScope.g:380:1: subTableSource returns [ Table value ] : ( LPAREN ( ( joinedTables )=>t= joinedTables RPAREN | ( queryExpression )=>q= queryExpression RPAREN a= alias1 ) | ( function )=>f= function (a= alias1 )? | o= dbObject (a= alias1 )? );
    public Table subTableSource() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="subTableSource" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="6000104" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="4"/>
<hit index="15" value="2"/>
<hit index="16" value="2"/>
<hit index="17" value="2"/>
<hit index="18" value="2"/>
<hit index="19" value="2"/>
<hit index="20" value="4"/>
<hit index="25" value="2"/>
<hit index="26" value="2"/>
<hit index="27" value="2"/>
<hit index="28" value="2"/>
<hit index="38" value="2"/>
<hit index="241" value="2"/>
<hit index="242" value="2"/>
<hit index="243" value="2"/>
<hit index="244" value="2"/>
<hit index="245" value="2"/>
<hit index="246" value="2"/>
<hit index="247" value="2"/>
<hit index="248" value="2"/>
<hit index="250" value="2"/>
<hit index="251" value="2"/>
<hit index="252" value="2"/>
<hit index="254" value="2"/>
<hit index="255" value="2"/>
<hit index="256" value="2"/>
<hit index="257" value="2"/>
<hit index="258" value="2"/>
<hit index="259" value="4"/>
<hit index="260" value="2"/>
<hit index="261" value="2"/>
<hit index="263" value="2"/>
<hit index="279" value="2"/>
<hit index="280" value="2"/>
<hit index="281" value="2"/>
<hit index="282" value="2"/>
<hit index="283" value="2"/>
<hit index="285" value="2"/>
<hit index="286" value="2"/>
<hit index="291" value="2"/>
<hit index="310" value="2"/>
<hit index="348" value="2"/>
<hit index="352" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="29" total="189" coveredRatio="0.15343915343915343"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[Table value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0003" domain="userortestcode"><source><![CDATA[Table t = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="userortestcode"><source><![CDATA[QueryExpression q = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[Identifier a = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="0009" domain="userortestcode"><source><![CDATA[IExpression f = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="000c" domain="userortestcode"><source><![CDATA[DbObject o = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
    
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="000f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:380:40: ( LPAREN ( ( joinedTables )=>t= joinedTables RPAREN | ( queryExpression )=>q= queryExpression RPAREN a= alias1 ) | ( function )=>f= function (a= alias1 )? | o= dbObject (a= alias1 )? )
            ]]></source>
</chunk>
<chunk hits="2" offset="0010" domain="userortestcode"><source><![CDATA[int alt46 = 3;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0013" domain="userortestcode"><source><![CDATA[int LA46_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="6" offset="0021" domain="userortestcode"><source><![CDATA[if ( (LA46_0 == LPAREN) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="002f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0030" domain="userortestcode"><source><![CDATA[alt46 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0033" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="2" offset="0039" domain="userortestcode"><source><![CDATA[if ( (LA46_0 == SUBSTRING) && (synpred7()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0051" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0052" domain="userortestcode"><source><![CDATA[alt46 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0055" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="2" offset="005b" domain="userortestcode"><source><![CDATA[if ( (LA46_0 == EXTRACT) && (synpred7()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0073" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0074" domain="userortestcode"><source><![CDATA[alt46 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0077" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="2" offset="007d" domain="userortestcode"><source><![CDATA[if ( (LA46_0 == NonQuotedIdentifier) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="008f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0090" domain="userortestcode"><source><![CDATA[int LA46_4 = input.LA(2);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="6" offset="009e" domain="userortestcode"><source><![CDATA[if ( (LA46_4 == LPAREN) && (synpred7()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00b5" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="00b6" domain="userortestcode"><source><![CDATA[alt46 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00b9" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else ]]></source>
</chunk>
<chunk hits="2" offset="00bf" domain="userortestcode"><source><![CDATA[if ( (LA46_4 == EOF || LA46_4 == RPAREN || LA46_4 == COMMA || (LA46_4 >= WHERE && LA46_4 <= ORDER) || LA46_4 == GROUP || (LA46_4 >= INNER && LA46_4 <= FULL) || (LA46_4 >= JOIN && LA46_4 <= AS) || LA46_4 == NonQuotedIdentifier || LA46_4 == DOT || LA46_4 == QuotedIdentifier || LA46_4 == UNION) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="011d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="011e" domain="userortestcode"><source><![CDATA[alt46 = 3;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0121" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else 
                ]]></source>
</chunk>
<chunk hits="0" offset="0124" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0125" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0137" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="0138" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="013f" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
                    ]]></source>
</chunk>
<chunk hits="0" offset="0147" domain="userortestcode"><source><![CDATA[NoViableAltException nvae_d46s4 =
                        new NoViableAltException("380:1: subTableSource returns [ Table value ] : ( LPAREN ( ( joinedTables )=>t= joinedTables RPAREN | ( queryExpression )=>q= queryExpression RPAREN a= alias1 ) | ( function )=>f= function (a= alias1 )? | o= dbObject (a= alias1 )? );", 46, 4, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                    ]]></source>
</chunk>
<chunk hits="0" offset="015c" domain="userortestcode"><source><![CDATA[throw nvae_d46s4;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                }
            ]]></source>
</chunk>
<chunk hits="2" offset="015f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="0" offset="0165" domain="userortestcode"><source><![CDATA[if ( (LA46_0 == LEFT) && (synpred7()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="017d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="017e" domain="userortestcode"><source><![CDATA[alt46 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0181" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="0" offset="0184" domain="userortestcode"><source><![CDATA[if ( (LA46_0 == RIGHT) && (synpred7()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="019c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="019d" domain="userortestcode"><source><![CDATA[alt46 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="01a0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="0" offset="01a3" domain="userortestcode"><source><![CDATA[if ( (LA46_0 == QuotedIdentifier) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="01b2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="01b3" domain="userortestcode"><source><![CDATA[alt46 = 3;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="01b6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else 
            ]]></source>
</chunk>
<chunk hits="0" offset="01b9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="01ba" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="01cc" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="01cd" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="01d4" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
                ]]></source>
</chunk>
<chunk hits="0" offset="01dc" domain="userortestcode"><source><![CDATA[NoViableAltException nvae_d46s0 =
                    new NoViableAltException("380:1: subTableSource returns [ Table value ] : ( LPAREN ( ( joinedTables )=>t= joinedTables RPAREN | ( queryExpression )=>q= queryExpression RPAREN a= alias1 ) | ( function )=>f= function (a= alias1 )? | o= dbObject (a= alias1 )? );", 46, 0, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
                ]]></source>
</chunk>
<chunk hits="0" offset="01f1" domain="userortestcode"><source><![CDATA[throw nvae_d46s0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }
            ]]></source>
</chunk>
<chunk hits="2" offset="01f4" domain="userortestcode"><source><![CDATA[switch (alt46)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
                case 1 :
                    // MacroScope\\MacroScope.g:381:2: LPAREN ( ( joinedTables )=>t= joinedTables RPAREN | ( queryExpression )=>q= queryExpression RPAREN a= alias1 )
                    ]]></source>
</chunk>
<chunk hits="0" offset="0212" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0213" domain="userortestcode"><source><![CDATA[Match(input,LPAREN,FOLLOW_LPAREN_in_subTableSource1663);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0226" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0235" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	// MacroScope\\MacroScope.g:381:9: ( ( joinedTables )=>t= joinedTables RPAREN | ( queryExpression )=>q= queryExpression RPAREN a= alias1 )
                    	]]></source>
</chunk>
<chunk hits="0" offset="023d" domain="userortestcode"><source><![CDATA[int alt43 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0240" domain="userortestcode"><source><![CDATA[int LA43_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	
                    	]]></source>
</chunk>
<chunk hits="0" offset="024e" domain="userortestcode"><source><![CDATA[if ( (LA43_0 == LPAREN) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="025c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="025d" domain="userortestcode"><source><![CDATA[int LA43_1 = input.LA(2);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="026b" domain="userortestcode"><source><![CDATA[if ( (synpred5()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="027a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="027b" domain="userortestcode"><source><![CDATA[alt43 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="027e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    else ]]></source>
</chunk>
<chunk hits="0" offset="0281" domain="userortestcode"><source><![CDATA[if ( (synpred6()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="0290" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0291" domain="userortestcode"><source><![CDATA[alt43 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="0294" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    else 
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="0297" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0298" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="02aa" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="02ab" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="02b2" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="02ba" domain="userortestcode"><source><![CDATA[NoViableAltException nvae_d43s1 =
                    	            new NoViableAltException("381:9: ( ( joinedTables )=>t= joinedTables RPAREN | ( queryExpression )=>q= queryExpression RPAREN a= alias1 )", 43, 1, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="02cf" domain="userortestcode"><source><![CDATA[throw nvae_d43s1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    }
                    	]]></source>
</chunk>
<chunk hits="0" offset="02d2" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	else ]]></source>
</chunk>
<chunk hits="0" offset="02d8" domain="userortestcode"><source><![CDATA[if ( (LA43_0 == SUBSTRING) && (synpred5()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="02f0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="02f1" domain="userortestcode"><source><![CDATA[alt43 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="02f4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	else ]]></source>
</chunk>
<chunk hits="0" offset="02fa" domain="userortestcode"><source><![CDATA[if ( (LA43_0 == EXTRACT) && (synpred5()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0312" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="0313" domain="userortestcode"><source><![CDATA[alt43 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0316" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	else ]]></source>
</chunk>
<chunk hits="0" offset="031c" domain="userortestcode"><source><![CDATA[if ( (LA43_0 == NonQuotedIdentifier) && (synpred5()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0334" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="0335" domain="userortestcode"><source><![CDATA[alt43 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0338" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	else ]]></source>
</chunk>
<chunk hits="0" offset="033e" domain="userortestcode"><source><![CDATA[if ( (LA43_0 == LEFT) && (synpred5()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0356" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="0357" domain="userortestcode"><source><![CDATA[alt43 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="035a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	else ]]></source>
</chunk>
<chunk hits="0" offset="0360" domain="userortestcode"><source><![CDATA[if ( (LA43_0 == RIGHT) && (synpred5()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0378" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="0379" domain="userortestcode"><source><![CDATA[alt43 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="037c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	else ]]></source>
</chunk>
<chunk hits="0" offset="037f" domain="userortestcode"><source><![CDATA[if ( (LA43_0 == QuotedIdentifier) && (synpred5()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0397" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="0398" domain="userortestcode"><source><![CDATA[alt43 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="039b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	else ]]></source>
</chunk>
<chunk hits="0" offset="039e" domain="userortestcode"><source><![CDATA[if ( (LA43_0 == SELECT) && (synpred6()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="03b6" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="03b7" domain="userortestcode"><source><![CDATA[alt43 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="03ba" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	else 
                    	]]></source>
</chunk>
<chunk hits="0" offset="03bd" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="03be" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="03d0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="03d1" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="03d8" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="03e0" domain="userortestcode"><source><![CDATA[NoViableAltException nvae_d43s0 =
                    	        new NoViableAltException("381:9: ( ( joinedTables )=>t= joinedTables RPAREN | ( queryExpression )=>q= queryExpression RPAREN a= alias1 )", 43, 0, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="03f5" domain="userortestcode"><source><![CDATA[throw nvae_d43s0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	}
                    	]]></source>
</chunk>
<chunk hits="0" offset="03f8" domain="userortestcode"><source><![CDATA[switch (alt43)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	{
                    	    case 1 :
                    	        // MacroScope\\MacroScope.g:382:3: ( joinedTables )=>t= joinedTables RPAREN
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0412" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0413" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_joinedTables_in_subTableSource1682);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="041f" domain="userortestcode"><source><![CDATA[t = joinedTables();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0426" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0434" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0443" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="044b" domain="userortestcode"><source><![CDATA[Match(input,RPAREN,FOLLOW_RPAREN_in_subTableSource1684);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="045e" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="046d" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0475" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0487" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	  
                    	        	  				]]></source>
</chunk>
<chunk hits="0" offset="0488" domain="userortestcode"><source><![CDATA[value =  new Table(
                    	        	  					new BracketedExpression(t));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	  			
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0494" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0495" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0496" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    case 2 :
                    	        // MacroScope\\MacroScope.g:387:5: ( queryExpression )=>q= queryExpression RPAREN a= alias1
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="049b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="049c" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_queryExpression_in_subTableSource1709);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="04a8" domain="userortestcode"><source><![CDATA[q = queryExpression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="04af" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="04bd" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="04cc" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="04d4" domain="userortestcode"><source><![CDATA[Match(input,RPAREN,FOLLOW_RPAREN_in_subTableSource1711);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="04e7" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="04f6" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="04fe" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_alias1_in_subTableSource1717);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="050a" domain="userortestcode"><source><![CDATA[a = alias1();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0511" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="051f" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="052e" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0536" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0548" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	  
                    	        	  				]]></source>
</chunk>
<chunk hits="0" offset="0549" domain="userortestcode"><source><![CDATA[BracketedExpression expr =
                    	        	  					new BracketedExpression(q);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	  				]]></source>
</chunk>
<chunk hits="0" offset="0551" domain="userortestcode"><source><![CDATA[expr.Spaced = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	  				]]></source>
</chunk>
<chunk hits="0" offset="055a" domain="userortestcode"><source><![CDATA[value =  new Table(expr);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	  				]]></source>
</chunk>
<chunk hits="0" offset="0562" domain="userortestcode"><source><![CDATA[value.Alias = a;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	  			
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="056a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="056b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="056c" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	
                    	}

                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="056e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="056f" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 2 :
                    // MacroScope\\MacroScope.g:400:4: ( function )=>f= function (a= alias1 )?
                    ]]></source>
</chunk>
<chunk hits="0" offset="0574" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0575" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_function_in_subTableSource1752);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0581" domain="userortestcode"><source><![CDATA[f = function();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0589" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0597" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="05a6" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="05ae" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="05c0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	  
                    	  			]]></source>
</chunk>
<chunk hits="0" offset="05c1" domain="userortestcode"><source><![CDATA[value =  new Table(f);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	  		
                    	]]></source>
</chunk>
<chunk hits="0" offset="05c9" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	// MacroScope\\MacroScope.g:404:4: (a= alias1 )?
                    	]]></source>
</chunk>
<chunk hits="0" offset="05ca" domain="userortestcode"><source><![CDATA[int alt44 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="05cd" domain="userortestcode"><source><![CDATA[int LA44_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	
                    	]]></source>
</chunk>
<chunk hits="0" offset="05db" domain="userortestcode"><source><![CDATA[if ( (LA44_0 == AS || LA44_0 == NonQuotedIdentifier || LA44_0 == QuotedIdentifier) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="05f9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="05fa" domain="userortestcode"><source><![CDATA[alt44 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="05fd" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="05fe" domain="userortestcode"><source><![CDATA[switch (alt44)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	{
                    	    case 1 :
                    	        // MacroScope\\MacroScope.g:404:6: a= alias1
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="0609" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="060a" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_alias1_in_subTableSource1765);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0616" domain="userortestcode"><source><![CDATA[a = alias1();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="061d" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="062b" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="063a" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0642" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0654" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	   ]]></source>
</chunk>
<chunk hits="0" offset="0655" domain="userortestcode"><source><![CDATA[value.Alias = a;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="065d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="065e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="065f" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	
                    	}

                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="0661" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0662" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 3 :
                    // MacroScope\\MacroScope.g:405:4: o= dbObject (a= alias1 )?
                    ]]></source>
</chunk>
<chunk hits="2" offset="0667" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="0668" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_dbObject_in_subTableSource1779);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="0674" domain="userortestcode"><source><![CDATA[o = dbObject();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="067c" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="4" offset="068a" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0699" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="06a1" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="2" offset="06b3" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	   ]]></source>
</chunk>
<chunk hits="2" offset="06b4" domain="userortestcode"><source><![CDATA[value =  new Table(o);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="2" offset="06bc" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	// MacroScope\\MacroScope.g:406:3: (a= alias1 )?
                    	]]></source>
</chunk>
<chunk hits="2" offset="06bd" domain="userortestcode"><source><![CDATA[int alt45 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="06c0" domain="userortestcode"><source><![CDATA[int LA45_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	
                    	]]></source>
</chunk>
<chunk hits="6" offset="06ce" domain="userortestcode"><source><![CDATA[if ( (LA45_0 == AS || LA45_0 == NonQuotedIdentifier || LA45_0 == QuotedIdentifier) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="06ec" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	    ]]></source>
</chunk>
<chunk hits="0" offset="06ed" domain="userortestcode"><source><![CDATA[alt45 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="06f0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="06f1" domain="userortestcode"><source><![CDATA[switch (alt45)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	{
                    	    case 1 :
                    	        // MacroScope\\MacroScope.g:406:5: a= alias1
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="06fc" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="06fd" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_alias1_in_subTableSource1791);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0709" domain="userortestcode"><source><![CDATA[a = alias1();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0710" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="071e" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="072d" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0732" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="0744" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        	   ]]></source>
</chunk>
<chunk hits="0" offset="0745" domain="userortestcode"><source><![CDATA[value.Alias = a;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	        	]]></source>
</chunk>
<chunk hits="0" offset="074d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="074e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	        ]]></source>
</chunk>
<chunk hits="0" offset="074f" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	
                    	}

                    
                    ]]></source>
</chunk>
<chunk hits="2" offset="0751" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="0752" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            }
        ]]></source>
</chunk>
<chunk hits="2" offset="0754" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="2" offset="0757" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0758" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="075b" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="2" offset="0761" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end subTableSource

    
    // $ANTLR start joinOn
    // MacroScope\\MacroScope.g:409:1: joinOn returns [ Join value ] : ( INNER | ( LEFT | RIGHT | FULL ) ( OUTER )? )? JOIN ;
    public Join joinOn() // throws RecognitionException [1]
    {   

        Join value = null;
    
        try 
    	{
            // MacroScope\\MacroScope.g:409:31: ( ( INNER | ( LEFT | RIGHT | FULL ) ( OUTER )? )? JOIN )
            // MacroScope\\MacroScope.g:410:2: ( INNER | ( LEFT | RIGHT | FULL ) ( OUTER )? )? JOIN
            {
            	// MacroScope\\MacroScope.g:410:2: ( INNER | ( LEFT | RIGHT | FULL ) ( OUTER )? )?
            	int alt49 = 3;
            	int LA49_0 = input.LA(1);
            	
            	if ( (LA49_0 == INNER) )
            	{
            	    alt49 = 1;
            	}
            	else if ( ((LA49_0 >= LEFT && LA49_0 <= FULL)) )
            	{
            	    alt49 = 2;
            	}
            	switch (alt49) 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:410:4: INNER
            	        {
            	        	Match(input,INNER,FOLLOW_INNER_in_joinOn1813); if (failed) return value;
            	        
            	        }
            	        break;
            	    case 2 :
            	        // MacroScope\\MacroScope.g:411:4: ( LEFT | RIGHT | FULL ) ( OUTER )?
            	        {
            	        	// MacroScope\\MacroScope.g:411:4: ( LEFT | RIGHT | FULL )
            	        	int alt47 = 3;
            	        	switch ( input.LA(1) ) 
            	        	{
            	        	case LEFT:
            	        		{
            	        	    alt47 = 1;
            	        	    }
            	        	    break;
            	        	case RIGHT:
            	        		{
            	        	    alt47 = 2;
            	        	    }
            	        	    break;
            	        	case FULL:
            	        		{
            	        	    alt47 = 3;
            	        	    }
            	        	    break;
            	        		default:
            	        		    if ( backtracking > 0 ) {failed = true; return value;}
            	        		    NoViableAltException nvae_d47s0 =
            	        		        new NoViableAltException("411:4: ( LEFT | RIGHT | FULL )", 47, 0, input);
            	        	
            	        		    throw nvae_d47s0;
            	        	}
            	        	
            	        	switch (alt47) 
            	        	{
            	        	    case 1 :
            	        	        // MacroScope\\MacroScope.g:411:6: LEFT
            	        	        {
            	        	        	Match(input,LEFT,FOLLOW_LEFT_in_joinOn1820); if (failed) return value;
            	        	        	if ( backtracking == 0 ) 
            	        	        	{
            	        	        	   value =  Join.Left; 
            	        	        	}
            	        	        
            	        	        }
            	        	        break;
            	        	    case 2 :
            	        	        // MacroScope\\MacroScope.g:412:5: RIGHT
            	        	        {
            	        	        	Match(input,RIGHT,FOLLOW_RIGHT_in_joinOn1828); if (failed) return value;
            	        	        	if ( backtracking == 0 ) 
            	        	        	{
            	        	        	   value =  Join.Right; 
            	        	        	}
            	        	        
            	        	        }
            	        	        break;
            	        	    case 3 :
            	        	        // MacroScope\\MacroScope.g:413:5: FULL
            	        	        {
            	        	        	Match(input,FULL,FOLLOW_FULL_in_joinOn1836); if (failed) return value;
            	        	        	if ( backtracking == 0 ) 
            	        	        	{
            	        	        	   value =  Join.Full; 
            	        	        	}
            	        	        
            	        	        }
            	        	        break;
            	        	
            	        	}

            	        	// MacroScope\\MacroScope.g:414:3: ( OUTER )?
            	        	int alt48 = 2;
            	        	int LA48_0 = input.LA(1);
            	        	
            	        	if ( (LA48_0 == OUTER) )
            	        	{
            	        	    alt48 = 1;
            	        	}
            	        	switch (alt48) 
            	        	{
            	        	    case 1 :
            	        	        // MacroScope\\MacroScope.g:414:5: OUTER
            	        	        {
            	        	        	Match(input,OUTER,FOLLOW_OUTER_in_joinOn1846); if (failed) return value;
            	        	        
            	        	        }
            	        	        break;
            	        	
            	        	}

            	        
            	        }
            	        break;
            	
            	}

            	Match(input,JOIN,FOLLOW_JOIN_in_joinOn1856); if (failed) return value;
            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end joinOn

    
    // $ANTLR start joinedTable
    // MacroScope\\MacroScope.g:418:1: joinedTable returns [ Table value ] : ( CROSS JOIN t= subTableSource | (j= joinOn t= tableSource ON c= searchCondition ) );
    public Table joinedTable() // throws RecognitionException [1]
    {   

        Table value = null;
    
        Table t = null;

        Join j = null;

        IExpression c = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:418:37: ( CROSS JOIN t= subTableSource | (j= joinOn t= tableSource ON c= searchCondition ) )
            int alt50 = 2;
            int LA50_0 = input.LA(1);
            
            if ( (LA50_0 == CROSS) )
            {
                alt50 = 1;
            }
            else if ( ((LA50_0 >= INNER && LA50_0 <= FULL) || LA50_0 == JOIN) )
            {
                alt50 = 2;
            }
            else 
            {
                if ( backtracking > 0 ) {failed = true; return value;}
                NoViableAltException nvae_d50s0 =
                    new NoViableAltException("418:1: joinedTable returns [ Table value ] : ( CROSS JOIN t= subTableSource | (j= joinOn t= tableSource ON c= searchCondition ) );", 50, 0, input);
            
                throw nvae_d50s0;
            }
            switch (alt50) 
            {
                case 1 :
                    // MacroScope\\MacroScope.g:419:2: CROSS JOIN t= subTableSource
                    {
                    	Match(input,CROSS,FOLLOW_CROSS_in_joinedTable1871); if (failed) return value;
                    	Match(input,JOIN,FOLLOW_JOIN_in_joinedTable1873); if (failed) return value;
                    	PushFollow(FOLLOW_subTableSource_in_joinedTable1879);
                    	t = subTableSource();
                    	followingStackPointer_--;
                    	if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	  
                    	  		value =  t;
                    	  		value.JoinType = Join.Cross;
                    	  	
                    	}
                    
                    }
                    break;
                case 2 :
                    // MacroScope\\MacroScope.g:423:4: (j= joinOn t= tableSource ON c= searchCondition )
                    {
                    	// MacroScope\\MacroScope.g:423:4: (j= joinOn t= tableSource ON c= searchCondition )
                    	// MacroScope\\MacroScope.g:424:3: j= joinOn t= tableSource ON c= searchCondition
                    	{
                    		PushFollow(FOLLOW_joinOn_in_joinedTable1894);
                    		j = joinOn();
                    		followingStackPointer_--;
                    		if (failed) return value;
                    		PushFollow(FOLLOW_tableSource_in_joinedTable1903);
                    		t = tableSource();
                    		followingStackPointer_--;
                    		if (failed) return value;
                    		if ( backtracking == 0 ) 
                    		{
                    		  
                    		  				value =  t;
                    		  				value.JoinType = (j == null) ?
                    		  					Join.Inner :
                    		  					j;
                    		  			
                    		}
                    		Match(input,ON,FOLLOW_ON_in_joinedTable1910); if (failed) return value;
                    		PushFollow(FOLLOW_searchCondition_in_joinedTable1916);
                    		c = searchCondition();
                    		followingStackPointer_--;
                    		if (failed) return value;
                    		if ( backtracking == 0 ) 
                    		{
                    		  
                    		  				value.JoinCondition = c;
                    		  			
                    		}
                    	
                    	}

                    
                    }
                    break;
            
            }
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end joinedTable

    
    // $ANTLR start joinedTables
    // MacroScope\\MacroScope.g:437:1: joinedTables returns [ Table value ] : t= subTableSource (t= joinedTable )+ ;
    public Table joinedTables() // throws RecognitionException [1]
    {   

        Table value = null;
    
        Table t = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:437:38: (t= subTableSource (t= joinedTable )+ )
            // MacroScope\\MacroScope.g:438:2: t= subTableSource (t= joinedTable )+
            {
            	PushFollow(FOLLOW_subTableSource_in_joinedTables1941);
            	t = subTableSource();
            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	   value =  t; 
            	}
            	// MacroScope\\MacroScope.g:439:3: (t= joinedTable )+
            	int cnt51 = 0;
            	do 
            	{
            	    int alt51 = 2;
            	    int LA51_0 = input.LA(1);
            	    
            	    if ( ((LA51_0 >= INNER && LA51_0 <= FULL) || (LA51_0 >= JOIN && LA51_0 <= CROSS)) )
            	    {
            	        alt51 = 1;
            	    }
            	    
            	
            	    switch (alt51) 
            		{
            			case 1 :
            			    // MacroScope\\MacroScope.g:439:5: t= joinedTable
            			    {
            			    	PushFollow(FOLLOW_joinedTable_in_joinedTables1953);
            			    	t = joinedTable();
            			    	followingStackPointer_--;
            			    	if (failed) return value;
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	   value.Add(t); 
            			    	}
            			    
            			    }
            			    break;
            	
            			default:
            			    if ( cnt51 >= 1 ) goto loop51;
            			    if ( backtracking > 0 ) {failed = true; return value;}
            		            EarlyExitException eee =
            		                new EarlyExitException(51, input);
            		            throw eee;
            	    }
            	    cnt51++;
            	} while (true);
            	
            	loop51:
            		;	// Stops C# compiler whinging that label 'loop51' has no statements

            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end joinedTables

    
    // $ANTLR start alias1
    // MacroScope\\MacroScope.g:444:1: alias1 returns [ Identifier value ] : ( AS )? i= identifier ;
    public Identifier alias1() // throws RecognitionException [1]
    {   

        Identifier value = null;
    
        Identifier i = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:444:37: ( ( AS )? i= identifier )
            // MacroScope\\MacroScope.g:445:2: ( AS )? i= identifier
            {
            	// MacroScope\\MacroScope.g:445:2: ( AS )?
            	int alt52 = 2;
            	int LA52_0 = input.LA(1);
            	
            	if ( (LA52_0 == AS) )
            	{
            	    alt52 = 1;
            	}
            	switch (alt52) 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:445:3: AS
            	        {
            	        	Match(input,AS,FOLLOW_AS_in_alias11976); if (failed) return value;
            	        
            	        }
            	        break;
            	
            	}

            	PushFollow(FOLLOW_identifier_in_alias11984);
            	i = identifier();
            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	   value =  i; 
            	}
            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end alias1

    
    // $ANTLR start alias2
    // MacroScope\\MacroScope.g:448:1: alias2 returns [ Identifier value ] : i= identifier ASSIGNEQUAL ;
    public Identifier alias2() // throws RecognitionException [1]
    {   

        Identifier value = null;
    
        Identifier i = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:448:37: (i= identifier ASSIGNEQUAL )
            // MacroScope\\MacroScope.g:449:2: i= identifier ASSIGNEQUAL
            {
            	PushFollow(FOLLOW_identifier_in_alias22005);
            	i = identifier();
            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	   value =  i; 
            	}
            	Match(input,ASSIGNEQUAL,FOLLOW_ASSIGNEQUAL_in_alias22011); if (failed) return value;
            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end alias2

    
    // $ANTLR start tableColumns
    // MacroScope\\MacroScope.g:453:1: tableColumns returns [ TableWildcard value ] : o= dbObject DOT_STAR ;
    public TableWildcard tableColumns() // throws RecognitionException [1]
    {   

        TableWildcard value = null;
    
        DbObject o = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:453:46: (o= dbObject DOT_STAR )
            // MacroScope\\MacroScope.g:454:2: o= dbObject DOT_STAR
            {
            	PushFollow(FOLLOW_dbObject_in_tableColumns2030);
            	o = dbObject();
            	followingStackPointer_--;
            	if (failed) return value;
            	Match(input,DOT_STAR,FOLLOW_DOT_STAR_in_tableColumns2032); if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	   value =  new TableWildcard(o); 
            	}
            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end tableColumns

    
    // $ANTLR start column
    // MacroScope\\MacroScope.g:458:1: column returns [ DbObject value ] : (o= dbObject | LPAREN o= column RPAREN );
    public DbObject column() // throws RecognitionException [1]
    {   

        DbObject value = null;
    
        DbObject o = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:458:35: (o= dbObject | LPAREN o= column RPAREN )
            int alt53 = 2;
            int LA53_0 = input.LA(1);
            
            if ( (LA53_0 == NonQuotedIdentifier || LA53_0 == QuotedIdentifier) )
            {
                alt53 = 1;
            }
            else if ( (LA53_0 == LPAREN) )
            {
                alt53 = 2;
            }
            else 
            {
                if ( backtracking > 0 ) {failed = true; return value;}
                NoViableAltException nvae_d53s0 =
                    new NoViableAltException("458:1: column returns [ DbObject value ] : (o= dbObject | LPAREN o= column RPAREN );", 53, 0, input);
            
                throw nvae_d53s0;
            }
            switch (alt53) 
            {
                case 1 :
                    // MacroScope\\MacroScope.g:459:2: o= dbObject
                    {
                    	PushFollow(FOLLOW_dbObject_in_column2054);
                    	o = dbObject();
                    	followingStackPointer_--;
                    	if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	   value =  o; 
                    	}
                    
                    }
                    break;
                case 2 :
                    // MacroScope\\MacroScope.g:461:4: LPAREN o= column RPAREN
                    {
                    	Match(input,LPAREN,FOLLOW_LPAREN_in_column2063); if (failed) return value;
                    	PushFollow(FOLLOW_column_in_column2069);
                    	o = column();
                    	followingStackPointer_--;
                    	if (failed) return value;
                    	Match(input,RPAREN,FOLLOW_RPAREN_in_column2071); if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	   value =  o; 
                    	}
                    
                    }
                    break;
            
            }
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end column

    
    // $ANTLR start expression
    // MacroScope\\MacroScope.g:464:1: expression returns [ IExpression value ] : e= additiveSubExpression (o= additiveOperator r= additiveSubExpression )* ;
    public IExpression expression() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="expression" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="600010c" module="MacroScope.dll"><hits><hit index="0" value="4"/>
<hit index="1" value="4"/>
<hit index="2" value="4"/>
<hit index="3" value="4"/>
<hit index="4" value="4"/>
<hit index="5" value="4"/>
<hit index="6" value="4"/>
<hit index="7" value="4"/>
<hit index="8" value="4"/>
<hit index="10" value="4"/>
<hit index="11" value="4"/>
<hit index="12" value="4"/>
<hit index="13" value="4"/>
<hit index="14" value="4"/>
<hit index="15" value="4"/>
<hit index="16" value="8"/>
<hit index="19" value="4"/>
<hit index="43" value="4"/>
<hit index="45" value="4"/>
<hit index="46" value="4"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="10" total="25" coveredRatio="0.4"/>
</method>
<chunk hits="4" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="4" offset="0001" domain="userortestcode"><source><![CDATA[IExpression value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="4" offset="0003" domain="userortestcode"><source><![CDATA[IExpression e = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="4" offset="0005" domain="userortestcode"><source><![CDATA[ExpressionOperator o = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="4" offset="0007" domain="userortestcode"><source><![CDATA[IExpression r = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
    
        try 
    	]]></source>
</chunk>
<chunk hits="4" offset="0009" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:464:42: (e= additiveSubExpression (o= additiveOperator r= additiveSubExpression )* )
            // MacroScope\\MacroScope.g:465:2: e= additiveSubExpression (o= additiveOperator r= additiveSubExpression )*
            ]]></source>
</chunk>
<chunk hits="4" offset="000a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="4" offset="000b" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_additiveSubExpression_in_expression2092);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="4" offset="0017" domain="userortestcode"><source><![CDATA[e = additiveSubExpression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="4" offset="001e" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="8" offset="002c" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="003b" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="4" offset="0043" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="4" offset="0055" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	   ]]></source>
</chunk>
<chunk hits="4" offset="0056" domain="userortestcode"><source><![CDATA[value =  e;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="4" offset="0058" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	// MacroScope\\MacroScope.g:466:2: (o= additiveOperator r= additiveSubExpression )*
            	do 
            	]]></source>
</chunk>
<chunk hits="4" offset="0059" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="4" offset="005a" domain="userortestcode"><source><![CDATA[int alt54 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="4" offset="005d" domain="userortestcode"><source><![CDATA[int LA54_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	    ]]></source>
</chunk>
<chunk hits="12" offset="006b" domain="userortestcode"><source><![CDATA[if ( ((LA54_0 >= PLUS && LA54_0 <= STRCONCAT)) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0080" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0081" domain="userortestcode"><source><![CDATA[alt54 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0084" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	
            	    ]]></source>
</chunk>
<chunk hits="4" offset="0085" domain="userortestcode"><source><![CDATA[switch (alt54)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            		{
            			case 1 :
            			    // MacroScope\\MacroScope.g:466:4: o= additiveOperator r= additiveSubExpression
            			    ]]></source>
</chunk>
<chunk hits="0" offset="0093" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="0094" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_additiveOperator_in_expression2103);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00a0" domain="userortestcode"><source><![CDATA[o = additiveOperator();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00a7" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00b5" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00c4" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00c9" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_additiveSubExpression_in_expression2109);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00d5" domain="userortestcode"><source><![CDATA[r = additiveSubExpression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00dc" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00ea" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00f9" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00fe" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            			    	]]></source>
</chunk>
<chunk hits="0" offset="0110" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	  
            			    	  		]]></source>
</chunk>
<chunk hits="0" offset="0111" domain="userortestcode"><source><![CDATA[value =  new Expression(value, o,
            			    	  			r);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	  	
            			    	]]></source>
</chunk>
<chunk hits="0" offset="011a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    
            			    ]]></source>
</chunk>
<chunk hits="0" offset="011b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    ]]></source>
</chunk>
<chunk hits="0" offset="011c" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            			default:
            			    ]]></source>
</chunk>
<chunk hits="4" offset="011e" domain="userortestcode"><source><![CDATA[goto loop54;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    }
            	]]></source>
</chunk>
<chunk hits="0" offset="0120" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0121" domain="userortestcode"><source><![CDATA[while (true);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	loop54:
            		;	// Stops C# compiler whinging that label 'loop54' has no statements

            
            ]]></source>
</chunk>
<chunk hits="4" offset="0129" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="4" offset="012a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="4" offset="012d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="012e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0131" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="4" offset="0137" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end expression

    
    // $ANTLR start additiveSubExpression
    // MacroScope\\MacroScope.g:472:1: additiveSubExpression returns [ IExpression value ] : e= subExpression (o= multiplicativeArithmeticOperator r= subExpression )* ;
    public IExpression additiveSubExpression() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="additiveSubExpression" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="600010d" module="MacroScope.dll"><hits><hit index="0" value="4"/>
<hit index="1" value="4"/>
<hit index="2" value="4"/>
<hit index="3" value="4"/>
<hit index="4" value="4"/>
<hit index="5" value="4"/>
<hit index="6" value="4"/>
<hit index="7" value="4"/>
<hit index="8" value="4"/>
<hit index="10" value="4"/>
<hit index="11" value="4"/>
<hit index="12" value="4"/>
<hit index="13" value="4"/>
<hit index="14" value="4"/>
<hit index="15" value="4"/>
<hit index="16" value="8"/>
<hit index="17" value="4"/>
<hit index="20" value="4"/>
<hit index="44" value="4"/>
<hit index="47" value="4"/>
<hit index="48" value="4"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="11" total="27" coveredRatio="0.40740740740740738"/>
</method>
<chunk hits="4" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="4" offset="0001" domain="userortestcode"><source><![CDATA[IExpression value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="4" offset="0003" domain="userortestcode"><source><![CDATA[IExpression e = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="4" offset="0005" domain="userortestcode"><source><![CDATA[ExpressionOperator o = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="4" offset="0007" domain="userortestcode"><source><![CDATA[IExpression r = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
    
        try 
    	]]></source>
</chunk>
<chunk hits="4" offset="0009" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:472:53: (e= subExpression (o= multiplicativeArithmeticOperator r= subExpression )* )
            // MacroScope\\MacroScope.g:473:2: e= subExpression (o= multiplicativeArithmeticOperator r= subExpression )*
            ]]></source>
</chunk>
<chunk hits="4" offset="000a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="4" offset="000b" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_subExpression_in_additiveSubExpression2134);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="4" offset="0017" domain="userortestcode"><source><![CDATA[e = subExpression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="4" offset="001e" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="8" offset="002c" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="003b" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="4" offset="0043" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="4" offset="0055" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	   ]]></source>
</chunk>
<chunk hits="4" offset="0056" domain="userortestcode"><source><![CDATA[value =  e;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="4" offset="0058" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	// MacroScope\\MacroScope.g:474:2: (o= multiplicativeArithmeticOperator r= subExpression )*
            	do 
            	]]></source>
</chunk>
<chunk hits="4" offset="0059" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="4" offset="005a" domain="userortestcode"><source><![CDATA[int alt55 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="4" offset="005d" domain="userortestcode"><source><![CDATA[int LA55_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	    ]]></source>
</chunk>
<chunk hits="12" offset="006b" domain="userortestcode"><source><![CDATA[if ( (LA55_0 == STAR || (LA55_0 >= DIVIDE && LA55_0 <= MOD)) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0089" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="008a" domain="userortestcode"><source><![CDATA[alt55 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="008d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	
            	    ]]></source>
</chunk>
<chunk hits="4" offset="008e" domain="userortestcode"><source><![CDATA[switch (alt55)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            		{
            			case 1 :
            			    // MacroScope\\MacroScope.g:474:4: o= multiplicativeArithmeticOperator r= subExpression
            			    ]]></source>
</chunk>
<chunk hits="0" offset="009c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="009d" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_multiplicativeArithmeticOperator_in_additiveSubExpression2145);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00a9" domain="userortestcode"><source><![CDATA[o = multiplicativeArithmeticOperator();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00b0" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00be" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00cd" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00d2" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_subExpression_in_additiveSubExpression2151);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00de" domain="userortestcode"><source><![CDATA[r = subExpression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00e5" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00f3" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0102" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="0107" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            			    	]]></source>
</chunk>
<chunk hits="0" offset="0119" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	  
            			    	  		]]></source>
</chunk>
<chunk hits="0" offset="011a" domain="userortestcode"><source><![CDATA[value =  new Expression(value, o,
            			    	  			r);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	  	
            			    	]]></source>
</chunk>
<chunk hits="0" offset="0123" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    
            			    ]]></source>
</chunk>
<chunk hits="0" offset="0124" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    ]]></source>
</chunk>
<chunk hits="0" offset="0125" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            			default:
            			    ]]></source>
</chunk>
<chunk hits="4" offset="0127" domain="userortestcode"><source><![CDATA[goto loop55;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    }
            	]]></source>
</chunk>
<chunk hits="0" offset="0129" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="012a" domain="userortestcode"><source><![CDATA[while (true);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	loop55:
            		;	// Stops C# compiler whinging that label 'loop55' has no statements

            
            ]]></source>
</chunk>
<chunk hits="4" offset="0132" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="4" offset="0133" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="4" offset="0136" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0137" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="013a" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="4" offset="0140" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end additiveSubExpression

    
    // $ANTLR start bracketedTerm
    // MacroScope\\MacroScope.g:480:1: bracketedTerm returns [ IExpression value ] : LPAREN ( ( selectStatement )=>s= selectStatement RPAREN | e= expression RPAREN ) ;
    public IExpression bracketedTerm() // throws RecognitionException [1]
    {   

        IExpression value = null;
    
        SelectStatement s = null;

        IExpression e = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:480:45: ( LPAREN ( ( selectStatement )=>s= selectStatement RPAREN | e= expression RPAREN ) )
            // MacroScope\\MacroScope.g:481:2: LPAREN ( ( selectStatement )=>s= selectStatement RPAREN | e= expression RPAREN )
            {
            	Match(input,LPAREN,FOLLOW_LPAREN_in_bracketedTerm2171); if (failed) return value;
            	// MacroScope\\MacroScope.g:481:9: ( ( selectStatement )=>s= selectStatement RPAREN | e= expression RPAREN )
            	int alt56 = 2;
            	int LA56_0 = input.LA(1);
            	
            	if ( (LA56_0 == SELECT) && (synpred8()) )
            	{
            	    alt56 = 1;
            	}
            	else if ( (LA56_0 == LPAREN) )
            	{
            	    int LA56_2 = input.LA(2);
            	    
            	    if ( (synpred8()) )
            	    {
            	        alt56 = 1;
            	    }
            	    else if ( (true) )
            	    {
            	        alt56 = 2;
            	    }
            	    else 
            	    {
            	        if ( backtracking > 0 ) {failed = true; return value;}
            	        NoViableAltException nvae_d56s2 =
            	            new NoViableAltException("481:9: ( ( selectStatement )=>s= selectStatement RPAREN | e= expression RPAREN )", 56, 2, input);
            	    
            	        throw nvae_d56s2;
            	    }
            	}
            	else if ( (LA56_0 == Integer || LA56_0 == NULL || (LA56_0 >= LEFT && LA56_0 <= RIGHT) || (LA56_0 >= PLACEHOLDER && LA56_0 <= SUBSTRING) || (LA56_0 >= EXTRACT && LA56_0 <= CASE) || LA56_0 == CAST || (LA56_0 >= UnicodeStringLiteral && LA56_0 <= MINUS)) )
            	{
            	    alt56 = 2;
            	}
            	else 
            	{
            	    if ( backtracking > 0 ) {failed = true; return value;}
            	    NoViableAltException nvae_d56s0 =
            	        new NoViableAltException("481:9: ( ( selectStatement )=>s= selectStatement RPAREN | e= expression RPAREN )", 56, 0, input);
            	
            	    throw nvae_d56s0;
            	}
            	switch (alt56) 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:481:11: ( selectStatement )=>s= selectStatement RPAREN
            	        {
            	        	PushFollow(FOLLOW_selectStatement_in_bracketedTerm2189);
            	        	s = selectStatement();
            	        	followingStackPointer_--;
            	        	if (failed) return value;
            	        	Match(input,RPAREN,FOLLOW_RPAREN_in_bracketedTerm2191); if (failed) return value;
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	  
            	        	  				value =  new BracketedExpression(s);
            	        	  				((BracketedExpression)value).Spaced = true;
            	        	  			
            	        	}
            	        
            	        }
            	        break;
            	    case 2 :
            	        // MacroScope\\MacroScope.g:486:5: e= expression RPAREN
            	        {
            	        	PushFollow(FOLLOW_expression_in_bracketedTerm2203);
            	        	e = expression();
            	        	followingStackPointer_--;
            	        	if (failed) return value;
            	        	Match(input,RPAREN,FOLLOW_RPAREN_in_bracketedTerm2205); if (failed) return value;
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	  
            	        	  			value =  e;
            	        	  		
            	        	}
            	        
            	        }
            	        break;
            	
            	}

            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end bracketedTerm

    
    // $ANTLR start subExpression
    // MacroScope\\MacroScope.g:491:1: subExpression returns [ IExpression value ] : (o= unaryOperator )? (c= constant | v= variableReference | PLACEHOLDER | ( function )=>f= function | e= bracketedTerm | d= dbObject | p= caseFunction | q= castFunction ) ;
    public IExpression subExpression() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="subExpression" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="600010f" module="MacroScope.dll"><hits><hit index="0" value="4"/>
<hit index="1" value="4"/>
<hit index="2" value="4"/>
<hit index="3" value="4"/>
<hit index="4" value="4"/>
<hit index="5" value="8"/>
<hit index="8" value="4"/>
<hit index="28" value="4"/>
<hit index="29" value="4"/>
<hit index="30" value="4"/>
<hit index="31" value="4"/>
<hit index="32" value="8"/>
<hit index="33" value="2"/>
<hit index="34" value="2"/>
<hit index="35" value="1"/>
<hit index="38" value="3"/>
<hit index="49" value="1"/>
<hit index="50" value="1"/>
<hit index="51" value="1"/>
<hit index="52" value="1"/>
<hit index="53" value="1"/>
<hit index="54" value="2"/>
<hit index="59" value="1"/>
<hit index="60" value="1"/>
<hit index="61" value="1"/>
<hit index="80" value="1"/>
<hit index="112" value="3"/>
<hit index="113" value="3"/>
<hit index="114" value="3"/>
<hit index="115" value="3"/>
<hit index="116" value="3"/>
<hit index="117" value="3"/>
<hit index="118" value="3"/>
<hit index="119" value="3"/>
<hit index="121" value="3"/>
<hit index="122" value="3"/>
<hit index="123" value="3"/>
<hit index="124" value="3"/>
<hit index="126" value="3"/>
<hit index="127" value="3"/>
<hit index="128" value="3"/>
<hit index="129" value="3"/>
<hit index="130" value="3"/>
<hit index="131" value="6"/>
<hit index="209" value="1"/>
<hit index="210" value="1"/>
<hit index="211" value="1"/>
<hit index="212" value="1"/>
<hit index="213" value="1"/>
<hit index="214" value="1"/>
<hit index="215" value="1"/>
<hit index="216" value="1"/>
<hit index="218" value="1"/>
<hit index="219" value="1"/>
<hit index="220" value="1"/>
<hit index="221" value="1"/>
<hit index="223" value="1"/>
<hit index="224" value="1"/>
<hit index="225" value="1"/>
<hit index="226" value="1"/>
<hit index="227" value="1"/>
<hit index="228" value="2"/>
<hit index="266" value="4"/>
<hit index="267" value="4"/>
<hit index="271" value="2"/>
<hit index="273" value="1"/>
<hit index="274" value="1"/>
<hit index="275" value="1"/>
<hit index="276" value="1"/>
<hit index="277" value="1"/>
<hit index="278" value="1"/>
<hit index="279" value="1"/>
<hit index="280" value="1"/>
<hit index="281" value="1"/>
<hit index="282" value="1"/>
<hit index="284" value="1"/>
<hit index="285" value="1"/>
<hit index="289" value="1"/>
<hit index="318" value="3"/>
<hit index="323" value="1"/>
<hit index="326" value="3"/>
<hit index="341" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="49" total="184" coveredRatio="0.266304347826087"/>
</method>
<chunk hits="4" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="4" offset="0001" domain="userortestcode"><source><![CDATA[IExpression value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="4" offset="0003" domain="userortestcode"><source><![CDATA[ExpressionOperator o = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="4" offset="0005" domain="userortestcode"><source><![CDATA[INode c = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="4" offset="0007" domain="userortestcode"><source><![CDATA[Variable v = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="4" offset="0009" domain="userortestcode"><source><![CDATA[IExpression f = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="4" offset="000c" domain="userortestcode"><source><![CDATA[IExpression e = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="4" offset="000f" domain="userortestcode"><source><![CDATA[DbObject d = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="4" offset="0012" domain="userortestcode"><source><![CDATA[CaseExpression p = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="4" offset="0015" domain="userortestcode"><source><![CDATA[TypeCast q = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
    
        try 
    	]]></source>
</chunk>
<chunk hits="4" offset="0018" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:491:45: ( (o= unaryOperator )? (c= constant | v= variableReference | PLACEHOLDER | ( function )=>f= function | e= bracketedTerm | d= dbObject | p= caseFunction | q= castFunction ) )
            // MacroScope\\MacroScope.g:492:2: (o= unaryOperator )? (c= constant | v= variableReference | PLACEHOLDER | ( function )=>f= function | e= bracketedTerm | d= dbObject | p= caseFunction | q= castFunction )
            ]]></source>
</chunk>
<chunk hits="4" offset="0019" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	// MacroScope\\MacroScope.g:492:2: (o= unaryOperator )?
            	]]></source>
</chunk>
<chunk hits="4" offset="001a" domain="userortestcode"><source><![CDATA[int alt57 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="4" offset="001d" domain="userortestcode"><source><![CDATA[int LA57_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	]]></source>
</chunk>
<chunk hits="12" offset="002b" domain="userortestcode"><source><![CDATA[if ( ((LA57_0 >= PLUS && LA57_0 <= MINUS)) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="0040" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0041" domain="userortestcode"><source><![CDATA[alt57 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="0044" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="4" offset="0045" domain="userortestcode"><source><![CDATA[switch (alt57)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:492:4: o= unaryOperator
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0050" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0051" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_unaryOperator_in_subExpression2230);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="005d" domain="userortestcode"><source><![CDATA[o = unaryOperator();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0064" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0072" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0081" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0089" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="0" offset="009b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  
            	        	  		]]></source>
</chunk>
<chunk hits="0" offset="009c" domain="userortestcode"><source><![CDATA[value =  new Expression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  		]]></source>
</chunk>
<chunk hits="0" offset="00a2" domain="userortestcode"><source><![CDATA[((Expression)value).Operator = o;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  	
            	        	]]></source>
</chunk>
<chunk hits="0" offset="00af" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        
            	        ]]></source>
</chunk>
<chunk hits="0" offset="00b0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="00b1" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	}

            	// MacroScope\\MacroScope.g:495:7: (c= constant | v= variableReference | PLACEHOLDER | ( function )=>f= function | e= bracketedTerm | d= dbObject | p= caseFunction | q= castFunction )
            	]]></source>
</chunk>
<chunk hits="4" offset="00b3" domain="userortestcode"><source><![CDATA[int alt58 = 8;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="4" offset="00b6" domain="userortestcode"><source><![CDATA[int LA58_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	]]></source>
</chunk>
<chunk hits="12" offset="00c4" domain="userortestcode"><source><![CDATA[if ( (LA58_0 == Integer || LA58_0 == NULL || (LA58_0 >= UnicodeStringLiteral && LA58_0 <= AsciiStringLiteral) || (LA58_0 >= Real && LA58_0 <= INTERVAL)) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="3" offset="00f4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="3" offset="00f5" domain="userortestcode"><source><![CDATA[alt58 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="3" offset="00f8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	else ]]></source>
</chunk>
<chunk hits="1" offset="00fe" domain="userortestcode"><source><![CDATA[if ( (LA58_0 == Variable) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="010d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="010e" domain="userortestcode"><source><![CDATA[alt58 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="0111" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	else ]]></source>
</chunk>
<chunk hits="1" offset="0117" domain="userortestcode"><source><![CDATA[if ( (LA58_0 == PLACEHOLDER) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="0126" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0127" domain="userortestcode"><source><![CDATA[alt58 = 3;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="012a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	else ]]></source>
</chunk>
<chunk hits="1" offset="0130" domain="userortestcode"><source><![CDATA[if ( (LA58_0 == SUBSTRING) && (synpred9()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="0148" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0149" domain="userortestcode"><source><![CDATA[alt58 = 4;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="014c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	else ]]></source>
</chunk>
<chunk hits="1" offset="0152" domain="userortestcode"><source><![CDATA[if ( (LA58_0 == EXTRACT) && (synpred9()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="016a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="016b" domain="userortestcode"><source><![CDATA[alt58 = 4;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="016e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	else ]]></source>
</chunk>
<chunk hits="1" offset="0174" domain="userortestcode"><source><![CDATA[if ( (LA58_0 == NonQuotedIdentifier) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="1" offset="0186" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="1" offset="0187" domain="userortestcode"><source><![CDATA[int LA58_6 = input.LA(2);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	    ]]></source>
</chunk>
<chunk hits="3" offset="0195" domain="userortestcode"><source><![CDATA[if ( (LA58_6 == LPAREN) && (synpred9()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="01ac" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="01ad" domain="userortestcode"><source><![CDATA[alt58 = 4;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="01b0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    else ]]></source>
</chunk>
<chunk hits="1" offset="01b6" domain="userortestcode"><source><![CDATA[if ( (LA58_6 == EOF || LA58_6 == RPAREN || (LA58_6 >= FROM && LA58_6 <= ASSIGNEQUAL) || (LA58_6 >= WHERE && LA58_6 <= ORDER) || (LA58_6 >= ASC && LA58_6 <= IS) || (LA58_6 >= LIKE && LA58_6 <= IN) || (LA58_6 >= STAR && LA58_6 <= FULL) || (LA58_6 >= JOIN && LA58_6 <= AS) || LA58_6 == FOR || LA58_6 == NonQuotedIdentifier || (LA58_6 >= WHEN && LA58_6 <= END) || LA58_6 == DOT || LA58_6 == QuotedIdentifier || (LA58_6 >= PLUS && LA58_6 <= UNION)) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="1" offset="0247" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="1" offset="0248" domain="userortestcode"><source><![CDATA[alt58 = 6;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="1" offset="024b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    else 
            	    ]]></source>
</chunk>
<chunk hits="0" offset="024e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="024f" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0261" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="0262" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0269" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0271" domain="userortestcode"><source><![CDATA[NoViableAltException nvae_d58s6 =
            	            new NoViableAltException("495:7: (c= constant | v= variableReference | PLACEHOLDER | ( function )=>f= function | e= bracketedTerm | d= dbObject | p= caseFunction | q= castFunction )", 58, 6, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0286" domain="userortestcode"><source><![CDATA[throw nvae_d58s6;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    }
            	]]></source>
</chunk>
<chunk hits="1" offset="0289" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	else ]]></source>
</chunk>
<chunk hits="0" offset="028f" domain="userortestcode"><source><![CDATA[if ( (LA58_0 == LEFT) && (synpred9()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="02a7" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="02a8" domain="userortestcode"><source><![CDATA[alt58 = 4;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="02ab" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	else ]]></source>
</chunk>
<chunk hits="0" offset="02b1" domain="userortestcode"><source><![CDATA[if ( (LA58_0 == RIGHT) && (synpred9()) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="02c9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="02ca" domain="userortestcode"><source><![CDATA[alt58 = 4;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="02cd" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	else ]]></source>
</chunk>
<chunk hits="0" offset="02d3" domain="userortestcode"><source><![CDATA[if ( (LA58_0 == LPAREN) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="02e1" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="02e2" domain="userortestcode"><source><![CDATA[alt58 = 5;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="02e5" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	else ]]></source>
</chunk>
<chunk hits="0" offset="02e8" domain="userortestcode"><source><![CDATA[if ( (LA58_0 == QuotedIdentifier) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="02f7" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="02f8" domain="userortestcode"><source><![CDATA[alt58 = 6;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="02fb" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	else ]]></source>
</chunk>
<chunk hits="0" offset="02fe" domain="userortestcode"><source><![CDATA[if ( (LA58_0 == CASE) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="030d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="030e" domain="userortestcode"><source><![CDATA[alt58 = 7;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="0311" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	else ]]></source>
</chunk>
<chunk hits="0" offset="0314" domain="userortestcode"><source><![CDATA[if ( (LA58_0 == CAST) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="0323" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0324" domain="userortestcode"><source><![CDATA[alt58 = 8;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="0" offset="0327" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	else 
            	]]></source>
</chunk>
<chunk hits="0" offset="032a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="032b" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="033d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="033e" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0345" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
            	    ]]></source>
</chunk>
<chunk hits="0" offset="034d" domain="userortestcode"><source><![CDATA[NoViableAltException nvae_d58s0 =
            	        new NoViableAltException("495:7: (c= constant | v= variableReference | PLACEHOLDER | ( function )=>f= function | e= bracketedTerm | d= dbObject | p= caseFunction | q= castFunction )", 58, 0, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0362" domain="userortestcode"><source><![CDATA[throw nvae_d58s0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	}
            	]]></source>
</chunk>
<chunk hits="4" offset="0365" domain="userortestcode"><source><![CDATA[switch (alt58)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:496:3: c= constant
            	        ]]></source>
</chunk>
<chunk hits="3" offset="0397" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="3" offset="0398" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_constant_in_subExpression2245);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="3" offset="03a4" domain="userortestcode"><source><![CDATA[c = constant();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="3" offset="03ab" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="6" offset="03b9" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="03c8" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="3" offset="03d0" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="3" offset="03e2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  
            	        	  			]]></source>
</chunk>
<chunk hits="3" offset="03e3" domain="userortestcode"><source><![CDATA[if (value == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  			]]></source>
</chunk>
<chunk hits="3" offset="03f0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  				]]></source>
</chunk>
<chunk hits="3" offset="03f1" domain="userortestcode"><source><![CDATA[value =  new Expression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  			]]></source>
</chunk>
<chunk hits="3" offset="03f7" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  
            	        	  			]]></source>
</chunk>
<chunk hits="3" offset="03f8" domain="userortestcode"><source><![CDATA[((Expression)value).Right = c;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  		
            	        	]]></source>
</chunk>
<chunk hits="9" offset="0405" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        
            	        ]]></source>
</chunk>
<chunk hits="9" offset="0406" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="9" offset="0407" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    case 2 :
            	        // MacroScope\\MacroScope.g:504:5: v= variableReference
            	        ]]></source>
</chunk>
<chunk hits="0" offset="040c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="040d" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_variableReference_in_subExpression2257);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0419" domain="userortestcode"><source><![CDATA[v = variableReference();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0420" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="042e" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="043d" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0445" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0457" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  
            	        	  			]]></source>
</chunk>
<chunk hits="0" offset="0458" domain="userortestcode"><source><![CDATA[if (value == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  			]]></source>
</chunk>
<chunk hits="0" offset="0465" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="0466" domain="userortestcode"><source><![CDATA[value =  new Expression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  			]]></source>
</chunk>
<chunk hits="0" offset="046c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  
            	        	  			]]></source>
</chunk>
<chunk hits="0" offset="046d" domain="userortestcode"><source><![CDATA[((Expression)value).Right = v;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  		
            	        	]]></source>
</chunk>
<chunk hits="0" offset="047a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        
            	        ]]></source>
</chunk>
<chunk hits="0" offset="047b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="047c" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    case 3 :
            	        // MacroScope\\MacroScope.g:512:5: PLACEHOLDER
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0481" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0482" domain="userortestcode"><source><![CDATA[Match(input,PLACEHOLDER,FOLLOW_PLACEHOLDER_in_subExpression2265);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0496" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="04a5" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="04ad" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="0" offset="04bf" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  
            	        	  			]]></source>
</chunk>
<chunk hits="0" offset="04c0" domain="userortestcode"><source><![CDATA[if (value == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  			]]></source>
</chunk>
<chunk hits="0" offset="04cd" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="04ce" domain="userortestcode"><source><![CDATA[value =  new Expression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  			]]></source>
</chunk>
<chunk hits="0" offset="04d4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  
            	        	  			]]></source>
</chunk>
<chunk hits="0" offset="04d5" domain="userortestcode"><source><![CDATA[((Expression)value).Right = Placeholder.Value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  		
            	        	]]></source>
</chunk>
<chunk hits="0" offset="04e6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        
            	        ]]></source>
</chunk>
<chunk hits="0" offset="04e7" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="04e8" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    case 4 :
            	        // MacroScope\\MacroScope.g:520:5: ( function )=>f= function
            	        ]]></source>
</chunk>
<chunk hits="0" offset="04ed" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="04ee" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_function_in_subExpression2286);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="04fa" domain="userortestcode"><source><![CDATA[f = function();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0502" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0510" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="051f" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0527" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0539" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="053a" domain="userortestcode"><source><![CDATA[if (value == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="0547" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  					// Oracle tailor wanting to replace
            	        	  					// a datetime function will
            	        	  					// appreciate an Expression parent
            	        	  					]]></source>
</chunk>
<chunk hits="0" offset="0548" domain="userortestcode"><source><![CDATA[value =  new Expression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="054e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="054f" domain="userortestcode"><source><![CDATA[((Expression)value).Right = f;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  			
            	        	]]></source>
</chunk>
<chunk hits="0" offset="055d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        
            	        ]]></source>
</chunk>
<chunk hits="0" offset="055e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="055f" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    case 5 :
            	        // MacroScope\\MacroScope.g:532:5: e= bracketedTerm
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0564" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0565" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_bracketedTerm_in_subExpression2298);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0571" domain="userortestcode"><source><![CDATA[e = bracketedTerm();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0579" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0587" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0596" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="059e" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="0" offset="05b0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  
            	        	  			]]></source>
</chunk>
<chunk hits="0" offset="05b1" domain="userortestcode"><source><![CDATA[if (value == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  			]]></source>
</chunk>
<chunk hits="0" offset="05be" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="05bf" domain="userortestcode"><source><![CDATA[value =  e;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  			]]></source>
</chunk>
<chunk hits="0" offset="05c2" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  			else
            	        	  			]]></source>
</chunk>
<chunk hits="0" offset="05c5" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="05c6" domain="userortestcode"><source><![CDATA[((Expression)value).Right = e;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  			]]></source>
</chunk>
<chunk hits="0" offset="05d4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  		
            	        	]]></source>
</chunk>
<chunk hits="0" offset="05d5" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        
            	        ]]></source>
</chunk>
<chunk hits="0" offset="05d6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="05d7" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    case 6 :
            	        // MacroScope\\MacroScope.g:542:5: d= dbObject
            	        ]]></source>
</chunk>
<chunk hits="1" offset="05dc" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="1" offset="05dd" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_dbObject_in_subExpression2310);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="1" offset="05e9" domain="userortestcode"><source><![CDATA[d = dbObject();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="1" offset="05f1" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="2" offset="05ff" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="060e" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="1" offset="0616" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="1" offset="0628" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  
            	        	  			]]></source>
</chunk>
<chunk hits="1" offset="0629" domain="userortestcode"><source><![CDATA[if (value == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  			]]></source>
</chunk>
<chunk hits="1" offset="0636" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  				]]></source>
</chunk>
<chunk hits="1" offset="0637" domain="userortestcode"><source><![CDATA[value =  new Expression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  			]]></source>
</chunk>
<chunk hits="1" offset="063d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  
            	        	  			]]></source>
</chunk>
<chunk hits="1" offset="063e" domain="userortestcode"><source><![CDATA[((Expression)value).Right = d;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  		
            	        	]]></source>
</chunk>
<chunk hits="3" offset="064c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        
            	        ]]></source>
</chunk>
<chunk hits="3" offset="064d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="3" offset="064e" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    case 7 :
            	        // MacroScope\\MacroScope.g:552:5: p= caseFunction
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0653" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0654" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_caseFunction_in_subExpression2356);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0660" domain="userortestcode"><source><![CDATA[p = caseFunction();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0668" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0676" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0685" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="068d" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="0" offset="069f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="06a0" domain="userortestcode"><source><![CDATA[if (value == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="06ad" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  					// tailors wanting to replace this
            	        	  					// object will appreciate
            	        	  					// an Expression parent
            	        	  					]]></source>
</chunk>
<chunk hits="0" offset="06ae" domain="userortestcode"><source><![CDATA[value =  new Expression();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="06b4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="06b5" domain="userortestcode"><source><![CDATA[((Expression)value).Right = p;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  			
            	        	]]></source>
</chunk>
<chunk hits="0" offset="06c3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        
            	        ]]></source>
</chunk>
<chunk hits="0" offset="06c4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="06c5" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    case 8 :
            	        // MacroScope\\MacroScope.g:563:5: q= castFunction
            	        ]]></source>
</chunk>
<chunk hits="0" offset="06c7" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="06c8" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_castFunction_in_subExpression2368);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="06d4" domain="userortestcode"><source><![CDATA[q = castFunction();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="06dc" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="06ea" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="06f9" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	]]></source>
</chunk>
<chunk hits="0" offset="06fe" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0710" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="0711" domain="userortestcode"><source><![CDATA[if (value == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="071e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  					]]></source>
</chunk>
<chunk hits="0" offset="071f" domain="userortestcode"><source><![CDATA[value =  q;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="0722" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  				else
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="0725" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  					]]></source>
</chunk>
<chunk hits="0" offset="0726" domain="userortestcode"><source><![CDATA[((Expression)value).Right = q;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  				]]></source>
</chunk>
<chunk hits="0" offset="0734" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        	  			
            	        	]]></source>
</chunk>
<chunk hits="0" offset="0735" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0736" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0737" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	}

            
            ]]></source>
</chunk>
<chunk hits="12" offset="0739" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="12" offset="073a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="12" offset="073d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="12" offset="073e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="12" offset="0741" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="12" offset="0747" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end subExpression

    
    // $ANTLR start variableReference
    // MacroScope\\MacroScope.g:576:1: variableReference returns [ Variable value ] : Variable ;
    public Variable variableReference() // throws RecognitionException [1]
    {   

        Variable value = null;
    
        IToken Variable2 = null;
    
        try 
    	{
            // MacroScope\\MacroScope.g:576:46: ( Variable )
            // MacroScope\\MacroScope.g:577:2: Variable
            {
            	Variable2 = (IToken)input.LT(1);
            	Match(input,Variable,FOLLOW_Variable_in_variableReference2387); if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	   value =  new Variable(Variable2.Text); 
            	}
            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end variableReference

    
    // $ANTLR start function
    // MacroScope\\MacroScope.g:581:1: function returns [ IExpression value ] : ( SUBSTRING LPAREN v= expression FROM s= expression ( FOR l= expression )? RPAREN | EXTRACT LPAREN d= datetimeField FROM s= expression RPAREN | f= genericFunction );
    public IExpression function() // throws RecognitionException [1]
    {   

        IExpression value = null;
    
        IExpression v = null;

        IExpression s = null;

        IExpression l = null;

        DateTimeUnit d = null;

        FunctionCall f = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:581:40: ( SUBSTRING LPAREN v= expression FROM s= expression ( FOR l= expression )? RPAREN | EXTRACT LPAREN d= datetimeField FROM s= expression RPAREN | f= genericFunction )
            int alt60 = 3;
            switch ( input.LA(1) ) 
            {
            case SUBSTRING:
            	{
                alt60 = 1;
                }
                break;
            case EXTRACT:
            	{
                alt60 = 2;
                }
                break;
            case LEFT:
            case RIGHT:
            case NonQuotedIdentifier:
            	{
                alt60 = 3;
                }
                break;
            	default:
            	    if ( backtracking > 0 ) {failed = true; return value;}
            	    NoViableAltException nvae_d60s0 =
            	        new NoViableAltException("581:1: function returns [ IExpression value ] : ( SUBSTRING LPAREN v= expression FROM s= expression ( FOR l= expression )? RPAREN | EXTRACT LPAREN d= datetimeField FROM s= expression RPAREN | f= genericFunction );", 60, 0, input);
            
            	    throw nvae_d60s0;
            }
            
            switch (alt60) 
            {
                case 1 :
                    // MacroScope\\MacroScope.g:582:2: SUBSTRING LPAREN v= expression FROM s= expression ( FOR l= expression )? RPAREN
                    {
                    	Match(input,SUBSTRING,FOLLOW_SUBSTRING_in_function2405); if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	  
                    	  		value =  new FunctionCall(TailorUtil.SUBSTRING);
                    	  	
                    	}
                    	Match(input,LPAREN,FOLLOW_LPAREN_in_function2409); if (failed) return value;
                    	PushFollow(FOLLOW_expression_in_function2415);
                    	v = expression();
                    	followingStackPointer_--;
                    	if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	  
                    	   			((FunctionCall)value).ExpressionArguments =
                    	  				new ExpressionItem(v);
                    	  		
                    	}
                    	Match(input,FROM,FOLLOW_FROM_in_function2419); if (failed) return value;
                    	PushFollow(FOLLOW_expression_in_function2425);
                    	s = expression();
                    	followingStackPointer_--;
                    	if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	  
                    	  			((FunctionCall)value).ExpressionArguments.Add(
                    	  				new ExpressionItem(s));
                    	  		
                    	}
                    	// MacroScope\\MacroScope.g:590:5: ( FOR l= expression )?
                    	int alt59 = 2;
                    	int LA59_0 = input.LA(1);
                    	
                    	if ( (LA59_0 == FOR) )
                    	{
                    	    alt59 = 1;
                    	}
                    	switch (alt59) 
                    	{
                    	    case 1 :
                    	        // MacroScope\\MacroScope.g:590:7: FOR l= expression
                    	        {
                    	        	Match(input,FOR,FOLLOW_FOR_in_function2431); if (failed) return value;
                    	        	PushFollow(FOLLOW_expression_in_function2437);
                    	        	l = expression();
                    	        	followingStackPointer_--;
                    	        	if (failed) return value;
                    	        	if ( backtracking == 0 ) 
                    	        	{
                    	        	  
                    	        	  				((FunctionCall)value).ExpressionArguments.Add(new ExpressionItem(l));
                    	        	  			
                    	        	}
                    	        
                    	        }
                    	        break;
                    	
                    	}

                    	Match(input,RPAREN,FOLLOW_RPAREN_in_function2444); if (failed) return value;
                    
                    }
                    break;
                case 2 :
                    // MacroScope\\MacroScope.g:593:4: EXTRACT LPAREN d= datetimeField FROM s= expression RPAREN
                    {
                    	Match(input,EXTRACT,FOLLOW_EXTRACT_in_function2449); if (failed) return value;
                    	Match(input,LPAREN,FOLLOW_LPAREN_in_function2451); if (failed) return value;
                    	PushFollow(FOLLOW_datetimeField_in_function2457);
                    	d = datetimeField();
                    	followingStackPointer_--;
                    	if (failed) return value;
                    	Match(input,FROM,FOLLOW_FROM_in_function2459); if (failed) return value;
                    	PushFollow(FOLLOW_expression_in_function2465);
                    	s = expression();
                    	followingStackPointer_--;
                    	if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	  
                    	  			value =  new ExtractFunction(d, s);
                    	  		
                    	}
                    	Match(input,RPAREN,FOLLOW_RPAREN_in_function2469); if (failed) return value;
                    
                    }
                    break;
                case 3 :
                    // MacroScope\\MacroScope.g:596:4: f= genericFunction
                    {
                    	PushFollow(FOLLOW_genericFunction_in_function2478);
                    	f = genericFunction();
                    	followingStackPointer_--;
                    	if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	  
                    	  		value =  f;
                    	  	
                    	}
                    
                    }
                    break;
            
            }
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end function

    
    // $ANTLR start genericFunction
    // MacroScope\\MacroScope.g:601:1: genericFunction returns [ FunctionCall value ] : ( NonQuotedIdentifier | LEFT | RIGHT ) LPAREN (e= functionArgument ( COMMA e= functionArgument )* | STAR | ( ALL | DISTINCT ) ( STAR | e= expression ) )? RPAREN ;
    public FunctionCall genericFunction() // throws RecognitionException [1]
    {   

        FunctionCall value = null;
    
        IToken NonQuotedIdentifier3 = null;
        IExpression e = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:601:48: ( ( NonQuotedIdentifier | LEFT | RIGHT ) LPAREN (e= functionArgument ( COMMA e= functionArgument )* | STAR | ( ALL | DISTINCT ) ( STAR | e= expression ) )? RPAREN )
            // MacroScope\\MacroScope.g:603:2: ( NonQuotedIdentifier | LEFT | RIGHT ) LPAREN (e= functionArgument ( COMMA e= functionArgument )* | STAR | ( ALL | DISTINCT ) ( STAR | e= expression ) )? RPAREN
            {
            	// MacroScope\\MacroScope.g:603:2: ( NonQuotedIdentifier | LEFT | RIGHT )
            	int alt61 = 3;
            	switch ( input.LA(1) ) 
            	{
            	case NonQuotedIdentifier:
            		{
            	    alt61 = 1;
            	    }
            	    break;
            	case LEFT:
            		{
            	    alt61 = 2;
            	    }
            	    break;
            	case RIGHT:
            		{
            	    alt61 = 3;
            	    }
            	    break;
            		default:
            		    if ( backtracking > 0 ) {failed = true; return value;}
            		    NoViableAltException nvae_d61s0 =
            		        new NoViableAltException("603:2: ( NonQuotedIdentifier | LEFT | RIGHT )", 61, 0, input);
            	
            		    throw nvae_d61s0;
            	}
            	
            	switch (alt61) 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:606:3: NonQuotedIdentifier
            	        {
            	        	NonQuotedIdentifier3 = (IToken)input.LT(1);
            	        	Match(input,NonQuotedIdentifier,FOLLOW_NonQuotedIdentifier_in_genericFunction2507); if (failed) return value;
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	  
            	        	  			value =  new FunctionCall(NonQuotedIdentifier3.Text);
            	        	  		
            	        	}
            	        
            	        }
            	        break;
            	    case 2 :
            	        // MacroScope\\MacroScope.g:609:5: LEFT
            	        {
            	        	Match(input,LEFT,FOLLOW_LEFT_in_genericFunction2515); if (failed) return value;
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	  
            	        	  			value =  new FunctionCall(
            	        	  				TailorUtil.LEFT.ToUpper());
            	        	  		
            	        	}
            	        
            	        }
            	        break;
            	    case 3 :
            	        // MacroScope\\MacroScope.g:613:5: RIGHT
            	        {
            	        	Match(input,RIGHT,FOLLOW_RIGHT_in_genericFunction2523); if (failed) return value;
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	  
            	        	  			value =  new FunctionCall(
            	        	  				TailorUtil.RIGHT.ToUpper());
            	        	  		
            	        	}
            	        
            	        }
            	        break;
            	
            	}

            	Match(input,LPAREN,FOLLOW_LPAREN_in_genericFunction2530); if (failed) return value;
            	// MacroScope\\MacroScope.g:617:11: (e= functionArgument ( COMMA e= functionArgument )* | STAR | ( ALL | DISTINCT ) ( STAR | e= expression ) )?
            	int alt65 = 4;
            	switch ( input.LA(1) ) 
            	{
            	    case LPAREN:
            	    case Integer:
            	    case NULL:
            	    case LEFT:
            	    case RIGHT:
            	    case PLACEHOLDER:
            	    case Variable:
            	    case SUBSTRING:
            	    case EXTRACT:
            	    case NonQuotedIdentifier:
            	    case CASE:
            	    case CAST:
            	    case UnicodeStringLiteral:
            	    case AsciiStringLiteral:
            	    case QuotedIdentifier:
            	    case Real:
            	    case HexLiteral:
            	    case MAccessDateTime:
            	    case Iso8601DateTime:
            	    case INTERVAL:
            	    case PLUS:
            	    case MINUS:
            	    case YEAR:
            	    case MONTH:
            	    case DAY:
            	    case HOUR:
            	    case MINUTE:
            	    case SECOND:
            	    	{
            	        alt65 = 1;
            	        }
            	        break;
            	    case STAR:
            	    	{
            	        alt65 = 2;
            	        }
            	        break;
            	    case ALL:
            	    case DISTINCT:
            	    	{
            	        alt65 = 3;
            	        }
            	        break;
            	}
            	
            	switch (alt65) 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:618:3: e= functionArgument ( COMMA e= functionArgument )*
            	        {
            	        	PushFollow(FOLLOW_functionArgument_in_genericFunction2540);
            	        	e = functionArgument();
            	        	followingStackPointer_--;
            	        	if (failed) return value;
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	  
            	        	   			value.ExpressionArguments =
            	        	  				new ExpressionItem(e);
            	        	  		
            	        	}
            	        	// MacroScope\\MacroScope.g:622:4: ( COMMA e= functionArgument )*
            	        	do 
            	        	{
            	        	    int alt62 = 2;
            	        	    int LA62_0 = input.LA(1);
            	        	    
            	        	    if ( (LA62_0 == COMMA) )
            	        	    {
            	        	        alt62 = 1;
            	        	    }
            	        	    
            	        	
            	        	    switch (alt62) 
            	        		{
            	        			case 1 :
            	        			    // MacroScope\\MacroScope.g:622:6: COMMA e= functionArgument
            	        			    {
            	        			    	Match(input,COMMA,FOLLOW_COMMA_in_genericFunction2549); if (failed) return value;
            	        			    	PushFollow(FOLLOW_functionArgument_in_genericFunction2555);
            	        			    	e = functionArgument();
            	        			    	followingStackPointer_--;
            	        			    	if (failed) return value;
            	        			    	if ( backtracking == 0 ) 
            	        			    	{
            	        			    	  
            	        			    	  				value.ExpressionArguments.Add(
            	        			    	  					new ExpressionItem(e));
            	        			    	  			
            	        			    	}
            	        			    
            	        			    }
            	        			    break;
            	        	
            	        			default:
            	        			    goto loop62;
            	        	    }
            	        	} while (true);
            	        	
            	        	loop62:
            	        		;	// Stops C# compiler whinging that label 'loop62' has no statements

            	        
            	        }
            	        break;
            	    case 2 :
            	        // MacroScope\\MacroScope.g:628:5: STAR
            	        {
            	        	Match(input,STAR,FOLLOW_STAR_in_genericFunction2572); if (failed) return value;
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	   value.Star = Wildcard.Value; 
            	        	}
            	        
            	        }
            	        break;
            	    case 3 :
            	        // MacroScope\\MacroScope.g:629:12: ( ALL | DISTINCT ) ( STAR | e= expression )
            	        {
            	        	// MacroScope\\MacroScope.g:629:12: ( ALL | DISTINCT )
            	        	int alt63 = 2;
            	        	int LA63_0 = input.LA(1);
            	        	
            	        	if ( (LA63_0 == ALL) )
            	        	{
            	        	    alt63 = 1;
            	        	}
            	        	else if ( (LA63_0 == DISTINCT) )
            	        	{
            	        	    alt63 = 2;
            	        	}
            	        	else 
            	        	{
            	        	    if ( backtracking > 0 ) {failed = true; return value;}
            	        	    NoViableAltException nvae_d63s0 =
            	        	        new NoViableAltException("629:12: ( ALL | DISTINCT )", 63, 0, input);
            	        	
            	        	    throw nvae_d63s0;
            	        	}
            	        	switch (alt63) 
            	        	{
            	        	    case 1 :
            	        	        // MacroScope\\MacroScope.g:629:13: ALL
            	        	        {
            	        	        	Match(input,ALL,FOLLOW_ALL_in_genericFunction2588); if (failed) return value;
            	        	        
            	        	        }
            	        	        break;
            	        	    case 2 :
            	        	        // MacroScope\\MacroScope.g:629:19: DISTINCT
            	        	        {
            	        	        	Match(input,DISTINCT,FOLLOW_DISTINCT_in_genericFunction2592); if (failed) return value;
            	        	        	if ( backtracking == 0 ) 
            	        	        	{
            	        	        	   value.Distinct = true; 
            	        	        	}
            	        	        
            	        	        }
            	        	        break;
            	        	
            	        	}

            	        	// MacroScope\\MacroScope.g:629:58: ( STAR | e= expression )
            	        	int alt64 = 2;
            	        	int LA64_0 = input.LA(1);
            	        	
            	        	if ( (LA64_0 == STAR) )
            	        	{
            	        	    alt64 = 1;
            	        	}
            	        	else if ( (LA64_0 == LPAREN || LA64_0 == Integer || LA64_0 == NULL || (LA64_0 >= LEFT && LA64_0 <= RIGHT) || (LA64_0 >= PLACEHOLDER && LA64_0 <= SUBSTRING) || (LA64_0 >= EXTRACT && LA64_0 <= CASE) || LA64_0 == CAST || (LA64_0 >= UnicodeStringLiteral && LA64_0 <= MINUS)) )
            	        	{
            	        	    alt64 = 2;
            	        	}
            	        	else 
            	        	{
            	        	    if ( backtracking > 0 ) {failed = true; return value;}
            	        	    NoViableAltException nvae_d64s0 =
            	        	        new NoViableAltException("629:58: ( STAR | e= expression )", 64, 0, input);
            	        	
            	        	    throw nvae_d64s0;
            	        	}
            	        	switch (alt64) 
            	        	{
            	        	    case 1 :
            	        	        // MacroScope\\MacroScope.g:630:4: STAR
            	        	        {
            	        	        	Match(input,STAR,FOLLOW_STAR_in_genericFunction2603); if (failed) return value;
            	        	        	if ( backtracking == 0 ) 
            	        	        	{
            	        	        	   value.Star = Wildcard.Value;
            	        	        	  			
            	        	        	}
            	        	        
            	        	        }
            	        	        break;
            	        	    case 2 :
            	        	        // MacroScope\\MacroScope.g:633:6: e= expression
            	        	        {
            	        	        	PushFollow(FOLLOW_expression_in_genericFunction2620);
            	        	        	e = expression();
            	        	        	followingStackPointer_--;
            	        	        	if (failed) return value;
            	        	        	if ( backtracking == 0 ) 
            	        	        	{
            	        	        	  
            	        	        	  	 			value.ExpressionArguments =
            	        	        	  					new ExpressionItem(e);
            	        	        	  			
            	        	        	}
            	        	        
            	        	        }
            	        	        break;
            	        	
            	        	}

            	        
            	        }
            	        break;
            	
            	}

            	Match(input,RPAREN,FOLLOW_RPAREN_in_genericFunction2642); if (failed) return value;
            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end genericFunction

    
    // $ANTLR start functionArgument
    // MacroScope\\MacroScope.g:642:1: functionArgument returns [ IExpression value ] : (e= expression | d= datetimeField );
    public IExpression functionArgument() // throws RecognitionException [1]
    {   

        IExpression value = null;
    
        IExpression e = null;

        DateTimeUnit d = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:642:48: (e= expression | d= datetimeField )
            int alt66 = 2;
            int LA66_0 = input.LA(1);
            
            if ( (LA66_0 == LPAREN || LA66_0 == Integer || LA66_0 == NULL || (LA66_0 >= LEFT && LA66_0 <= RIGHT) || (LA66_0 >= PLACEHOLDER && LA66_0 <= SUBSTRING) || (LA66_0 >= EXTRACT && LA66_0 <= CASE) || LA66_0 == CAST || (LA66_0 >= UnicodeStringLiteral && LA66_0 <= MINUS)) )
            {
                alt66 = 1;
            }
            else if ( ((LA66_0 >= YEAR && LA66_0 <= SECOND)) )
            {
                alt66 = 2;
            }
            else 
            {
                if ( backtracking > 0 ) {failed = true; return value;}
                NoViableAltException nvae_d66s0 =
                    new NoViableAltException("642:1: functionArgument returns [ IExpression value ] : (e= expression | d= datetimeField );", 66, 0, input);
            
                throw nvae_d66s0;
            }
            switch (alt66) 
            {
                case 1 :
                    // MacroScope\\MacroScope.g:643:2: e= expression
                    {
                    	PushFollow(FOLLOW_expression_in_functionArgument2661);
                    	e = expression();
                    	followingStackPointer_--;
                    	if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	  
                    	  		value =  e;
                    	  	
                    	}
                    
                    }
                    break;
                case 2 :
                    // MacroScope\\MacroScope.g:646:4: d= datetimeField
                    {
                    	PushFollow(FOLLOW_datetimeField_in_functionArgument2672);
                    	d = datetimeField();
                    	followingStackPointer_--;
                    	if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	  
                    	  		value =  new Expression();
                    	  		((Expression)value).Left = d;
                    	  	
                    	}
                    
                    }
                    break;
            
            }
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end functionArgument

    
    // $ANTLR start caseFunction
    // MacroScope\\MacroScope.g:652:1: caseFunction returns [ CaseExpression value ] : CASE (e= expression ( WHEN e= expression THEN f= expression )+ | ( WHEN e= searchCondition THEN f= expression )+ ) ( ELSE e= expression )? END ( CASE )? ;
    public CaseExpression caseFunction() // throws RecognitionException [1]
    {   

        CaseExpression value = null;
    
        IExpression e = null;

        IExpression f = null;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:652:47: ( CASE (e= expression ( WHEN e= expression THEN f= expression )+ | ( WHEN e= searchCondition THEN f= expression )+ ) ( ELSE e= expression )? END ( CASE )? )
            // MacroScope\\MacroScope.g:653:2: CASE (e= expression ( WHEN e= expression THEN f= expression )+ | ( WHEN e= searchCondition THEN f= expression )+ ) ( ELSE e= expression )? END ( CASE )?
            {
            	Match(input,CASE,FOLLOW_CASE_in_caseFunction2689); if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	   value =  new CaseExpression(); 
            	}
            	// MacroScope\\MacroScope.g:653:42: (e= expression ( WHEN e= expression THEN f= expression )+ | ( WHEN e= searchCondition THEN f= expression )+ )
            	int alt69 = 2;
            	int LA69_0 = input.LA(1);
            	
            	if ( (LA69_0 == LPAREN || LA69_0 == Integer || LA69_0 == NULL || (LA69_0 >= LEFT && LA69_0 <= RIGHT) || (LA69_0 >= PLACEHOLDER && LA69_0 <= SUBSTRING) || (LA69_0 >= EXTRACT && LA69_0 <= CASE) || LA69_0 == CAST || (LA69_0 >= UnicodeStringLiteral && LA69_0 <= MINUS)) )
            	{
            	    alt69 = 1;
            	}
            	else if ( (LA69_0 == WHEN) )
            	{
            	    alt69 = 2;
            	}
            	else 
            	{
            	    if ( backtracking > 0 ) {failed = true; return value;}
            	    NoViableAltException nvae_d69s0 =
            	        new NoViableAltException("653:42: (e= expression ( WHEN e= expression THEN f= expression )+ | ( WHEN e= searchCondition THEN f= expression )+ )", 69, 0, input);
            	
            	    throw nvae_d69s0;
            	}
            	switch (alt69) 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:654:3: e= expression ( WHEN e= expression THEN f= expression )+
            	        {
            	        	PushFollow(FOLLOW_expression_in_caseFunction2701);
            	        	e = expression();
            	        	followingStackPointer_--;
            	        	if (failed) return value;
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	   value.Case = e; 
            	        	}
            	        	// MacroScope\\MacroScope.g:655:4: ( WHEN e= expression THEN f= expression )+
            	        	int cnt67 = 0;
            	        	do 
            	        	{
            	        	    int alt67 = 2;
            	        	    int LA67_0 = input.LA(1);
            	        	    
            	        	    if ( (LA67_0 == WHEN) )
            	        	    {
            	        	        alt67 = 1;
            	        	    }
            	        	    
            	        	
            	        	    switch (alt67) 
            	        		{
            	        			case 1 :
            	        			    // MacroScope\\MacroScope.g:655:6: WHEN e= expression THEN f= expression
            	        			    {
            	        			    	Match(input,WHEN,FOLLOW_WHEN_in_caseFunction2710); if (failed) return value;
            	        			    	PushFollow(FOLLOW_expression_in_caseFunction2716);
            	        			    	e = expression();
            	        			    	followingStackPointer_--;
            	        			    	if (failed) return value;
            	        			    	Match(input,THEN,FOLLOW_THEN_in_caseFunction2718); if (failed) return value;
            	        			    	PushFollow(FOLLOW_expression_in_caseFunction2724);
            	        			    	f = expression();
            	        			    	followingStackPointer_--;
            	        			    	if (failed) return value;
            	        			    	if ( backtracking == 0 ) 
            	        			    	{
            	        			    	  
            	        			    	  				value.Add(new CaseAlternative(e,
            	        			    	  					f));
            	        			    	  			
            	        			    	}
            	        			    
            	        			    }
            	        			    break;
            	        	
            	        			default:
            	        			    if ( cnt67 >= 1 ) goto loop67;
            	        			    if ( backtracking > 0 ) {failed = true; return value;}
            	        		            EarlyExitException eee =
            	        		                new EarlyExitException(67, input);
            	        		            throw eee;
            	        	    }
            	        	    cnt67++;
            	        	} while (true);
            	        	
            	        	loop67:
            	        		;	// Stops C# compiler whinging that label 'loop67' has no statements

            	        
            	        }
            	        break;
            	    case 2 :
            	        // MacroScope\\MacroScope.g:660:11: ( WHEN e= searchCondition THEN f= expression )+
            	        {
            	        	// MacroScope\\MacroScope.g:660:11: ( WHEN e= searchCondition THEN f= expression )+
            	        	int cnt68 = 0;
            	        	do 
            	        	{
            	        	    int alt68 = 2;
            	        	    int LA68_0 = input.LA(1);
            	        	    
            	        	    if ( (LA68_0 == WHEN) )
            	        	    {
            	        	        alt68 = 1;
            	        	    }
            	        	    
            	        	
            	        	    switch (alt68) 
            	        		{
            	        			case 1 :
            	        			    // MacroScope\\MacroScope.g:660:13: WHEN e= searchCondition THEN f= expression
            	        			    {
            	        			    	Match(input,WHEN,FOLLOW_WHEN_in_caseFunction2745); if (failed) return value;
            	        			    	PushFollow(FOLLOW_searchCondition_in_caseFunction2751);
            	        			    	e = searchCondition();
            	        			    	followingStackPointer_--;
            	        			    	if (failed) return value;
            	        			    	Match(input,THEN,FOLLOW_THEN_in_caseFunction2753); if (failed) return value;
            	        			    	PushFollow(FOLLOW_expression_in_caseFunction2759);
            	        			    	f = expression();
            	        			    	followingStackPointer_--;
            	        			    	if (failed) return value;
            	        			    	if ( backtracking == 0 ) 
            	        			    	{
            	        			    	  
            	        			    	  			value.Add(new CaseAlternative(e,
            	        			    	  				f));
            	        			    	  		
            	        			    	}
            	        			    
            	        			    }
            	        			    break;
            	        	
            	        			default:
            	        			    if ( cnt68 >= 1 ) goto loop68;
            	        			    if ( backtracking > 0 ) {failed = true; return value;}
            	        		            EarlyExitException eee =
            	        		                new EarlyExitException(68, input);
            	        		            throw eee;
            	        	    }
            	        	    cnt68++;
            	        	} while (true);
            	        	
            	        	loop68:
            	        		;	// Stops C# compiler whinging that label 'loop68' has no statements

            	        
            	        }
            	        break;
            	
            	}

            	// MacroScope\\MacroScope.g:665:3: ( ELSE e= expression )?
            	int alt70 = 2;
            	int LA70_0 = input.LA(1);
            	
            	if ( (LA70_0 == ELSE) )
            	{
            	    alt70 = 1;
            	}
            	switch (alt70) 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:665:5: ELSE e= expression
            	        {
            	        	Match(input,ELSE,FOLLOW_ELSE_in_caseFunction2780); if (failed) return value;
            	        	PushFollow(FOLLOW_expression_in_caseFunction2786);
            	        	e = expression();
            	        	followingStackPointer_--;
            	        	if (failed) return value;
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	  
            	        	  			value.Else = e;
            	        	  		
            	        	}
            	        
            	        }
            	        break;
            	
            	}

            	Match(input,END,FOLLOW_END_in_caseFunction2793); if (failed) return value;
            	// MacroScope\\MacroScope.g:667:12: ( CASE )?
            	int alt71 = 2;
            	int LA71_0 = input.LA(1);
            	
            	if ( (LA71_0 == CASE) )
            	{
            	    alt71 = 1;
            	}
            	switch (alt71) 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:667:14: CASE
            	        {
            	        	Match(input,CASE,FOLLOW_CASE_in_caseFunction2797); if (failed) return value;
            	        
            	        }
            	        break;
            	
            	}

            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end caseFunction

    
    // $ANTLR start castFunction
    // MacroScope\\MacroScope.g:670:1: castFunction returns [ TypeCast value ] : CAST LPAREN e= expression AS t= typeIdentifier ( LPAREN p= nonNegativeInteger ( COMMA p= nonNegativeInteger )? RPAREN )? RPAREN ;
    public TypeCast castFunction() // throws RecognitionException [1]
    {   

        TypeCast value = null;
    
        IExpression e = null;

        string t = null;

        int p = 0;
        
    
        try 
    	{
            // MacroScope\\MacroScope.g:670:41: ( CAST LPAREN e= expression AS t= typeIdentifier ( LPAREN p= nonNegativeInteger ( COMMA p= nonNegativeInteger )? RPAREN )? RPAREN )
            // MacroScope\\MacroScope.g:671:2: CAST LPAREN e= expression AS t= typeIdentifier ( LPAREN p= nonNegativeInteger ( COMMA p= nonNegativeInteger )? RPAREN )? RPAREN
            {
            	Match(input,CAST,FOLLOW_CAST_in_castFunction2816); if (failed) return value;
            	Match(input,LPAREN,FOLLOW_LPAREN_in_castFunction2818); if (failed) return value;
            	PushFollow(FOLLOW_expression_in_castFunction2824);
            	e = expression();
            	followingStackPointer_--;
            	if (failed) return value;
            	Match(input,AS,FOLLOW_AS_in_castFunction2826); if (failed) return value;
            	PushFollow(FOLLOW_typeIdentifier_in_castFunction2832);
            	t = typeIdentifier();
            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	  
            	  		value =  new TypeCast(e, t);
            	  	
            	}
            	// MacroScope\\MacroScope.g:674:3: ( LPAREN p= nonNegativeInteger ( COMMA p= nonNegativeInteger )? RPAREN )?
            	int alt73 = 2;
            	int LA73_0 = input.LA(1);
            	
            	if ( (LA73_0 == LPAREN) )
            	{
            	    alt73 = 1;
            	}
            	switch (alt73) 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:674:5: LPAREN p= nonNegativeInteger ( COMMA p= nonNegativeInteger )? RPAREN
            	        {
            	        	Match(input,LPAREN,FOLLOW_LPAREN_in_castFunction2840); if (failed) return value;
            	        	PushFollow(FOLLOW_nonNegativeInteger_in_castFunction2846);
            	        	p = nonNegativeInteger();
            	        	followingStackPointer_--;
            	        	if (failed) return value;
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	  
            	        	  			value.Precision = p;
            	        	  		
            	        	}
            	        	// MacroScope\\MacroScope.g:676:5: ( COMMA p= nonNegativeInteger )?
            	        	int alt72 = 2;
            	        	int LA72_0 = input.LA(1);
            	        	
            	        	if ( (LA72_0 == COMMA) )
            	        	{
            	        	    alt72 = 1;
            	        	}
            	        	switch (alt72) 
            	        	{
            	        	    case 1 :
            	        	        // MacroScope\\MacroScope.g:676:7: COMMA p= nonNegativeInteger
            	        	        {
            	        	        	Match(input,COMMA,FOLLOW_COMMA_in_castFunction2852); if (failed) return value;
            	        	        	PushFollow(FOLLOW_nonNegativeInteger_in_castFunction2858);
            	        	        	p = nonNegativeInteger();
            	        	        	followingStackPointer_--;
            	        	        	if (failed) return value;
            	        	        	if ( backtracking == 0 ) 
            	        	        	{
            	        	        	  
            	        	        	  				value.SecondPrecision = p;
            	        	        	  			
            	        	        	}
            	        	        
            	        	        }
            	        	        break;
            	        	
            	        	}

            	        	Match(input,RPAREN,FOLLOW_RPAREN_in_castFunction2865); if (failed) return value;
            	        
            	        }
            	        break;
            	
            	}

            	Match(input,RPAREN,FOLLOW_RPAREN_in_castFunction2870); if (failed) return value;
            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end castFunction

    
    // $ANTLR start dbObject
    // MacroScope\\MacroScope.g:681:1: dbObject returns [ DbObject value ] : i= identifier ( DOT i= identifier )* ;
    public DbObject dbObject() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="dbObject" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="6000116" module="MacroScope.dll"><hits><hit index="0" value="3"/>
<hit index="1" value="3"/>
<hit index="2" value="3"/>
<hit index="3" value="3"/>
<hit index="4" value="3"/>
<hit index="5" value="3"/>
<hit index="6" value="3"/>
<hit index="7" value="3"/>
<hit index="8" value="3"/>
<hit index="10" value="3"/>
<hit index="11" value="3"/>
<hit index="12" value="3"/>
<hit index="14" value="3"/>
<hit index="15" value="3"/>
<hit index="16" value="3"/>
<hit index="17" value="3"/>
<hit index="18" value="3"/>
<hit index="19" value="6"/>
<hit index="21" value="3"/>
<hit index="47" value="3"/>
<hit index="49" value="3"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="10" total="24" coveredRatio="0.41666666666666669"/>
</method>
<chunk hits="3" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="3" offset="0001" domain="userortestcode"><source><![CDATA[DbObject value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="3" offset="0003" domain="userortestcode"><source><![CDATA[Identifier i = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
    
        try 
    	]]></source>
</chunk>
<chunk hits="3" offset="0005" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:681:37: (i= identifier ( DOT i= identifier )* )
            // MacroScope\\MacroScope.g:682:2: i= identifier ( DOT i= identifier )*
            ]]></source>
</chunk>
<chunk hits="3" offset="0006" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="3" offset="0007" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_identifier_in_dbObject2889);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="3" offset="0013" domain="userortestcode"><source><![CDATA[i = identifier();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="3" offset="001a" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="6" offset="0028" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0037" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="3" offset="003f" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="3" offset="0051" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	   ]]></source>
</chunk>
<chunk hits="3" offset="0052" domain="userortestcode"><source><![CDATA[value =  new DbObject(i);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="3" offset="0059" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	// MacroScope\\MacroScope.g:683:2: ( DOT i= identifier )*
            	do 
            	]]></source>
</chunk>
<chunk hits="3" offset="005a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="3" offset="005b" domain="userortestcode"><source><![CDATA[int alt74 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="3" offset="005d" domain="userortestcode"><source><![CDATA[int LA74_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	    ]]></source>
</chunk>
<chunk hits="9" offset="006a" domain="userortestcode"><source><![CDATA[if ( (LA74_0 == DOT) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0078" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0079" domain="userortestcode"><source><![CDATA[alt74 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="007b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	
            	    ]]></source>
</chunk>
<chunk hits="3" offset="007c" domain="userortestcode"><source><![CDATA[switch (alt74)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            		{
            			case 1 :
            			    // MacroScope\\MacroScope.g:683:4: DOT i= identifier
            			    ]]></source>
</chunk>
<chunk hits="0" offset="0089" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="008a" domain="userortestcode"><source><![CDATA[Match(input,DOT,FOLLOW_DOT_in_dbObject2896);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="009e" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00ad" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00b2" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_identifier_in_dbObject2902);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00be" domain="userortestcode"><source><![CDATA[i = identifier();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00c5" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00d3" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00e2" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00e7" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00f9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	   ]]></source>
</chunk>
<chunk hits="0" offset="00fa" domain="userortestcode"><source><![CDATA[value.Add(new DbObject(i));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            			    	]]></source>
</chunk>
<chunk hits="0" offset="0107" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    
            			    ]]></source>
</chunk>
<chunk hits="0" offset="0108" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    ]]></source>
</chunk>
<chunk hits="0" offset="0109" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            			default:
            			    ]]></source>
</chunk>
<chunk hits="3" offset="010b" domain="userortestcode"><source><![CDATA[goto loop74;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    }
            	]]></source>
</chunk>
<chunk hits="0" offset="010d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="010e" domain="userortestcode"><source><![CDATA[while (true);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	loop74:
            		;	// Stops C# compiler whinging that label 'loop74' has no statements

            
            ]]></source>
</chunk>
<chunk hits="3" offset="0116" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="3" offset="0117" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="3" offset="011a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="011b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="011e" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="3" offset="0124" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end dbObject

    
    // $ANTLR start stringLiteral
    // MacroScope\\MacroScope.g:689:1: stringLiteral returns [ StringValue value ] : s= singleStringLiteral (s= singleStringLiteral )* ;
    public StringValue stringLiteral() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="stringLiteral" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="6000117" module="MacroScope.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
<hit index="8" value="1"/>
<hit index="10" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="1"/>
<hit index="16" value="2"/>
<hit index="19" value="1"/>
<hit index="35" value="1"/>
<hit index="37" value="1"/>
<hit index="38" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="10" total="21" coveredRatio="0.47619047619047616"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="userortestcode"><source><![CDATA[StringValue value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="1" offset="0003" domain="userortestcode"><source><![CDATA[StringValue s = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
    
        try 
    	]]></source>
</chunk>
<chunk hits="1" offset="0005" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:689:45: (s= singleStringLiteral (s= singleStringLiteral )* )
            // MacroScope\\MacroScope.g:690:2: s= singleStringLiteral (s= singleStringLiteral )*
            ]]></source>
</chunk>
<chunk hits="1" offset="0006" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="1" offset="0007" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_singleStringLiteral_in_stringLiteral2930);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="1" offset="0013" domain="userortestcode"><source><![CDATA[s = singleStringLiteral();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="1" offset="001a" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0028" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0037" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="1" offset="003f" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="1" offset="0051" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	  
            	  		]]></source>
</chunk>
<chunk hits="1" offset="0052" domain="userortestcode"><source><![CDATA[value =  s;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	  	
            	]]></source>
</chunk>
<chunk hits="1" offset="0054" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	// MacroScope\\MacroScope.g:692:4: (s= singleStringLiteral )*
            	do 
            	]]></source>
</chunk>
<chunk hits="1" offset="0055" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="1" offset="0056" domain="userortestcode"><source><![CDATA[int alt75 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="1" offset="0058" domain="userortestcode"><source><![CDATA[int LA75_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	    ]]></source>
</chunk>
<chunk hits="3" offset="0065" domain="userortestcode"><source><![CDATA[if ( ((LA75_0 >= UnicodeStringLiteral && LA75_0 <= AsciiStringLiteral)) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0078" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	        ]]></source>
</chunk>
<chunk hits="0" offset="0079" domain="userortestcode"><source><![CDATA[alt75 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    ]]></source>
</chunk>
<chunk hits="0" offset="007b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    
            	
            	    ]]></source>
</chunk>
<chunk hits="1" offset="007c" domain="userortestcode"><source><![CDATA[switch (alt75)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            		{
            			case 1 :
            			    // MacroScope\\MacroScope.g:692:6: s= singleStringLiteral
            			    ]]></source>
</chunk>
<chunk hits="0" offset="0086" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="0087" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_singleStringLiteral_in_stringLiteral2940);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="0093" domain="userortestcode"><source><![CDATA[s = singleStringLiteral();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="009a" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00a8" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00b7" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00bc" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00ce" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	  
            			    	  		]]></source>
</chunk>
<chunk hits="0" offset="00cf" domain="userortestcode"><source><![CDATA[value.Append(s);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    	  		
            			    	]]></source>
</chunk>
<chunk hits="0" offset="00d7" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    
            			    ]]></source>
</chunk>
<chunk hits="0" offset="00d8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            			    ]]></source>
</chunk>
<chunk hits="0" offset="00d9" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            			default:
            			    ]]></source>
</chunk>
<chunk hits="1" offset="00db" domain="userortestcode"><source><![CDATA[goto loop75;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	    }
            	]]></source>
</chunk>
<chunk hits="0" offset="00dd" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00de" domain="userortestcode"><source><![CDATA[while (true);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	
            	loop75:
            		;	// Stops C# compiler whinging that label 'loop75' has no statements

            
            ]]></source>
</chunk>
<chunk hits="1" offset="00e6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="1" offset="00e7" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="1" offset="00ea" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="00eb" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="00ee" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="1" offset="00f4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end stringLiteral

    
    // $ANTLR start singleStringLiteral
    // MacroScope\\MacroScope.g:697:1: singleStringLiteral returns [ StringValue value ] : ( UnicodeStringLiteral | AsciiStringLiteral );
    public StringValue singleStringLiteral() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="singleStringLiteral" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="6000118" module="MacroScope.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="2"/>
<hit index="7" value="1"/>
<hit index="43" value="1"/>
<hit index="44" value="1"/>
<hit index="45" value="1"/>
<hit index="46" value="1"/>
<hit index="47" value="2"/>
<hit index="48" value="1"/>
<hit index="49" value="1"/>
<hit index="50" value="1"/>
<hit index="51" value="1"/>
<hit index="52" value="2"/>
<hit index="53" value="1"/>
<hit index="55" value="1"/>
<hit index="56" value="1"/>
<hit index="57" value="1"/>
<hit index="58" value="1"/>
<hit index="59" value="1"/>
<hit index="60" value="2"/>
<hit index="61" value="1"/>
<hit index="63" value="1"/>
<hit index="64" value="1"/>
<hit index="68" value="1"/>
<hit index="71" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="12" total="29" coveredRatio="0.41379310344827586"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="userortestcode"><source><![CDATA[StringValue value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="1" offset="0003" domain="userortestcode"><source><![CDATA[IToken UnicodeStringLiteral4 = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0005" domain="userortestcode"><source><![CDATA[IToken AsciiStringLiteral5 = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        try 
    	]]></source>
</chunk>
<chunk hits="1" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:697:51: ( UnicodeStringLiteral | AsciiStringLiteral )
            ]]></source>
</chunk>
<chunk hits="1" offset="0008" domain="userortestcode"><source><![CDATA[int alt76 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="000a" domain="userortestcode"><source><![CDATA[int LA76_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="3" offset="0018" domain="userortestcode"><source><![CDATA[if ( (LA76_0 == UnicodeStringLiteral) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0027" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0028" domain="userortestcode"><source><![CDATA[alt76 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="002a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="1" offset="002d" domain="userortestcode"><source><![CDATA[if ( (LA76_0 == AsciiStringLiteral) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="003c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="003d" domain="userortestcode"><source><![CDATA[alt76 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="003f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else 
            ]]></source>
</chunk>
<chunk hits="0" offset="0042" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0043" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0055" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="0056" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="005d" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
                ]]></source>
</chunk>
<chunk hits="0" offset="0065" domain="userortestcode"><source><![CDATA[NoViableAltException nvae_d76s0 =
                    new NoViableAltException("697:1: singleStringLiteral returns [ StringValue value ] : ( UnicodeStringLiteral | AsciiStringLiteral );", 76, 0, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
                ]]></source>
</chunk>
<chunk hits="0" offset="007a" domain="userortestcode"><source><![CDATA[throw nvae_d76s0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }
            ]]></source>
</chunk>
<chunk hits="1" offset="007d" domain="userortestcode"><source><![CDATA[switch (alt76)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
                case 1 :
                    // MacroScope\\MacroScope.g:698:2: UnicodeStringLiteral
                    ]]></source>
</chunk>
<chunk hits="0" offset="0096" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0097" domain="userortestcode"><source><![CDATA[UnicodeStringLiteral4 = (IToken)input.LT(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="00a4" domain="userortestcode"><source><![CDATA[Match(input,UnicodeStringLiteral,FOLLOW_UnicodeStringLiteral_in_singleStringLiteral2960);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00b8" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00c7" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="00cf" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="00e1" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	  
                    	  		]]></source>
</chunk>
<chunk hits="0" offset="00e2" domain="userortestcode"><source><![CDATA[value =  new StringValue(UnicodeStringLiteral4.Text);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	  		]]></source>
</chunk>
<chunk hits="0" offset="00ee" domain="userortestcode"><source><![CDATA[value.QuoteType = 'n';]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	  	
                    	]]></source>
</chunk>
<chunk hits="0" offset="00f7" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="00f8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="00f9" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 2 :
                    // MacroScope\\MacroScope.g:702:4: AsciiStringLiteral
                    ]]></source>
</chunk>
<chunk hits="1" offset="00fb" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="1" offset="00fc" domain="userortestcode"><source><![CDATA[AsciiStringLiteral5 = (IToken)input.LT(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="3" offset="0109" domain="userortestcode"><source><![CDATA[Match(input,AsciiStringLiteral,FOLLOW_AsciiStringLiteral_in_singleStringLiteral2967);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="3" offset="011d" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="012c" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="1" offset="0131" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="1" offset="0143" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	  
                    	  		]]></source>
</chunk>
<chunk hits="1" offset="0144" domain="userortestcode"><source><![CDATA[value =  new StringValue(AsciiStringLiteral5.Text);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	  	
                    	]]></source>
</chunk>
<chunk hits="1" offset="0150" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="1" offset="0151" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="0152" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            }
        ]]></source>
</chunk>
<chunk hits="1" offset="0154" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="1" offset="0157" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0158" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="015b" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="1" offset="0161" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end singleStringLiteral

    
    // $ANTLR start identifier
    // MacroScope\\MacroScope.g:707:1: identifier returns [ Identifier value ] : ( NonQuotedIdentifier | QuotedIdentifier );
    public Identifier identifier() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="identifier" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="6000119" module="MacroScope.dll"><hits><hit index="0" value="3"/>
<hit index="1" value="3"/>
<hit index="2" value="3"/>
<hit index="3" value="3"/>
<hit index="4" value="3"/>
<hit index="5" value="6"/>
<hit index="6" value="3"/>
<hit index="18" value="3"/>
<hit index="19" value="3"/>
<hit index="20" value="3"/>
<hit index="21" value="3"/>
<hit index="22" value="6"/>
<hit index="23" value="3"/>
<hit index="24" value="3"/>
<hit index="25" value="3"/>
<hit index="26" value="3"/>
<hit index="27" value="6"/>
<hit index="28" value="3"/>
<hit index="30" value="3"/>
<hit index="31" value="3"/>
<hit index="32" value="3"/>
<hit index="33" value="3"/>
<hit index="34" value="3"/>
<hit index="35" value="6"/>
<hit index="36" value="3"/>
<hit index="38" value="3"/>
<hit index="63" value="3"/>
<hit index="65" value="3"/>
</hits>
<tags><tag offset="00e3">call to uninstrumented method System.String Antlr.Runtime.CommonToken.get_Text()</tag>
</tags>
<coverage domain="userortestcode" unit="block" covered="11" total="28" coveredRatio="0.39285714285714285"/>
</method>
<chunk hits="3" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="3" offset="0001" domain="userortestcode"><source><![CDATA[Identifier value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="3" offset="0003" domain="userortestcode"><source><![CDATA[IToken NonQuotedIdentifier6 = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="0005" domain="userortestcode"><source><![CDATA[IToken QuotedIdentifier7 = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        try 
    	]]></source>
</chunk>
<chunk hits="3" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:707:41: ( NonQuotedIdentifier | QuotedIdentifier )
            ]]></source>
</chunk>
<chunk hits="3" offset="0008" domain="userortestcode"><source><![CDATA[int alt77 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="000a" domain="userortestcode"><source><![CDATA[int LA77_0 = input.LA(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="9" offset="0018" domain="userortestcode"><source><![CDATA[if ( (LA77_0 == NonQuotedIdentifier) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="0027" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="3" offset="0028" domain="userortestcode"><source><![CDATA[alt77 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="002a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="0" offset="002d" domain="userortestcode"><source><![CDATA[if ( (LA77_0 == QuotedIdentifier) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="003c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="003d" domain="userortestcode"><source><![CDATA[alt77 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="003f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else 
            ]]></source>
</chunk>
<chunk hits="0" offset="0042" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0043" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0055" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="0056" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="005d" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
                ]]></source>
</chunk>
<chunk hits="0" offset="0065" domain="userortestcode"><source><![CDATA[NoViableAltException nvae_d77s0 =
                    new NoViableAltException("707:1: identifier returns [ Identifier value ] : ( NonQuotedIdentifier | QuotedIdentifier );", 77, 0, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
                ]]></source>
</chunk>
<chunk hits="0" offset="007a" domain="userortestcode"><source><![CDATA[throw nvae_d77s0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }
            ]]></source>
</chunk>
<chunk hits="3" offset="007d" domain="userortestcode"><source><![CDATA[switch (alt77)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
                case 1 :
                    // MacroScope\\MacroScope.g:708:2: NonQuotedIdentifier
                    ]]></source>
</chunk>
<chunk hits="3" offset="0096" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="3" offset="0097" domain="userortestcode"><source><![CDATA[NonQuotedIdentifier6 = (IToken)input.LT(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="9" offset="00a4" domain="userortestcode"><source><![CDATA[Match(input,NonQuotedIdentifier,FOLLOW_NonQuotedIdentifier_in_identifier2984);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="9" offset="00b8" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00c7" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="3" offset="00cf" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="3" offset="00e1" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	  
                    	  		]]></source>
</chunk>
<chunk hits="3" offset="00e2" domain="userortestcode" tag="true"><tooltip><![CDATA[call to uninstrumented method System.String Antlr.Runtime.CommonToken.get_Text()]]></tooltip>
<source><![CDATA[value =  new Identifier(NonQuotedIdentifier6.Text);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	  	
                    	]]></source>
</chunk>
<chunk hits="3" offset="00ee" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="3" offset="00ef" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="3" offset="00f0" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 2 :
                    // MacroScope\\MacroScope.g:711:4: QuotedIdentifier
                    ]]></source>
</chunk>
<chunk hits="0" offset="00f2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="00f3" domain="userortestcode"><source><![CDATA[QuotedIdentifier7 = (IToken)input.LT(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0100" domain="userortestcode"><source><![CDATA[Match(input,QuotedIdentifier,FOLLOW_QuotedIdentifier_in_identifier2991);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0114" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0123" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0128" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="013a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	  
                    	  		]]></source>
</chunk>
<chunk hits="0" offset="013b" domain="userortestcode"><source><![CDATA[value =  new Identifier(QuotedIdentifier7.Text);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	  	
                    	]]></source>
</chunk>
<chunk hits="0" offset="0147" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="0148" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0149" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            }
        ]]></source>
</chunk>
<chunk hits="3" offset="014b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="3" offset="014e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="014f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="0152" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="3" offset="0158" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end identifier

    
    // $ANTLR start typeIdentifier
    // MacroScope\\MacroScope.g:716:1: typeIdentifier returns [ string value ] : NonQuotedIdentifier ;
    public string typeIdentifier() // throws RecognitionException [1]
    {   

        string value = null;
    
        IToken NonQuotedIdentifier8 = null;
    
        try 
    	{
            // MacroScope\\MacroScope.g:716:41: ( NonQuotedIdentifier )
            // MacroScope\\MacroScope.g:717:2: NonQuotedIdentifier
            {
            	NonQuotedIdentifier8 = (IToken)input.LT(1);
            	Match(input,NonQuotedIdentifier,FOLLOW_NonQuotedIdentifier_in_typeIdentifier3008); if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	   value =  NonQuotedIdentifier8.Text; 
            	}
            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end typeIdentifier

    
    // $ANTLR start constant
    // MacroScope\\MacroScope.g:720:1: constant returns [ INode value ] : (i= nonNegativeInteger | Real | NULL | s= stringLiteral | j= intervalLiteral | HexLiteral | MAccessDateTime | Iso8601DateTime );
    public INode constant() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="constant" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="600011b" module="MacroScope.dll"><hits><hit index="0" value="3"/>
<hit index="1" value="3"/>
<hit index="2" value="3"/>
<hit index="3" value="3"/>
<hit index="4" value="3"/>
<hit index="5" value="6"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
<hit index="19" value="2"/>
<hit index="20" value="2"/>
<hit index="21" value="2"/>
<hit index="22" value="2"/>
<hit index="23" value="2"/>
<hit index="24" value="2"/>
<hit index="25" value="2"/>
<hit index="26" value="2"/>
<hit index="28" value="2"/>
<hit index="29" value="2"/>
<hit index="30" value="2"/>
<hit index="32" value="2"/>
<hit index="67" value="1"/>
<hit index="68" value="1"/>
<hit index="69" value="1"/>
<hit index="70" value="1"/>
<hit index="71" value="1"/>
<hit index="72" value="1"/>
<hit index="73" value="1"/>
<hit index="74" value="1"/>
<hit index="76" value="1"/>
<hit index="77" value="1"/>
<hit index="154" value="2"/>
<hit index="157" value="1"/>
<hit index="165" value="2"/>
<hit index="168" value="1"/>
<hit index="173" value="2"/>
<hit index="179" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="19" total="85" coveredRatio="0.22352941176470589"/>
</method>
<chunk hits="3" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="3" offset="0001" domain="userortestcode"><source><![CDATA[INode value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="3" offset="0003" domain="userortestcode"><source><![CDATA[IToken Real9 = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="0005" domain="userortestcode"><source><![CDATA[IToken HexLiteral10 = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="0007" domain="userortestcode"><source><![CDATA[IToken MAccessDateTime11 = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="0009" domain="userortestcode"><source><![CDATA[IToken Iso8601DateTime12 = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="000c" domain="userortestcode"><source><![CDATA[int i = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="3" offset="000f" domain="userortestcode"><source><![CDATA[StringValue s = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="3" offset="0012" domain="userortestcode"><source><![CDATA[Interval j = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
    
        try 
    	]]></source>
</chunk>
<chunk hits="3" offset="0015" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:720:34: (i= nonNegativeInteger | Real | NULL | s= stringLiteral | j= intervalLiteral | HexLiteral | MAccessDateTime | Iso8601DateTime )
            ]]></source>
</chunk>
<chunk hits="3" offset="0016" domain="userortestcode"><source><![CDATA[int alt78 = 8;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="0019" domain="userortestcode"><source><![CDATA[switch ( input.LA(1) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
            case Integer:
            	]]></source>
</chunk>
<chunk hits="2" offset="005f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0060" domain="userortestcode"><source><![CDATA[alt78 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0063" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0064" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case Real:
            	]]></source>
</chunk>
<chunk hits="0" offset="0066" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0067" domain="userortestcode"><source><![CDATA[alt78 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="006a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="006b" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case NULL:
            	]]></source>
</chunk>
<chunk hits="0" offset="006d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="006e" domain="userortestcode"><source><![CDATA[alt78 = 3;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0071" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0072" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case UnicodeStringLiteral:
            case AsciiStringLiteral:
            	]]></source>
</chunk>
<chunk hits="1" offset="0074" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0075" domain="userortestcode"><source><![CDATA[alt78 = 4;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0078" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0079" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case INTERVAL:
            	]]></source>
</chunk>
<chunk hits="0" offset="007b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="007c" domain="userortestcode"><source><![CDATA[alt78 = 5;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="007f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0080" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case HexLiteral:
            	]]></source>
</chunk>
<chunk hits="0" offset="0082" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0083" domain="userortestcode"><source><![CDATA[alt78 = 6;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0086" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0087" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case MAccessDateTime:
            	]]></source>
</chunk>
<chunk hits="0" offset="0089" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="008a" domain="userortestcode"><source><![CDATA[alt78 = 7;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="008d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="008e" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case Iso8601DateTime:
            	]]></source>
</chunk>
<chunk hits="0" offset="0090" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0091" domain="userortestcode"><source><![CDATA[alt78 = 8;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0094" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0095" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	default:
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0097" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00a9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="00aa" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00b1" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
            	    ]]></source>
</chunk>
<chunk hits="0" offset="00b9" domain="userortestcode"><source><![CDATA[NoViableAltException nvae_d78s0 =
            	        new NoViableAltException("720:1: constant returns [ INode value ] : (i= nonNegativeInteger | Real | NULL | s= stringLiteral | j= intervalLiteral | HexLiteral | MAccessDateTime | Iso8601DateTime );", 78, 0, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            	    ]]></source>
</chunk>
<chunk hits="0" offset="00ce" domain="userortestcode"><source><![CDATA[throw nvae_d78s0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }
            
            ]]></source>
</chunk>
<chunk hits="3" offset="00d1" domain="userortestcode"><source><![CDATA[switch (alt78)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
                case 1 :
                    // MacroScope\\MacroScope.g:721:2: i= nonNegativeInteger
                    ]]></source>
</chunk>
<chunk hits="2" offset="0103" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="0104" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_nonNegativeInteger_in_constant3029);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="0110" domain="userortestcode"><source><![CDATA[i = nonNegativeInteger();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="0118" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="4" offset="0126" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0135" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="013d" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="2" offset="014f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	   ]]></source>
</chunk>
<chunk hits="2" offset="0150" domain="userortestcode"><source><![CDATA[value =  new IntegerValue(i);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="2" offset="0158" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="2" offset="0159" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="015a" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 2 :
                    // MacroScope\\MacroScope.g:722:4: Real
                    ]]></source>
</chunk>
<chunk hits="0" offset="015f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0160" domain="userortestcode"><source><![CDATA[Real9 = (IToken)input.LT(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="016d" domain="userortestcode"><source><![CDATA[Match(input,Real,FOLLOW_Real_in_constant3036);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0181" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0190" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0198" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="01aa" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	   ]]></source>
</chunk>
<chunk hits="0" offset="01ab" domain="userortestcode"><source><![CDATA[value =  new DoubleValue(DoubleValue.Parse(Real9.Text));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="01bc" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="01bd" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="01be" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 3 :
                    // MacroScope\\MacroScope.g:723:4: NULL
                    ]]></source>
</chunk>
<chunk hits="0" offset="01c3" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="01c4" domain="userortestcode"><source><![CDATA[Match(input,NULL,FOLLOW_NULL_in_constant3043);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="01d8" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="01e7" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="01ef" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="0201" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	   ]]></source>
</chunk>
<chunk hits="0" offset="0202" domain="userortestcode"><source><![CDATA[value =  NullValue.Value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="0208" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="0209" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="020a" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 4 :
                    // MacroScope\\MacroScope.g:724:4: s= stringLiteral
                    ]]></source>
</chunk>
<chunk hits="1" offset="020f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="1" offset="0210" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_stringLiteral_in_constant3054);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="1" offset="021c" domain="userortestcode"><source><![CDATA[s = stringLiteral();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="1" offset="0224" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="0232" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0241" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="1" offset="0249" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="1" offset="025b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	   ]]></source>
</chunk>
<chunk hits="1" offset="025c" domain="userortestcode"><source><![CDATA[value =  s;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="1" offset="025f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="1" offset="0260" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="0261" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 5 :
                    // MacroScope\\MacroScope.g:725:4: j= intervalLiteral
                    ]]></source>
</chunk>
<chunk hits="0" offset="0266" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0267" domain="userortestcode"><source><![CDATA[PushFollow(FOLLOW_intervalLiteral_in_constant3065);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0273" domain="userortestcode"><source><![CDATA[j = intervalLiteral();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="027b" domain="userortestcode"><source><![CDATA[followingStackPointer_--;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0289" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0298" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="02a0" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="02b2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	   ]]></source>
</chunk>
<chunk hits="0" offset="02b3" domain="userortestcode"><source><![CDATA[value =  j;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="02b6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="02b7" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="02b8" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 6 :
                    // MacroScope\\MacroScope.g:726:4: HexLiteral
                    ]]></source>
</chunk>
<chunk hits="0" offset="02bd" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="02be" domain="userortestcode"><source><![CDATA[HexLiteral10 = (IToken)input.LT(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="02cb" domain="userortestcode"><source><![CDATA[Match(input,HexLiteral,FOLLOW_HexLiteral_in_constant3072);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="02df" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="02ee" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="02f6" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="0308" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	  
                    	  		]]></source>
</chunk>
<chunk hits="0" offset="0309" domain="userortestcode"><source><![CDATA[value =  new IntegerValue(
                    	  			IntegerValue.ParseHex(HexLiteral10.Text));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	  	
                    	]]></source>
</chunk>
<chunk hits="0" offset="031a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="031b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="031c" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 7 :
                    // MacroScope\\MacroScope.g:731:4: MAccessDateTime
                    ]]></source>
</chunk>
<chunk hits="0" offset="0321" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0322" domain="userortestcode"><source><![CDATA[MAccessDateTime11 = (IToken)input.LT(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="032f" domain="userortestcode"><source><![CDATA[Match(input,MAccessDateTime,FOLLOW_MAccessDateTime_in_constant3081);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0343" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0352" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="035a" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="036c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	  
                    	  		]]></source>
</chunk>
<chunk hits="0" offset="036d" domain="userortestcode"><source><![CDATA[value =  new LiteralDateTime(MAccessDateTime11.Text);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	  	
                    	]]></source>
</chunk>
<chunk hits="0" offset="0379" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="037a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="037b" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 8 :
                    // MacroScope\\MacroScope.g:735:4: Iso8601DateTime
                    ]]></source>
</chunk>
<chunk hits="0" offset="037d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="037e" domain="userortestcode"><source><![CDATA[Iso8601DateTime12 = (IToken)input.LT(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="038c" domain="userortestcode"><source><![CDATA[Match(input,Iso8601DateTime,FOLLOW_Iso8601DateTime_in_constant3090);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="03a0" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="03af" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="03b4" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="03c6" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	  
                    	  		]]></source>
</chunk>
<chunk hits="0" offset="03c7" domain="userortestcode"><source><![CDATA[value =  new LiteralDateTime(Iso8601DateTime12.Text);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	  	
                    	]]></source>
</chunk>
<chunk hits="0" offset="03d4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="03d5" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="03d6" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            }
        ]]></source>
</chunk>
<chunk hits="3" offset="03d8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="3" offset="03db" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="03dc" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="03df" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="3" offset="03e5" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end constant

    
    // $ANTLR start intervalLiteral
    // MacroScope\\MacroScope.g:741:1: intervalLiteral returns [ Interval value ] : INTERVAL (u= unaryOperator )? AsciiStringLiteral d= datetimeField ( LPAREN Integer RPAREN )? ;
    public Interval intervalLiteral() // throws RecognitionException [1]
    {   

        Interval value = null;
    
        IToken AsciiStringLiteral13 = null;
        IToken Integer14 = null;
        ExpressionOperator u = null;

        DateTimeUnit d = null;
        
    
         bool positive = true; int intervalNumber = 0; 
        try 
    	{
            // MacroScope\\MacroScope.g:742:57: ( INTERVAL (u= unaryOperator )? AsciiStringLiteral d= datetimeField ( LPAREN Integer RPAREN )? )
            // MacroScope\\MacroScope.g:743:2: INTERVAL (u= unaryOperator )? AsciiStringLiteral d= datetimeField ( LPAREN Integer RPAREN )?
            {
            	Match(input,INTERVAL,FOLLOW_INTERVAL_in_intervalLiteral3114); if (failed) return value;
            	// MacroScope\\MacroScope.g:743:11: (u= unaryOperator )?
            	int alt79 = 2;
            	int LA79_0 = input.LA(1);
            	
            	if ( ((LA79_0 >= PLUS && LA79_0 <= MINUS)) )
            	{
            	    alt79 = 1;
            	}
            	switch (alt79) 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:743:13: u= unaryOperator
            	        {
            	        	PushFollow(FOLLOW_unaryOperator_in_intervalLiteral3122);
            	        	u = unaryOperator();
            	        	followingStackPointer_--;
            	        	if (failed) return value;
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	   
            	        	  			positive = (u == ExpressionOperator.Plus);
            	        	  		
            	        	}
            	        
            	        }
            	        break;
            	
            	}

            	AsciiStringLiteral13 = (IToken)input.LT(1);
            	Match(input,AsciiStringLiteral,FOLLOW_AsciiStringLiteral_in_intervalLiteral3129); if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	  
            	  			intervalNumber = Interval.Parse(
            	  				AsciiStringLiteral13.Text);
            	  		
            	}
            	PushFollow(FOLLOW_datetimeField_in_intervalLiteral3137);
            	d = datetimeField();
            	followingStackPointer_--;
            	if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	  
            	  			value =  new Interval(positive, intervalNumber,
            	  				d);
            	  		
            	}
            	// MacroScope\\MacroScope.g:751:5: ( LPAREN Integer RPAREN )?
            	int alt80 = 2;
            	int LA80_0 = input.LA(1);
            	
            	if ( (LA80_0 == LPAREN) )
            	{
            	    alt80 = 1;
            	}
            	switch (alt80) 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:751:7: LPAREN Integer RPAREN
            	        {
            	        	Match(input,LPAREN,FOLLOW_LPAREN_in_intervalLiteral3143); if (failed) return value;
            	        	Integer14 = (IToken)input.LT(1);
            	        	Match(input,Integer,FOLLOW_Integer_in_intervalLiteral3145); if (failed) return value;
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	  
            	        	  			value.Precision = int.Parse(Integer14.Text);
            	        	  		
            	        	}
            	        	Match(input,RPAREN,FOLLOW_RPAREN_in_intervalLiteral3149); if (failed) return value;
            	        
            	        }
            	        break;
            	
            	}

            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end intervalLiteral

    
    // $ANTLR start nonNegativeInteger
    // MacroScope\\MacroScope.g:756:1: nonNegativeInteger returns [ int value ] : Integer ;
    public int nonNegativeInteger() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="nonNegativeInteger" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="600011d" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="4"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
<hit index="10" value="4"/>
<hit index="11" value="2"/>
<hit index="13" value="2"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="16" value="2"/>
<hit index="17" value="2"/>
<hit index="18" value="4"/>
<hit index="19" value="2"/>
<hit index="20" value="2"/>
<hit index="21" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="8" total="9" coveredRatio="0.88888888888888884"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[int value = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0003" domain="userortestcode"><source><![CDATA[IToken Integer15 = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:756:42: ( Integer )
            // MacroScope\\MacroScope.g:757:2: Integer
            ]]></source>
</chunk>
<chunk hits="2" offset="0006" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[Integer15 = (IToken)input.LT(1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="6" offset="0014" domain="userortestcode"><source><![CDATA[Match(input,Integer,FOLLOW_Integer_in_nonNegativeInteger3167);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="6" offset="0028" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0035" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	]]></source>
</chunk>
<chunk hits="2" offset="0039" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="0049" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	   ]]></source>
</chunk>
<chunk hits="2" offset="004a" domain="userortestcode"><source><![CDATA[value =  int.Parse(Integer15.Text);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            	]]></source>
</chunk>
<chunk hits="2" offset="0056" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            ]]></source>
</chunk>
<chunk hits="2" offset="0057" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        ]]></source>
</chunk>
<chunk hits="2" offset="0058" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="2" offset="005b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="005c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="005f" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="2" offset="0064" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end nonNegativeInteger

    
    // $ANTLR start unaryOperator
    // MacroScope\\MacroScope.g:760:1: unaryOperator returns [ ExpressionOperator value ] : ( PLUS | MINUS );
    public ExpressionOperator unaryOperator() // throws RecognitionException [1]
    {   

        ExpressionOperator value = null;
    
        try 
    	{
            // MacroScope\\MacroScope.g:760:52: ( PLUS | MINUS )
            int alt81 = 2;
            int LA81_0 = input.LA(1);
            
            if ( (LA81_0 == PLUS) )
            {
                alt81 = 1;
            }
            else if ( (LA81_0 == MINUS) )
            {
                alt81 = 2;
            }
            else 
            {
                if ( backtracking > 0 ) {failed = true; return value;}
                NoViableAltException nvae_d81s0 =
                    new NoViableAltException("760:1: unaryOperator returns [ ExpressionOperator value ] : ( PLUS | MINUS );", 81, 0, input);
            
                throw nvae_d81s0;
            }
            switch (alt81) 
            {
                case 1 :
                    // MacroScope\\MacroScope.g:761:2: PLUS
                    {
                    	Match(input,PLUS,FOLLOW_PLUS_in_unaryOperator3184); if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	   value =  ExpressionOperator.Plus; 
                    	}
                    
                    }
                    break;
                case 2 :
                    // MacroScope\\MacroScope.g:762:4: MINUS
                    {
                    	Match(input,MINUS,FOLLOW_MINUS_in_unaryOperator3191); if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	   value =  ExpressionOperator.Minus; 
                    	}
                    
                    }
                    break;
            
            }
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end unaryOperator

    
    // $ANTLR start additiveOperator
    // MacroScope\\MacroScope.g:765:1: additiveOperator returns [ ExpressionOperator value ] : ( PLUS | MINUS | STRCONCAT );
    public ExpressionOperator additiveOperator() // throws RecognitionException [1]
    {   

        ExpressionOperator value = null;
    
        try 
    	{
            // MacroScope\\MacroScope.g:765:55: ( PLUS | MINUS | STRCONCAT )
            int alt82 = 3;
            switch ( input.LA(1) ) 
            {
            case PLUS:
            	{
                alt82 = 1;
                }
                break;
            case MINUS:
            	{
                alt82 = 2;
                }
                break;
            case STRCONCAT:
            	{
                alt82 = 3;
                }
                break;
            	default:
            	    if ( backtracking > 0 ) {failed = true; return value;}
            	    NoViableAltException nvae_d82s0 =
            	        new NoViableAltException("765:1: additiveOperator returns [ ExpressionOperator value ] : ( PLUS | MINUS | STRCONCAT );", 82, 0, input);
            
            	    throw nvae_d82s0;
            }
            
            switch (alt82) 
            {
                case 1 :
                    // MacroScope\\MacroScope.g:766:2: PLUS
                    {
                    	Match(input,PLUS,FOLLOW_PLUS_in_additiveOperator3208); if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	   value =  ExpressionOperator.Plus; 
                    	}
                    
                    }
                    break;
                case 2 :
                    // MacroScope\\MacroScope.g:767:4: MINUS
                    {
                    	Match(input,MINUS,FOLLOW_MINUS_in_additiveOperator3215); if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	   value =  ExpressionOperator.Minus; 
                    	}
                    
                    }
                    break;
                case 3 :
                    // MacroScope\\MacroScope.g:768:4: STRCONCAT
                    {
                    	Match(input,STRCONCAT,FOLLOW_STRCONCAT_in_additiveOperator3222); if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	   value =  ExpressionOperator.StrConcat; 
                    	}
                    
                    }
                    break;
            
            }
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end additiveOperator

    
    // $ANTLR start multiplicativeArithmeticOperator
    // MacroScope\\MacroScope.g:771:1: multiplicativeArithmeticOperator returns [ ExpressionOperator value ] : ( STAR | DIVIDE | MOD );
    public ExpressionOperator multiplicativeArithmeticOperator() // throws RecognitionException [1]
    {   

        ExpressionOperator value = null;
    
        try 
    	{
            // MacroScope\\MacroScope.g:771:71: ( STAR | DIVIDE | MOD )
            int alt83 = 3;
            switch ( input.LA(1) ) 
            {
            case STAR:
            	{
                alt83 = 1;
                }
                break;
            case DIVIDE:
            	{
                alt83 = 2;
                }
                break;
            case MOD:
            	{
                alt83 = 3;
                }
                break;
            	default:
            	    if ( backtracking > 0 ) {failed = true; return value;}
            	    NoViableAltException nvae_d83s0 =
            	        new NoViableAltException("771:1: multiplicativeArithmeticOperator returns [ ExpressionOperator value ] : ( STAR | DIVIDE | MOD );", 83, 0, input);
            
            	    throw nvae_d83s0;
            }
            
            switch (alt83) 
            {
                case 1 :
                    // MacroScope\\MacroScope.g:772:2: STAR
                    {
                    	Match(input,STAR,FOLLOW_STAR_in_multiplicativeArithmeticOperator3243); if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	   value =  ExpressionOperator.Mult; 
                    	}
                    
                    }
                    break;
                case 2 :
                    // MacroScope\\MacroScope.g:773:4: DIVIDE
                    {
                    	Match(input,DIVIDE,FOLLOW_DIVIDE_in_multiplicativeArithmeticOperator3250); if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	   value =  ExpressionOperator.Div; 
                    	}
                    
                    }
                    break;
                case 3 :
                    // MacroScope\\MacroScope.g:774:4: MOD
                    {
                    	Match(input,MOD,FOLLOW_MOD_in_multiplicativeArithmeticOperator3257); if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	   value =  ExpressionOperator.Mod; 
                    	}
                    
                    }
                    break;
            
            }
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end multiplicativeArithmeticOperator

    
    // $ANTLR start comparisonOperator
    // MacroScope\\MacroScope.g:777:1: comparisonOperator returns [ ExpressionOperator value ] : ( ASSIGNEQUAL | NOTEQUAL1 | NOTEQUAL2 | LESSTHANOREQUALTO1 | LESSTHAN | GREATERTHANOREQUALTO1 | GREATERTHAN );
    public ExpressionOperator comparisonOperator() // throws RecognitionException [1]
    ]]></source>
</chunk>
<method name="comparisonOperator" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="6000121" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="4"/>
<hit index="18" value="2"/>
<hit index="19" value="2"/>
<hit index="20" value="2"/>
<hit index="21" value="2"/>
<hit index="22" value="4"/>
<hit index="23" value="2"/>
<hit index="25" value="2"/>
<hit index="26" value="2"/>
<hit index="27" value="2"/>
<hit index="28" value="2"/>
<hit index="95" value="2"/>
<hit index="103" value="2"/>
<hit index="110" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="9" total="64" coveredRatio="0.140625"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[   

        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[ExpressionOperator value = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        try 
    	]]></source>
</chunk>
<chunk hits="2" offset="0003" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // MacroScope\\MacroScope.g:777:57: ( ASSIGNEQUAL | NOTEQUAL1 | NOTEQUAL2 | LESSTHANOREQUALTO1 | LESSTHAN | GREATERTHANOREQUALTO1 | GREATERTHAN )
            ]]></source>
</chunk>
<chunk hits="2" offset="0004" domain="userortestcode"><source><![CDATA[int alt84 = 7;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0006" domain="userortestcode"><source><![CDATA[switch ( input.LA(1) )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
            case ASSIGNEQUAL:
            	]]></source>
</chunk>
<chunk hits="2" offset="003e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="003f" domain="userortestcode"><source><![CDATA[alt84 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0041" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0042" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case NOTEQUAL1:
            	]]></source>
</chunk>
<chunk hits="0" offset="0044" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0045" domain="userortestcode"><source><![CDATA[alt84 = 2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0047" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0048" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case NOTEQUAL2:
            	]]></source>
</chunk>
<chunk hits="0" offset="004a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="004b" domain="userortestcode"><source><![CDATA[alt84 = 3;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="004d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="004e" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case LESSTHANOREQUALTO1:
            	]]></source>
</chunk>
<chunk hits="0" offset="0050" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0051" domain="userortestcode"><source><![CDATA[alt84 = 4;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0053" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0054" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case LESSTHAN:
            	]]></source>
</chunk>
<chunk hits="0" offset="0056" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0057" domain="userortestcode"><source><![CDATA[alt84 = 5;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0059" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="005a" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case GREATERTHANOREQUALTO1:
            	]]></source>
</chunk>
<chunk hits="0" offset="005c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="005d" domain="userortestcode"><source><![CDATA[alt84 = 6;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="005f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0060" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            case GREATERTHAN:
            	]]></source>
</chunk>
<chunk hits="0" offset="0062" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0063" domain="userortestcode"><source><![CDATA[alt84 = 7;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0065" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0066" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            	default:
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0068" domain="userortestcode"><source><![CDATA[if ( backtracking > 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="007a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="0" offset="007b" domain="userortestcode"><source><![CDATA[failed = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0082" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[}
            	    ]]></source>
</chunk>
<chunk hits="0" offset="0089" domain="userortestcode"><source><![CDATA[NoViableAltException nvae_d84s0 =
            	        new NoViableAltException("777:1: comparisonOperator returns [ ExpressionOperator value ] : ( ASSIGNEQUAL | NOTEQUAL1 | NOTEQUAL2 | LESSTHANOREQUALTO1 | LESSTHAN | GREATERTHANOREQUALTO1 | GREATERTHAN );", 84, 0, input);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            	    ]]></source>
</chunk>
<chunk hits="0" offset="009d" domain="userortestcode"><source><![CDATA[throw nvae_d84s0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }
            
            ]]></source>
</chunk>
<chunk hits="2" offset="009f" domain="userortestcode"><source><![CDATA[switch (alt84)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            {
                case 1 :
                    // MacroScope\\MacroScope.g:778:2: ASSIGNEQUAL
                    ]]></source>
</chunk>
<chunk hits="2" offset="00cc" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="00cd" domain="userortestcode"><source><![CDATA[Match(input,ASSIGNEQUAL,FOLLOW_ASSIGNEQUAL_in_comparisonOperator3278);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="6" offset="00e1" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00f0" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="2" offset="00f7" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="2" offset="0109" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	   ]]></source>
</chunk>
<chunk hits="2" offset="010a" domain="userortestcode"><source><![CDATA[value =  ExpressionOperator.Equal;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="2" offset="0110" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="2" offset="0111" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="0112" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 2 :
                    // MacroScope\\MacroScope.g:779:4: NOTEQUAL1
                    ]]></source>
</chunk>
<chunk hits="0" offset="0117" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0118" domain="userortestcode"><source><![CDATA[Match(input,NOTEQUAL1,FOLLOW_NOTEQUAL1_in_comparisonOperator3285);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="012c" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="013b" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0142" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="0154" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	   ]]></source>
</chunk>
<chunk hits="0" offset="0155" domain="userortestcode"><source><![CDATA[value =  ExpressionOperator.NotEqual;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="015b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="015c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="015d" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 3 :
                    // MacroScope\\MacroScope.g:780:4: NOTEQUAL2
                    ]]></source>
</chunk>
<chunk hits="0" offset="0162" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0163" domain="userortestcode"><source><![CDATA[Match(input,NOTEQUAL2,FOLLOW_NOTEQUAL2_in_comparisonOperator3292);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0177" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0186" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="018d" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="019f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	   ]]></source>
</chunk>
<chunk hits="0" offset="01a0" domain="userortestcode"><source><![CDATA[value =  ExpressionOperator.NotEqual;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="01a6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="01a7" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="01a8" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 4 :
                    // MacroScope\\MacroScope.g:781:4: LESSTHANOREQUALTO1
                    ]]></source>
</chunk>
<chunk hits="0" offset="01ad" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="01ae" domain="userortestcode"><source><![CDATA[Match(input,LESSTHANOREQUALTO1,FOLLOW_LESSTHANOREQUALTO1_in_comparisonOperator3299);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="01c2" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="01d1" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="01d8" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="01ea" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	   ]]></source>
</chunk>
<chunk hits="0" offset="01eb" domain="userortestcode"><source><![CDATA[value =  ExpressionOperator.LessOrEqual;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="01f1" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="01f2" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="01f3" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 5 :
                    // MacroScope\\MacroScope.g:782:4: LESSTHAN
                    ]]></source>
</chunk>
<chunk hits="0" offset="01f8" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="01f9" domain="userortestcode"><source><![CDATA[Match(input,LESSTHAN,FOLLOW_LESSTHAN_in_comparisonOperator3306);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="020d" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="021c" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0223" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="0235" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	   ]]></source>
</chunk>
<chunk hits="0" offset="0236" domain="userortestcode"><source><![CDATA[value =  ExpressionOperator.Less;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="023c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="023d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="023e" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 6 :
                    // MacroScope\\MacroScope.g:783:4: GREATERTHANOREQUALTO1
                    ]]></source>
</chunk>
<chunk hits="0" offset="0243" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0244" domain="userortestcode"><source><![CDATA[Match(input,GREATERTHANOREQUALTO1,FOLLOW_GREATERTHANOREQUALTO1_in_comparisonOperator3313);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0258" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0267" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="026b" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="027d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	   ]]></source>
</chunk>
<chunk hits="0" offset="027e" domain="userortestcode"><source><![CDATA[value =  ExpressionOperator.GreaterOrEqual;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="0284" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="0285" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0286" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                case 7 :
                    // MacroScope\\MacroScope.g:784:4: GREATERTHAN
                    ]]></source>
</chunk>
<chunk hits="0" offset="0288" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="0289" domain="userortestcode"><source><![CDATA[Match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_comparisonOperator3320);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="029d" domain="userortestcode"><source><![CDATA[if (failed)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="02ac" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	]]></source>
</chunk>
<chunk hits="0" offset="02b0" domain="userortestcode"><source><![CDATA[if ( backtracking == 0 )]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="02c2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    	   ]]></source>
</chunk>
<chunk hits="0" offset="02c3" domain="userortestcode"><source><![CDATA[value =  ExpressionOperator.Greater;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                    	]]></source>
</chunk>
<chunk hits="0" offset="02c9" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="02ca" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="02cb" domain="userortestcode"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            }
        ]]></source>
</chunk>
<chunk hits="2" offset="02cd" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        
        finally 
    	]]></source>
</chunk>
<chunk hits="2" offset="02d0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="02d1" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="02d4" domain="userortestcode"><source><![CDATA[return value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    ]]></source>
</chunk>
<chunk hits="2" offset="02d9" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    // $ANTLR end comparisonOperator

    
    // $ANTLR start unionOperator
    // MacroScope\\MacroScope.g:787:1: unionOperator returns [ bool value ] : UNION ( ALL )? ;
    public bool unionOperator() // throws RecognitionException [1]
    {   

        bool value = false;
    
        try 
    	{
            // MacroScope\\MacroScope.g:787:38: ( UNION ( ALL )? )
            // MacroScope\\MacroScope.g:788:2: UNION ( ALL )?
            {
            	Match(input,UNION,FOLLOW_UNION_in_unionOperator3337); if (failed) return value;
            	if ( backtracking == 0 ) 
            	{
            	   value =  false; 
            	}
            	// MacroScope\\MacroScope.g:789:2: ( ALL )?
            	int alt85 = 2;
            	int LA85_0 = input.LA(1);
            	
            	if ( (LA85_0 == ALL) )
            	{
            	    alt85 = 1;
            	}
            	switch (alt85) 
            	{
            	    case 1 :
            	        // MacroScope\\MacroScope.g:789:4: ALL
            	        {
            	        	Match(input,ALL,FOLLOW_ALL_in_unionOperator3344); if (failed) return value;
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	   value =  true; 
            	        	}
            	        
            	        }
            	        break;
            	
            	}

            
            }
    
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end unionOperator

    
    // $ANTLR start datetimeField
    // MacroScope\\MacroScope.g:792:1: datetimeField returns [ DateTimeUnit value ] : ( YEAR | MONTH | DAY | HOUR | MINUTE | SECOND );
    public DateTimeUnit datetimeField() // throws RecognitionException [1]
    {   

        DateTimeUnit value = null;
    
        try 
    	{
            // MacroScope\\MacroScope.g:792:46: ( YEAR | MONTH | DAY | HOUR | MINUTE | SECOND )
            int alt86 = 6;
            switch ( input.LA(1) ) 
            {
            case YEAR:
            	{
                alt86 = 1;
                }
                break;
            case MONTH:
            	{
                alt86 = 2;
                }
                break;
            case DAY:
            	{
                alt86 = 3;
                }
                break;
            case HOUR:
            	{
                alt86 = 4;
                }
                break;
            case MINUTE:
            	{
                alt86 = 5;
                }
                break;
            case SECOND:
            	{
                alt86 = 6;
                }
                break;
            	default:
            	    if ( backtracking > 0 ) {failed = true; return value;}
            	    NoViableAltException nvae_d86s0 =
            	        new NoViableAltException("792:1: datetimeField returns [ DateTimeUnit value ] : ( YEAR | MONTH | DAY | HOUR | MINUTE | SECOND );", 86, 0, input);
            
            	    throw nvae_d86s0;
            }
            
            switch (alt86) 
            {
                case 1 :
                    // MacroScope\\MacroScope.g:793:2: YEAR
                    {
                    	Match(input,YEAR,FOLLOW_YEAR_in_datetimeField3364); if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	   value =  DateTimeUnit.Year; 
                    	}
                    
                    }
                    break;
                case 2 :
                    // MacroScope\\MacroScope.g:794:4: MONTH
                    {
                    	Match(input,MONTH,FOLLOW_MONTH_in_datetimeField3371); if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	   value =  DateTimeUnit.Month; 
                    	}
                    
                    }
                    break;
                case 3 :
                    // MacroScope\\MacroScope.g:795:4: DAY
                    {
                    	Match(input,DAY,FOLLOW_DAY_in_datetimeField3378); if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	   value =  DateTimeUnit.Day; 
                    	}
                    
                    }
                    break;
                case 4 :
                    // MacroScope\\MacroScope.g:796:4: HOUR
                    {
                    	Match(input,HOUR,FOLLOW_HOUR_in_datetimeField3385); if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	   value =  DateTimeUnit.Hour; 
                    	}
                    
                    }
                    break;
                case 5 :
                    // MacroScope\\MacroScope.g:797:4: MINUTE
                    {
                    	Match(input,MINUTE,FOLLOW_MINUTE_in_datetimeField3392); if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	   value =  DateTimeUnit.Minute; 
                    	}
                    
                    }
                    break;
                case 6 :
                    // MacroScope\\MacroScope.g:798:4: SECOND
                    {
                    	Match(input,SECOND,FOLLOW_SECOND_in_datetimeField3399); if (failed) return value;
                    	if ( backtracking == 0 ) 
                    	{
                    	   value =  DateTimeUnit.Second; 
                    	}
                    
                    }
                    break;
            
            }
        }
        
        finally 
    	{
        }
        return value;
    }
    // $ANTLR end datetimeField

    // $ANTLR start synpred1
    public void synpred1_fragment() //throws RecognitionException
    {   
        // MacroScope\\MacroScope.g:205:3: ( bracketedSearchCondition )
        // MacroScope\\MacroScope.g:205:4: bracketedSearchCondition
        {
        	PushFollow(FOLLOW_bracketedSearchCondition_in_synpred11047);
        	bracketedSearchCondition();
        	followingStackPointer_--;
        	if (failed) return ;
        
        }
    }
    // $ANTLR end synpred1

    // $ANTLR start synpred2
    public void synpred2_fragment() //throws RecognitionException
    {   
        // MacroScope\\MacroScope.g:306:5: ( selectStatement )
        // MacroScope\\MacroScope.g:306:7: selectStatement
        {
        	PushFollow(FOLLOW_selectStatement_in_synpred21308);
        	selectStatement();
        	followingStackPointer_--;
        	if (failed) return ;
        
        }
    }
    // $ANTLR end synpred2

    // $ANTLR start synpred3
    public void synpred3_fragment() //throws RecognitionException
    {   
        // MacroScope\\MacroScope.g:349:3: ( alias2 )
        // MacroScope\\MacroScope.g:349:4: alias2
        {
        	PushFollow(FOLLOW_alias2_in_synpred31494);
        	alias2();
        	followingStackPointer_--;
        	if (failed) return ;
        
        }
    }
    // $ANTLR end synpred3

    // $ANTLR start synpred4
    public void synpred4_fragment() //throws RecognitionException
    {   
        // MacroScope\\MacroScope.g:357:5: ( tableColumns )
        // MacroScope\\MacroScope.g:357:6: tableColumns
        {
        	PushFollow(FOLLOW_tableColumns_in_synpred41531);
        	tableColumns();
        	followingStackPointer_--;
        	if (failed) return ;
        
        }
    }
    // $ANTLR end synpred4

    // $ANTLR start synpred5
    public void synpred5_fragment() //throws RecognitionException
    {   
        // MacroScope\\MacroScope.g:382:3: ( joinedTables )
        // MacroScope\\MacroScope.g:382:4: joinedTables
        {
        	PushFollow(FOLLOW_joinedTables_in_synpred51670);
        	joinedTables();
        	followingStackPointer_--;
        	if (failed) return ;
        
        }
    }
    // $ANTLR end synpred5

    // $ANTLR start synpred6
    public void synpred6_fragment() //throws RecognitionException
    {   
        // MacroScope\\MacroScope.g:387:5: ( queryExpression )
        // MacroScope\\MacroScope.g:387:6: queryExpression
        {
        	PushFollow(FOLLOW_queryExpression_in_synpred61693);
        	queryExpression();
        	followingStackPointer_--;
        	if (failed) return ;
        
        }
    }
    // $ANTLR end synpred6

    // $ANTLR start synpred7
    public void synpred7_fragment() //throws RecognitionException
    {   
        // MacroScope\\MacroScope.g:400:4: ( function )
        // MacroScope\\MacroScope.g:400:5: function
        {
        	PushFollow(FOLLOW_function_in_synpred71741);
        	function();
        	followingStackPointer_--;
        	if (failed) return ;
        
        }
    }
    // $ANTLR end synpred7

    // $ANTLR start synpred8
    public void synpred8_fragment() //throws RecognitionException
    {   
        // MacroScope\\MacroScope.g:481:11: ( selectStatement )
        // MacroScope\\MacroScope.g:481:12: selectStatement
        {
        	PushFollow(FOLLOW_selectStatement_in_synpred82176);
        	selectStatement();
        	followingStackPointer_--;
        	if (failed) return ;
        
        }
    }
    // $ANTLR end synpred8

    // $ANTLR start synpred9
    public void synpred9_fragment() //throws RecognitionException
    {   
        // MacroScope\\MacroScope.g:520:5: ( function )
        // MacroScope\\MacroScope.g:520:6: function
        {
        	PushFollow(FOLLOW_function_in_synpred92274);
        	function();
        	followingStackPointer_--;
        	if (failed) return ;
        
        }
    }
    // $ANTLR end synpred9

   	public bool synpred9() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred9_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred5() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred5_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred6() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred6_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred7() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred7_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred8() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred8_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred1() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred1_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred2() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred2_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred3() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred3_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred4() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred4_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}


   	protected DFA39 dfa39;
	private void InitializeCyclicDFAs()
	]]></source>
</chunk>
<method name="InitializeCyclicDFAs" namespace="MacroScope" type="MacroScope.MacroScopeParser" typeName="MacroScopeParser" token="6000136" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="9" value="2"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    	]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[this.dfa39 = new DFA39(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
	    ]]></source>
</chunk>
<chunk hits="4" offset="000d" domain="userortestcode"><source><![CDATA[this.dfa39.specialStateTransitionHandler = new DFA.SpecialStateTransitionHandler(DFA39_SpecialStateTransition);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
	]]></source>
</chunk>
<chunk hits="4" offset="0024" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

    static readonly short[] DFA39_eot = {
        -1, -1, -1, -1, -1, -1, -1, -1, -1
        };
    static readonly short[] DFA39_eof = {
        -1, 3, 3, -1, -1, -1, -1, 3, 3
        };
    static readonly int[] DFA39_min = {
        6, 6, 7, 0, 56, 0, 0, 7, 7
        };
    static readonly int[] DFA39_max = {
        73, 83, 83, 0, 66, 0, 0, 83, 83
        };
    static readonly short[] DFA39_accept = {
        -1, -1, -1, 3, -1, 2, 1, -1, -1
        };
    static readonly short[] DFA39_special = {
        -1, 2, 0, -1, -1, -1, -1, 1, 3
        };
    
    static readonly short[] dfa39_transition_null = null;

    static readonly short[] dfa39_transition0 = {
    	3, -1, -1, -1, -1, 3, 3, 6, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, -1, 
    	    3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 
    	    -1, -1, -1, -1, -1, -1, 3, 5, -1, -1, -1, -1, -1, 3, -1, -1, -1, 
    	    -1, -1, -1, 4, -1, -1, 3, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, -1, 
    	    -1, -1, -1, -1, -1, 3
    	};
    static readonly short[] dfa39_transition1 = {
    	3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, 
    	    -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, 
    	    -1, -1, 3, 3, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, -1, 3, 1, 3, 
    	    -1, -1, -1, -1, 3, -1, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3
    	};
    static readonly short[] dfa39_transition2 = {
    	7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8
    	};
    static readonly short[] dfa39_transition3 = {
    	3, -1, -1, -1, -1, 3, 3, -1, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 
    	    -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 
    	    -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, -1, -1, -1, -1, 3, -1, -1, 
    	    -1, -1, -1, -1, 4, -1, -1, 3, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 
    	    -1, -1, -1, -1, -1, -1, 3
    	};
    static readonly short[] dfa39_transition4 = {
    	3, 3, -1, -1, -1, -1, 3, 3, 6, -1, -1, -1, -1, -1, -1, 3, 3, -1, -1, 
    	    -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, 
    	    -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, -1, -1, -1, -1, 3, -1, -1, 
    	    -1, -1, -1, -1, 4, -1, -1, 3, -1, -1, -1, -1, -1, 3, 3, 3, 3, 3, 
    	    -1, -1, -1, -1, -1, -1, 3
    	};
    
    static readonly short[][] DFA39_transition = {
    	dfa39_transition1,
    	dfa39_transition4,
    	dfa39_transition0,
    	dfa39_transition_null,
    	dfa39_transition2,
    	dfa39_transition_null,
    	dfa39_transition_null,
    	dfa39_transition3,
    	dfa39_transition3
        };
    
    protected class DFA39 : DFA
    {
        ]]></source>
</chunk>
<method name=".ctor" namespace="MacroScope" type="MacroScope.MacroScopeParser+DFA39" typeName="MacroScopeParser+DFA39" token="6000139" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="2"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="16" value="2"/>
<hit index="17" value="2"/>
<hit index="18" value="2"/>
<hit index="19" value="2"/>
<hit index="20" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[public DFA39(BaseRecognizer recognizer)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
        ]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0008" domain="userortestcode"><source><![CDATA[this.recognizer = recognizer;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="000f" domain="userortestcode"><source><![CDATA[this.decisionNumber = 39;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0017" domain="userortestcode"><source><![CDATA[this.eot = DFA39_eot;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0022" domain="userortestcode"><source><![CDATA[this.eof = DFA39_eof;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="002d" domain="userortestcode"><source><![CDATA[this.min = DFA39_min;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0038" domain="userortestcode"><source><![CDATA[this.max = DFA39_max;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0043" domain="userortestcode"><source><![CDATA[this.accept     = DFA39_accept;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="004e" domain="userortestcode"><source><![CDATA[this.special    = DFA39_special;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0059" domain="userortestcode"><source><![CDATA[this.transition = DFA39_transition;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0064" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    
        override public string Description
        {
            get { return "347:4: ( ( alias2 )=> (a= alias2 e= expression ) | ( tableColumns )=>t= tableColumns | e= expression (a= alias1 )? )"; }
        }
    
    }
    
    
    protected internal int DFA39_SpecialStateTransition(DFA dfa, int s, IIntStream input) //throws NoViableAltException
    {
    	int _s = s;
        switch ( s )
        {

               	case 0 : 
                   	int LA39_2 = input.LA(1);
                   	
                   	 
                   	int index39_2 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA39_2 == ASSIGNEQUAL) && (synpred3()) ) { s = 6; }

                   	else if ( (LA39_2 == DOT) ) { s = 4; }

                   	else if ( (LA39_2 == EOF || LA39_2 == RPAREN || (LA39_2 >= FROM && LA39_2 <= COMMA) || (LA39_2 >= WHERE && LA39_2 <= ORDER) || LA39_2 == GROUP || LA39_2 == STAR || LA39_2 == AS || LA39_2 == NonQuotedIdentifier || LA39_2 == QuotedIdentifier || (LA39_2 >= PLUS && LA39_2 <= MOD) || LA39_2 == UNION) ) { s = 3; }

                   	else if ( (LA39_2 == DOT_STAR) && (synpred4()) ) { s = 5; }
                   	
                   	 
                   	input.Seek(index39_2);
                   	if ( s >= 0 ) return s;
                   	break;

               	case 1 : 
                   	int LA39_7 = input.LA(1);
                   	
                   	 
                   	int index39_7 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA39_7 == EOF || LA39_7 == RPAREN || (LA39_7 >= FROM && LA39_7 <= COMMA) || (LA39_7 >= WHERE && LA39_7 <= ORDER) || LA39_7 == GROUP || LA39_7 == STAR || LA39_7 == AS || LA39_7 == NonQuotedIdentifier || LA39_7 == QuotedIdentifier || (LA39_7 >= PLUS && LA39_7 <= MOD) || LA39_7 == UNION) ) { s = 3; }

                   	else if ( (LA39_7 == DOT) ) { s = 4; }

                   	else if ( (LA39_7 == DOT_STAR) && (synpred4()) ) { s = 5; }
                   	
                   	 
                   	input.Seek(index39_7);
                   	if ( s >= 0 ) return s;
                   	break;

               	case 2 : 
                   	int LA39_1 = input.LA(1);
                   	
                   	 
                   	int index39_1 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA39_1 == DOT) ) { s = 4; }

                   	else if ( (LA39_1 == DOT_STAR) && (synpred4()) ) { s = 5; }

                   	else if ( (LA39_1 == ASSIGNEQUAL) && (synpred3()) ) { s = 6; }

                   	else if ( (LA39_1 == EOF || (LA39_1 >= LPAREN && LA39_1 <= RPAREN) || (LA39_1 >= FROM && LA39_1 <= COMMA) || (LA39_1 >= WHERE && LA39_1 <= ORDER) || LA39_1 == GROUP || LA39_1 == STAR || LA39_1 == AS || LA39_1 == NonQuotedIdentifier || LA39_1 == QuotedIdentifier || (LA39_1 >= PLUS && LA39_1 <= MOD) || LA39_1 == UNION) ) { s = 3; }
                   	
                   	 
                   	input.Seek(index39_1);
                   	if ( s >= 0 ) return s;
                   	break;

               	case 3 : 
                   	int LA39_8 = input.LA(1);
                   	
                   	 
                   	int index39_8 = input.Index();
                   	input.Rewind();
                   	s = -1;
                   	if ( (LA39_8 == EOF || LA39_8 == RPAREN || (LA39_8 >= FROM && LA39_8 <= COMMA) || (LA39_8 >= WHERE && LA39_8 <= ORDER) || LA39_8 == GROUP || LA39_8 == STAR || LA39_8 == AS || LA39_8 == NonQuotedIdentifier || LA39_8 == QuotedIdentifier || (LA39_8 >= PLUS && LA39_8 <= MOD) || LA39_8 == UNION) ) { s = 3; }

                   	else if ( (LA39_8 == DOT) ) { s = 4; }

                   	else if ( (LA39_8 == DOT_STAR) && (synpred4()) ) { s = 5; }
                   	
                   	 
                   	input.Seek(index39_8);
                   	if ( s >= 0 ) return s;
                   	break;
        }
        if (backtracking > 0) {failed = true; return -1;}
        NoViableAltException nvae =
            new NoViableAltException(dfa.Description, 39, _s, input);
        dfa.Error(nvae);
        throw nvae;
    }
 

    public static readonly BitSet FOLLOW_insertStatement_in_statement66 = new BitSet(new ulong[]{0x0000000000000000UL});
    public static readonly BitSet FOLLOW_EOF_in_statement68 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_selectStatement_in_statement79 = new BitSet(new ulong[]{0x0000000000000000UL});
    public static readonly BitSet FOLLOW_EOF_in_statement81 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_updateStatement_in_statement92 = new BitSet(new ulong[]{0x0000000000000000UL});
    public static readonly BitSet FOLLOW_EOF_in_statement94 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_deleteStatement_in_statement105 = new BitSet(new ulong[]{0x0000000000000000UL});
    public static readonly BitSet FOLLOW_EOF_in_statement107 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_INSERT_in_insertStatement126 = new BitSet(new ulong[]{0x0100000000000020UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_INTO_in_insertStatement132 = new BitSet(new ulong[]{0x0100000000000000UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_dbObject_in_insertStatement143 = new BitSet(new ulong[]{0x0000000000000040UL});
    public static readonly BitSet FOLLOW_LPAREN_in_insertStatement155 = new BitSet(new ulong[]{0x0100000000000040UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_columnNameList_in_insertStatement161 = new BitSet(new ulong[]{0x0000000000000080UL});
    public static readonly BitSet FOLLOW_RPAREN_in_insertStatement163 = new BitSet(new ulong[]{0x0000000000000100UL});
    public static readonly BitSet FOLLOW_VALUES_in_insertStatement169 = new BitSet(new ulong[]{0x0000000000000040UL});
    public static readonly BitSet FOLLOW_LPAREN_in_insertStatement171 = new BitSet(new ulong[]{0x43B80C0100108040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_columnValueList_in_insertStatement177 = new BitSet(new ulong[]{0x0000000000000080UL});
    public static readonly BitSet FOLLOW_RPAREN_in_insertStatement179 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_queryExpression_in_selectStatement206 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_UPDATE_in_updateStatement225 = new BitSet(new ulong[]{0x0100000000000000UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_dbObject_in_updateStatement235 = new BitSet(new ulong[]{0x0000000000000400UL});
    public static readonly BitSet FOLLOW_SET_in_updateStatement241 = new BitSet(new ulong[]{0x0100000000000040UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_assignmentList_in_updateStatement247 = new BitSet(new ulong[]{0x0000000000200002UL});
    public static readonly BitSet FOLLOW_whereClause_in_updateStatement266 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_DELETE_in_deleteStatement293 = new BitSet(new ulong[]{0x0100000000001000UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_FROM_in_deleteStatement299 = new BitSet(new ulong[]{0x0100000000000000UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_dbObject_in_deleteStatement310 = new BitSet(new ulong[]{0x0000000000200002UL});
    public static readonly BitSet FOLLOW_whereClause_in_deleteStatement326 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_assignment_in_assignmentList356 = new BitSet(new ulong[]{0x0000000000002002UL});
    public static readonly BitSet FOLLOW_COMMA_in_assignmentList362 = new BitSet(new ulong[]{0x0100000000000040UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_assignment_in_assignmentList368 = new BitSet(new ulong[]{0x0000000000002002UL});
    public static readonly BitSet FOLLOW_column_in_assignment392 = new BitSet(new ulong[]{0x0000000000004000UL});
    public static readonly BitSet FOLLOW_ASSIGNEQUAL_in_assignment394 = new BitSet(new ulong[]{0x43B80C0100108040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_columnValue_in_assignment400 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_column_in_columnNameList421 = new BitSet(new ulong[]{0x0000000000002002UL});
    public static readonly BitSet FOLLOW_COMMA_in_columnNameList429 = new BitSet(new ulong[]{0x0100000000000040UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_column_in_columnNameList435 = new BitSet(new ulong[]{0x0000000000002002UL});
    public static readonly BitSet FOLLOW_columnValue_in_columnValueList459 = new BitSet(new ulong[]{0x0000000000002002UL});
    public static readonly BitSet FOLLOW_COMMA_in_columnValueList465 = new BitSet(new ulong[]{0x43B80C0100108040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_columnValue_in_columnValueList471 = new BitSet(new ulong[]{0x0000000000002002UL});
    public static readonly BitSet FOLLOW_DEFAULT_in_columnValue491 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_columnValue502 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_subQueryExpression_in_queryExpression523 = new BitSet(new ulong[]{0x0000000000400002UL,0x0000000000080000UL});
    public static readonly BitSet FOLLOW_unionOperator_in_queryExpression535 = new BitSet(new ulong[]{0x0000000000010040UL});
    public static readonly BitSet FOLLOW_subQueryExpression_in_queryExpression543 = new BitSet(new ulong[]{0x0000000000400002UL,0x0000000000080000UL});
    public static readonly BitSet FOLLOW_orderByClause_in_queryExpression558 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_querySpecification_in_subQueryExpression582 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LPAREN_in_subQueryExpression590 = new BitSet(new ulong[]{0x0000000000010040UL});
    public static readonly BitSet FOLLOW_queryExpression_in_subQueryExpression596 = new BitSet(new ulong[]{0x0000000000000080UL});
    public static readonly BitSet FOLLOW_RPAREN_in_subQueryExpression598 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_selectClause_in_querySpecification619 = new BitSet(new ulong[]{0x0000000004201002UL});
    public static readonly BitSet FOLLOW_fromClause_in_querySpecification630 = new BitSet(new ulong[]{0x0000000004200002UL});
    public static readonly BitSet FOLLOW_whereClause_in_querySpecification644 = new BitSet(new ulong[]{0x0000000004000002UL});
    public static readonly BitSet FOLLOW_groupByClause_in_querySpecification658 = new BitSet(new ulong[]{0x0000000008000002UL});
    public static readonly BitSet FOLLOW_havingClause_in_querySpecification670 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_SELECT_in_selectClause694 = new BitSet(new ulong[]{0x43B80D01001E0040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_ALL_in_selectClause701 = new BitSet(new ulong[]{0x43B80D0100180040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_DISTINCT_in_selectClause705 = new BitSet(new ulong[]{0x43B80D0100180040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_TOP_in_selectClause714 = new BitSet(new ulong[]{0x0000000000100000UL});
    public static readonly BitSet FOLLOW_Integer_in_selectClause716 = new BitSet(new ulong[]{0x43B80D0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_selectList_in_selectClause728 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_WHERE_in_whereClause745 = new BitSet(new ulong[]{0x43B80C2140100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_searchCondition_in_whereClause751 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ORDER_in_orderByClause768 = new BitSet(new ulong[]{0x0000000000800000UL});
    public static readonly BitSet FOLLOW_BY_in_orderByClause770 = new BitSet(new ulong[]{0x43B80C0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_orderExpression_in_orderByClause777 = new BitSet(new ulong[]{0x0000000000002002UL});
    public static readonly BitSet FOLLOW_COMMA_in_orderByClause784 = new BitSet(new ulong[]{0x43B80C0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_orderExpression_in_orderByClause790 = new BitSet(new ulong[]{0x0000000000002002UL});
    public static readonly BitSet FOLLOW_expression_in_orderExpression814 = new BitSet(new ulong[]{0x0000000003000002UL});
    public static readonly BitSet FOLLOW_ASC_in_orderExpression821 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_DESC_in_orderExpression825 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_GROUP_in_groupByClause845 = new BitSet(new ulong[]{0x0000000000800000UL});
    public static readonly BitSet FOLLOW_BY_in_groupByClause847 = new BitSet(new ulong[]{0x43B80C0100120040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_ALL_in_groupByClause855 = new BitSet(new ulong[]{0x43B80C0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_expression_in_groupByClause868 = new BitSet(new ulong[]{0x0000000000002002UL});
    public static readonly BitSet FOLLOW_COMMA_in_groupByClause874 = new BitSet(new ulong[]{0x43B80C0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_expression_in_groupByClause880 = new BitSet(new ulong[]{0x0000000000002002UL});
    public static readonly BitSet FOLLOW_HAVING_in_havingClause900 = new BitSet(new ulong[]{0x43B80C2140100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_searchCondition_in_havingClause906 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_additiveSubSearchCondition_in_searchCondition927 = new BitSet(new ulong[]{0x0000000010000002UL});
    public static readonly BitSet FOLLOW_OR_in_searchCondition935 = new BitSet(new ulong[]{0x43B80C2140100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_additiveSubSearchCondition_in_searchCondition941 = new BitSet(new ulong[]{0x0000000010000002UL});
    public static readonly BitSet FOLLOW_subSearchCondition_in_additiveSubSearchCondition967 = new BitSet(new ulong[]{0x0000000020000002UL});
    public static readonly BitSet FOLLOW_AND_in_additiveSubSearchCondition975 = new BitSet(new ulong[]{0x43B80C2140100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_subSearchCondition_in_additiveSubSearchCondition981 = new BitSet(new ulong[]{0x0000000020000002UL});
    public static readonly BitSet FOLLOW_LPAREN_in_bracketedSearchCondition1003 = new BitSet(new ulong[]{0x43B80C2140100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_searchCondition_in_bracketedSearchCondition1009 = new BitSet(new ulong[]{0x0000000000000080UL});
    public static readonly BitSet FOLLOW_RPAREN_in_bracketedSearchCondition1011 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_NOT_in_subSearchCondition1035 = new BitSet(new ulong[]{0x43B80C2100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_bracketedSearchCondition_in_subSearchCondition1059 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_predicate_in_subSearchCondition1071 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_predicate1101 = new BitSet(new ulong[]{0x0000001AC0004000UL,0x000000000007E000UL});
    public static readonly BitSet FOLLOW_comparisonOperator_in_predicate1118 = new BitSet(new ulong[]{0x43B80CC100120040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_expression_in_predicate1140 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_quantifierSpec_in_predicate1153 = new BitSet(new ulong[]{0x0000000000000040UL});
    public static readonly BitSet FOLLOW_LPAREN_in_predicate1159 = new BitSet(new ulong[]{0x0000000000010040UL});
    public static readonly BitSet FOLLOW_selectStatement_in_predicate1165 = new BitSet(new ulong[]{0x0000000000000080UL});
    public static readonly BitSet FOLLOW_RPAREN_in_predicate1167 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_IS_in_predicate1188 = new BitSet(new ulong[]{0x0000000140000000UL});
    public static readonly BitSet FOLLOW_NOT_in_predicate1198 = new BitSet(new ulong[]{0x0000000100000000UL});
    public static readonly BitSet FOLLOW_NULL_in_predicate1208 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_NOT_in_predicate1216 = new BitSet(new ulong[]{0x0000001A00000000UL});
    public static readonly BitSet FOLLOW_LIKE_in_predicate1228 = new BitSet(new ulong[]{0x43B80C0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_expression_in_predicate1234 = new BitSet(new ulong[]{0x0000000400000002UL});
    public static readonly BitSet FOLLOW_ESCAPE_in_predicate1249 = new BitSet(new ulong[]{0x43B80C0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_expression_in_predicate1255 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_BETWEEN_in_predicate1273 = new BitSet(new ulong[]{0x43B80C0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_expression_in_predicate1279 = new BitSet(new ulong[]{0x0000000020000000UL});
    public static readonly BitSet FOLLOW_AND_in_predicate1281 = new BitSet(new ulong[]{0x43B80C0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_expression_in_predicate1287 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_IN_in_predicate1296 = new BitSet(new ulong[]{0x0000000000000040UL});
    public static readonly BitSet FOLLOW_LPAREN_in_predicate1298 = new BitSet(new ulong[]{0x43B80C0100110040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_selectStatement_in_predicate1323 = new BitSet(new ulong[]{0x0000000000000080UL});
    public static readonly BitSet FOLLOW_expression_in_predicate1337 = new BitSet(new ulong[]{0x0000000000002080UL});
    public static readonly BitSet FOLLOW_COMMA_in_predicate1348 = new BitSet(new ulong[]{0x43B80C0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_expression_in_predicate1354 = new BitSet(new ulong[]{0x0000000000002080UL});
    public static readonly BitSet FOLLOW_RPAREN_in_predicate1367 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_EXISTS_in_predicate1382 = new BitSet(new ulong[]{0x0000000000000040UL});
    public static readonly BitSet FOLLOW_LPAREN_in_predicate1384 = new BitSet(new ulong[]{0x0000000000010040UL});
    public static readonly BitSet FOLLOW_selectStatement_in_predicate1390 = new BitSet(new ulong[]{0x0000000000000080UL});
    public static readonly BitSet FOLLOW_RPAREN_in_predicate1392 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ALL_in_quantifierSpec1409 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_SOME_in_quantifierSpec1416 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ANY_in_quantifierSpec1423 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_selectItem_in_selectList1444 = new BitSet(new ulong[]{0x0000000000002002UL});
    public static readonly BitSet FOLLOW_COMMA_in_selectList1452 = new BitSet(new ulong[]{0x43B80D0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_selectItem_in_selectList1458 = new BitSet(new ulong[]{0x0000000000002002UL});
    public static readonly BitSet FOLLOW_STAR_in_selectItem1478 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_alias2_in_selectItem1508 = new BitSet(new ulong[]{0x43B80C0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_expression_in_selectItem1514 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_tableColumns_in_selectItem1540 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_selectItem1553 = new BitSet(new ulong[]{0x0102000000000002UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_alias1_in_selectItem1566 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_FROM_in_fromClause1589 = new BitSet(new ulong[]{0x01A00C0000000040UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_tableSource_in_fromClause1595 = new BitSet(new ulong[]{0x0000000000002002UL});
    public static readonly BitSet FOLLOW_COMMA_in_fromClause1602 = new BitSet(new ulong[]{0x01A00C0000000040UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_tableSource_in_fromClause1608 = new BitSet(new ulong[]{0x0000000000002002UL});
    public static readonly BitSet FOLLOW_subTableSource_in_tableSource1632 = new BitSet(new ulong[]{0x0000DE0000000002UL});
    public static readonly BitSet FOLLOW_joinedTable_in_tableSource1643 = new BitSet(new ulong[]{0x0000DE0000000002UL});
    public static readonly BitSet FOLLOW_LPAREN_in_subTableSource1663 = new BitSet(new ulong[]{0x01A00C0000010040UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_joinedTables_in_subTableSource1682 = new BitSet(new ulong[]{0x0000000000000080UL});
    public static readonly BitSet FOLLOW_RPAREN_in_subTableSource1684 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_queryExpression_in_subTableSource1709 = new BitSet(new ulong[]{0x0000000000000080UL});
    public static readonly BitSet FOLLOW_RPAREN_in_subTableSource1711 = new BitSet(new ulong[]{0x0102000000000000UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_alias1_in_subTableSource1717 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_function_in_subTableSource1752 = new BitSet(new ulong[]{0x0102000000000002UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_alias1_in_subTableSource1765 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_dbObject_in_subTableSource1779 = new BitSet(new ulong[]{0x0102000000000002UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_alias1_in_subTableSource1791 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_INNER_in_joinOn1813 = new BitSet(new ulong[]{0x0000400000000000UL});
    public static readonly BitSet FOLLOW_LEFT_in_joinOn1820 = new BitSet(new ulong[]{0x0000600000000000UL});
    public static readonly BitSet FOLLOW_RIGHT_in_joinOn1828 = new BitSet(new ulong[]{0x0000600000000000UL});
    public static readonly BitSet FOLLOW_FULL_in_joinOn1836 = new BitSet(new ulong[]{0x0000600000000000UL});
    public static readonly BitSet FOLLOW_OUTER_in_joinOn1846 = new BitSet(new ulong[]{0x0000400000000000UL});
    public static readonly BitSet FOLLOW_JOIN_in_joinOn1856 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_CROSS_in_joinedTable1871 = new BitSet(new ulong[]{0x0000400000000000UL});
    public static readonly BitSet FOLLOW_JOIN_in_joinedTable1873 = new BitSet(new ulong[]{0x01A00C0000000040UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_subTableSource_in_joinedTable1879 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_joinOn_in_joinedTable1894 = new BitSet(new ulong[]{0x01A00C0000000040UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_tableSource_in_joinedTable1903 = new BitSet(new ulong[]{0x0001000000000000UL});
    public static readonly BitSet FOLLOW_ON_in_joinedTable1910 = new BitSet(new ulong[]{0x43B80C2140100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_searchCondition_in_joinedTable1916 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_subTableSource_in_joinedTables1941 = new BitSet(new ulong[]{0x0000DE0000000000UL});
    public static readonly BitSet FOLLOW_joinedTable_in_joinedTables1953 = new BitSet(new ulong[]{0x0000DE0000000002UL});
    public static readonly BitSet FOLLOW_AS_in_alias11976 = new BitSet(new ulong[]{0x0100000000000000UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_identifier_in_alias11984 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_alias22005 = new BitSet(new ulong[]{0x0000000000004000UL});
    public static readonly BitSet FOLLOW_ASSIGNEQUAL_in_alias22011 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_dbObject_in_tableColumns2030 = new BitSet(new ulong[]{0x0004000000000000UL});
    public static readonly BitSet FOLLOW_DOT_STAR_in_tableColumns2032 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_dbObject_in_column2054 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LPAREN_in_column2063 = new BitSet(new ulong[]{0x0100000000000040UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_column_in_column2069 = new BitSet(new ulong[]{0x0000000000000080UL});
    public static readonly BitSet FOLLOW_RPAREN_in_column2071 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_additiveSubExpression_in_expression2092 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000700UL});
    public static readonly BitSet FOLLOW_additiveOperator_in_expression2103 = new BitSet(new ulong[]{0x43B80C0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_additiveSubExpression_in_expression2109 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000700UL});
    public static readonly BitSet FOLLOW_subExpression_in_additiveSubExpression2134 = new BitSet(new ulong[]{0x0000010000000002UL,0x0000000000001800UL});
    public static readonly BitSet FOLLOW_multiplicativeArithmeticOperator_in_additiveSubExpression2145 = new BitSet(new ulong[]{0x43B80C0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_subExpression_in_additiveSubExpression2151 = new BitSet(new ulong[]{0x0000010000000002UL,0x0000000000001800UL});
    public static readonly BitSet FOLLOW_LPAREN_in_bracketedTerm2171 = new BitSet(new ulong[]{0x43B80C0100110040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_selectStatement_in_bracketedTerm2189 = new BitSet(new ulong[]{0x0000000000000080UL});
    public static readonly BitSet FOLLOW_RPAREN_in_bracketedTerm2191 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_bracketedTerm2203 = new BitSet(new ulong[]{0x0000000000000080UL});
    public static readonly BitSet FOLLOW_RPAREN_in_bracketedTerm2205 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_unaryOperator_in_subExpression2230 = new BitSet(new ulong[]{0x43B80C0100100040UL,0x00000000000000FFUL});
    public static readonly BitSet FOLLOW_constant_in_subExpression2245 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_variableReference_in_subExpression2257 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_PLACEHOLDER_in_subExpression2265 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_function_in_subExpression2286 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_bracketedTerm_in_subExpression2298 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_dbObject_in_subExpression2310 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_caseFunction_in_subExpression2356 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_castFunction_in_subExpression2368 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_Variable_in_variableReference2387 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_SUBSTRING_in_function2405 = new BitSet(new ulong[]{0x0000000000000040UL});
    public static readonly BitSet FOLLOW_LPAREN_in_function2409 = new BitSet(new ulong[]{0x43B80C0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_expression_in_function2415 = new BitSet(new ulong[]{0x0000000000001000UL});
    public static readonly BitSet FOLLOW_FROM_in_function2419 = new BitSet(new ulong[]{0x43B80C0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_expression_in_function2425 = new BitSet(new ulong[]{0x0040000000000080UL});
    public static readonly BitSet FOLLOW_FOR_in_function2431 = new BitSet(new ulong[]{0x43B80C0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_expression_in_function2437 = new BitSet(new ulong[]{0x0000000000000080UL});
    public static readonly BitSet FOLLOW_RPAREN_in_function2444 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_EXTRACT_in_function2449 = new BitSet(new ulong[]{0x0000000000000040UL});
    public static readonly BitSet FOLLOW_LPAREN_in_function2451 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000003F00000UL});
    public static readonly BitSet FOLLOW_datetimeField_in_function2457 = new BitSet(new ulong[]{0x0000000000001000UL});
    public static readonly BitSet FOLLOW_FROM_in_function2459 = new BitSet(new ulong[]{0x43B80C0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_expression_in_function2465 = new BitSet(new ulong[]{0x0000000000000080UL});
    public static readonly BitSet FOLLOW_RPAREN_in_function2469 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_genericFunction_in_function2478 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_NonQuotedIdentifier_in_genericFunction2507 = new BitSet(new ulong[]{0x0000000000000040UL});
    public static readonly BitSet FOLLOW_LEFT_in_genericFunction2515 = new BitSet(new ulong[]{0x0000000000000040UL});
    public static readonly BitSet FOLLOW_RIGHT_in_genericFunction2523 = new BitSet(new ulong[]{0x0000000000000040UL});
    public static readonly BitSet FOLLOW_LPAREN_in_genericFunction2530 = new BitSet(new ulong[]{0x43B80D01001600C0UL,0x0000000003F003FFUL});
    public static readonly BitSet FOLLOW_functionArgument_in_genericFunction2540 = new BitSet(new ulong[]{0x0000000000002080UL});
    public static readonly BitSet FOLLOW_COMMA_in_genericFunction2549 = new BitSet(new ulong[]{0x43B80C0100100040UL,0x0000000003F003FFUL});
    public static readonly BitSet FOLLOW_functionArgument_in_genericFunction2555 = new BitSet(new ulong[]{0x0000000000002080UL});
    public static readonly BitSet FOLLOW_STAR_in_genericFunction2572 = new BitSet(new ulong[]{0x0000000000000080UL});
    public static readonly BitSet FOLLOW_ALL_in_genericFunction2588 = new BitSet(new ulong[]{0x43B80D0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_DISTINCT_in_genericFunction2592 = new BitSet(new ulong[]{0x43B80D0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_STAR_in_genericFunction2603 = new BitSet(new ulong[]{0x0000000000000080UL});
    public static readonly BitSet FOLLOW_expression_in_genericFunction2620 = new BitSet(new ulong[]{0x0000000000000080UL});
    public static readonly BitSet FOLLOW_RPAREN_in_genericFunction2642 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expression_in_functionArgument2661 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_datetimeField_in_functionArgument2672 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_CASE_in_caseFunction2689 = new BitSet(new ulong[]{0x47B80C0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_expression_in_caseFunction2701 = new BitSet(new ulong[]{0x0400000000000000UL});
    public static readonly BitSet FOLLOW_WHEN_in_caseFunction2710 = new BitSet(new ulong[]{0x43B80C0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_expression_in_caseFunction2716 = new BitSet(new ulong[]{0x0800000000000000UL});
    public static readonly BitSet FOLLOW_THEN_in_caseFunction2718 = new BitSet(new ulong[]{0x43B80C0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_expression_in_caseFunction2724 = new BitSet(new ulong[]{0x3400000000000000UL});
    public static readonly BitSet FOLLOW_WHEN_in_caseFunction2745 = new BitSet(new ulong[]{0x43B80C2140100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_searchCondition_in_caseFunction2751 = new BitSet(new ulong[]{0x0800000000000000UL});
    public static readonly BitSet FOLLOW_THEN_in_caseFunction2753 = new BitSet(new ulong[]{0x43B80C0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_expression_in_caseFunction2759 = new BitSet(new ulong[]{0x3400000000000000UL});
    public static readonly BitSet FOLLOW_ELSE_in_caseFunction2780 = new BitSet(new ulong[]{0x43B80C0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_expression_in_caseFunction2786 = new BitSet(new ulong[]{0x2000000000000000UL});
    public static readonly BitSet FOLLOW_END_in_caseFunction2793 = new BitSet(new ulong[]{0x0200000000000002UL});
    public static readonly BitSet FOLLOW_CASE_in_caseFunction2797 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_CAST_in_castFunction2816 = new BitSet(new ulong[]{0x0000000000000040UL});
    public static readonly BitSet FOLLOW_LPAREN_in_castFunction2818 = new BitSet(new ulong[]{0x43B80C0100100040UL,0x00000000000003FFUL});
    public static readonly BitSet FOLLOW_expression_in_castFunction2824 = new BitSet(new ulong[]{0x0002000000000000UL});
    public static readonly BitSet FOLLOW_AS_in_castFunction2826 = new BitSet(new ulong[]{0x0100000000000000UL});
    public static readonly BitSet FOLLOW_typeIdentifier_in_castFunction2832 = new BitSet(new ulong[]{0x00000000000000C0UL});
    public static readonly BitSet FOLLOW_LPAREN_in_castFunction2840 = new BitSet(new ulong[]{0x0000000000100000UL});
    public static readonly BitSet FOLLOW_nonNegativeInteger_in_castFunction2846 = new BitSet(new ulong[]{0x0000000000002080UL});
    public static readonly BitSet FOLLOW_COMMA_in_castFunction2852 = new BitSet(new ulong[]{0x0000000000100000UL});
    public static readonly BitSet FOLLOW_nonNegativeInteger_in_castFunction2858 = new BitSet(new ulong[]{0x0000000000000080UL});
    public static readonly BitSet FOLLOW_RPAREN_in_castFunction2865 = new BitSet(new ulong[]{0x0000000000000080UL});
    public static readonly BitSet FOLLOW_RPAREN_in_castFunction2870 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_identifier_in_dbObject2889 = new BitSet(new ulong[]{0x8000000000000002UL});
    public static readonly BitSet FOLLOW_DOT_in_dbObject2896 = new BitSet(new ulong[]{0x0100000000000000UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_identifier_in_dbObject2902 = new BitSet(new ulong[]{0x8000000000000002UL});
    public static readonly BitSet FOLLOW_singleStringLiteral_in_stringLiteral2930 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000003UL});
    public static readonly BitSet FOLLOW_singleStringLiteral_in_stringLiteral2940 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000003UL});
    public static readonly BitSet FOLLOW_UnicodeStringLiteral_in_singleStringLiteral2960 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_AsciiStringLiteral_in_singleStringLiteral2967 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_NonQuotedIdentifier_in_identifier2984 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_QuotedIdentifier_in_identifier2991 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_NonQuotedIdentifier_in_typeIdentifier3008 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_nonNegativeInteger_in_constant3029 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_Real_in_constant3036 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_NULL_in_constant3043 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_stringLiteral_in_constant3054 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_intervalLiteral_in_constant3065 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_HexLiteral_in_constant3072 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MAccessDateTime_in_constant3081 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_Iso8601DateTime_in_constant3090 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_INTERVAL_in_intervalLiteral3114 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000302UL});
    public static readonly BitSet FOLLOW_unaryOperator_in_intervalLiteral3122 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL});
    public static readonly BitSet FOLLOW_AsciiStringLiteral_in_intervalLiteral3129 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000003F00000UL});
    public static readonly BitSet FOLLOW_datetimeField_in_intervalLiteral3137 = new BitSet(new ulong[]{0x0000000000000042UL});
    public static readonly BitSet FOLLOW_LPAREN_in_intervalLiteral3143 = new BitSet(new ulong[]{0x0000000000100000UL});
    public static readonly BitSet FOLLOW_Integer_in_intervalLiteral3145 = new BitSet(new ulong[]{0x0000000000000080UL});
    public static readonly BitSet FOLLOW_RPAREN_in_intervalLiteral3149 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_Integer_in_nonNegativeInteger3167 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_PLUS_in_unaryOperator3184 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MINUS_in_unaryOperator3191 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_PLUS_in_additiveOperator3208 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MINUS_in_additiveOperator3215 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_STRCONCAT_in_additiveOperator3222 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_STAR_in_multiplicativeArithmeticOperator3243 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_DIVIDE_in_multiplicativeArithmeticOperator3250 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MOD_in_multiplicativeArithmeticOperator3257 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ASSIGNEQUAL_in_comparisonOperator3278 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_NOTEQUAL1_in_comparisonOperator3285 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_NOTEQUAL2_in_comparisonOperator3292 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LESSTHANOREQUALTO1_in_comparisonOperator3299 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LESSTHAN_in_comparisonOperator3306 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_GREATERTHANOREQUALTO1_in_comparisonOperator3313 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_GREATERTHAN_in_comparisonOperator3320 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_UNION_in_unionOperator3337 = new BitSet(new ulong[]{0x0000000000020002UL});
    public static readonly BitSet FOLLOW_ALL_in_unionOperator3344 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_YEAR_in_datetimeField3364 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MONTH_in_datetimeField3371 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_DAY_in_datetimeField3378 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_HOUR_in_datetimeField3385 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MINUTE_in_datetimeField3392 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_SECOND_in_datetimeField3399 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_bracketedSearchCondition_in_synpred11047 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_selectStatement_in_synpred21308 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_alias2_in_synpred31494 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_tableColumns_in_synpred41531 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_joinedTables_in_synpred51670 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_queryExpression_in_synpred61693 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_function_in_synpred71741 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_selectStatement_in_synpred82176 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_function_in_synpred92274 = new BitSet(new ulong[]{0x0000000000000002UL});

}
}]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MockDBMS\MockDBMS.cs" renderPrefix="s3"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Collections.Generic;
//using System.Linq;
using System.Text;
using MacroScope;
using Microsoft.Pex.Framework;
using System.Text.RegularExpressions;
using Microsoft.Pex.Framework.Suppression;

namespace MockDBMS
{
    public enum DataTypes { STRING, INT, CHAR };
    public class DBMS
    {
        #region IMPORTANT: Accessing tables in DBMS (MG)
        public List<Table> tables;

        // MG: This function is not referenced
        public void AddTable(Table table)
        {
            tables.Add(table);
        }
        
        // MG: MOST IMPORTANT function, returns the reference to the table stored in the DBMS
        public Table GetTableByName(string name)
        ]]></source>
</chunk>
<method name="GetTableByName" namespace="MockDBMS" type="MockDBMS.DBMS" typeName="DBMS" token="6000018" module="MockDBMS.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="4"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
<hit index="12" value="4"/>
<hit index="13" value="2"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="18" value="2"/>
<hit index="22" value="2"/>
<hit index="23" value="2"/>
<hit index="24" value="2"/>
<hit index="25" value="2"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="8" total="10" coveredRatio="0.8"/>
</method>
<chunk hits="2" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="2" offset="0010" domain="usercodeundertest"><source><![CDATA[Table t]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="6" offset="0031" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0002" domain="usercodeundertest"><source><![CDATA[tables]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
            ]]></source>
</chunk>
<chunk hits="2" offset="0018" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0019" domain="usercodeundertest"><source><![CDATA[if (t.name.Equals(name))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="002c" domain="usercodeundertest"><source><![CDATA[return t;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0030" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="004e" domain="usercodeundertest"><source><![CDATA[return null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0053" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        #endregion

        #region Initialize DBMS schema (MG)
        [PexIgnore("ignore")]
        private void readSchemaFromFile()
        ]]></source>
</chunk>
<method name="readSchemaFromFile" namespace="MockDBMS" type="MockDBMS.DBMS" typeName="DBMS" token="6000019" module="MockDBMS.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
<hit index="8" value="16"/>
<hit index="9" value="16"/>
<hit index="10" value="16"/>
<hit index="11" value="16"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="1"/>
<hit index="16" value="1"/>
<hit index="17" value="1"/>
<hit index="18" value="1"/>
<hit index="19" value="1"/>
<hit index="20" value="1"/>
<hit index="21" value="1"/>
<hit index="23" value="1"/>
<hit index="24" value="1"/>
<hit index="25" value="1"/>
<hit index="26" value="1"/>
<hit index="27" value="1"/>
<hit index="28" value="2"/>
<hit index="29" value="15"/>
<hit index="30" value="15"/>
<hit index="31" value="12"/>
<hit index="32" value="12"/>
<hit index="33" value="12"/>
<hit index="34" value="15"/>
<hit index="35" value="15"/>
<hit index="39" value="15"/>
<hit index="40" value="15"/>
<hit index="41" value="2"/>
<hit index="42" value="2"/>
<hit index="43" value="2"/>
<hit index="44" value="15"/>
<hit index="45" value="15"/>
<hit index="49" value="15"/>
<hit index="50" value="15"/>
<hit index="54" value="15"/>
<hit index="55" value="15"/>
<hit index="59" value="15"/>
<hit index="60" value="15"/>
<hit index="64" value="15"/>
<hit index="65" value="15"/>
<hit index="69" value="15"/>
<hit index="70" value="15"/>
<hit index="74" value="15"/>
<hit index="75" value="15"/>
<hit index="79" value="1"/>
<hit index="80" value="14"/>
<hit index="81" value="14"/>
<hit index="82" value="14"/>
<hit index="83" value="14"/>
<hit index="84" value="14"/>
<hit index="85" value="14"/>
<hit index="86" value="14"/>
<hit index="87" value="28"/>
<hit index="88" value="14"/>
<hit index="89" value="14"/>
<hit index="90" value="14"/>
<hit index="91" value="14"/>
<hit index="92" value="14"/>
<hit index="93" value="28"/>
<hit index="94" value="17"/>
<hit index="95" value="1"/>
<hit index="96" value="15"/>
<hit index="97" value="3"/>
<hit index="98" value="15"/>
<hit index="99" value="13"/>
<hit index="100" value="15"/>
<hit index="101" value="15"/>
<hit index="102" value="15"/>
<hit index="103" value="15"/>
<hit index="104" value="15"/>
<hit index="105" value="15"/>
<hit index="106" value="15"/>
<hit index="107" value="14"/>
<hit index="108" value="16"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="45" total="61" coveredRatio="0.73770491803278693"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[tables = new List<Table>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="000c" domain="usercodeundertest"><source><![CDATA[string[] lines = System.IO.File.ReadAllLines(@"C:\schema.txt");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0017" domain="usercodeundertest"><source><![CDATA[Table table = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0019" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="16" offset="0025" domain="usercodeundertest"><source><![CDATA[string line]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="47" offset="0254" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="001a" domain="usercodeundertest"><source><![CDATA[lines]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
            ]]></source>
</chunk>
<chunk hits="32" offset="002b" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="32" offset="002c" domain="usercodeundertest"><source><![CDATA[if (line.Contains("CREATE TABLE"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0040" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="0041" domain="usercodeundertest"><source><![CDATA[int i = line.IndexOf("CREATE TABLE");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="004d" domain="usercodeundertest"><source><![CDATA[int j = line.IndexOf("(");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="005a" domain="usercodeundertest"><source><![CDATA[string tableName = line.Substring(i + 12, j - i - 12).Trim();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="0072" domain="usercodeundertest"><source><![CDATA[table = new Table(tableName);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="007a" domain="usercodeundertest"><source><![CDATA[tables.Add(table);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="3" offset="0087" domain="usercodeundertest"><source><![CDATA[continue;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                }
                ]]></source>
</chunk>
<chunk hits="15" offset="008c" domain="usercodeundertest"><source><![CDATA[DataTypes type = DataTypes.INT;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="15" offset="008f" domain="usercodeundertest"><source><![CDATA[int index = -1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="15" offset="0092" domain="usercodeundertest"><source><![CDATA[if (line.Contains("varchar"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="12" offset="00a6" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="12" offset="00a7" domain="usercodeundertest"><source><![CDATA[type = DataTypes.STRING;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="12" offset="00aa" domain="usercodeundertest"><source><![CDATA[index = line.IndexOf("varchar");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="12" offset="00b7" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="15" offset="00b8" domain="usercodeundertest"><source><![CDATA[if (line.Contains("VARCHAR"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00cc" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="00cd" domain="usercodeundertest"><source><![CDATA[type = DataTypes.STRING;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="00d0" domain="usercodeundertest"><source><![CDATA[index = line.IndexOf("VARCHAR");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00dd" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="15" offset="00de" domain="usercodeundertest"><source><![CDATA[if (line.Contains("int"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="00f2" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="00f3" domain="usercodeundertest"><source><![CDATA[type = DataTypes.INT;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="00f6" domain="usercodeundertest"><source><![CDATA[index = line.IndexOf("int");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0103" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="15" offset="0104" domain="usercodeundertest"><source><![CDATA[if (line.Contains("INT"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0118" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0119" domain="usercodeundertest"><source><![CDATA[type = DataTypes.INT;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="011c" domain="usercodeundertest"><source><![CDATA[index = line.IndexOf("INT");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0129" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="15" offset="012a" domain="usercodeundertest"><source><![CDATA[if (line.Contains("enum"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="013e" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="013f" domain="usercodeundertest"><source><![CDATA[type = DataTypes.STRING;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0142" domain="usercodeundertest"><source><![CDATA[index = line.IndexOf("enum");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="014f" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="15" offset="0150" domain="usercodeundertest"><source><![CDATA[if (line.Contains("ENUM"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0164" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0165" domain="usercodeundertest"><source><![CDATA[type = DataTypes.STRING;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0168" domain="usercodeundertest"><source><![CDATA[index = line.IndexOf("ENUM");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0175" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="15" offset="0176" domain="usercodeundertest"><source><![CDATA[if (line.Contains("bigint"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="018a" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="018b" domain="usercodeundertest"><source><![CDATA[type = DataTypes.INT;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="018e" domain="usercodeundertest"><source><![CDATA[index = line.IndexOf("bigint");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="019b" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="15" offset="019c" domain="usercodeundertest"><source><![CDATA[if (line.Contains("BIGINT"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="01b0" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="01b1" domain="usercodeundertest"><source><![CDATA[type = DataTypes.INT;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="01b4" domain="usercodeundertest"><source><![CDATA[index = line.IndexOf("BIGINT");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="01c1" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="15" offset="01c2" domain="usercodeundertest"><source><![CDATA[if (line.Contains("TINYINT"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="01d6" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="01d7" domain="usercodeundertest"><source><![CDATA[type = DataTypes.INT;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="01da" domain="usercodeundertest"><source><![CDATA[index = line.IndexOf("TINYINT");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="01e7" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="15" offset="01e8" domain="usercodeundertest"><source><![CDATA[if (line.Contains("tinyint"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="01fc" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="01fd" domain="usercodeundertest"><source><![CDATA[type = DataTypes.INT;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0200" domain="usercodeundertest"><source><![CDATA[index = line.IndexOf("tinyint");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="020d" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="15" offset="020e" domain="usercodeundertest"><source><![CDATA[if (index == -1)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="021c" domain="usercodeundertest"><source><![CDATA[continue;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="14" offset="021e" domain="usercodeundertest"><source><![CDATA[string cname = line.Substring(0, index).Trim();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="14" offset="022e" domain="usercodeundertest"><source><![CDATA[table.AddColumn(cname, type);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="42" offset="0239" domain="usercodeundertest"><source><![CDATA[table.AddColumn(cname + "_TAINT", DataTypes.STRING);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="42" offset="024d" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0265" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[


        /// <summary>
        /// MG: Currently schema is hard-coded
        /// </summary>
        private void initializeDBMSFromSchema()
        ]]></source>
</chunk>
<method name="initializeDBMSFromSchema" namespace="MockDBMS" type="MockDBMS.DBMS" typeName="DBMS" token="600001a" module="MockDBMS.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[readSchemaFromFile();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            /* tables = new List<Table>(); 
            Table t = new Table("persons");
            t.AddColumn("firstname", DataTypes.STRING);
            t.AddColumn("lastname", DataTypes.STRING);
            t.AddColumn("age", DataTypes.INT);
            tables.Add(t);

            Table t2 = new Table("Users");
            t2.AddColumn("MID", DataTypes.INT);
            t2.AddColumn("Role", DataTypes.STRING);
            t2.AddPrimaryKey("MID");
            tables.Add(t2); */
            //tables = new List<Table>(); Table t = new Table("persons");
            //    t.AddColumn("firstname", DataTypes.STRING);
            //    t.AddColumn("lastname", DataTypes.STRING);
            //    t.AddColumn("age", DataTypes.INT);
            //    tables.Add(t);
        ]]></source>
</chunk>
<chunk hits="1" offset="0008" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        /// <summary>
        /// MG: This method initializes the database schema and call Pex to generate records
        /// </summary>
        [PexMethod()]
        public void CreateDatabaseState()
        ]]></source>
</chunk>
<method name="CreateDatabaseState" namespace="MockDBMS" type="MockDBMS.DBMS" typeName="DBMS" token="600001b" module="MockDBMS.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            //MockDBMS dbms = new MockDBMS();
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[initializeDBMSFromSchema();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
             //Test Code

            //FillTestRecords();
            //GenerateRandomReccords(1);
            ]]></source>
</chunk>
<chunk hits="1" offset="0008" domain="usercodeundertest"><source><![CDATA[LetPexChooseRecords();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="000f" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        /// <summary>
        /// MG: Use Pex to populate the tables in DBMS
        /// </summary>
        private void LetPexChooseRecords()
        ]]></source>
</chunk>
<method name="LetPexChooseRecords" namespace="MockDBMS" type="MockDBMS.DBMS" typeName="DBMS" token="600001c" module="MockDBMS.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="2"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="4"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="16" value="2"/>
<hit index="17" value="4"/>
<hit index="18" value="2"/>
<hit index="19" value="2"/>
<hit index="20" value="2"/>
<hit index="21" value="4"/>
<hit index="23" value="2"/>
<hit index="24" value="2"/>
<hit index="25" value="2"/>
<hit index="26" value="2"/>
<hit index="27" value="2"/>
<hit index="28" value="4"/>
<hit index="29" value="2"/>
<hit index="30" value="28"/>
<hit index="31" value="28"/>
<hit index="32" value="28"/>
<hit index="33" value="56"/>
<hit index="34" value="28"/>
<hit index="35" value="28"/>
<hit index="36" value="28"/>
<hit index="37" value="56"/>
<hit index="38" value="4"/>
<hit index="40" value="4"/>
<hit index="41" value="4"/>
<hit index="42" value="4"/>
<hit index="43" value="4"/>
<hit index="44" value="4"/>
<hit index="45" value="4"/>
<hit index="46" value="4"/>
<hit index="47" value="4"/>
<hit index="48" value="4"/>
<hit index="49" value="4"/>
<hit index="50" value="4"/>
<hit index="51" value="4"/>
<hit index="52" value="4"/>
<hit index="53" value="4"/>
<hit index="54" value="4"/>
<hit index="55" value="4"/>
<hit index="56" value="4"/>
<hit index="57" value="4"/>
<hit index="58" value="4"/>
<hit index="59" value="4"/>
<hit index="60" value="4"/>
<hit index="61" value="4"/>
<hit index="62" value="4"/>
<hit index="63" value="4"/>
<hit index="64" value="4"/>
<hit index="65" value="4"/>
<hit index="66" value="4"/>
<hit index="67" value="4"/>
<hit index="68" value="4"/>
<hit index="69" value="4"/>
<hit index="70" value="4"/>
<hit index="71" value="4"/>
<hit index="72" value="4"/>
<hit index="73" value="4"/>
<hit index="74" value="4"/>
<hit index="75" value="4"/>
<hit index="76" value="4"/>
<hit index="77" value="4"/>
<hit index="78" value="4"/>
<hit index="79" value="4"/>
<hit index="80" value="4"/>
<hit index="81" value="4"/>
<hit index="82" value="4"/>
<hit index="83" value="8"/>
<hit index="84" value="4"/>
<hit index="85" value="4"/>
<hit index="86" value="4"/>
<hit index="87" value="4"/>
<hit index="88" value="24"/>
<hit index="90" value="24"/>
<hit index="91" value="24"/>
<hit index="92" value="24"/>
<hit index="93" value="24"/>
<hit index="94" value="24"/>
<hit index="95" value="24"/>
<hit index="96" value="24"/>
<hit index="97" value="24"/>
<hit index="98" value="24"/>
<hit index="99" value="24"/>
<hit index="100" value="24"/>
<hit index="101" value="24"/>
<hit index="102" value="24"/>
<hit index="103" value="24"/>
<hit index="104" value="24"/>
<hit index="105" value="24"/>
<hit index="106" value="24"/>
<hit index="107" value="24"/>
<hit index="108" value="24"/>
<hit index="109" value="24"/>
<hit index="110" value="24"/>
<hit index="111" value="24"/>
<hit index="112" value="24"/>
<hit index="113" value="24"/>
<hit index="114" value="24"/>
<hit index="115" value="24"/>
<hit index="116" value="24"/>
<hit index="117" value="24"/>
<hit index="118" value="24"/>
<hit index="119" value="24"/>
<hit index="120" value="24"/>
<hit index="121" value="24"/>
<hit index="122" value="24"/>
<hit index="123" value="24"/>
<hit index="124" value="24"/>
<hit index="125" value="24"/>
<hit index="126" value="48"/>
<hit index="127" value="24"/>
<hit index="128" value="24"/>
<hit index="129" value="24"/>
<hit index="130" value="24"/>
<hit index="131" value="30"/>
<hit index="132" value="30"/>
<hit index="133" value="30"/>
<hit index="134" value="60"/>
<hit index="135" value="2"/>
<hit index="136" value="2"/>
<hit index="137" value="2"/>
<hit index="138" value="2"/>
<hit index="139" value="4"/>
<hit index="140" value="1"/>
<hit index="141" value="2"/>
<hit index="142" value="2"/>
<hit index="143" value="1"/>
<hit index="144" value="24"/>
<hit index="146" value="28"/>
<hit index="147" value="2"/>
<hit index="148" value="1"/>
<hit index="155" value="1"/>
<hit index="156" value="1"/>
<hit index="157" value="1"/>
<hit index="158" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="34" total="34" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="1" offset="0014" domain="usercodeundertest"><source><![CDATA[Table table]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="4" offset="01c1" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="0002" domain="usercodeundertest"><source><![CDATA[tables]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
            ]]></source>
</chunk>
<chunk hits="1" offset="001c" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                //var chooser = PexChoose.FromCall(this);
                ]]></source>
</chunk>
<chunk hits="1" offset="001d" domain="usercodeundertest"><source><![CDATA[int numRecords = PexChoose.Value<int>("Num Records");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                //PexAssume.IsTrue(numRecords >= 0 && numRecords <= 20);
                for (]]></source>
</chunk>
<chunk hits="1" offset="0028" domain="usercodeundertest"><source><![CDATA[int i = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="7" offset="01b3" domain="usercodeundertest"><source><![CDATA[i < numRecords]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="6" offset="01af" domain="usercodeundertest"><source><![CDATA[i++]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                ]]></source>
</chunk>
<chunk hits="2" offset="002f" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="0030" domain="usercodeundertest"><source><![CDATA[Dictionary<string, DataTypes> nameType = table.ColumnNameType;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="6" offset="0037" domain="usercodeundertest"><source><![CDATA[Dictionary<string, DataTypes>.KeyCollection keys = nameType.Keys;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="6" offset="003f" domain="usercodeundertest"><source><![CDATA[object[] record = new object[keys.Count];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="004d" domain="usercodeundertest"><source><![CDATA[IEnumerator<string> columnEnum = keys.GetEnumerator();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                    ]]></source>
</chunk>
<chunk hits="6" offset="005b" domain="usercodeundertest"><source><![CDATA[int j = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="118" offset="0195" domain="usercodeundertest"><source><![CDATA[while (columnEnum.MoveNext())]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="28" offset="0063" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="28" offset="0064" domain="usercodeundertest"><source><![CDATA[String column = columnEnum.Current;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="84" offset="006d" domain="usercodeundertest"><source><![CDATA[DataTypes type = nameType[column];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                        ]]></source>
</chunk>
<chunk hits="84" offset="0077" domain="usercodeundertest"><source><![CDATA[if (type == DataTypes.INT)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="4" offset="0088" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="4" offset="0089" domain="usercodeundertest"><source><![CDATA[int value = PexChoose.Value<int>("Table: " + table.name + " Column " + column + " Record " + i);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="4" offset="00d4" domain="usercodeundertest"><source><![CDATA[PexAssume.IsNotNull(value);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="4" offset="00e1" domain="usercodeundertest"><source><![CDATA[record[j++] = value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="16" offset="00f2" domain="usercodeundertest"><source><![CDATA[columnEnum.MoveNext();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            //string tag = PexChoose.Value<string>("tag");
                            //PexAssume.IsNotNull(value);
                            //record[j++] = tag;
                            ]]></source>
</chunk>
<chunk hits="12" offset="00fa" domain="usercodeundertest"><source><![CDATA[record[j++] = "10000000";]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="16" offset="0109" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else ]]></source>
</chunk>
<chunk hits="24" offset="010f" domain="usercodeundertest"><source><![CDATA[if (type == DataTypes.STRING)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="24" offset="011d" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="24" offset="011e" domain="usercodeundertest"><source><![CDATA[string value = PexChoose.Value<string>("column " + column + " Record " + i);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="24" offset="0156" domain="usercodeundertest"><source><![CDATA[PexAssume.IsNotNull(value);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="24" offset="015e" domain="usercodeundertest"><source><![CDATA[PexAssume.IsTrue(value != "");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="24" offset="0170" domain="usercodeundertest"><source><![CDATA[record[j++] = value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="96" offset="017c" domain="usercodeundertest"><source><![CDATA[columnEnum.MoveNext();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            //string tag = PexChoose.Value<string>("tag");
                            //PexAssume.IsNotNull(value);
                            //record[j++] = tag;
                            ]]></source>
</chunk>
<chunk hits="72" offset="0184" domain="usercodeundertest"><source><![CDATA[record[j++] = "10000000";]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="96" offset="0193" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="112" offset="0194" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="01a5" domain="usercodeundertest"><source><![CDATA[table.InsertRecord(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="6" offset="01ae" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="01c0" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="01e3" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        #endregion

        #region Not referenced functions (MG)
        // MG: This function is not referenced
        private void GenerateRandomReccords(int numRecords)
        {
            //DateTime start = DateTime.Now;
            foreach (Table table in tables)
            {
                for (int i = 0; i < numRecords; i++)
                {
                    /*DateTime now = DateTime.Now;
                    TimeSpan duration = start - now;
                    if (duration.Minutes >= 2)
                        break;*/
                    Dictionary<string, DataTypes> nameType = table.ColumnNameType;
                    Dictionary<string, DataTypes>.KeyCollection keys = nameType.Keys;
                    object[] record = new object[keys.Count];
                    IEnumerator<string> columnEnum = keys.GetEnumerator();

                    int j = 0;
                    while (columnEnum.MoveNext())
                    {
                        String column = columnEnum.Current;
                        DataTypes type = nameType[column];

                        if (type == DataTypes.INT)
                        {
                            Random r = new Random((int)DateTime.Now.Ticks);
                            int value = r.Next(1, 10);
                            record[j++] = value;
                            columnEnum.MoveNext();
                            record[j++] = "00000000";
                        }
                        else if (type == DataTypes.STRING)
                        {
                            string value = RandomString(5, true);
                            record[j++] = value;
                            columnEnum.MoveNext();
                            record[j++] = "00000000";
                        }
                    }
                    table.InsertRecord(record);
                }
            }
        }

        // MG: This function is only used in GenerateRandomReccords(), which is currently not referenced
        private string RandomString(int size, bool lowerCase)
        {
            StringBuilder builder = new StringBuilder();
            Random random = new Random((int)DateTime.Now.Ticks);
            char ch;
            for (int i = 0; i < size; i++)
            {
                ch = Convert.ToChar(Convert.ToInt32(Math.Floor(26 * random.NextDouble() + 65)));
                builder.Append(ch);
            }
            if (lowerCase)
                return builder.ToString().ToLower();
            return builder.ToString();
        }

        // MG: This function is not referenced
        private void FillTestRecords()
        {
            /*
            tables = new List<Table>();
            Table t = new Table("persons");
            t.AddColumn("firstname", DataTypes.STRING);
            t.AddColumn("lastname", DataTypes.STRING);
            t.AddColumn("x", DataTypes.INT);
            tables.Add(t);
            Table t2 = new Table("salary");
            t2.AddColumn("firstname", DataTypes.STRING);
            t2.AddColumn("lastname", DataTypes.STRING);
            t2.AddColumn("salary", DataTypes.INT);
            t2.AddColumn("x", DataTypes.INT);
            tables.Add(t2);*/

            tables = new List<Table>();
            Table t = new Table("SignsSyms");
            t.AddColumn("SignSymID", DataTypes.INT);
            t.AddColumn("SignSymText", DataTypes.STRING);
             
            object[] record = new object[2];
            record[0] = (object)1;
            record[1] = "a";
            t.InsertRecord(record);
            
            record = new object[2];
            record[0] = (object)2;
            record[1] = "b";
            t.InsertRecord(record);

            record = new object[2];
            record[0] = (object)3;
            record[1] = "c";
            t.InsertRecord(record);
            tables.Add(t);

            t = new Table("ChiefComplaintToSignsSyms");
            t.AddColumn("CCID", DataTypes.INT);
            t.AddColumn("SignSymID", DataTypes.INT);

            record = new object[2];
            record[0] = (object)0;
            record[1] = (object)1;
            t.InsertRecord(record);

            record = new object[2];
            record[0] = (object)1;
            record[1] = (object)2;
            t.InsertRecord(record);

            record = new object[2];
            record[0] = (object)2;
            record[1] = (object)3;
            t.InsertRecord(record);

            record = new object[2];
            record[0] = (object)3;
            record[1] = (object)4;
            t.InsertRecord(record);

            tables.Add(t);
        }
        #endregion

        // MG: 污点标记，16进制字符串
        public static Dictionary<string, string> taintTags = new Dictionary<string, string>();

        private static char[] constant = {'1', '2', '3', '4', '5', '6', '7', '8', '9' };

        public static string GenerateRandomNumber(int Length)
        ]]></source>
</chunk>
<method name="GenerateRandomNumber" namespace="MockDBMS" type="MockDBMS.DBMS" typeName="DBMS" token="6000020" module="MockDBMS.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="8"/>
<hit index="8" value="8"/>
<hit index="9" value="8"/>
<hit index="10" value="16"/>
<hit index="11" value="8"/>
<hit index="12" value="8"/>
<hit index="13" value="8"/>
<hit index="14" value="8"/>
<hit index="15" value="1"/>
<hit index="16" value="1"/>
<hit index="17" value="1"/>
<hit index="18" value="1"/>
<hit index="19" value="2"/>
<hit index="20" value="8"/>
</hits>
<tags><tag offset="001d">call to uninstrumented method System.Int32 System.Random.Next(System.Int32 maxValue)</tag>
</tags>
<coverage domain="usercodeundertest" unit="block" covered="8" total="8" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[System.Text.StringBuilder newRandom = new System.Text.StringBuilder(9);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0009" domain="usercodeundertest"><source><![CDATA[Random rd = new Random();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            for (]]></source>
</chunk>
<chunk hits="1" offset="000f" domain="usercodeundertest"><source><![CDATA[int i = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="9" offset="002e" domain="usercodeundertest"><source><![CDATA[i < Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="8" offset="002a" domain="usercodeundertest"><source><![CDATA[i++]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
            ]]></source>
</chunk>
<chunk hits="8" offset="0013" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="8" offset="0014" domain="usercodeundertest" tag="true"><tooltip><![CDATA[call to uninstrumented method System.Int32 System.Random.Next(System.Int32 maxValue)]]></tooltip>
<source><![CDATA[newRandom.Append(constant[rd.Next(9)]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="8" offset="0029" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0038" domain="usercodeundertest"><source><![CDATA[return newRandom.ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="0041" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public static string processData(object x, string tag, string query, bool flag)
        ]]></source>
</chunk>
<method name="processData" namespace="MockDBMS" type="MockDBMS.DBMS" typeName="DBMS" token="6000021" module="MockDBMS.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
<hit index="10" value="1"/>
<hit index="11" value="2"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="1"/>
<hit index="16" value="2"/>
<hit index="46" value="1"/>
<hit index="47" value="1"/>
<hit index="48" value="1"/>
<hit index="49" value="1"/>
<hit index="50" value="1"/>
<hit index="51" value="1"/>
<hit index="52" value="1"/>
<hit index="53" value="1"/>
<hit index="54" value="1"/>
<hit index="55" value="1"/>
<hit index="56" value="1"/>
<hit index="57" value="1"/>
<hit index="58" value="1"/>
<hit index="59" value="1"/>
<hit index="60" value="1"/>
<hit index="61" value="1"/>
<hit index="62" value="1"/>
<hit index="63" value="1"/>
<hit index="64" value="1"/>
<hit index="65" value="1"/>
<hit index="68" value="1"/>
<hit index="70" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="10" total="20" coveredRatio="0.5"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[string pwd = GenerateRandomNumber(8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0013" domain="usercodeundertest"><source><![CDATA[while(query.Contains(pwd) || taintTags.ContainsKey(pwd))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000a" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000b" domain="usercodeundertest"><source><![CDATA[pwd = GenerateRandomNumber(8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0012" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="002e" domain="usercodeundertest"><source><![CDATA[taintTags.Add(pwd, tag);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="003b" domain="usercodeundertest"><source><![CDATA[if (flag == false)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0040" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0041" domain="usercodeundertest"><source><![CDATA[if ((x is System.String) == false)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="004e" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    //Console.WriteLine(x + pwd);
                    ]]></source>
</chunk>
<chunk hits="0" offset="004f" domain="usercodeundertest"><source><![CDATA[return x + pwd;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                }
                else
                ]]></source>
</chunk>
<chunk hits="0" offset="0059" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="005a" domain="usercodeundertest"><source><![CDATA[return "\"" + x + pwd + "\"";]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                }
            }
            else
            ]]></source>
</chunk>
<chunk hits="1" offset="0082" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0083" domain="usercodeundertest"><source><![CDATA[if ((x is System.String) == false)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0090" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    //Console.WriteLine(x + pwd);
                    ]]></source>
</chunk>
<chunk hits="0" offset="0091" domain="usercodeundertest"><source><![CDATA[return x + pwd;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                }
                else
                ]]></source>
</chunk>
<chunk hits="1" offset="009b" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="009c" domain="usercodeundertest"><source><![CDATA[return "'" + x + pwd + "'";]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                }
            }
        ]]></source>
</chunk>
<chunk hits="1" offset="00c4" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        /*public static string processStringData(string x, string name, int flag)
        {
            if (flag == 0) //insert
            {
                if (taintTags.ContainsKey(name) == false)
                {
                    return "\"" + x + "00000000\"";
                }
                else
                {
                    return "\"" + x + taintTags[name] + "\"";
                }
            }
            else //others
            {
                if (taintTags.ContainsKey(name) == false)
                {
                    return "'" + x + "00000000'";
                }
                else
                {
                    return "'" + x + taintTags[name] + "'";
                }
            }
        }

        public static string processDecimalData(Decimal x, string name)
        {
            if (taintTags.ContainsKey(name) == false)
            {
                return x + "00000000";
            }
            else
            {
                return x + taintTags[name];
            }
        }*/

    }   // End class DBMS

    public class Table
    {
        #region Member variables (MG)
        public string name;

        // MG: Map conlumn name to datatype: STRING, INT, or CHAR
        Dictionary<string, DataTypes> columnNameType; // name -> type

        // MG: Map column name to the index of the column
        Dictionary<string, int> columnIndices;

        // MG: List of records (list of object type) 
        List<object[]> records; // List of records in the table

        // MG: Primary Keys
        ]]></source>
</chunk>
<method name=".ctor" namespace="MockDBMS" type="MockDBMS.Table" typeName="Table" token="600002a" module="MockDBMS.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
<hit index="10" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="1"/>
<hit index="16" value="1"/>
<hit index="17" value="1"/>
<hit index="19" value="1"/>
<hit index="20" value="1"/>
<hit index="21" value="1"/>
<hit index="22" value="1"/>
<hit index="24" value="1"/>
<hit index="25" value="1"/>
<hit index="26" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="6" total="6" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[List<String> pKeys = new List<string>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        // MG: Foreign Keys
        public string[] foreignKeys;

        ]]></source>
</chunk>
<chunk hits="2" offset="000b" domain="usercodeundertest"><source><![CDATA[public int numColumns = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        #endregion

        #region Accessor for columnNameType, columnNameIndicies, and records (MG)
        public Dictionary<string, int> ColumnIndices
        {
            get ]]></source>
</chunk>
<method name="get_ColumnIndices" namespace="MockDBMS" type="MockDBMS.Table" typeName="Table" token="6000024" module="MockDBMS.dll"><hits><hit index="0" value="168"/>
<hit index="1" value="168"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="168" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="168" offset="0001" domain="usercodeundertest"><source><![CDATA[return columnIndices;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="168" offset="000a" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            set { columnIndices = value; }
        }

        public Dictionary<string, DataTypes> ColumnNameType
        {
            get ]]></source>
</chunk>
<method name="get_ColumnNameType" namespace="MockDBMS" type="MockDBMS.Table" typeName="Table" token="6000026" module="MockDBMS.dll"><hits><hit index="0" value="6"/>
<hit index="1" value="6"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="6" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="6" offset="0001" domain="usercodeundertest"><source><![CDATA[return columnNameType;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="6" offset="000a" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            set { columnNameType = value; }
        }

        public List<object[]> Records
        {
            get { return records; }
            set { records = value; }
        }
        #endregion

        #region Constructor for class Table
        ]]></source>
</chunk>
<chunk hits="2" offset="0012" domain="usercodeundertest"><source><![CDATA[public Table(string tableName)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0019" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="001a" domain="usercodeundertest"><source><![CDATA[name = tableName;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0021" domain="usercodeundertest"><source><![CDATA[columnNameType = new Dictionary<string, DataTypes>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="002c" domain="usercodeundertest"><source><![CDATA[columnIndices = new Dictionary<string, int>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0037" domain="usercodeundertest"><source><![CDATA[records = new List<object[]>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0042" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        #endregion

        public void AddPrimaryKey(string column)
        {
            pKeys.Add(column);
        }

        //public Column SelectColumn(string name) { } //Column contains objects of each column
        public void AddColumn(string name, DataTypes type)
        ]]></source>
</chunk>
<method name="AddColumn" namespace="MockDBMS" type="MockDBMS.Table" typeName="Table" token="600002c" module="MockDBMS.dll"><hits><hit index="0" value="28"/>
<hit index="1" value="28"/>
<hit index="2" value="28"/>
<hit index="3" value="28"/>
<hit index="4" value="28"/>
<hit index="5" value="56"/>
<hit index="6" value="28"/>
<hit index="7" value="28"/>
<hit index="8" value="28"/>
<hit index="9" value="28"/>
<hit index="10" value="28"/>
<hit index="11" value="28"/>
<hit index="12" value="28"/>
<hit index="13" value="56"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<chunk hits="28" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="28" offset="0001" domain="usercodeundertest"><source><![CDATA[columnNameType.Add(name, type);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="84" offset="000f" domain="usercodeundertest"><source><![CDATA[columnIndices.Add(name, numColumns++);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="84" offset="002d" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public void InsertRecord(object[] record)
        ]]></source>
</chunk>
<method name="InsertRecord" namespace="MockDBMS" type="MockDBMS.Table" typeName="Table" token="600002d" module="MockDBMS.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="4"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="usercodeundertest"><source><![CDATA[records.Add(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="6" offset="000e" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        public void DeleteRecords(List<object[]> recds)
        {
            foreach (object[] r in recds)
            {
                if (!this.records.Contains(r))
                    throw new Exception("Record + " + r.ToString() + " not in the table");
                records.Remove(r);
            }
        }

        public void UpdateRecord(int recordID, object[] record)
        {
        }

        // MG: Need to investigate what is this
        public List<object[]> getRecordsWith(Expression condition, List<object[]> recds)
        ]]></source>
</chunk>
<method name="getRecordsWith" namespace="MockDBMS" type="MockDBMS.Table" typeName="Table" token="6000030" module="MockDBMS.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="4"/>
<hit index="13" value="2"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="16" value="4"/>
<hit index="17" value="2"/>
<hit index="18" value="2"/>
<hit index="19" value="2"/>
<hit index="20" value="4"/>
<hit index="21" value="2"/>
<hit index="22" value="2"/>
<hit index="23" value="2"/>
<hit index="24" value="4"/>
<hit index="36" value="2"/>
<hit index="37" value="2"/>
<hit index="38" value="2"/>
<hit index="39" value="4"/>
<hit index="40" value="2"/>
<hit index="41" value="2"/>
<hit index="42" value="2"/>
<hit index="43" value="2"/>
<hit index="44" value="4"/>
<hit index="56" value="2"/>
<hit index="57" value="2"/>
<hit index="58" value="2"/>
<hit index="59" value="4"/>
<hit index="60" value="2"/>
<hit index="61" value="2"/>
<hit index="62" value="2"/>
<hit index="63" value="2"/>
<hit index="64" value="4"/>
<hit index="81" value="2"/>
<hit index="82" value="2"/>
<hit index="83" value="2"/>
<hit index="84" value="2"/>
<hit index="85" value="2"/>
<hit index="86" value="2"/>
<hit index="87" value="2"/>
<hit index="88" value="4"/>
<hit index="114" value="2"/>
<hit index="115" value="2"/>
<hit index="116" value="2"/>
<hit index="117" value="2"/>
<hit index="118" value="4"/>
<hit index="119" value="2"/>
<hit index="120" value="2"/>
<hit index="121" value="2"/>
<hit index="122" value="2"/>
<hit index="123" value="2"/>
<hit index="124" value="4"/>
<hit index="136" value="2"/>
<hit index="137" value="2"/>
<hit index="138" value="2"/>
<hit index="139" value="2"/>
<hit index="140" value="2"/>
<hit index="141" value="4"/>
<hit index="154" value="2"/>
<hit index="155" value="2"/>
<hit index="156" value="2"/>
<hit index="157" value="4"/>
<hit index="158" value="1"/>
<hit index="159" value="1"/>
<hit index="160" value="1"/>
<hit index="161" value="1"/>
<hit index="162" value="2"/>
<hit index="163" value="1"/>
<hit index="164" value="1"/>
<hit index="165" value="1"/>
<hit index="166" value="1"/>
<hit index="167" value="1"/>
<hit index="168" value="2"/>
<hit index="169" value="1"/>
<hit index="170" value="1"/>
<hit index="171" value="1"/>
<hit index="172" value="1"/>
<hit index="173" value="2"/>
<hit index="174" value="1"/>
<hit index="175" value="1"/>
<hit index="176" value="1"/>
<hit index="177" value="2"/>
<hit index="178" value="1"/>
<hit index="179" value="1"/>
<hit index="180" value="1"/>
<hit index="181" value="1"/>
<hit index="182" value="2"/>
<hit index="183" value="1"/>
<hit index="184" value="1"/>
<hit index="185" value="1"/>
<hit index="186" value="1"/>
<hit index="211" value="1"/>
<hit index="212" value="1"/>
<hit index="213" value="1"/>
<hit index="214" value="2"/>
<hit index="243" value="1"/>
<hit index="244" value="1"/>
<hit index="245" value="1"/>
<hit index="246" value="2"/>
<hit index="247" value="1"/>
<hit index="248" value="1"/>
<hit index="249" value="1"/>
<hit index="250" value="1"/>
<hit index="251" value="2"/>
<hit index="252" value="1"/>
<hit index="253" value="1"/>
<hit index="254" value="1"/>
<hit index="255" value="2"/>
<hit index="256" value="1"/>
<hit index="257" value="1"/>
<hit index="258" value="1"/>
<hit index="259" value="2"/>
<hit index="272" value="1"/>
<hit index="273" value="1"/>
<hit index="274" value="1"/>
<hit index="275" value="2"/>
<hit index="290" value="1"/>
<hit index="291" value="1"/>
<hit index="292" value="1"/>
<hit index="293" value="2"/>
<hit index="294" value="1"/>
<hit index="295" value="1"/>
<hit index="296" value="1"/>
<hit index="297" value="1"/>
<hit index="298" value="2"/>
<hit index="299" value="1"/>
<hit index="300" value="1"/>
<hit index="301" value="1"/>
<hit index="302" value="1"/>
<hit index="303" value="2"/>
<hit index="304" value="1"/>
<hit index="305" value="1"/>
<hit index="379" value="2"/>
<hit index="380" value="2"/>
<hit index="381" value="2"/>
<hit index="382" value="2"/>
<hit index="383" value="2"/>
<hit index="389" value="2"/>
<hit index="390" value="2"/>
<hit index="391" value="2"/>
<hit index="392" value="1"/>
<hit index="393" value="1"/>
<hit index="397" value="1"/>
<hit index="398" value="1"/>
<hit index="400" value="1"/>
<hit index="401" value="1"/>
</hits>
<tags><tag offset="00ce">This assertion has not been reached</tag>
<tag offset="00d6">This assertion has not been reached</tag>
<tag offset="00e3">This assertion has not been reached</tag>
<tag offset="03f6">This assertion has not been reached</tag>
<tag offset="040e">This assertion has not been reached</tag>
<tag offset="044a">This assertion has not been reached</tag>
<tag offset="0457">This assertion has not been reached</tag>
</tags>
<coverage domain="usercodeundertest" unit="block" covered="57" total="146" coveredRatio="0.3904109589041096"/>
<coverage domain="usercodeundertest" unit="asserts" covered="4" total="11" coveredRatio="0.36363636363636365"/>
</method>
<chunk hits="2" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="usercodeundertest"><source><![CDATA[string left = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0003" domain="usercodeundertest"><source><![CDATA[string right = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            string op;
            ]]></source>
</chunk>
<chunk hits="2" offset="0005" domain="usercodeundertest"><source><![CDATA[List<object[]> resultSet = new List<object[]>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="000b" domain="usercodeundertest"><source><![CDATA[if (condition.Operator == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="001d" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="001e" domain="usercodeundertest"><source><![CDATA[throw new Exception("operator cannot be null");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }
            ]]></source>
</chunk>
<chunk hits="2" offset="0029" domain="usercodeundertest"><source><![CDATA[op = condition.Operator.Value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            Expression lhs;
            Expression rhs;
            ]]></source>
</chunk>
<chunk hits="6" offset="0035" domain="usercodeundertest"><source><![CDATA[if (condition.Left is PatternExpression)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="004c" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="004d" domain="usercodeundertest"><source><![CDATA[lhs = (Expression)((PatternExpression)condition.Left).Expression;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                //rhs = (Expression)((PatternExpression)condition.Right).Expression;
            ]]></source>
</chunk>
<chunk hits="0" offset="0064" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else
            ]]></source>
</chunk>
<chunk hits="2" offset="0067" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0068" domain="usercodeundertest"><source><![CDATA[lhs = (Expression)condition.Left;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                //rhs = (Expression)condition.Right;
            ]]></source>
</chunk>
<chunk hits="2" offset="0075" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0076" domain="usercodeundertest"><source><![CDATA[if (condition.Right is PatternExpression)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="008d" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                //lhs = (Expression)((PatternExpression)condition.Left).Expression;
                ]]></source>
</chunk>
<chunk hits="0" offset="008e" domain="usercodeundertest"><source><![CDATA[rhs = (Expression)((PatternExpression)condition.Right).Expression;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00a5" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else
            ]]></source>
</chunk>
<chunk hits="2" offset="00a8" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                //lhs = (Expression)condition.Left;
                ]]></source>
</chunk>
<chunk hits="2" offset="00a9" domain="usercodeundertest"><source><![CDATA[rhs = (Expression)condition.Right;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="00b6" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[


            ]]></source>
</chunk>
<chunk hits="2" offset="00b7" domain="usercodeundertest"><source><![CDATA[if (op.Equals("NOT"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00cb" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00cc" domain="usercodeundertest" tag="true"><tooltip><![CDATA[This assertion has not been reached]]></tooltip>
<source><![CDATA[PexAssert.IsNull(lhs);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00d4" domain="usercodeundertest" tag="true"><tooltip><![CDATA[This assertion has not been reached]]></tooltip>
<source><![CDATA[PexAssert.IsNotNull(rhs);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00dc" domain="usercodeundertest" tag="true"><tooltip><![CDATA[This assertion has not been reached]]></tooltip>
<source><![CDATA[PexAssert.IsNotNull(rhs.Operator);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00e9" domain="usercodeundertest"><source><![CDATA[List<object[]> rec = getRecordsWith(rhs, recds);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00f4" domain="usercodeundertest"><source><![CDATA[resultSet = PerformOperationOnRecords(records, rec, op);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0104" domain="usercodeundertest"><source><![CDATA[return resultSet;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
            }
            ]]></source>
</chunk>
<chunk hits="2" offset="010c" domain="usercodeundertest"><source><![CDATA[PexAssert.IsNotNull(lhs);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0114" domain="usercodeundertest"><source><![CDATA[PexAssert.IsNotNull(rhs);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            List<object[]> lhsRecords;
            List<object[]> rhsRecords;
            
            ]]></source>
</chunk>
<chunk hits="2" offset="011c" domain="usercodeundertest"><source><![CDATA[if (op.Equals("=") || op.Equals("<") || op.Equals("<=") 
                || op.Equals(">") || op.Equals(">=") || op.Equals("!="))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0177" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0178" domain="usercodeundertest"><source><![CDATA[bool isNegative = false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="017b" domain="usercodeundertest"><source><![CDATA[PexAssert.IsNull(lhs.Operator);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0188" domain="usercodeundertest"><source><![CDATA[PexAssert.IsTrue(rhs.Operator == null || rhs.Operator.Value == "-");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="01b0" domain="usercodeundertest"><source><![CDATA[if (rhs.Operator != null && rhs.Operator.Value == "-")]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="01db" domain="usercodeundertest"><source><![CDATA[isNegative = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
                ]]></source>
</chunk>
<chunk hits="2" offset="01de" domain="usercodeundertest"><source><![CDATA[if (lhs.Right is IntegerValue && rhs.Right is IntegerValue)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="020a" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="020b" domain="usercodeundertest"><source><![CDATA[if (!isNegative)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="0213" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="1" offset="0214" domain="usercodeundertest"><source><![CDATA[if (((IntegerValue)lhs.Right).Value == ((IntegerValue)rhs.Right).Value)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="1" offset="0244" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="1" offset="0245" domain="usercodeundertest"><source><![CDATA[resultSet = records;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="1" offset="024c" domain="usercodeundertest"><source><![CDATA[return resultSet;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        }
                    ]]></source>
</chunk>
<chunk hits="0" offset="0254" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else
                    ]]></source>
</chunk>
<chunk hits="0" offset="0257" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0258" domain="usercodeundertest"><source><![CDATA[if (((IntegerValue)lhs.Right).Value == -((IntegerValue)rhs.Right).Value)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="028d" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="028e" domain="usercodeundertest"><source><![CDATA[resultSet = records;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0295" domain="usercodeundertest"><source><![CDATA[return resultSet;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        }
                    ]]></source>
</chunk>
<chunk hits="0" offset="029d" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="029e" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else ]]></source>
</chunk>
<chunk hits="1" offset="02a1" domain="usercodeundertest"><source><![CDATA[if (lhs.Right is StringValue && rhs.Right is StringValue)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="02ca" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="02cb" domain="usercodeundertest"><source><![CDATA[if (((StringValue)lhs.Right).Value == ((StringValue)rhs.Right).Value)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="02fb" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="02fc" domain="usercodeundertest"><source><![CDATA[resultSet = records;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0303" domain="usercodeundertest"><source><![CDATA[return resultSet;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    }
                ]]></source>
</chunk>
<chunk hits="0" offset="030b" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                ]]></source>
</chunk>
<chunk hits="1" offset="030c" domain="usercodeundertest"><source><![CDATA[left = ((DbObject)lhs.Right).Identifier.ID;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="3" offset="0323" domain="usercodeundertest"><source><![CDATA[if (rhs.Right is IntegerValue)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="033b" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="033c" domain="usercodeundertest"><source><![CDATA[right = ((IntegerValue)rhs.Right).Value.ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0357" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else ]]></source>
</chunk>
<chunk hits="1" offset="035a" domain="usercodeundertest"><source><![CDATA[if (rhs.Right is DbObject)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0372" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0373" domain="usercodeundertest"><source><![CDATA[right = ((DbObject)rhs.Right).Identifier.ID;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="038a" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else ]]></source>
</chunk>
<chunk hits="1" offset="038d" domain="usercodeundertest"><source><![CDATA[if (rhs.Right is StringValue)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="03a5" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="03a6" domain="usercodeundertest"><source><![CDATA[right = ((StringValue)rhs.Right).Value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="3" offset="03b8" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
               //has to be an integerValue
                ]]></source>
</chunk>
<chunk hits="3" offset="03b9" domain="usercodeundertest"><source><![CDATA[resultSet = SelectRecords(left, right, op, recds);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="03c4" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="0" offset="03ca" domain="usercodeundertest"><source><![CDATA[if (op.Equals("AND") || op.Equals("OR"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="03ee" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="03ef" domain="usercodeundertest" tag="true"><tooltip><![CDATA[This assertion has not been reached]]></tooltip>
<source><![CDATA[PexAssert.IsNotNull(lhs.Operator);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="03fc" domain="usercodeundertest"><source><![CDATA[lhsRecords = getRecordsWith(lhs, recds);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0407" domain="usercodeundertest" tag="true"><tooltip><![CDATA[This assertion has not been reached]]></tooltip>
<source><![CDATA[PexAssert.IsNotNull(rhs.Operator);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0414" domain="usercodeundertest"><source><![CDATA[rhsRecords = getRecordsWith(rhs, recds);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="041f" domain="usercodeundertest"><source><![CDATA[resultSet = PerformOperationOnRecords(lhsRecords, rhsRecords, op);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="042b" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="0" offset="042e" domain="usercodeundertest"><source><![CDATA[if (op.Equals("LIKE"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0442" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0443" domain="usercodeundertest" tag="true"><tooltip><![CDATA[This assertion has not been reached]]></tooltip>
<source><![CDATA[PexAssert.IsNull(lhs.Operator);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0450" domain="usercodeundertest" tag="true"><tooltip><![CDATA[This assertion has not been reached]]></tooltip>
<source><![CDATA[PexAssert.IsNull(rhs.Operator);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="045d" domain="usercodeundertest"><source><![CDATA[right = ((StringValue)rhs.Right).Value.ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0474" domain="usercodeundertest"><source><![CDATA[left = ((DbObject)lhs.Right).Identifier.ID;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="048b" domain="usercodeundertest"><source><![CDATA[resultSet = SelectRecords(left, right, op, recds);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0496" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="1" offset="0497" domain="usercodeundertest"><source><![CDATA[return resultSet;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="049c" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        // MG: Need to investigate what is this
        public List<object[]> PerformOperationOnRecords(List<object[]> lhsRecords, List<object[]> rhsRecords, string op)
        {
            List<object[]> selectedRecords = new List<object[]>();
            if (op.Equals("NOT"))
            {
                foreach (object[] record in lhsRecords)
                {
                    if (!rhsRecords.Contains(record))
                        selectedRecords.Add(record);
                }
            }
            else if (op.Equals("AND"))
            {
                foreach (object[] record in lhsRecords)
                {
                    if (rhsRecords.Contains(record))
                        selectedRecords.Add(record);
                }
            }
            else if (op.Equals("OR"))
            {
                foreach (object[] record in lhsRecords)
                {
                    selectedRecords.Add(record);
                }
                foreach (object[] record in rhsRecords)
                {
                    if (!selectedRecords.Contains(record))
                        selectedRecords.Add(record);
                }
            }
            else
                throw new NotImplementedException("Operator + " + op + " Not Implemented");
            return selectedRecords;
        }

        /*To be implemented for 
         * Operators: LIKE, IS NULL, IS NOT NULL
         */
        public List<object[]> SelectRecords(string left, string right, string op, List<object[]> recds)
        ]]></source>
</chunk>
<method name="SelectRecords" namespace="MockDBMS" type="MockDBMS.Table" typeName="Table" token="6000032" module="MockDBMS.dll"><hits><hit index="0" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
<hit index="10" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="18" value="1"/>
<hit index="20" value="1"/>
<hit index="21" value="1"/>
<hit index="22" value="1"/>
<hit index="23" value="1"/>
<hit index="24" value="2"/>
<hit index="30" value="1"/>
<hit index="31" value="1"/>
<hit index="32" value="1"/>
<hit index="33" value="1"/>
<hit index="34" value="1"/>
<hit index="35" value="2"/>
<hit index="36" value="2"/>
<hit index="37" value="2"/>
<hit index="38" value="2"/>
<hit index="39" value="2"/>
<hit index="40" value="2"/>
<hit index="41" value="2"/>
<hit index="42" value="4"/>
<hit index="43" value="2"/>
<hit index="44" value="2"/>
<hit index="45" value="2"/>
<hit index="46" value="2"/>
<hit index="47" value="2"/>
<hit index="48" value="2"/>
<hit index="49" value="2"/>
<hit index="50" value="4"/>
<hit index="51" value="2"/>
<hit index="53" value="2"/>
<hit index="54" value="2"/>
<hit index="55" value="2"/>
<hit index="56" value="2"/>
<hit index="57" value="2"/>
<hit index="58" value="2"/>
<hit index="59" value="2"/>
<hit index="60" value="2"/>
<hit index="61" value="2"/>
<hit index="62" value="2"/>
<hit index="63" value="2"/>
<hit index="64" value="2"/>
<hit index="65" value="2"/>
<hit index="66" value="2"/>
<hit index="67" value="2"/>
<hit index="68" value="2"/>
<hit index="69" value="2"/>
<hit index="70" value="2"/>
<hit index="71" value="2"/>
<hit index="72" value="2"/>
<hit index="73" value="2"/>
<hit index="74" value="2"/>
<hit index="75" value="2"/>
<hit index="76" value="2"/>
<hit index="77" value="4"/>
<hit index="78" value="2"/>
<hit index="79" value="2"/>
<hit index="80" value="2"/>
<hit index="81" value="2"/>
<hit index="82" value="4"/>
<hit index="83" value="2"/>
<hit index="84" value="2"/>
<hit index="85" value="2"/>
<hit index="86" value="2"/>
<hit index="87" value="2"/>
<hit index="88" value="2"/>
<hit index="89" value="4"/>
<hit index="90" value="2"/>
<hit index="91" value="2"/>
<hit index="92" value="2"/>
<hit index="93" value="2"/>
<hit index="94" value="4"/>
<hit index="95" value="2"/>
<hit index="97" value="28"/>
<hit index="98" value="28"/>
<hit index="99" value="28"/>
<hit index="100" value="28"/>
<hit index="101" value="28"/>
<hit index="102" value="28"/>
<hit index="103" value="28"/>
<hit index="104" value="28"/>
<hit index="105" value="28"/>
<hit index="106" value="28"/>
<hit index="107" value="28"/>
<hit index="108" value="28"/>
<hit index="109" value="28"/>
<hit index="110" value="28"/>
<hit index="111" value="28"/>
<hit index="112" value="28"/>
<hit index="113" value="28"/>
<hit index="114" value="28"/>
<hit index="115" value="28"/>
<hit index="116" value="28"/>
<hit index="117" value="28"/>
<hit index="118" value="28"/>
<hit index="119" value="28"/>
<hit index="120" value="28"/>
<hit index="121" value="28"/>
<hit index="122" value="28"/>
<hit index="123" value="56"/>
<hit index="124" value="28"/>
<hit index="125" value="28"/>
<hit index="126" value="28"/>
<hit index="127" value="28"/>
<hit index="128" value="28"/>
<hit index="129" value="28"/>
<hit index="130" value="28"/>
<hit index="131" value="28"/>
<hit index="132" value="28"/>
<hit index="133" value="28"/>
<hit index="134" value="28"/>
<hit index="135" value="28"/>
<hit index="136" value="30"/>
<hit index="137" value="2"/>
<hit index="138" value="2"/>
<hit index="139" value="2"/>
<hit index="140" value="2"/>
<hit index="141" value="4"/>
<hit index="432" value="3"/>
<hit index="433" value="3"/>
<hit index="434" value="1"/>
<hit index="439" value="2"/>
<hit index="440" value="28"/>
<hit index="456" value="2"/>
<hit index="464" value="1"/>
<hit index="465" value="1"/>
<hit index="466" value="1"/>
<hit index="467" value="1"/>
<hit index="931" value="1"/>
<hit index="932" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="39" total="225" coveredRatio="0.17333333333333334"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[left = left.Trim('[', ']');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="001f" domain="usercodeundertest"><source><![CDATA[if (left.Contains("["))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0033" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0034" domain="usercodeundertest"><source><![CDATA[left = left.Substring(1, left.Length - 2);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0045" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="1" offset="0046" domain="usercodeundertest"><source><![CDATA[List<object[]> resultSet = new List<object[]>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="004c" domain="usercodeundertest"><source><![CDATA[if (op.Equals("=") || op.Equals("!="))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0073" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0074" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="2" offset="0087" domain="usercodeundertest"><source><![CDATA[object[] record]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="11" offset="05c9" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="0075" domain="usercodeundertest"><source><![CDATA[records]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                ]]></source>
</chunk>
<chunk hits="2" offset="008f" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="0090" domain="usercodeundertest"><source><![CDATA[object obj = record[columnIndices[left]];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="4" offset="009f" domain="usercodeundertest"><source><![CDATA[DataTypes type = ColumnNameType[left];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="6" offset="00ac" domain="usercodeundertest"><source><![CDATA[if (type == DataTypes.STRING)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="00bc" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="2" offset="00bd" domain="usercodeundertest"><source><![CDATA[right = right.Trim('\"', '[', ']', '\'');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="00e7" domain="usercodeundertest"><source><![CDATA[string tag = "00000000";]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="00ee" domain="usercodeundertest"><source><![CDATA[string value = right;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="00f1" domain="usercodeundertest"><source><![CDATA[if (right.Length > 8)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="0103" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="2" offset="0104" domain="usercodeundertest"><source><![CDATA[string pwd = right.Substring(right.Length - 8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="2" offset="0114" domain="usercodeundertest"><source><![CDATA[if (DBMS.taintTags.ContainsKey(pwd))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="2" offset="0129" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="2" offset="012a" domain="usercodeundertest"><source><![CDATA[tag = DBMS.taintTags[pwd];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="6" offset="0138" domain="usercodeundertest"><source><![CDATA[value = right.Substring(0, right.Length - 8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="2" offset="0149" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="014a" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        //Console.WriteLine(tag);
                        ]]></source>
</chunk>
<chunk hits="2" offset="014b" domain="usercodeundertest"><source><![CDATA[if (op.Equals("="))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="0162" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="2" offset="0163" domain="usercodeundertest"><source><![CDATA[if (obj.Equals(value))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="2" offset="0174" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                for (]]></source>
</chunk>
<chunk hits="2" offset="0175" domain="usercodeundertest"><source><![CDATA[int k = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="114" offset="01d1" domain="usercodeundertest"><source><![CDATA[k < numColumns]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="112" offset="01cb" domain="usercodeundertest"><source><![CDATA[k += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                ]]></source>
</chunk>
<chunk hits="28" offset="017a" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="28" offset="017b" domain="usercodeundertest"><source><![CDATA[record[k] = record[k] + "$" + tag + "$" + record[columnIndices[left + "_TAINT"]];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    //Console.WriteLine(record[k]);
                                ]]></source>
</chunk>
<chunk hits="112" offset="01ca" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="2" offset="01e1" domain="usercodeundertest"><source><![CDATA[resultSet.Add(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="6" offset="01e9" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                
                        ]]></source>
</chunk>
<chunk hits="8" offset="01ea" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else
                        ]]></source>
</chunk>
<chunk hits="0" offset="01f0" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="01f1" domain="usercodeundertest"><source><![CDATA[if (!obj.Equals(value))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="01ff" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                for (]]></source>
</chunk>
<chunk hits="0" offset="0200" domain="usercodeundertest"><source><![CDATA[int k = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="025c" domain="usercodeundertest"><source><![CDATA[k < numColumns]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="0256" domain="usercodeundertest"><source><![CDATA[k += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                ]]></source>
</chunk>
<chunk hits="0" offset="0205" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0206" domain="usercodeundertest"><source><![CDATA[record[k] = record[k] + "$" + tag + "$" + record[columnIndices[left + "_TAINT"]];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0255" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="026c" domain="usercodeundertest"><source><![CDATA[resultSet.Add(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0274" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                
                        ]]></source>
</chunk>
<chunk hits="0" offset="0275" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="8" offset="0276" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else ]]></source>
</chunk>
<chunk hits="0" offset="027c" domain="usercodeundertest"><source><![CDATA[if (type == DataTypes.INT)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="028c" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="028d" domain="usercodeundertest"><source><![CDATA[right = right.Trim('\"', '[', ']', '\'');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="02b7" domain="usercodeundertest"><source><![CDATA[int i= right.IndexOf("[");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="02c4" domain="usercodeundertest"><source><![CDATA[int j= right.IndexOf("]");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="02d1" domain="usercodeundertest"><source><![CDATA[int l = j-i-1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                        ]]></source>
</chunk>
<chunk hits="0" offset="02da" domain="usercodeundertest"><source><![CDATA[if(i!=-1 && j!=-1)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="02ed" domain="usercodeundertest"><source><![CDATA[right = right.Substring(i+1, l);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                        ]]></source>
</chunk>
<chunk hits="0" offset="02fb" domain="usercodeundertest"><source><![CDATA[string tag = "00000000";]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0302" domain="usercodeundertest"><source><![CDATA[string value = right;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0305" domain="usercodeundertest"><source><![CDATA[if (right.Length > 8)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0317" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0318" domain="usercodeundertest"><source><![CDATA[string pwd = right.Substring(right.Length - 8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0328" domain="usercodeundertest"><source><![CDATA[Console.WriteLine("pwd: " + pwd);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="033a" domain="usercodeundertest"><source><![CDATA[if (DBMS.taintTags.ContainsKey(pwd))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="034f" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0350" domain="usercodeundertest"><source><![CDATA[tag = DBMS.taintTags[pwd];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="035e" domain="usercodeundertest"><source><![CDATA[value = right.Substring(0, right.Length - 8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="036f" domain="usercodeundertest"><source><![CDATA[Console.WriteLine("tag: " + tag);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0381" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0382" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                        ]]></source>
</chunk>
<chunk hits="0" offset="0383" domain="usercodeundertest"><source><![CDATA[Int64 number = ToInt64(value, 10);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="038e" domain="usercodeundertest"><source><![CDATA[if (op.Equals("="))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="03a5" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="03a6" domain="usercodeundertest"><source><![CDATA[string typeooo = obj.GetType().ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="03b3" domain="usercodeundertest"><source><![CDATA[if (obj is System.Decimal)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="03c8" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="03c9" domain="usercodeundertest"><source><![CDATA[Int64 num = Decimal.ToInt64((Decimal)obj);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                               /* Decimal n = (Decimal)obj;
                                if(n.ToString() == number)
                                    resultSet.Add(record);
                                * */
                                ]]></source>
</chunk>
<chunk hits="0" offset="03d6" domain="usercodeundertest"><source><![CDATA[if (num == number)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="03e8" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    for (]]></source>
</chunk>
<chunk hits="0" offset="03e9" domain="usercodeundertest"><source><![CDATA[int k = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0472" domain="usercodeundertest"><source><![CDATA[k < numColumns]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="046c" domain="usercodeundertest"><source><![CDATA[k += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                    ]]></source>
</chunk>
<chunk hits="0" offset="03f1" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="03f2" domain="usercodeundertest"><source><![CDATA[record[k] = record[k] + "$" + tag + "$" + record[columnIndices[left + "_TAINT"]];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0441" domain="usercodeundertest"><source><![CDATA[Console.WriteLine("content:"+record[k-1]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0457" domain="usercodeundertest"><source><![CDATA[Console.WriteLine("tag:"+record[k]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="046b" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0485" domain="usercodeundertest"><source><![CDATA[resultSet.Add(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="048d" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    
                            ]]></source>
</chunk>
<chunk hits="0" offset="048e" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else ]]></source>
</chunk>
<chunk hits="0" offset="0494" domain="usercodeundertest"><source><![CDATA[if ((int)obj == number)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="04ab" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                for (]]></source>
</chunk>
<chunk hits="0" offset="04ac" domain="usercodeundertest"><source><![CDATA[int k = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0512" domain="usercodeundertest"><source><![CDATA[k < numColumns]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="050c" domain="usercodeundertest"><source><![CDATA[k += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                ]]></source>
</chunk>
<chunk hits="0" offset="04b1" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="04b2" domain="usercodeundertest"><source><![CDATA[record[k] = record[k] + "$" + tag + "$" + record[columnIndices[left + "_TAINT"]];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0501" domain="usercodeundertest"><source><![CDATA[Console.WriteLine(record[k]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="050b" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0522" domain="usercodeundertest"><source><![CDATA[resultSet.Add(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="052a" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="052b" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else
                        ]]></source>
</chunk>
<chunk hits="0" offset="0531" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0532" domain="usercodeundertest"><source><![CDATA[if ((int)obj != number)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0546" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                for (]]></source>
</chunk>
<chunk hits="0" offset="0547" domain="usercodeundertest"><source><![CDATA[int k = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="05ad" domain="usercodeundertest"><source><![CDATA[k < numColumns]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="05a7" domain="usercodeundertest"><source><![CDATA[k += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                ]]></source>
</chunk>
<chunk hits="0" offset="054c" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="054d" domain="usercodeundertest"><source><![CDATA[record[k] = record[k] + "$" + tag + "$" + record[columnIndices[left + "_TAINT"]];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="059c" domain="usercodeundertest"><source><![CDATA[Console.WriteLine(record[k]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="05a6" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="05bd" domain="usercodeundertest"><source><![CDATA[resultSet.Add(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="05c5" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="05c6" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="05c7" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="8" offset="05c8" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="05eb" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="0" offset="05f1" domain="usercodeundertest"><source><![CDATA[if (op.Equals("<") || op.Equals("<=") || op.Equals(">") || op.Equals(">="))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            ]]></source>
</chunk>
<chunk hits="0" offset="0632" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0633" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="0" offset="0646" domain="usercodeundertest"><source><![CDATA[object[] record]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="09b5" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0634" domain="usercodeundertest"><source><![CDATA[records]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                ]]></source>
</chunk>
<chunk hits="0" offset="064e" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="064f" domain="usercodeundertest"><source><![CDATA[Console.WriteLine(left);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0656" domain="usercodeundertest"><source><![CDATA[object obj = record[columnIndices[left]];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0665" domain="usercodeundertest"><source><![CDATA[DataTypes type = ColumnNameType[left];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0672" domain="usercodeundertest"><source><![CDATA[if (type == DataTypes.INT)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0682" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        //right = right.Trim('\"', '[', ']');
                        //Int64 number = System.Convert.ToInt64(right, 10);
                        ]]></source>
</chunk>
<chunk hits="0" offset="0683" domain="usercodeundertest"><source><![CDATA[string tag = "00000000";]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="068a" domain="usercodeundertest"><source><![CDATA[string value = right;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="068d" domain="usercodeundertest"><source><![CDATA[if (right.Length > 8)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="069f" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="06a0" domain="usercodeundertest"><source><![CDATA[string pwd = right.Substring(right.Length - 8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="06b0" domain="usercodeundertest"><source><![CDATA[if (DBMS.taintTags.ContainsKey(pwd))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="06c5" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="06c6" domain="usercodeundertest"><source><![CDATA[tag = DBMS.taintTags[pwd];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="06d4" domain="usercodeundertest"><source><![CDATA[value = right.Substring(0, right.Length - 8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="06e5" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="06e6" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="06e7" domain="usercodeundertest"><source><![CDATA[Int64 number = ToInt64(value, 10);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="06f2" domain="usercodeundertest"><source><![CDATA[if (op.Equals("<"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0709" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="070a" domain="usercodeundertest"><source><![CDATA[if ((int)obj < number)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="071e" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                for (]]></source>
</chunk>
<chunk hits="0" offset="071f" domain="usercodeundertest"><source><![CDATA[int k = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="077b" domain="usercodeundertest"><source><![CDATA[k < numColumns]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="0775" domain="usercodeundertest"><source><![CDATA[k += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                ]]></source>
</chunk>
<chunk hits="0" offset="0724" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0725" domain="usercodeundertest"><source><![CDATA[record[k] = record[k] + "$" + tag + "$" + record[columnIndices[left + "_TAINT"]];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0774" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="078b" domain="usercodeundertest"><source><![CDATA[resultSet.Add(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0793" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0794" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else ]]></source>
</chunk>
<chunk hits="0" offset="079a" domain="usercodeundertest"><source><![CDATA[if (op.Equals("<="))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="07b1" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="07b2" domain="usercodeundertest"><source><![CDATA[if ((int)obj <= number)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="07c3" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                for (]]></source>
</chunk>
<chunk hits="0" offset="07c4" domain="usercodeundertest"><source><![CDATA[int k = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0820" domain="usercodeundertest"><source><![CDATA[k < numColumns]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="081a" domain="usercodeundertest"><source><![CDATA[k += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                ]]></source>
</chunk>
<chunk hits="0" offset="07c9" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="07ca" domain="usercodeundertest"><source><![CDATA[record[k] = record[k] + "$" + tag + "$" + record[columnIndices[left + "_TAINT"]];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0819" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0830" domain="usercodeundertest"><source><![CDATA[resultSet.Add(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0838" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0839" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else ]]></source>
</chunk>
<chunk hits="0" offset="083f" domain="usercodeundertest"><source><![CDATA[if (op.Equals(">"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0856" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0857" domain="usercodeundertest"><source><![CDATA[if ((int)obj > number)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="086b" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                for (]]></source>
</chunk>
<chunk hits="0" offset="086c" domain="usercodeundertest"><source><![CDATA[int k = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="08c8" domain="usercodeundertest"><source><![CDATA[k < numColumns]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="08c2" domain="usercodeundertest"><source><![CDATA[k += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                ]]></source>
</chunk>
<chunk hits="0" offset="0871" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0872" domain="usercodeundertest"><source><![CDATA[record[k] = record[k] + "$" + tag + "$" + record[columnIndices[left + "_TAINT"]];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="08c1" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="08d8" domain="usercodeundertest"><source><![CDATA[resultSet.Add(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="08e0" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="08e1" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else ]]></source>
</chunk>
<chunk hits="0" offset="08e7" domain="usercodeundertest"><source><![CDATA[if (op.Equals(">="))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="08fe" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="08ff" domain="usercodeundertest"><source><![CDATA[if ((int)obj >= number)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0910" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                for (]]></source>
</chunk>
<chunk hits="0" offset="0911" domain="usercodeundertest"><source><![CDATA[int k = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="096d" domain="usercodeundertest"><source><![CDATA[k < numColumns]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="0967" domain="usercodeundertest"><source><![CDATA[k += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                ]]></source>
</chunk>
<chunk hits="0" offset="0916" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0917" domain="usercodeundertest"><source><![CDATA[record[k] = record[k] + "$" + tag + "$" + record[columnIndices[left + "_TAINT"]];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0966" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="097d" domain="usercodeundertest"><source><![CDATA[resultSet.Add(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0985" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0986" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else
                        ]]></source>
</chunk>
<chunk hits="0" offset="0989" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="098a" domain="usercodeundertest"><source><![CDATA[throw new Exception("Unexpected Symbol " + op);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        }

                    ]]></source>
</chunk>
<chunk hits="0" offset="099b" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else
                        ]]></source>
</chunk>
<chunk hits="0" offset="099e" domain="usercodeundertest"><source><![CDATA[throw new Exception("Expected a Integer but got " + type);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="09b4" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="09d7" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="0" offset="09dd" domain="usercodeundertest"><source><![CDATA[if (op.Equals("LIKE"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="09f4" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="09f5" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="0" offset="0a08" domain="usercodeundertest"><source><![CDATA[object[] record]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0b44" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="09f6" domain="usercodeundertest"><source><![CDATA[records]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                ]]></source>
</chunk>
<chunk hits="0" offset="0a10" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0a11" domain="usercodeundertest"><source><![CDATA[object obj = record[columnIndices[left]];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0a20" domain="usercodeundertest"><source><![CDATA[right = right.Trim('\"', '[', ']', '\'');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0a4a" domain="usercodeundertest"><source><![CDATA[string tag = "00000000";]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0a51" domain="usercodeundertest"><source><![CDATA[string value = right;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0a54" domain="usercodeundertest"><source><![CDATA[if (right.Length > 8)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0a66" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0a67" domain="usercodeundertest"><source><![CDATA[string pwd = right.Substring(right.Length - 8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0a77" domain="usercodeundertest"><source><![CDATA[if (DBMS.taintTags.ContainsKey(pwd))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0a8c" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0a8d" domain="usercodeundertest"><source><![CDATA[tag = DBMS.taintTags[pwd];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0a9b" domain="usercodeundertest"><source><![CDATA[value = right.Substring(0, right.Length - 8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0aac" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0aad" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0aae" domain="usercodeundertest"><source><![CDATA[Match m = Regex.Match((string)obj, value);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0abd" domain="usercodeundertest"><source><![CDATA[if (m.Success)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0acd" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        for (]]></source>
</chunk>
<chunk hits="0" offset="0ace" domain="usercodeundertest"><source><![CDATA[int k = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0b2a" domain="usercodeundertest"><source><![CDATA[k < numColumns]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="0b24" domain="usercodeundertest"><source><![CDATA[k += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                        ]]></source>
</chunk>
<chunk hits="0" offset="0ad3" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0ad4" domain="usercodeundertest"><source><![CDATA[record[k] = record[k] + "$" + tag + "$" + record[columnIndices[left + "_TAINT"]];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0b23" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0b3a" domain="usercodeundertest"><source><![CDATA[resultSet.Add(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0b42" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0b43" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0b66" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            else ]]></source>
</chunk>
<chunk hits="0" offset="0b69" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0b6a" domain="usercodeundertest"><source><![CDATA[throw new NotImplementedException("Not Implemented for Operator: " + op);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ }
            ]]></source>
</chunk>
<chunk hits="1" offset="0b7b" domain="usercodeundertest"><source><![CDATA[return resultSet;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0b80" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        //Syste,.Convert.ToInt64 is extern so pex cannot instrument
        private static Int64 ToInt64(string right, int p)
        {
            Int64 number = 0;
            for (int i = 0; i < right.Length; i++)
            {
                string digit = right.Substring(right.Length - i-1, 1);
                
                if (digit.Equals("1"))
                {
                    int n=1;
                    for (int j = 0; j < i; j++) 
                        n = n * 10;
                    number = number + n * 1;
                }
                else if (digit.Equals("2"))
                {
                    int n = 1;
                    for (int j = 0; j < i; j++)
                        n = n * 10;
                    number = number + n * 2;
                }
                else if (digit.Equals("3"))
                {
                    int n = 1;
                    for (int j = 0; j < i; j++)
                        n = n * 10;
                    number = number + n * 3;
                }
                else if (digit.Equals("4"))
                {
                    int n = 1;
                    for (int j = 0; j < i; j++)
                        n = n * 10;
                    number = number + n * 4;
                }
                else if (digit.Equals("5"))
                {
                    int n = 1;
                    for (int j = 0; j < i; j++)
                        n = n * 10;
                    number = number + n * 5;
                }
                else if (digit.Equals("6"))
                {
                    int n = 1;
                    for (int j = 0; j < i; j++)
                        n = n * 10;
                    number = number + n * 6;
                }
                else if (digit.Equals("7"))
                {
                    int n = 1;
                    for (int j = 0; j < i; j++)
                        n = n * 10;
                    number = number + n * 7;
                }
                else if (digit.Equals("8"))
                {
                    int n = 1;
                    for (int j = 0; j < i; j++)
                        n = n * 10;
                    number = number + n * 8;
                }
                else if (digit.Equals("9"))
                {
                    int n = 1;
                    for (int j = 0; j < i; j++)
                        n = n * 10;
                    number = number + n * 9;
                }
            }
            return number;
        }
        

        // MG: Not referenced
        public List<object[]> getRecordsWith(Expression condition)
        {
            string left = null;
            string right = null;
            string op;
            List<object[]> resultSet = new List<object[]>();

            if (condition.Operator == null)
            {
                throw new Exception("operator cannot be null");
            }
            op = condition.Operator.Value;
            Expression lhs = (Expression)condition.Left;
            Expression rhs = (Expression)condition.Right;
            if (lhs.Operator == null)
            {
                left = ((DbObject)lhs.Right).Identifier.ID;
            }
            if (rhs.Operator == null)
            {
                right = ((DbObject)rhs.Right).Identifier.ID;
            }

            if (op == "=")
            {
                foreach (object[] record in records)
                {
                    object obj = record[columnIndices[left]];
                    DataTypes type = ColumnNameType[left];
                    if (type == DataTypes.STRING)
                    {
                        char[] trinchars = new char[4];
                        trinchars[0] = '\"';
                        trinchars[1] = '[';
                        trinchars[2] = ']';
                        trinchars[3] = '\'';
                        right = right.Trim(trinchars[0], trinchars[1], trinchars[2], trinchars[3]);
                        if (obj.Equals(right))
                            resultSet.Add(record);
                    }
                }
            }
            return resultSet;
        }
    }   // End class Table
}   // End Namespace MockDBMS
        
            


]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs" renderPrefix="s4"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Collections.Generic;
using System.Text;

namespace MockDBMS.SqlServer
{
    /// <summary>
    /// MG: This class contains only one MockDBMS.DBMS object
    /// </summary>
    public class MockSqlConnection
    {
        MockDBMS.DBMS dbms;

        public MockDBMS.DBMS Dbms
        {
            get ]]></source>
</chunk>
<method name="get_Dbms" namespace="MockDBMS.SqlServer" type="MockDBMS.SqlServer.MockSqlConnection" typeName="MockSqlConnection" token="600005e" module="MockDBMS.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="usercodeundertest"><source><![CDATA[return dbms;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="000a" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            set { dbms = value; }
        }

        ]]></source>
</chunk>
<method name=".ctor" namespace="MockDBMS.SqlServer" type="MockDBMS.SqlServer.MockSqlConnection" typeName="MockSqlConnection" token="6000060" module="MockDBMS.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[public MockSqlConnection(string s)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0007" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0008" domain="usercodeundertest"><source><![CDATA[dbms = new MockDBMS.DBMS();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="0013" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        /// <summary>
        /// MG: Initializes the DBMS state of the one and only MockD
        /// </summary>
        public void Open()
        ]]></source>
</chunk>
<method name="Open" namespace="MockDBMS.SqlServer" type="MockDBMS.SqlServer.MockSqlConnection" typeName="MockSqlConnection" token="6000061" module="MockDBMS.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="2"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[dbms.CreateDatabaseState();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="000d" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    }
}
]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\TestDBApp\DBApplication.cs" renderPrefix="s5"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Microsoft.Pex.Framework.Validation;
using Microsoft.Pex.Framework;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using MockDBMS;
using MockDBMS.SqlServer;
using MockDBMS.SqlCeServer;

namespace MyApplication
{
    [PexClass, TestClass]
    public class DBApplication
    {
        public static void TestMe()
        {

            MockSqlConnection myConnection = new MockSqlConnection("");     // Creates the (singleton) DBMS object

            myConnection.Open();   // Initializes the database state

            MockSqlCommand myCommand = new MockSqlCommand("SELECT firstname, x FROM persons WHERE lastname = 'Smith'", myConnection);
            MockSqlDataReader myReader = myCommand.ExecuteReader();
            while (myReader.Read())
            {
                if (myReader[0].Equals("John"))
                {
                    //myCommand = new MockSqlCommand("SELECT firstname FROM persons WHERE lastname = 'smith'", myConnection);
                    myCommand = new MockSqlCommand("SELECT salary FROM salary WHERE firstname = 'John' AND lastname = 'Smith'", myConnection);
                    /*int salary = (int)myCommand.ExecuteScalar();
                    if (salary < 0)
                        PexAssert.ReachEventually("Negative Salary for John!!");*/
                }
                else if (myReader[0].Equals("Tom"))
                {
                    string command = String.Format("SELECT salary FROM salary WHERE x = {0}", myReader[1]);
                    myCommand = new MockSqlCommand(command, myConnection);
                    /*int salary = (int)myCommand.ExecuteScalar();
                    if (salary < 0)
                        PexAssert.ReachEventually("Negative Salary for Tom!!");*/
                }
            }
        }

       
        public static string ExampleProgram(int k, string[] names)
        {
            MockSqlConnection myConnection = new MockSqlConnection("");
            myConnection.Open();
            MockSqlCommand myCommand = new MockSqlCommand("DELETE FROM PERSONS WHERE index > 0", myConnection);
            myCommand.ExecuteScalar();
            for (int i = 0; i < k; i++)
            {
                String query = String.Format("INSERT INTO PERSONS (index, name) VALUES (({0}, {1}))", i, names[i]);
                myCommand = new MockSqlCommand(query, myConnection);
                myCommand.ExecuteScalar();
            }
            myCommand = new MockSqlCommand("SELECT name FROM PERSONS WHERE index = 5", myConnection);
            MockSqlDataReader myReader = myCommand.ExecuteReader();
            if (myReader.Read())
            {
                //throw new PexGoalException();
                if (myReader[0].Equals("John"))
                {
                    PexAssert.ReachEventually();
                }
            }
            return PexSymbolicValue.GetPathConditionString();
        }
        
        public static void Main()
        {
            /*
            string[] names = new string[1];
            names[0] = "John";
            ExampleProgram(1, names); 
            */
            MockSqlConnection myConnection = new MockSqlConnection("");
            myConnection.Open();

            
            //MockSqlCommand myCommand = new MockSqlCommand("SELECT count(*) FROM persons WHERE lastname = \"Smith\" AND NOT x < 6", myConnection);
            //MockSqlCommand myCommand = new MockSqlCommand("SELECT firstname FROM persons WHERE x = 100 AND lastname = 'bob_y'", myConnection);
            //MockSqlCommand myCommand = new MockSqlCommand("SELECT distinct SignsSyms.SignSymText, SignsSyms.SignSymID FROM SignsSyms, ChiefComplaintToSignsSyms where ChiefComplaintToSignsSyms.CCID = 100 and ChiefComplaintToSignsSyms.SignSymID = SignsSyms.SignSymID order by SignsSyms.SignSymText", myConnection);
            //MockSqlCommand myCommand = new MockSqlCommand("SELECT sum(AssessmentSignsSymWeights.Weight) FROM AssessmentSignsSymWeights INNER JOIN SignsSyms ON AssessmentSignsSymWeights.SignSymID = SignsSyms.SignSymID WHERE AssessmentSignsSymWeights.AssessID = 1 AND (SignsSyms.SignSymText = 'a' OR SignsSyms.SignSymText = 'b')", myConnection);
            
            //MockSqlCommand myCommand = new MockSqlCommand("SELECT SignsSyms.SignSymText, SignsSyms.SignSymID FROM SignsSyms, PhysFindingsToSignsSyms, PhysFindings where PhysFindingsToSignsSyms.PFID = PhysFindings.PFID AND PhysFindingsToSignsSyms.SignSymID = SignsSyms.SignSymID AND PhysFindings.PFID = 17 and PhysFindings.SystemID = 0", myConnection);
            // MG this query throws exception

            MockSqlCommand myCommand = new MockSqlCommand("DELETE FROM persons WHERE lastname = \"Smith\"", myConnection);
            //MockSqlCommand myCommand = new MockSqlCommand("INSERT INTO persons (serial, lastname, x) VALUES (1005, \"smith\", 10)", myConnection);
            //MockSqlCommand myCommand = new MockSqlCommand("UPDATE persons SET lastname = 'Smith', firstname = 'John' WHERE x=10", myConnection);
            
            // MG: Failure in this line 
            MockSqlDataReader myReader = myCommand.ExecuteReader();
            int c = myReader.records.Count;
            if (c == 1)
                PexAssert.ReachEventually("Ye : 1");
            else if (c == 2)
                PexAssert.ReachEventually("Ye : 2");
            //myReader.Rea
            //myCommand = new MockSqlCommand("SELECT salary FROM salaryTable WHERE x = 100 AND lastname = 'bob_y'", myConnection);
            /*
             * int c = myReader.records.Count;
            if (c == 1)
                throw new PexGoalException("Ye : 1");
            else if( c == 3  )
                throw new PexGoalException("Yes: ");
            */

           // SqlCommand command = new SqlCommand();
           
            //SqlCommand command;
            //command.ExecuteScalar()
            //tailor.
        }
        

        /*
        [PexMethod]
        public static void Main(String name)
        {

            MockSqlConnection myConnection = new MockSqlConnection("user id=username;" +
                       "password=password;server=serverurl;" +
                       "Trusted_Connection=yes;" +
                       "database=database; " +
                       "connection timeout=30");

            try
            {
                myConnection.Open();
            }

            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
            }

            MockSqlCommand myCommand = new MockSqlCommand("INSERT INTO persons (serial, lastname, x) VALUES (1005, \"smith\", 10)", myConnection);

            MockSqlCommand myCommand = new MockSqlCommand("SELECT serial, firstname FROM persons WHERE lastname = \"smith\"", myConnection);
            MockSqlDataReader myReader = myCommand.ExecuteReader();
            
            
            while (myReader.Read())
            {
                String serial = myReader[0].ToString();
                myCommand = new MockSqlCommand("SELECT salary FROM SalaryTable WHERE serial = \"" + serial + "\" AND salary > 100 ", myConnection);
                MockSqlDataReader myReader2 = myCommand.ExecuteReader();
                if (myReader2.HasRows())
                {
                    if(myReader2.records.Count == 2)
                        throw new PexGoalException();
                }
            }
        }*/
    

    }
    [PexClass, TestClass]
    public partial class PexTestClass
    {
        [PexMethod(MaxBranches = 20000)]
        public void ExecuteQuery()
        {
            MockSqlConnection myConnection = new MockSqlConnection("");
            myConnection.Open();
            MockSqlCommand myCommand = new MockSqlCommand("DELETE FROM persons WHERE firstname = ’John’ AND lastname = ’Smith’ AND age>25", myConnection);
            myCommand.ExecuteScalar();
            myCommand = new MockSqlCommand("SELECT firstname, lastname FROM persons WHERE age > 25", myConnection);
            MockSqlDataReader myReader = myCommand.ExecuteReader();
            while (myReader.Read())
            {
                if (myReader[0].Equals("John") && myReader[1].Equals("Smith"))
                {
                    PexAssert.ReachEventually("1");
                }
                else if (myReader[0].Equals("Tom") && myReader[1].Equals("Smith")) 
                {
                    PexAssert.ReachEventually("2");
                }
            }
        }

        [PexMethod]
        public string getRole(int mid, string role)
        {
            
            MockSqlConnection myConnection = new MockSqlConnection("");
            myConnection.Open();
            // MockSqlCommand myCommand = new MockSqlCommand("DELETE FROM persons WHERE firstname = ’John’ AND lastname = ’Smith’ AND age>25", myConnection);
            //myCommand.ExecuteScalar();
            MockSqlCommand myCommand = new MockSqlCommand("SELECT Role FROM Users WHERE MID = 5 AND Role = 'mrole'", myConnection);
            MockSqlDataReader myReader = myCommand.ExecuteReader();
            string symbolicValue = PexSymbolicValue.GetPathConditionString();
            File.WriteAllText(@"C:\MODA.txt", "" + PexSymbolicValue.IsSymbolic<MockSqlCommand>(myCommand));
            while (myReader.Read())
            {
                if (myReader[0].Equals("MYROLE"))
                {
                    PexAssert.ReachEventually("1");
                }
            }
            return symbolicValue;
        }


        [PexMethod(MaxBranches = 1000000000, MaxConditions = 1000000000, Timeout = 480, MaxRunsWithoutNewTests = 400, MaxConstraintSolverTime = 6), TestMethod]
        //[PexExpectedException()]
        public void TestMain()
        {
            DBApplication.Main();
        }
        [PexMethod(MaxBranches = 1000000000, MaxConditions = 1000000000, Timeout = 480, MaxRunsWithoutNewTests = 400, MaxConstraintSolverTime = 6), TestMethod]
        public void testMe()
        {
            DBApplication.TestMe();
        }


        [PexMethod(MaxBranches = 40000)]
        public string testExample(int k, string[] n)
        {
            
            PexAssume.IsTrue(k>=0 && k<=6);
            PexAssume.IsTrue(n != null && n.Length == k);
            for (int i = 0; i < n.Length; i++)
            {
                PexAssume.IsTrue(n[i] != null && n[i].Length>0);            
            }
        
           /* string[] n = new string[k]; 
            
            for (int i = 0; i < k; i++)
            {
                n[i] = "John";
            }*/
            DBApplication.ExampleProgram(k, n);
            return PexSymbolicValue.GetPathConditionString();
        }

        [PexMethod]
        [PexAssertReachEventually("1", "2", StopWhenAllReached = true)]
        public void TestpexChoose()
        {
            //var chooser = PexChoose.FromCall(this);
            string value = PexChoose.Value<string>("letsC");
            string value2 = PexChoose.Value<string>("letsC2");
            PexAssume.IsNotNullOrEmpty(value);
            PexAssume.IsNotNullOrEmpty(value2);
            if (value.Equals("abcde"))
                PexAssert.ReachEventually("1");
            
            if (value2.Equals("uvwxyz"))
                PexAssert.ReachEventually("2");
        }

        [PexMethod(MaxBranches = 40000)]
        public void TestOdysseyCreateFavorite(int passwordId, int folderId)
        {
            PexAssume.IsTrue(passwordId > 0 && folderId > 0 && passwordId < 10 && folderId < 10);
            MockSqlConnection myConnection = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");
            myConnection.Open();

            string sql = "insert into Favorite (PasswordId,FolderId) VALUES ({0}, {1})";
            string query = String.Format(sql, DBMS.processData(passwordId, "00000001", sql, false), DBMS.processData(folderId, "00000010", sql, false));
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);
            myCommand.ExecuteScalar();

            query = "SELECT * FROM Favorite WHERE 1 = 1";
            myCommand = new MockSqlCommand(query, myConnection);
            MockSqlDataReader myReader = myCommand.ExecuteReader();
            while (myReader.Read())
            {
                Console.WriteLine("PasswordId: " + myReader[0]);
                Console.WriteLine("tag: " + myReader[1]);
                Console.WriteLine("FolderId: " + myReader[2]);
                Console.WriteLine("tag: " + myReader[3]);
            }
        }

        [PexMethod(MaxBranches = 40000, MaxRunsWithoutNewTests = 200)]
        [PexAssertReachEventually("1", "2", "3")]
        public void TestOdysseyGetExistingFaves(int passwordId)
        {
            PexAssume.IsTrue(passwordId > 0 && passwordId < 10);
            MockSqlConnection myConnection = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");
            myConnection.Open();

            string query = "select * from Favorite where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);
            MockSqlDataReader myReader = myCommand.ExecuteReader();
            while (myReader.Read())
            {
                if (myReader[0].Equals(passwordId) && Convert.ToInt32(myReader[2]) > 0)
                {
                    PexAssert.ReachEventually("1");
                }
            }

            string sql = "select FolderId from Favorite where PasswordId={0}";
            query = String.Format(sql, DBMS.processData(passwordId, "00000001", sql, true));
            myCommand = new MockSqlCommand(query, myConnection);
            myReader = myCommand.ExecuteReader();
            int c = myReader.records.Count;
            if (c == 1)
                PexAssert.ReachEventually("2");
            else if (c == 2)
                PexAssert.ReachEventually("3");
            while (myReader.Read())
            {
                Console.WriteLine("FolderId: " + myReader[0]);
                Console.WriteLine("tag: " + myReader[1]);
            }
        }

        [PexMethod(MaxBranches = 40000)]
        public void TestOdysseyUpdateField(string name, string value, int order, int id)
        {
            PexAssume.IsTrue(name == "lw" && value == "123");
            PexAssume.IsTrue(order > 0 && order < 10 && id > 0 && id < 10);
            MockSqlConnection myConnection = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");
            myConnection.Open();

            string query = "select * from StringField where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);
            MockSqlDataReader myReader = myCommand.ExecuteReader();
            while (myReader.Read())
            {
                if (myReader[10].Equals(id) && Convert.ToInt32(myReader[8]) > 0)
                {
                    PexAssert.ReachEventually();
                    Console.WriteLine("order!!： " + myReader[8]);
                }
            }

            string sql = "update StringField set Name={0}, Value={1}, Orde={2} where Id={3}";
            query = String.Format(sql, DBMS.processData(name, "00000001", sql, true), DBMS.processData(value, "00000010", sql, true), DBMS.processData(order, "00000100", sql, true), DBMS.processData(id, "00001000", sql, true));
            myCommand = new MockSqlCommand(query, myConnection);
            myCommand.ExecuteScalar();

            sql = "select * from StringField where 1=1";
            myCommand = new MockSqlCommand(sql, myConnection);
            myReader = myCommand.ExecuteReader();
            while (myReader.Read())
            {
                Console.WriteLine("Name: " + myReader[0]);
                Console.WriteLine("tag: " + myReader[1]);
                Console.WriteLine("Value: " + myReader[2]);
                Console.WriteLine("tag: " + myReader[3]);
                Console.WriteLine("Order: " + myReader[8]);
                Console.WriteLine("tag: " + myReader[9]);
            }
        }

        [PexMethod(MaxBranches = 40000)]
        public void TestOdysseyGetFolderByPasswordId(int passwordId)
        {
            PexAssume.IsTrue(passwordId > 0 && passwordId < 10);
            MockSqlConnection myConnection = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");
            myConnection.Open();

            string query = "select Favorite.PasswordId, Favorite.FolderId, Folder.Id, Folder.Orde, Folder.ParentId, Folder.Name from Favorite, Folder where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);
            MockSqlDataReader myReader = myCommand.ExecuteReader();
            while (myReader.Read())
            {
                if (myReader[4].Equals(myReader[2]) && myReader[0].Equals(passwordId) && myReader[10].Equals("lw"))
                {
                    PexAssert.ReachEventually();
                }
            }

            string sql = "select Folder.Orde, Folder.ParentId, Folder.Name, Folder.Id, Favorite.PasswordId, Favorite.FolderId from Folder, Favorite where Folder.Id=Favorite.FolderId and Favorite.PasswordId={0}";
            query = String.Format(sql, DBMS.processData(passwordId, "00000001", sql, true));
            myCommand = new MockSqlCommand(query, myConnection);
            myReader = myCommand.ExecuteReader();
            while (myReader.Read())
            {
                Console.WriteLine("order: " + myReader[0]);
                Console.WriteLine("tag: " + myReader[1]);
                Console.WriteLine("parentid: " + myReader[2]);
                Console.WriteLine("tag: " + myReader[3]);
                Console.WriteLine("name: " + myReader[4]);
                Console.WriteLine("tag: " + myReader[5]);
                Console.WriteLine("id: " + myReader[6]);
                Console.WriteLine("tag: " + myReader[7]);
                Console.WriteLine("pasid: " + myReader[8]);
                Console.WriteLine("tag: " + myReader[9]);
                Console.WriteLine("foid: " + myReader[10]);
                Console.WriteLine("tag: " + myReader[11]);
            }
        }

        [PexMethod(MaxBranches = 80000)]
        public void TestMarketMSIsRightPassword(int LoginId, string LoginPassword)
        {
            PexAssume.IsTrue(LoginId == 4 && LoginPassword == "lw");
            MockSqlConnection myConnection = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");
            myConnection.Open();

            MockSqlCommand myCommand = new MockSqlCommand("insert into SysAdmins(LoginId,LoginPassword,AdminName,AdminStatus,RoleId) values(4,\"lw\",\"d\",2,3)", myConnection);
            myCommand.ExecuteScalar();

            string sql = "select count(*) from SysAdmins where LoginId={0} and LoginPassword={1}";
            string query = String.Format(sql, DBMS.processData(LoginId, "00000001", sql, true), DBMS.processData(LoginPassword, "00000010", sql, true));
            myCommand = new MockSqlCommand(query, myConnection);
            Console.WriteLine(myCommand.ExecuteScalar().ToString());
        }


        [PexMethod(MaxBranches = 80000)]
        public void TestMarketMSShowAllCheckInLogByID(string ID)
        {
            PexAssume.IsTrue(ID == "lw");
            MockSqlConnection myConnection = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");
            myConnection.Open();

            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);
            MockSqlDataReader myReader = myCommand.ExecuteReader();
            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))
                {
                    PexAssert.ReachEventually();
                }
            }

            string sql = "SELECT check_in.ROOM_NAME,roomer_management.NAME,check_in.ID_CARD,check_in.STATE,check_in.IN_TIME,check_in.OUT_TIME FROM roomer_management,check_in where check_in.ID_CARD = roomer_management.ID_CARD and roomer_management.ID_CARD = {0}";
            query = String.Format(sql, DBMS.processData(ID, "00000001", sql, true));
            myCommand = new MockSqlCommand(query, myConnection);
            myReader = myCommand.ExecuteReader();
            while (myReader.Read())
            {
                Console.WriteLine("ROOM_NAME: " + myReader[0]);
                Console.WriteLine("tag: " + myReader[1]);
                Console.WriteLine("Name: " + myReader[2]);
                Console.WriteLine("tag: " + myReader[3]);
                Console.WriteLine("ID_CARD: " + myReader[4]);
                Console.WriteLine("tag: " + myReader[5]);
                Console.WriteLine("STATE: " + myReader[6]);
                Console.WriteLine("tag: " + myReader[7]);
                Console.WriteLine("IN_TIME: " + myReader[8]);
                Console.WriteLine("tag: " + myReader[9]);
                Console.WriteLine("OUT_TIME: " + myReader[10]);
                Console.WriteLine("tag: " + myReader[11]);
            }
        }

        [PexMethod(MaxBranches = 80000, MaxRunsWithoutNewTests = 200)]
        [PexAssertReachEventually("1", "2", "3", "4", "5")]
        public int filterMaritalStatus(String status)
        { 
            int count = 0;
            if (status.Length == 0) { status = null; PexAssert.ReachEventually("1"); }
            if (status.Equals("null")) { status = null; PexAssert.ReachEventually("2"); }
            MockSqlConnection conn = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");
            conn.Open();
            string query = "SELECT * from userrecord where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, conn);
            MockSqlDataReader myReader = myCommand.ExecuteReader();
            while (myReader.Read())
            {
                if (myReader[4].Equals(null) == false && myReader[10].Equals(status))
                {
                    PexAssert.ReachEventually("3");
                }
            }

            string sql = "SELECT * from userrecord where MARITAL = {0}";
		    try
		    {

                string cmd_statusSearch = String.Format(sql, DBMS.processData(status, "00000001", sql, true));
                myCommand = new MockSqlCommand(cmd_statusSearch, conn);
                MockSqlDataReader result = myCommand.ExecuteReader();
                Console.WriteLine(result.records.Count);
                count = result.records.Count;
                if (count == 0)
                    PexAssert.ReachEventually("4");
                else if (count == 1)
                    PexAssert.ReachEventually("5");
		    }
		    catch(Exception e)
		    {
			    
		    }
		    return count;
        }

        [PexMethod(MaxBranches = 80000, MaxRunsWithoutNewTests = 200)]
        [PexAssertReachEventually("1")]
        public int filterMaritalStatus2()
        ]]></source>
</chunk>
<method name="filterMaritalStatus2" namespace="MyApplication" type="MyApplication.PexTestClass" typeName="PexTestClass" token="6000011" module="TestDBApp.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="2"/>
<hit index="8" value="1"/>
<hit index="10" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="16" value="2"/>
<hit index="17" value="2"/>
<hit index="18" value="4"/>
<hit index="19" value="2"/>
<hit index="20" value="2"/>
<hit index="21" value="2"/>
<hit index="22" value="4"/>
<hit index="23" value="2"/>
<hit index="24" value="2"/>
<hit index="25" value="2"/>
<hit index="26" value="3"/>
<hit index="27" value="3"/>
<hit index="28" value="3"/>
<hit index="29" value="6"/>
<hit index="30" value="1"/>
<hit index="31" value="1"/>
<hit index="32" value="1"/>
<hit index="33" value="1"/>
<hit index="34" value="1"/>
<hit index="35" value="1"/>
<hit index="37" value="1"/>
<hit index="38" value="1"/>
<hit index="39" value="1"/>
<hit index="40" value="1"/>
<hit index="41" value="2"/>
<hit index="42" value="1"/>
<hit index="43" value="1"/>
<hit index="44" value="1"/>
<hit index="45" value="1"/>
<hit index="46" value="2"/>
<hit index="47" value="1"/>
<hit index="48" value="1"/>
<hit index="49" value="1"/>
<hit index="50" value="1"/>
<hit index="51" value="1"/>
<hit index="52" value="1"/>
<hit index="53" value="2"/>
<hit index="54" value="2"/>
<hit index="55" value="2"/>
<hit index="56" value="2"/>
<hit index="57" value="4"/>
<hit index="58" value="2"/>
<hit index="59" value="2"/>
<hit index="60" value="2"/>
<hit index="61" value="2"/>
<hit index="62" value="2"/>
<hit index="63" value="2"/>
<hit index="64" value="2"/>
<hit index="65" value="4"/>
<hit index="66" value="2"/>
<hit index="67" value="2"/>
<hit index="68" value="2"/>
<hit index="69" value="2"/>
<hit index="70" value="2"/>
<hit index="71" value="2"/>
<hit index="72" value="2"/>
<hit index="73" value="4"/>
<hit index="74" value="2"/>
<hit index="75" value="2"/>
<hit index="76" value="2"/>
<hit index="77" value="2"/>
<hit index="78" value="2"/>
<hit index="79" value="2"/>
<hit index="80" value="2"/>
<hit index="81" value="4"/>
<hit index="82" value="2"/>
<hit index="83" value="2"/>
<hit index="84" value="2"/>
<hit index="85" value="2"/>
<hit index="86" value="3"/>
<hit index="87" value="3"/>
<hit index="88" value="3"/>
<hit index="89" value="6"/>
<hit index="90" value="1"/>
<hit index="91" value="2"/>
<hit index="96" value="2"/>
<hit index="97" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="35" total="36" coveredRatio="0.97222222222222221"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="userortestcode"><source><![CDATA[string status = "evil";]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0007" domain="userortestcode"><source><![CDATA[int count = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0009" domain="userortestcode"><source><![CDATA[MockSqlConnection conn = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0014" domain="userortestcode"><source><![CDATA[conn.Open();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="001b" domain="userortestcode"><source><![CDATA[string query = "SELECT * from userrecord where 1=1";]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="0021" domain="userortestcode"><source><![CDATA[MockSqlCommand myCommand = new MockSqlCommand(query, conn);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="002a" domain="userortestcode"><source><![CDATA[MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="7" offset="005c" domain="userortestcode"><source><![CDATA[while (myReader.Read())]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0035" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0036" domain="userortestcode"><source><![CDATA[if (myReader[10].Equals(status))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="004e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="004f" domain="userortestcode"><source><![CDATA[PexAssert.ReachEventually("1");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="005a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="005b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="1" offset="0069" domain="userortestcode"><source><![CDATA[string sql = "SELECT * from userrecord where MARITAL = {0}";]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            try
            ]]></source>
</chunk>
<chunk hits="1" offset="0070" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                ]]></source>
</chunk>
<chunk hits="1" offset="0071" domain="userortestcode"><source><![CDATA[string cmd_statusSearch = String.Format(sql, DBMS.processData(status, "00000001", sql, true));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0088" domain="userortestcode"><source><![CDATA[MockSqlCommand myCommand2 = new MockSqlCommand(cmd_statusSearch, conn);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0092" domain="userortestcode"><source><![CDATA[MockSqlDataReader result = myCommand2.ExecuteReader();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="3" offset="009b" domain="userortestcode"><source><![CDATA[Console.WriteLine(result.records.Count);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="00ad" domain="userortestcode"><source><![CDATA[count = result.records.Count;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
  
                ]]></source>
</chunk>
<chunk hits="5" offset="0120" domain="userortestcode"><source><![CDATA[while (result.Read())]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="00bc" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="00bd" domain="userortestcode"><source><![CDATA[Console.WriteLine("NAME :" + result[0]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="00d5" domain="userortestcode"><source><![CDATA[Console.WriteLine("NAME_tag:" + result[1]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="00ed" domain="userortestcode"><source><![CDATA[Console.WriteLine("MA :" + result[10]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="0106" domain="userortestcode"><source><![CDATA[Console.WriteLine("MA_tag:" + result[11]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="011f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="012d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0130" domain="userortestcode"><source><![CDATA[catch (Exception e)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0132" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="0" offset="0133" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0137" domain="userortestcode"><source><![CDATA[return count;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="013c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    }
 
}
]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" renderPrefix="s6"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Collections.Generic;
using System.Text;
using MacroScope;
using System.Data;
using Microsoft.Pex.Framework;

namespace MockDBMS.SqlServer
{
    public class MockSqlCommand
    {
        //SqlDataReader
        public MockSqlConnection connection;
        private string commandText;

        public string CommandText
        {
            get { return commandText; }
            set { commandText = value; }
        }
        QueryParts parsedQuery;

        ]]></source>
</chunk>
<method name=".ctor" namespace="MockDBMS.SqlServer" type="MockDBMS.SqlServer.MockSqlCommand" typeName="MockSqlCommand" token="600006c" module="MockDBMS.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="usercodeundertest"><source><![CDATA[public MockSqlCommand(string q, MockSqlConnection myConnection)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0008" domain="usercodeundertest"><source><![CDATA[this.commandText = q;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="000f" domain="usercodeundertest"><source><![CDATA[this.connection = myConnection;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0016" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public MockSqlDataReader ExecuteReader()
        ]]></source>
</chunk>
<method name="ExecuteReader" namespace="MockDBMS.SqlServer" type="MockDBMS.SqlServer.MockSqlCommand" typeName="MockSqlCommand" token="600006d" module="MockDBMS.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="4"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="16" value="2"/>
<hit index="17" value="2"/>
<hit index="18" value="2"/>
<hit index="19" value="4"/>
<hit index="20" value="2"/>
<hit index="21" value="2"/>
<hit index="22" value="2"/>
<hit index="23" value="4"/>
<hit index="24" value="2"/>
<hit index="25" value="2"/>
<hit index="26" value="2"/>
<hit index="27" value="2"/>
<hit index="28" value="2"/>
<hit index="29" value="4"/>
<hit index="30" value="2"/>
<hit index="31" value="2"/>
<hit index="32" value="2"/>
<hit index="33" value="2"/>
<hit index="34" value="4"/>
<hit index="35" value="2"/>
<hit index="36" value="2"/>
<hit index="37" value="2"/>
<hit index="38" value="4"/>
<hit index="39" value="2"/>
<hit index="40" value="2"/>
<hit index="41" value="2"/>
<hit index="42" value="4"/>
<hit index="43" value="2"/>
<hit index="44" value="2"/>
<hit index="45" value="2"/>
<hit index="47" value="2"/>
<hit index="48" value="2"/>
<hit index="49" value="2"/>
<hit index="50" value="2"/>
<hit index="51" value="4"/>
<hit index="52" value="2"/>
<hit index="53" value="2"/>
<hit index="68" value="2"/>
<hit index="69" value="2"/>
<hit index="70" value="2"/>
<hit index="741" value="2"/>
<hit index="743" value="2"/>
<hit index="746" value="2"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="18" total="220" coveredRatio="0.081818181818181818"/>
</method>
<chunk hits="2" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="usercodeundertest"><source><![CDATA[parsedQuery = parseQuery(commandText);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            //tempQueryParser(query);
            ]]></source>
</chunk>
<chunk hits="4" offset="0012" domain="usercodeundertest"><source><![CDATA[List<object[]> records = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0014" domain="usercodeundertest"><source><![CDATA[List<object[]> selectedRecords = new List<object[]>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="001a" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.Type == QueryStatementType.SELECT)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0034" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0035" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.TableNames.Count == 1)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0054" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="0055" domain="usercodeundertest"><source><![CDATA[MockDBMS.Table table = connection.Dbms.GetTableByName(parsedQuery.TableNames[0]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="6" offset="0077" domain="usercodeundertest"><source><![CDATA[records = table.getRecordsWith(parsedQuery.whereCondition, new List<object[]>());]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="6" offset="008e" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.joinCondition != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="00a2" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="00a3" domain="usercodeundertest"><source><![CDATA[List<object[]> joinRecords = table.getRecordsWith(parsedQuery.joinCondition, new List<object[]>());]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="00ba" domain="usercodeundertest"><source><![CDATA[records = table.PerformOperationOnRecords(records, joinRecords, "AND");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="00c8" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                    ]]></source>
</chunk>
<chunk hits="2" offset="00c9" domain="usercodeundertest"><source><![CDATA[selectedRecords = SelectColumnsFrom(records, parsedQuery, table);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="00d8" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else
                ]]></source>
</chunk>
<chunk hits="0" offset="00de" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="00df" domain="usercodeundertest"><source><![CDATA[Dictionary<string, Table> tables = new Dictionary<string, Table>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="00e6" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="0" offset="00fb" domain="usercodeundertest"><source><![CDATA[string tableName]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0124" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00e7" domain="usercodeundertest"><source><![CDATA[parsedQuery.TableNames]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                    ]]></source>
</chunk>
<chunk hits="0" offset="0104" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0105" domain="usercodeundertest"><source><![CDATA[MockDBMS.Table table = connection.Dbms.GetTableByName(tableName);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0118" domain="usercodeundertest"><source><![CDATA[tables.Add(tableName, table);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0123" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0143" domain="usercodeundertest"><source><![CDATA[Dictionary<string, List<object[]>> recordsFromDifferentTables = new Dictionary<string, List<object[]>>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="014a" domain="usercodeundertest"><source><![CDATA[recordsFromDifferentTables = getRecordsFrommDifferentTablesWith(parsedQuery.whereCondition, tables);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="015f" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.joinCondition != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0173" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0174" domain="usercodeundertest"><source><![CDATA[Dictionary<string, List<object[]>> joinRecords = getRecordsFrommDifferentTablesWith(parsedQuery.joinCondition, tables);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0189" domain="usercodeundertest"><source><![CDATA[recordsFromDifferentTables = PerformOperationOnRecords(recordsFromDifferentTables, joinRecords, "AND");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[//table.PerformOperationOnRecords(records, joinRecords, "AND");
                    ]]></source>
</chunk>
<chunk hits="0" offset="019a" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="0" offset="019b" domain="usercodeundertest"><source><![CDATA[selectedRecords = SelectColumnsFromMultipleTables(recordsFromDifferentTables, parsedQuery, tables);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="01ac" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.Distinct)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="01c0" domain="usercodeundertest"><source><![CDATA[selectedRecords = SelectDistinct(selectedRecords);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="01c8" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                //records = table.getRecordsWith(parsedQuery.whereConditionLHS, parsedQuery.whereConditionop, parsedQuery.whereConditionop);
            ]]></source>
</chunk>
<chunk hits="2" offset="01c9" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="0" offset="01cf" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.Type == QueryStatementType.DELETE)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="01e9" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="01ea" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.TableNames.Count == 1)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0209" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="020a" domain="usercodeundertest"><source><![CDATA[MockDBMS.Table table = connection.Dbms.GetTableByName(parsedQuery.TableNames[0]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="022c" domain="usercodeundertest"><source><![CDATA[records = table.getRecordsWith(parsedQuery.whereCondition, new List<object[]>());]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0243" domain="usercodeundertest"><source><![CDATA[if (records.Count != 0)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0255" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0256" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="0" offset="0261" domain="usercodeundertest"><source><![CDATA[object[] record]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="02b7" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0257" domain="usercodeundertest"><source><![CDATA[records]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                        ]]></source>
</chunk>
<chunk hits="0" offset="026a" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            for (]]></source>
</chunk>
<chunk hits="0" offset="026b" domain="usercodeundertest"><source><![CDATA[int j = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="02a6" domain="usercodeundertest"><source><![CDATA[j < table.numColumns]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="02a0" domain="usercodeundertest"><source><![CDATA[j += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                            ]]></source>
</chunk>
<chunk hits="0" offset="0270" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0271" domain="usercodeundertest"><source><![CDATA[string tags = record[j].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="027d" domain="usercodeundertest"><source><![CDATA[string[] tags_arr = tags.Split('$');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0296" domain="usercodeundertest"><source><![CDATA[record[j] = tags_arr[0];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="029f" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="02b6" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="02d6" domain="usercodeundertest"><source><![CDATA[table.DeleteRecords(records);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="02de" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                ]]></source>
</chunk>
<chunk hits="0" offset="02df" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else
                ]]></source>
</chunk>
<chunk hits="0" offset="02e2" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="02e3" domain="usercodeundertest"><source><![CDATA[throw new NotImplementedException("Not Implemented for deletion from multiple tables");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                }
            ]]></source>
</chunk>
<chunk hits="0" offset="02ee" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            else ]]></source>
</chunk>
<chunk hits="0" offset="02f4" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.Type == QueryStatementType.INSERT)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="030e" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="030f" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.TableNames.Count == 1)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="032e" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="032f" domain="usercodeundertest"><source><![CDATA[MockDBMS.Table table = connection.Dbms.GetTableByName(parsedQuery.TableNames[0]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0351" domain="usercodeundertest"><source><![CDATA[object[] record = new object[table.numColumns];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="035e" domain="usercodeundertest"><source><![CDATA[IEnumerator<string> keys = parsedQuery.ColumnNameValueMap.Keys.GetEnumerator();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="051a" domain="usercodeundertest"><source><![CDATA[while (keys.MoveNext())]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="037f" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0380" domain="usercodeundertest"><source><![CDATA[string value_with_tag = parsedQuery.ColumnNameValueMap[keys.Current].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="039e" domain="usercodeundertest"><source><![CDATA[string tag = "00000000";]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="03a5" domain="usercodeundertest"><source><![CDATA[string value = value_with_tag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="03a9" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.ColumnNameValueMap[keys.Current] is System.Decimal)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="03d4" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="03d5" domain="usercodeundertest"><source><![CDATA[if (value_with_tag.Length > 8)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="03e8" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="03e9" domain="usercodeundertest"><source><![CDATA[string pwd = value_with_tag.Substring(value_with_tag.Length - 8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                
                                ]]></source>
</chunk>
<chunk hits="0" offset="03fb" domain="usercodeundertest"><source><![CDATA[if (DBMS.taintTags.ContainsKey(pwd))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0410" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0411" domain="usercodeundertest"><source><![CDATA[tag = DBMS.taintTags[pwd];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="041f" domain="usercodeundertest"><source><![CDATA[value = value_with_tag.Substring(0, value_with_tag.Length - 8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0432" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0433" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0434" domain="usercodeundertest"><source><![CDATA[record[table.ColumnIndices[keys.Current]] = Convert.ToDecimal(value);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0455" domain="usercodeundertest"><source><![CDATA[record[table.ColumnIndices[keys.Current + "_TAINT"]] = tag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0476" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else
                        ]]></source>
</chunk>
<chunk hits="0" offset="047c" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="047d" domain="usercodeundertest"><source><![CDATA[if (value_with_tag.Length > 10)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0491" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0492" domain="usercodeundertest"><source><![CDATA[string pwd = value_with_tag.Substring(value_with_tag.Length - 9, 8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="04a6" domain="usercodeundertest"><source><![CDATA[if (DBMS.taintTags.ContainsKey(pwd))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="04bb" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="04bc" domain="usercodeundertest"><source><![CDATA[tag = DBMS.taintTags[pwd];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="04ca" domain="usercodeundertest"><source><![CDATA[value = value_with_tag.Substring(1, value_with_tag.Length - 10);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="04de" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="04df" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="04e0" domain="usercodeundertest"><source><![CDATA[record[table.ColumnIndices[keys.Current]] = value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="04f7" domain="usercodeundertest"><source><![CDATA[record[table.ColumnIndices[keys.Current + "_TAINT"]] = tag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0518" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0519" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="052a" domain="usercodeundertest"><source><![CDATA[table.InsertRecord(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0533" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else
                ]]></source>
</chunk>
<chunk hits="0" offset="0536" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0537" domain="usercodeundertest"><source><![CDATA[throw new NotImplementedException("Not Implemented for deletion from multiple tables");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                }
            ]]></source>
</chunk>
<chunk hits="0" offset="0542" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="0" offset="0548" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.Type == QueryStatementType.UPDATE)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0562" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0563" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.TableNames.Count == 1)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0582" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0583" domain="usercodeundertest"><source><![CDATA[MockDBMS.Table table = connection.Dbms.GetTableByName(parsedQuery.TableNames[0]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="05a5" domain="usercodeundertest"><source><![CDATA[records = table.getRecordsWith(parsedQuery.whereCondition, new List<object[]>());]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="05bc" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="0" offset="05ca" domain="usercodeundertest"><source><![CDATA[object[] record]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="08ca" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="05bd" domain="usercodeundertest"><source><![CDATA[records]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                    ]]></source>
</chunk>
<chunk hits="0" offset="05d3" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="05d4" domain="usercodeundertest"><source><![CDATA[List<int> indices = new List<int>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="05db" domain="usercodeundertest"><source><![CDATA[IEnumerator<string> keys = parsedQuery.ColumnNameValueMap.Keys.GetEnumerator();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="07de" domain="usercodeundertest"><source><![CDATA[while (keys.MoveNext())]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="05fc" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="05fd" domain="usercodeundertest"><source><![CDATA[indices.Add(table.ColumnIndices[keys.Current]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0617" domain="usercodeundertest"><source><![CDATA[string value_with_tag = parsedQuery.ColumnNameValueMap[keys.Current].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0635" domain="usercodeundertest"><source><![CDATA[string tag = "00000000";]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="063c" domain="usercodeundertest"><source><![CDATA[string value = value_with_tag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0640" domain="usercodeundertest"><source><![CDATA[if (value_with_tag.Length > 8)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0653" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0654" domain="usercodeundertest"><source><![CDATA[string pwd = value_with_tag.Substring(value_with_tag.Length - 8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0666" domain="usercodeundertest"><source><![CDATA[if (DBMS.taintTags.ContainsKey(pwd))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="067b" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="067c" domain="usercodeundertest"><source><![CDATA[tag = DBMS.taintTags[pwd];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="068a" domain="usercodeundertest"><source><![CDATA[value = value_with_tag.Substring(0, value_with_tag.Length - 8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="069d" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="069e" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="069f" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.ColumnNameValueMap[keys.Current] is System.Decimal)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="06c7" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="06c8" domain="usercodeundertest"><source><![CDATA[record[table.ColumnIndices[keys.Current]] = Convert.ToDecimal(value);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                            ]]></source>
</chunk>
<chunk hits="0" offset="06e9" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else
                            ]]></source>
</chunk>
<chunk hits="0" offset="06ec" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="06ed" domain="usercodeundertest"><source><![CDATA[record[table.ColumnIndices[keys.Current]] = value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0704" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0705" domain="usercodeundertest"><source><![CDATA[string tags = record[table.ColumnIndices[keys.Current + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="072b" domain="usercodeundertest"><source><![CDATA[string[] tags_arr = tags.Split('$');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0744" domain="usercodeundertest"><source><![CDATA[int len = tags_arr.Length,]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="074a" domain="usercodeundertest"><source><![CDATA[new_tag = Convert.ToInt32(tag, 16);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            for (]]></source>
</chunk>
<chunk hits="0" offset="0755" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0773" domain="usercodeundertest"><source><![CDATA[i < len]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="076d" domain="usercodeundertest"><source><![CDATA[i++]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                            ]]></source>
</chunk>
<chunk hits="0" offset="075a" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="075b" domain="usercodeundertest"><source><![CDATA[new_tag = new_tag | Convert.ToInt32(tags_arr[i], 16);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="076c" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="077f" domain="usercodeundertest"><source><![CDATA[string new_tag_16 = Convert.ToString(new_tag, 16);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="078a" domain="usercodeundertest"><source><![CDATA[len = 8 - new_tag_16.Length;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            for (]]></source>
</chunk>
<chunk hits="0" offset="0795" domain="usercodeundertest"><source><![CDATA[int i = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="07b0" domain="usercodeundertest"><source><![CDATA[i < len]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="07aa" domain="usercodeundertest"><source><![CDATA[i++]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                            ]]></source>
</chunk>
<chunk hits="0" offset="079a" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="079b" domain="usercodeundertest"><source><![CDATA[new_tag_16 = "0" + new_tag_16;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="07a9" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="07bc" domain="usercodeundertest"><source><![CDATA[record[table.ColumnIndices[keys.Current + "_TAINT"]] = new_tag_16;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="07dd" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        for (]]></source>
</chunk>
<chunk hits="0" offset="07ee" domain="usercodeundertest"><source><![CDATA[int j = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="08ae" domain="usercodeundertest"><source><![CDATA[j < table.numColumns]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="08a8" domain="usercodeundertest"><source><![CDATA[j += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                        ]]></source>
</chunk>
<chunk hits="0" offset="07f6" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="07f7" domain="usercodeundertest"><source><![CDATA[if (!indices.Contains(j))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0809" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="080a" domain="usercodeundertest"><source><![CDATA[string tags = record[j].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0816" domain="usercodeundertest"><source><![CDATA[string[] tags_arr = tags.Split('$');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="082f" domain="usercodeundertest"><source><![CDATA[int len = tags_arr.Length,]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0835" domain="usercodeundertest"><source><![CDATA[new_tag = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                for (]]></source>
</chunk>
<chunk hits="0" offset="0838" domain="usercodeundertest"><source><![CDATA[int i = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0856" domain="usercodeundertest"><source><![CDATA[i < len]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="0850" domain="usercodeundertest"><source><![CDATA[i++]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                ]]></source>
</chunk>
<chunk hits="0" offset="083d" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="083e" domain="usercodeundertest"><source><![CDATA[new_tag = new_tag | Convert.ToInt32(tags_arr[i], 16);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="084f" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0862" domain="usercodeundertest"><source><![CDATA[string new_tag_16 = Convert.ToString(new_tag, 16);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="086d" domain="usercodeundertest"><source><![CDATA[len = 8 - new_tag_16.Length;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                for (]]></source>
</chunk>
<chunk hits="0" offset="0878" domain="usercodeundertest"><source><![CDATA[int i = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0893" domain="usercodeundertest"><source><![CDATA[i < len]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="088d" domain="usercodeundertest"><source><![CDATA[i++]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                ]]></source>
</chunk>
<chunk hits="0" offset="087d" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="087e" domain="usercodeundertest"><source><![CDATA[new_tag_16 = "0" + new_tag_16;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="088c" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                //Console.WriteLine("newtag2: " + new_tag_16);
                                ]]></source>
</chunk>
<chunk hits="0" offset="089f" domain="usercodeundertest"><source><![CDATA[record[j] = new_tag_16;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="08a6" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="08a7" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="08c1" domain="usercodeundertest"><source><![CDATA[indices.Clear();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="08c9" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="08ec" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else
                ]]></source>
</chunk>
<chunk hits="0" offset="08ef" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="08f0" domain="usercodeundertest"><source><![CDATA[throw new NotImplementedException("Not Implemented for deletion from multiple tables");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                }
            ]]></source>
</chunk>
<chunk hits="0" offset="08fb" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[


            ]]></source>
</chunk>
<chunk hits="2" offset="08fc" domain="usercodeundertest"><source><![CDATA[return new MockSqlDataReader(selectedRecords);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0906" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        private List<object[]> SelectDistinct(List<object[]> selectedRecords)
        {
            List<object[]> distinctRecords = new List<object[]>();

            foreach (object[] o in selectedRecords)
            {
                bool isDistinct = true;
                foreach (object[] d in distinctRecords)
                {
                    for (int i = 0; i < o.Length; i++)
                    {
                        if (o[i].Equals(d[i]))
                            isDistinct = false;
                        else
                        {
                            isDistinct = true;
                            break;
                        }
                    }
                    if (!isDistinct)
                        break;
                }
                if (isDistinct)
                    distinctRecords.Add(o);
            }
            return distinctRecords;
        }

        private List<object[]> SelectColumnsFromMultipleTables(Dictionary<string, List<object[]>> records, QueryParts parsedQuery, Dictionary<string, Table> tables)
        {
            List<object[]> selectedRecords = new List<object[]>();
            List<string> columnsToBeSelected = new List<string>();
            List<string> columnTableNames = new List<string>();

            if (parsedQuery.IsSelectAll)
            {
                foreach (string tableName in tables.Keys)
                {
                    Table table = tables[tableName];
                    IEnumerator<string> columnEnumerator = table.ColumnNameType.Keys.GetEnumerator();
                    while (columnEnumerator.MoveNext())
                    {
                        columnsToBeSelected.Add(columnEnumerator.Current);
                        columnTableNames.Add(tableName);
                    }
                }
            }
            else
            {
                columnsToBeSelected = parsedQuery.selectedColumns;
                columnTableNames = parsedQuery.selectedColumnFrom;
            }
            int columnIndex = 0;
            foreach (string column in columnsToBeSelected)
            {
                object[] selectedRecord = new object[columnsToBeSelected.Count];
                columnIndex = columnsToBeSelected.IndexOf(column);
                string tableName = columnTableNames[columnIndex];
                Table table = tables[tableName];
                Console.WriteLine("table::: " + tableName);
                List<object[]> recordsInTable = records[tableName];
                int rowIndex = 0;
                if (recordsInTable == null)
                    continue;
                foreach (object[] record in recordsInTable)
                {
                    if (selectedRecords.Count > rowIndex)
                        selectedRecord = selectedRecords[rowIndex];
                    else
                    {
                        selectedRecord = new object[columnsToBeSelected.Count];
                        selectedRecords.Add(selectedRecord);
                    }
                    if (selectedRecord == null)
                        selectedRecord = new object[columnsToBeSelected.Count];

                    if (column.Length >= 6 && column.Substring(column.Length - 6) == "_TAINT")
                    {
                        Console.WriteLine("column:" + column);
                        string tags = record[table.ColumnIndices[column]].ToString();
                        Console.WriteLine("tagggg:" + tags);
                        string[] tags_arr = tags.Split('$');
                        int len = tags_arr.Length, new_tag = 0;
                        for (int i = 0; i < len; i++)
                        {
                            new_tag = new_tag | Convert.ToInt32(tags_arr[i], 16);
                        }
                        string new_tag_16 = Convert.ToString(new_tag, 16);
                        len = 8 - new_tag_16.Length;
                        for (int i = 0; i < len; i++)
                        {
                            new_tag_16 = "0" + new_tag_16;
                        }
                        record[table.ColumnIndices[column]] = tags_arr[0];
                        selectedRecord[columnIndex] = new_tag_16;
                        
                    }
                    else
                    { 
                        selectedRecord[columnIndex] = record[table.ColumnIndices[column]];
                    }
                    
                    selectedRecords[rowIndex++] = selectedRecord;

                }

                /*
                if (column.Length >= 6 && column.Substring(column.Length - 6) == "_TAINT")
                {
                    string tags = record[table.ColumnIndices[column]].ToString();
                    string[] tags_arr = tags.Split('$');
                    int len = tags_arr.Length, new_tag = 0;
                    for (int i = 0; i < len; i++)
                    {
                        new_tag = new_tag | Convert.ToInt32(tags_arr[i], 16);
                    }
                    string new_tag_16 = Convert.ToString(new_tag, 16);
                    len = 8 - new_tag_16.Length;
                    for (int i = 0; i < len; i++)
                    {
                        new_tag_16 = "0" + new_tag_16;
                    }
                    record[table.ColumnIndices[column]] = tags_arr[0];
                    selectedRecord[index++] = new_tag_16;
                }*/


            }
            return selectedRecords;
        }


        private Dictionary<string, List<object[]>> getRecordsFrommDifferentTablesWith(Expression condition, Dictionary<string, Table> tables)
        {
            //throw new NotImplementedException();
            Dictionary<string, List<object[]>> records = new Dictionary<string, List<object[]>>();
            foreach (string tableName in tables.Keys)
            {
                records.Add(tableName, tables[tableName].Records);
            }

            Dictionary<string, List<object[]>> resultSet = new Dictionary<string, List<object[]>>();
            string left = null;
            string right = null;
            string op;

            if (condition.Operator == null)
            {
                throw new Exception("operator cannot be null");
            }
            op = condition.Operator.Value;

            Expression lhs;
            Expression rhs;
            if (condition.Left is PatternExpression)
            {
                lhs = (Expression)((PatternExpression)condition.Left).Expression;
                //rhs = (Expression)((PatternExpression)condition.Right).Expression;
            }
            else
            {
                lhs = (Expression)condition.Left;
                //rhs = (Expression)condition.Right;
            }
            if (condition.Right is PatternExpression)
            {
                //lhs = (Expression)((PatternExpression)condition.Left).Expression;
                rhs = (Expression)((PatternExpression)condition.Right).Expression;
            }
            else
            {
                //lhs = (Expression)condition.Left;
                rhs = (Expression)condition.Right;
            }


            if (op.Equals("NOT"))
            {
                PexAssert.IsNull(lhs);
                PexAssert.IsNotNull(rhs);
                PexAssert.IsNotNull(rhs.Operator);
                Dictionary<string, List<object[]>> rec = getRecordsFrommDifferentTablesWith(rhs, tables);
                resultSet = PerformOperationOnRecords(records, rec, op);
                return resultSet;

            }
            PexAssert.IsNotNull(lhs);
            PexAssert.IsNotNull(rhs);

            Dictionary<string, List<object[]>> lhsRecords;
            Dictionary<string, List<object[]>> rhsRecords;

            if (op.Equals("=") || op.Equals("<") || op.Equals("<=")
                || op.Equals(">") || op.Equals(">=") || op.Equals("!="))
            {
                bool isNegative = false;
                PexAssert.IsNull(lhs.Operator);
                PexAssert.IsTrue(rhs.Operator == null || rhs.Operator.Value == "-");
                if (rhs.Operator != null && rhs.Operator.Value == "-")
                    isNegative = true;

                if (lhs.Right is IntegerValue && rhs.Right is IntegerValue)
                {
                   
                    if (!isNegative)
                    {
                        if (((IntegerValue)lhs.Right).Value == ((IntegerValue)rhs.Right).Value)
                        {
                            resultSet = records;
                            return resultSet;
                        }
                    }
                    else
                    {
                        if (((IntegerValue)lhs.Right).Value == -((IntegerValue)rhs.Right).Value)
                        {
                            resultSet = records;
                            return resultSet;
                        }
                    }
                }
                else if (lhs.Right is StringValue && rhs.Right is StringValue)
                {
                    if (((StringValue)lhs.Right).Value == ((StringValue)rhs.Right).Value)
                    {
                        resultSet = records;
                        return resultSet;
                    }
                }

                DbObject rightPart = (DbObject)lhs.Right;
                string leftTableName, leftColumnName;
                string rightTableName, rightColumnName;

                leftTableName = ((DbObject)lhs.Right).Identifier.ID;
                leftColumnName = ((DbObject)lhs.Right).Next.Identifier.ID;

                if (rhs.Right is IntegerValue)
                {
                    right = ((IntegerValue)rhs.Right).Value.ToString();
                }
                else if (rhs.Right is StringValue)
                {
                    right = ((StringValue)rhs.Right).Value;
                }

                else if (rhs.Right is DbObject)
                {
                    Dictionary<string, List<object[]>> rec = new Dictionary<string, List<object[]>>();
                    foreach (string t in tables.Keys)
                        rec.Add(t, tables[t].Records);
                    return SelectRecordsFromDifferentTables((DbObject)lhs.Right, (DbObject)rhs.Right, null, op, rec, tables);
                }

                Console.WriteLine("leftTableName " + leftTableName);
                leftTableName = leftTableName.Trim('[', ']');
                if (leftTableName.Contains("[") && leftTableName.Contains("]"))
                {
                    leftTableName = leftTableName.Substring(1, leftTableName.Length - 2);
                }

                Console.WriteLine("leftTableName " + leftTableName);
                Table table = tables[leftTableName];
                Console.WriteLine("right:" + right);
                List<object[]> tableResultSet = table.SelectRecords(leftColumnName, right, op, new List<object[]>());
                resultSet.Add(table.name, tableResultSet);
                foreach (string t in tables.Keys)
                {
                    if (t != table.name)
                        resultSet.Add(t, null);
                }
                
            }
            else if (op.Equals("AND") || op.Equals("OR"))
            {
                PexAssert.IsNotNull(lhs.Operator);
                lhsRecords = getRecordsFrommDifferentTablesWith(lhs, tables);
                PexAssert.IsNotNull(rhs.Operator);
                rhsRecords = getRecordsFrommDifferentTablesWith(rhs, tables);
                resultSet = PerformOperationOnRecords(lhsRecords, rhsRecords, op);
            }
            else if (op.Equals("LIKE"))
            {
                /*
                PexAssert.IsNull(lhs.Operator);
                PexAssert.IsNull(rhs.Operator);
                right = ((StringValue)rhs.Right).Value.ToString();
                left = ((DbObject)lhs.Right).Identifier.ID;
                resultSet = SelectRecords(left, right, op, recds);
            
                 */
            }
            return resultSet;


        }


        /*To be implemented for 
         * Operators: LIKE, IS NULL, IS NOT NULL
         */
        private Dictionary<string, List<object[]>> SelectRecordsFromDifferentTables(
            DbObject left, DbObject right, string rightString, string op, Dictionary<string, List<object[]>> records, Dictionary<string, Table> tables)
        {
            string leftTable = null, leftColumn;
            string rightTable = null, rightColumn;

            if (left.HasNext)
            {
                leftTable = left.Identifier.ID;
                leftColumn = left.Next.Identifier.ID;
            }
            else
                leftColumn = left.Identifier.ID;

            if (right.HasNext)
            {
                rightTable = right.Identifier.ID;
                rightColumn = right.Next.Identifier.ID;
            }
            else
                rightColumn = right.Identifier.ID;


            leftColumn = leftColumn.Trim('[', ']');
            if (leftColumn.Contains("["))
            {
                leftColumn = leftColumn.Substring(1, leftColumn.Length - 2);
            }
            rightColumn = rightColumn.Trim('[', ']');
            if (rightColumn.Contains("["))
            {
                rightColumn = rightColumn.Substring(1, rightColumn.Length - 2);
            }

            Console.WriteLine("left = " + leftTable + " right = " + rightTable);
            if (leftTable.Contains("["))
            {
                leftTable = leftTable.Substring(1, leftTable.Length - 2);
            }
            rightColumn = rightColumn.Trim('[', ']');
            if (rightTable.Contains("["))
            {
                rightTable = rightTable.Substring(1, rightTable.Length - 2);
            }


            Dictionary<string, List<object[]>> resultSet = new Dictionary<string, List<object[]>>();

            List<object[]> leftResultSet = new List<object[]>();
            List<object[]> rightResultSet = new List<object[]>();

            PexAssert.IsTrue(leftTable != null && rightTable != null);
            Console.WriteLine("left = " + leftTable + " right = " + rightTable);
            if (op.Equals("=") || op.Equals("!=") || op.Equals("<") || op.Equals("<=") || op.Equals(">") || op.Equals(">="))
            {
                List<object[]> leftRecords = records[leftTable];
                List<object[]> rightRecords = records[rightTable];

                foreach (object[] leftRecord in leftRecords)
                {
                    object leftObj = leftRecord[tables[leftTable].ColumnIndices[leftColumn]];
                    DataTypes leftType = tables[leftTable].ColumnNameType[leftColumn];

                    foreach (object[] rightRecord in rightRecords)
                    {
                        object rightObj = rightRecord[tables[rightTable].ColumnIndices[rightColumn]];
                        DataTypes rightType = tables[rightTable].ColumnNameType[rightColumn];
                        PexAssert.IsTrue(leftType == rightType);

                        if (leftType == DataTypes.STRING)
                        {
                            if (op.Equals("="))
                            {
                                if (leftObj.Equals(rightObj))
                                {
                                    object[] leftResult = new object[leftRecord.Length];
                                    leftRecord.CopyTo(leftResult, 0);
                                    object[] rightResult = new object[rightRecord.Length];
                                    rightRecord.CopyTo(rightResult, 0);
                                    string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();
                                    string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();  
                                    //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                    //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                    for (int i = 1; i < leftRecord.Length; i += 2)
                                    {
                                        leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;
                                    }
                                    for (int i = 1; i < rightRecord.Length; i += 2)
                                    {
                                        rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;
                                    }
                                    leftResultSet.Add(leftResult);
                                    rightResultSet.Add(rightResult);
                                }
                            }
                            else if (op.Equals("!="))
                            {
                                if (!leftObj.Equals(rightObj))
                                {
                                    object[] leftResult = new object[leftRecord.Length];
                                    leftRecord.CopyTo(leftResult, 0);
                                    object[] rightResult = new object[rightRecord.Length];
                                    rightRecord.CopyTo(rightResult, 0);
                                    string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();
                                    string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();
                                    //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                    //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                    for (int i = 1; i < leftRecord.Length; i += 2)
                                    {
                                        leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;
                                    }
                                    for (int i = 1; i < rightRecord.Length; i += 2)
                                    {
                                        rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;
                                    }
                                    leftResultSet.Add(leftResult);
                                    rightResultSet.Add(rightResult);
                                }
                            }
                        }
                        else if (leftType == DataTypes.INT)
                        {
                            //Int64 number = System.Convert.ToInt64(right, 10);
                            if (op.Equals("="))
                            {
                                if (leftObj is System.Decimal)
                                {
                                    Int64 leftNumber = Decimal.ToInt64((Decimal)leftObj);
                                    Int64 rightNumber = Decimal.ToInt64((Decimal)rightObj);

                                    if (leftNumber == rightNumber)
                                    {
                                        object[] leftResult = new object[leftRecord.Length];
                                        leftRecord.CopyTo(leftResult, 0);
                                        object[] rightResult = new object[rightRecord.Length];
                                        rightRecord.CopyTo(rightResult, 0);
                                        string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();
                                        string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();
                                        //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                        //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                        for (int i = 1; i < leftRecord.Length; i += 2)
                                        {
                                            leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;
                                        }
                                        for (int i = 1; i < rightRecord.Length; i += 2)
                                        {
                                            rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;
                                        } 
                                        leftResultSet.Add(leftResult);
                                        rightResultSet.Add(rightResult);
                                    }
                                }
                                else if ((int)leftObj == (int)rightObj)
                                {
                                    object[] leftResult = new object[leftRecord.Length];
                                    leftRecord.CopyTo(leftResult, 0);
                                    object[] rightResult = new object[rightRecord.Length];
                                    rightRecord.CopyTo(rightResult, 0);
                                    string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();
                                    string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();
                                    //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                    //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                    for (int i = 1; i < leftRecord.Length; i += 2)
                                    {
                                        leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;
                                    }
                                    for (int i = 1; i < rightRecord.Length; i += 2)
                                    {
                                        rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;
                                    } 
                                    leftResultSet.Add(leftResult);
                                    rightResultSet.Add(rightResult);
                                }

                            }
                            else if (op.Equals("!="))
                            {
                                if (leftObj is System.Decimal)
                                {
                                    Int64 leftNumber = Decimal.ToInt64((Decimal)leftObj);
                                    Int64 rightNumber = Decimal.ToInt64((Decimal)rightObj);

                                    if (leftNumber != rightNumber)
                                    {
                                        object[] leftResult = new object[leftRecord.Length];
                                        leftRecord.CopyTo(leftResult, 0);
                                        object[] rightResult = new object[rightRecord.Length];
                                        rightRecord.CopyTo(rightResult, 0);
                                        string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();
                                        string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();
                                        //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                        //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                        for (int i = 1; i < leftRecord.Length; i += 2)
                                        {
                                            leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;
                                        }
                                        for (int i = 1; i < rightRecord.Length; i += 2)
                                        {
                                            rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;
                                        } 
                                        leftResultSet.Add(leftResult);
                                        rightResultSet.Add(rightResult);
                                    }
                                }
                                else if ((int)leftObj != (int)rightObj)
                                {
                                    object[] leftResult = new object[leftRecord.Length];
                                    leftRecord.CopyTo(leftResult, 0);
                                    object[] rightResult = new object[rightRecord.Length];
                                    rightRecord.CopyTo(rightResult, 0);
                                    string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();
                                    string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();
                                    //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                    //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                    for (int i = 1; i < leftRecord.Length; i += 2)
                                    {
                                        leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;
                                    }
                                    for (int i = 1; i < rightRecord.Length; i += 2)
                                    {
                                        rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;
                                    } 
                                    leftResultSet.Add(leftResult);
                                    rightResultSet.Add(rightResult);
                                }
                            }
                            else if (op.Equals("<"))
                            {
                                if (leftObj is System.Decimal)
                                {
                                    Int64 leftNumber = Decimal.ToInt64((Decimal)leftObj);
                                    Int64 rightNumber = Decimal.ToInt64((Decimal)rightObj);

                                    if (leftNumber < rightNumber)
                                    {
                                        object[] leftResult = new object[leftRecord.Length];
                                        leftRecord.CopyTo(leftResult, 0);
                                        object[] rightResult = new object[rightRecord.Length];
                                        rightRecord.CopyTo(rightResult, 0);
                                        string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();
                                        string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();
                                        //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                        //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                        for (int i = 1; i < leftRecord.Length; i += 2)
                                        {
                                            leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;
                                        }
                                        for (int i = 1; i < rightRecord.Length; i += 2)
                                        {
                                            rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;
                                        } 
                                        leftResultSet.Add(leftResult);
                                        rightResultSet.Add(rightResult);
                                    }
                                }
                                else if ((int)leftObj < (int)rightObj)
                                {
                                    object[] leftResult = new object[leftRecord.Length];
                                    leftRecord.CopyTo(leftResult, 0);
                                    object[] rightResult = new object[rightRecord.Length];
                                    rightRecord.CopyTo(rightResult, 0);
                                    string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();
                                    string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();
                                    //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                    //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                    for (int i = 1; i < leftRecord.Length; i += 2)
                                    {
                                        leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;
                                    }
                                    for (int i = 1; i < rightRecord.Length; i += 2)
                                    {
                                        rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;
                                    } 
                                    leftResultSet.Add(leftResult);
                                    rightResultSet.Add(rightResult);
                                }
                            }
                            else if (op.Equals("<="))
                            {
                                if (leftObj is System.Decimal)
                                {
                                    Int64 leftNumber = Decimal.ToInt64((Decimal)leftObj);
                                    Int64 rightNumber = Decimal.ToInt64((Decimal)rightObj);

                                    if (leftNumber <= rightNumber)
                                    {
                                        object[] leftResult = new object[leftRecord.Length];
                                        leftRecord.CopyTo(leftResult, 0);
                                        object[] rightResult = new object[rightRecord.Length];
                                        rightRecord.CopyTo(rightResult, 0);
                                        string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();
                                        string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();
                                        //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                        //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                        for (int i = 1; i < leftRecord.Length; i += 2)
                                        {
                                            leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;
                                        }
                                        for (int i = 1; i < rightRecord.Length; i += 2)
                                        {
                                            rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;
                                        } 
                                        leftResultSet.Add(leftResult);
                                        rightResultSet.Add(rightResult);
                                    }
                                }
                                else if ((int)leftObj <= (int)rightObj)
                                {
                                    object[] leftResult = new object[leftRecord.Length];
                                    leftRecord.CopyTo(leftResult, 0);
                                    object[] rightResult = new object[rightRecord.Length];
                                    rightRecord.CopyTo(rightResult, 0);
                                    string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();
                                    string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();
                                    //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                    //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                    for (int i = 1; i < leftRecord.Length; i += 2)
                                    {
                                        leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;
                                    }
                                    for (int i = 1; i < rightRecord.Length; i += 2)
                                    {
                                        rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;
                                    } 
                                    leftResultSet.Add(leftResult);
                                    rightResultSet.Add(rightResult);
                                }
                            }
                            else if (op.Equals(">"))
                            {
                                if (leftObj is System.Decimal)
                                {
                                    Int64 leftNumber = Decimal.ToInt64((Decimal)leftObj);
                                    Int64 rightNumber = Decimal.ToInt64((Decimal)rightObj);

                                    if (leftNumber > rightNumber)
                                    {
                                        object[] leftResult = new object[leftRecord.Length];
                                        leftRecord.CopyTo(leftResult, 0);
                                        object[] rightResult = new object[rightRecord.Length];
                                        rightRecord.CopyTo(rightResult, 0);
                                        string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();
                                        string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();
                                        //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                        //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                        for (int i = 1; i < leftRecord.Length; i += 2)
                                        {
                                            leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;
                                        }
                                        for (int i = 1; i < rightRecord.Length; i += 2)
                                        {
                                            rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;
                                        } 
                                        leftResultSet.Add(leftResult);
                                        rightResultSet.Add(rightResult);
                                    }
                                }
                                else if ((int)leftObj > (int)rightObj)
                                {
                                    object[] leftResult = new object[leftRecord.Length];
                                    leftRecord.CopyTo(leftResult, 0);
                                    object[] rightResult = new object[rightRecord.Length];
                                    rightRecord.CopyTo(rightResult, 0);
                                    string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();
                                    string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();
                                    //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                    //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                    for (int i = 1; i < leftRecord.Length; i += 2)
                                    {
                                        leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;
                                    }
                                    for (int i = 1; i < rightRecord.Length; i += 2)
                                    {
                                        rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;
                                    } 
                                    leftResultSet.Add(leftResult);
                                    rightResultSet.Add(rightResult);
                                }
                            }
                            else if (op.Equals(">="))
                            {
                                if (leftObj is System.Decimal)
                                {
                                    Int64 leftNumber = Decimal.ToInt64((Decimal)leftObj);
                                    Int64 rightNumber = Decimal.ToInt64((Decimal)rightObj);

                                    if (leftNumber >= rightNumber)
                                    {
                                        object[] leftResult = new object[leftRecord.Length];
                                        leftRecord.CopyTo(leftResult, 0);
                                        object[] rightResult = new object[rightRecord.Length];
                                        rightRecord.CopyTo(rightResult, 0);
                                        string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();
                                        string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();
                                        //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                        //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                        for (int i = 1; i < leftRecord.Length; i += 2)
                                        {
                                            leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;
                                        }
                                        for (int i = 1; i < rightRecord.Length; i += 2)
                                        {
                                            rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;
                                        } 
                                        leftResultSet.Add(leftResult);
                                        rightResultSet.Add(rightResult);
                                    }
                                }
                                else if ((int)leftObj >= (int)rightObj)
                                {
                                    object[] leftResult = new object[leftRecord.Length];
                                    leftRecord.CopyTo(leftResult, 0);
                                    object[] rightResult = new object[rightRecord.Length];
                                    rightRecord.CopyTo(rightResult, 0);
                                    string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();
                                    string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();
                                    //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                    //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                    for (int i = 1; i < leftRecord.Length; i += 2)
                                    {
                                        leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;
                                    }
                                    for (int i = 1; i < rightRecord.Length; i += 2)
                                    {
                                        rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;
                                    } 
                                    leftResultSet.Add(leftResult);
                                    rightResultSet.Add(rightResult);
                                }
                            }
                        }
                    }
                }
            }
            else { throw new NotImplementedException("Not Implemented for Operator: " + op); }
          
            resultSet.Add(leftTable, leftResultSet);
            resultSet.Add(rightTable, rightResultSet);
            return resultSet;
        }



        private Dictionary<string, List<object[]>> PerformOperationOnRecords(Dictionary<string, List<object[]>> lhsRecords, Dictionary<string, List<object[]>> rhsRecords, string op)
        {

            List<object[]> lhsRecordsInTable;
            List<object[]> rhsRecordsInTable;

            Dictionary<string, List<object[]>> selectedRecords = new Dictionary<string, List<object[]>>();

            if (op.Equals("NOT"))
            {
                foreach (string tableName in lhsRecords.Keys)
                {
                   
                    lhsRecordsInTable = lhsRecords[tableName];
                    rhsRecordsInTable = rhsRecords[tableName];
                    List<object[]> selectedRecordsInTable = new List<object[]>();

                    foreach (object[] record in lhsRecordsInTable)
                    {
                        int flag = 0;
                        foreach (object[] record2 in rhsRecordsInTable)
                        {
                            int flag2 = 1;
                            for (int i = 0; i < record2.Length; i += 2)
                            {
                                if (record[i] != record2[i])
                                {
                                    flag2 = 0;
                                    break;
                                }

                            }
                            if (flag2 == 1)
                            {
                                flag = 1;
                                break;
                            }
                        }


                        if (flag == 0)
                        {
                            selectedRecordsInTable.Add(record);
                        }
                    }
                    selectedRecords.Add(tableName, selectedRecordsInTable);
                }
            }
            else if (op.Equals("AND"))
            {
                foreach (string tableName in lhsRecords.Keys)
                {
                    selectedRecords.Add(tableName, null);
                }

                foreach (string tableName in rhsRecords.Keys)
                {
                    if (!selectedRecords.ContainsKey(tableName))
                        selectedRecords.Add(tableName, null);
                }

                foreach (string tableName in lhsRecords.Keys)
                {
                    lhsRecordsInTable = lhsRecords[tableName];
                    rhsRecordsInTable = rhsRecords[tableName];
                    List<object[]> selectedRecordsInTable = new List<object[]>();

                    if (lhsRecordsInTable == null || rhsRecordsInTable == null)
                        continue;
                   

                    foreach (object[] record in lhsRecordsInTable)
                    {
                        int flag = 0;
                        foreach (object[] record2 in rhsRecordsInTable)
                        {
                            int flag2 = 1;
                            for (int i = 0; i < record2.Length; i += 2)
                            {
                                if (record[i] != record2[i])
                                {
                                    flag2 = 0;
                                    break;
                                }
                                
                            }
                            if (flag2 == 1)
                            {
                                for (int i = 1; i < record2.Length; i += 2)
                                {
                                    object tmp = record[i] + "$" + record2[i];
                                    record[i] = tmp;
                                    record2[i] = tmp;
                                }
                                flag = 1;
                                break;
                            }
                        }

                        
                        if (flag == 1)
                        {
                            selectedRecordsInTable.Add(record);
                            bool flagToBeAdded = true;
                            List<string> tabls = new List<string>();
                            foreach (string t in lhsRecords.Keys)
                                tabls.Add(t);
                            foreach (string t in rhsRecords.Keys)
                            {
                                if (!tabls.Contains(t))
                                    tabls.Add(t);
                            }


                            foreach (string t in tabls)
                            {
                                if (!t.Equals(tableName))
                                {
                                    if (lhsRecords.ContainsKey(t) && lhsRecords[t] != null && (!rhsRecords.ContainsKey(t) || (rhsRecords.ContainsKey(t) && rhsRecords[t] == null)))
                                    {
                                        int i = lhsRecordsInTable.IndexOf(record);
                                        List<object[]> r = lhsRecords[t];
                                        object[] recToBeAdded = r[i];
                                        if (selectedRecords[t] == null)
                                        {
                                            selectedRecords[t] = new List<object[]>();
                                            selectedRecords[t].Add(recToBeAdded);
                                        }
                                        else
                                            selectedRecords[t].Add(recToBeAdded);
                                    }
                                    else if (rhsRecords.ContainsKey(t) && rhsRecords[t] != null && (!lhsRecords.ContainsKey(t) || (lhsRecords.ContainsKey(t) && lhsRecords[t] == null)))
                                    {
                                        int i = rhsRecordsInTable.IndexOf(record);
                                        List<object[]> r = rhsRecords[t];
                                        object[] recToBeAdded = r[i];
                                        if (selectedRecords[t] == null)
                                        {
                                            selectedRecords[t] = new List<object[]>();
                                            selectedRecords[t].Add(recToBeAdded);
                                        }
                                        else
                                            selectedRecords[t].Add(recToBeAdded);
                                    }
                                    else if (rhsRecords[t] != null && lhsRecords[t] != null)
                                    {
                                        int i = lhsRecordsInTable.IndexOf(record);

                                        List<object[]> rl = lhsRecords[t];
                                        object[] recToBeAddedl = rl[i];
                                        List<object[]> rr = lhsRecords[t];
                                        object[] recToBeAddedr = rr[i];
                                        if (recToBeAddedl.Equals(recToBeAddedr))
                                        {
                                            
                                            if (selectedRecords[t] == null)
                                            {
                                                selectedRecords[t] = new List<object[]>();
                                                selectedRecords[t].Add(recToBeAddedr);
                                            }
                                            else
                                                selectedRecords[t].Add(recToBeAddedr);
                                        }
                                        else
                                            flagToBeAdded = true;
                                    }
                                }
                            }
                            if (flagToBeAdded)
                            {
                                if (selectedRecords[tableName] == null)
                                {
                                    selectedRecords[tableName] = new List<object[]>();
                                    selectedRecords[tableName].Add(record);
                                }
                                else
                                    selectedRecords[tableName].Add(record);
                            }
                        }
                    }
                    return selectedRecords;
                }
            }
            else if (op.Equals("OR"))
            {
                foreach (string tableName in lhsRecords.Keys)
                {
                    lhsRecordsInTable = lhsRecords[tableName];
                    rhsRecordsInTable = rhsRecords[tableName];
                    List<object[]> selectedRecordsInTable = new List<object[]>();
                    List<object[]> selectedRecordsInTable2 = new List<object[]>();

                    foreach (object[] record in lhsRecordsInTable)
                    {
                        selectedRecordsInTable.Add(record);
                    }
                    foreach (object[] record in rhsRecordsInTable)
                    {
                        int flag = 0;
                        foreach (object[] record2 in selectedRecordsInTable)
                        {
                            int flag2 = 1;
                            for (int i = 0; i < record2.Length; i += 2)
                            {
                                if (record[i] != record2[i])
                                {
                                    flag2 = 0;
                                    break;
                                }
                            }
                            if (flag2 == 1)
                            {
                                flag = 1;
                                break;
                            }
                        }
                        if (flag == 0)
                        {
                            selectedRecordsInTable.Add(record);
                        }

                    }
                    selectedRecords.Add(tableName, selectedRecordsInTable);
                }
            }
            else
                throw new NotImplementedException("Operator + " + op + " Not Implemented");
            return selectedRecords;

        }



        private List<object[]> SelectColumnsFrom(List<object[]> records, QueryParts parsedQuery, MockDBMS.Table table)
        ]]></source>
</chunk>
<method name="SelectColumnsFrom" namespace="MockDBMS.SqlServer" type="MockDBMS.SqlServer.MockSqlCommand" typeName="MockSqlCommand" token="6000073" module="MockDBMS.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
<hit index="10" value="4"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="2"/>
<hit index="14" value="2"/>
<hit index="15" value="4"/>
<hit index="16" value="2"/>
<hit index="17" value="2"/>
<hit index="18" value="2"/>
<hit index="19" value="4"/>
<hit index="20" value="2"/>
<hit index="21" value="2"/>
<hit index="22" value="2"/>
<hit index="23" value="4"/>
<hit index="24" value="2"/>
<hit index="25" value="56"/>
<hit index="26" value="56"/>
<hit index="27" value="56"/>
<hit index="28" value="112"/>
<hit index="29" value="56"/>
<hit index="30" value="56"/>
<hit index="31" value="56"/>
<hit index="32" value="112"/>
<hit index="33" value="58"/>
<hit index="34" value="58"/>
<hit index="35" value="58"/>
<hit index="36" value="116"/>
<hit index="37" value="2"/>
<hit index="39" value="2"/>
<hit index="40" value="2"/>
<hit index="41" value="2"/>
<hit index="42" value="4"/>
<hit index="43" value="4"/>
<hit index="44" value="4"/>
<hit index="45" value="4"/>
<hit index="46" value="4"/>
<hit index="47" value="4"/>
<hit index="48" value="8"/>
<hit index="50" value="4"/>
<hit index="51" value="4"/>
<hit index="52" value="4"/>
<hit index="53" value="4"/>
<hit index="54" value="4"/>
<hit index="55" value="8"/>
<hit index="56" value="112"/>
<hit index="57" value="112"/>
<hit index="58" value="112"/>
<hit index="59" value="88"/>
<hit index="60" value="88"/>
<hit index="61" value="88"/>
<hit index="62" value="88"/>
<hit index="63" value="88"/>
<hit index="64" value="88"/>
<hit index="65" value="56"/>
<hit index="66" value="56"/>
<hit index="67" value="56"/>
<hit index="68" value="56"/>
<hit index="69" value="112"/>
<hit index="70" value="56"/>
<hit index="71" value="56"/>
<hit index="72" value="56"/>
<hit index="73" value="112"/>
<hit index="74" value="56"/>
<hit index="75" value="56"/>
<hit index="76" value="56"/>
<hit index="77" value="56"/>
<hit index="78" value="56"/>
<hit index="79" value="112"/>
<hit index="81" value="56"/>
<hit index="82" value="56"/>
<hit index="83" value="56"/>
<hit index="84" value="56"/>
<hit index="85" value="56"/>
<hit index="86" value="56"/>
<hit index="87" value="56"/>
<hit index="88" value="56"/>
<hit index="89" value="144"/>
<hit index="90" value="144"/>
<hit index="91" value="144"/>
<hit index="92" value="144"/>
<hit index="93" value="56"/>
<hit index="94" value="56"/>
<hit index="95" value="56"/>
<hit index="96" value="56"/>
<hit index="99" value="56"/>
<hit index="100" value="56"/>
<hit index="101" value="56"/>
<hit index="102" value="56"/>
<hit index="103" value="112"/>
<hit index="104" value="56"/>
<hit index="105" value="56"/>
<hit index="106" value="56"/>
<hit index="107" value="112"/>
<hit index="108" value="56"/>
<hit index="109" value="56"/>
<hit index="110" value="56"/>
<hit index="111" value="56"/>
<hit index="112" value="56"/>
<hit index="113" value="56"/>
<hit index="114" value="56"/>
<hit index="115" value="56"/>
<hit index="116" value="56"/>
<hit index="117" value="56"/>
<hit index="118" value="56"/>
<hit index="119" value="56"/>
<hit index="120" value="56"/>
<hit index="121" value="112"/>
<hit index="122" value="56"/>
<hit index="123" value="56"/>
<hit index="124" value="56"/>
<hit index="125" value="112"/>
<hit index="126" value="56"/>
<hit index="127" value="56"/>
<hit index="128" value="56"/>
<hit index="129" value="56"/>
<hit index="130" value="56"/>
<hit index="131" value="56"/>
<hit index="132" value="116"/>
<hit index="133" value="116"/>
<hit index="134" value="4"/>
<hit index="135" value="24"/>
<hit index="136" value="56"/>
<hit index="137" value="144"/>
<hit index="139" value="112"/>
<hit index="146" value="4"/>
<hit index="147" value="4"/>
<hit index="148" value="4"/>
<hit index="149" value="4"/>
<hit index="152" value="4"/>
<hit index="153" value="4"/>
<hit index="154" value="4"/>
<hit index="155" value="8"/>
<hit index="156" value="6"/>
<hit index="157" value="6"/>
<hit index="158" value="2"/>
<hit index="159" value="4"/>
<hit index="164" value="2"/>
<hit index="165" value="2"/>
<hit index="166" value="2"/>
<hit index="167" value="2"/>
<hit index="171" value="56"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="46" total="49" coveredRatio="0.93877551020408168"/>
</method>
<chunk hits="2" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            //DataSet
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="usercodeundertest"><source><![CDATA[List<object[]> selectedRecords = new List<object[]>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="usercodeundertest"><source><![CDATA[List<string> columnsToBeSelected = new List<string>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="000d" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.IsSelectAll)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="001c" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="001d" domain="usercodeundertest"><source><![CDATA[IEnumerator<string> columnEnumerator = table.ColumnNameType.Keys.GetEnumerator();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="174" offset="0044" domain="usercodeundertest"><source><![CDATA[while (columnEnumerator.MoveNext())]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="56" offset="0035" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="56" offset="0036" domain="usercodeundertest"><source><![CDATA[columnsToBeSelected.Add(columnEnumerator.Current);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="168" offset="0043" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0050" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else
                ]]></source>
</chunk>
<chunk hits="0" offset="0053" domain="usercodeundertest"><source><![CDATA[columnsToBeSelected = parsedQuery.selectedColumns;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="005a" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="4" offset="0068" domain="usercodeundertest"><source><![CDATA[object[] record]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="18" offset="01d6" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="005b" domain="usercodeundertest"><source><![CDATA[records]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
            ]]></source>
</chunk>
<chunk hits="4" offset="0070" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="4" offset="0071" domain="usercodeundertest"><source><![CDATA[object[] selectedRecord = new object[columnsToBeSelected.Count];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="4" offset="007e" domain="usercodeundertest"><source><![CDATA[int index = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="4" offset="0081" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="112" offset="008f" domain="usercodeundertest"><source><![CDATA[string column]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="460" offset="01aa" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="4" offset="0082" domain="usercodeundertest"><source><![CDATA[columnsToBeSelected]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                ]]></source>
</chunk>
<chunk hits="112" offset="0098" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="112" offset="0099" domain="usercodeundertest"><source><![CDATA[if (column.Length >= 6 && column.Substring(column.Length - 6) == "_TAINT")]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="56" offset="00cc" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="56" offset="00cd" domain="usercodeundertest"><source><![CDATA[string tags = record[table.ColumnIndices[column]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="168" offset="00e3" domain="usercodeundertest"><source><![CDATA[string[] tags_arr = tags.Split('$');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="56" offset="00fc" domain="usercodeundertest"><source><![CDATA[int len = tags_arr.Length,]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="56" offset="0102" domain="usercodeundertest"><source><![CDATA[new_tag = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        for (]]></source>
</chunk>
<chunk hits="56" offset="0105" domain="usercodeundertest"><source><![CDATA[int i = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="200" offset="0123" domain="usercodeundertest"><source><![CDATA[i < len]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="144" offset="011d" domain="usercodeundertest"><source><![CDATA[i++]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                        ]]></source>
</chunk>
<chunk hits="144" offset="010a" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="144" offset="010b" domain="usercodeundertest"><source><![CDATA[new_tag = new_tag | Convert.ToInt32(tags_arr[i], 16);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="144" offset="011c" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="56" offset="012f" domain="usercodeundertest"><source><![CDATA[string new_tag_16 = Convert.ToString(new_tag, 16);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="56" offset="013a" domain="usercodeundertest"><source><![CDATA[len = 8 - new_tag_16.Length;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        for (]]></source>
</chunk>
<chunk hits="56" offset="0145" domain="usercodeundertest"><source><![CDATA[int i = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="56" offset="0160" domain="usercodeundertest"><source><![CDATA[i < len]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="015a" domain="usercodeundertest"><source><![CDATA[i++]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                        ]]></source>
</chunk>
<chunk hits="0" offset="014a" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="014b" domain="usercodeundertest"><source><![CDATA[new_tag_16 = "0" + new_tag_16;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0159" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="56" offset="016c" domain="usercodeundertest"><source><![CDATA[record[table.ColumnIndices[column]] = tags_arr[0];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="224" offset="017f" domain="usercodeundertest"><source><![CDATA[selectedRecord[index++] = new_tag_16;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="224" offset="018b" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else
                    ]]></source>
</chunk>
<chunk hits="56" offset="018e" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="56" offset="018f" domain="usercodeundertest"><source><![CDATA[selectedRecord[index++] = record[table.ColumnIndices[column]];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="224" offset="01a8" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                ]]></source>
</chunk>
<chunk hits="448" offset="01a9" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="4" offset="01cc" domain="usercodeundertest"><source><![CDATA[selectedRecords.Add(selectedRecord);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="12" offset="01d5" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="01f8" domain="usercodeundertest"><source><![CDATA[return selectedRecords;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="01fd" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        /*
                private void tempQueryParser(string query)
                {
                    QueryParts parsedQuery = new QueryParts();
                    char[] c = new char[1];
                    c[0] = ' ';
                    string[] parts = query.Split(c);
                    ParsingState state = ParsingState.TYPE;
                    foreach (string part in parts)
                    {
                        if (part.Equals("SELECT"))
                        {
                            state = ParsingState.COLUMNS;
                            parsedQuery.Type = QueryStatementType.SELECT;
                        }
                        else if (part.Equals("WHERE"))
                        {
                            state = ParsingState.WHERECOND;
                        }
                        else if (part.Equals("FROM"))
                        {
                            state = ParsingState.TABLE;
                        }
                        else
                        {
                            if (state == ParsingState.COLUMNS)
                            {
                                parsedQuery.columns.Add(part);
                                state = ParsingState.FROM;
                            }
                            else if (state == ParsingState.TABLE)
                            {
                                parsedQuery.TableName = part;
                                state = ParsingState.WHERE;
                            }
                            else if (state == ParsingState.WHERECOND)
                            {
                                parsedQuery.whereConditionLHS = part;
                                state = ParsingState.WHEREOP;
                            }
                            else if (state == ParsingState.WHEREOP)
                            {
                                parsedQuery.whereConditionop = part;
                                state = ParsingState.WHERERHS;
                            }
                            else if (state == ParsingState.WHERERHS)
                            {
                                parsedQuery.whereConditionRHS = part;
                                state = ParsingState.DONE;
                            }
                    
                        }

                    }
                }
                */
        private static QueryParts parseQuery(string query)
        ]]></source>
</chunk>
<method name="parseQuery" namespace="MockDBMS.SqlServer" type="MockDBMS.SqlServer.MockSqlCommand" typeName="MockSqlCommand" token="6000074" module="MockDBMS.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="4"/>
<hit index="9" value="2"/>
<hit index="10" value="2"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="4" total="4" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="usercodeundertest"><source><![CDATA[IStatement st = Factory.CreateStatement(query);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0008" domain="usercodeundertest"><source><![CDATA[IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0013" domain="usercodeundertest"><source><![CDATA[st.Traverse(tailor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="001b" domain="usercodeundertest"><source><![CDATA[QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0027" domain="usercodeundertest"><source><![CDATA[return parsed;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            //tailor.
        ]]></source>
</chunk>
<chunk hits="2" offset="002b" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[


        public object ExecuteScalar()
        {
            List<object[]> resultSet = ExecuteReader().records;
            if (parsedQuery.IsFucntionCall == false)
            {
                if (resultSet.Count == 0)
                    return null;
                return resultSet[0][0].ToString() + resultSet[0][1].ToString();
            }
            if (parsedQuery.FunctionType == Function.COUNT)
            {
                int count = 0;
                foreach (object[] record in resultSet)
                {
                    bool flag = false;
                    foreach (object field in record)
                    {
                        if (record == null)
                        {
                            flag = true;
                            break;
                        }
                    }
                    if (!flag)
                        count++;
                }
                return count + "00000000";
            }
            else if (parsedQuery.FunctionType == Function.SUM)
            {
                throw new NotImplementedException();
            }
            else if (parsedQuery.FunctionType == Function.MIN)
            {
                throw new NotImplementedException();
            }
            else if (parsedQuery.FunctionType == Function.MAX)
            {
                throw new NotImplementedException();
            }
            else if (parsedQuery.FunctionType == Function.AVG)
            {
                throw new NotImplementedException();
            }
            else if (parsedQuery.FunctionType == Function.FIRST)
            {
                return resultSet[0][0].ToString() + resultSet[0][1].ToString();
            }
            else if (parsedQuery.FunctionType == Function.LAST)
            {
                return resultSet[resultSet.Count - 1][0].ToString() + resultSet[resultSet.Count - 1][1].ToString();
            }
            else
                throw new NotImplementedException("Unknown Function " + parsedQuery.FunctionType);
            return null;
        }

        public int ExecuteNonQuery()
        {
            throw new NotImplementedException();
        }
    }
}
]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MacroScopeCE\Factory.cs" renderPrefix="s7"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Collections.Generic;
using System.Reflection;
using Antlr.Runtime;
using Antlr.Runtime.Tree;

namespace MacroScope
{
    /// <summary>
    /// Factory producing statement parsers and tailors.
    /// </summary>
    public static class Factory
    {
        #region Constants

        public static readonly string MSQLProvider = "System.Data.SqlClient";

        public static readonly string OleDbProvider = "System.Data.OleDb";

        public static readonly string OracleProvider = "Oracle.DataAccess.Client";

        #endregion

        #region Class map

        private static readonly Dictionary<string, Type> m_tailors =
            new Dictionary<string, Type>();

        #endregion

        #region Constructor

        static Factory()
        {
            m_tailors.Add(MSQLProvider, typeof(MSqlServerTailor));
            m_tailors.Add(OleDbProvider, typeof(MAccessTailor));
            m_tailors.Add(OracleProvider, typeof(OracleTailor));
        }

        #endregion

        #region Factory methods

        /// <summary>
        /// Parses the argument as a SQL statement and returns its tree.
        /// </summary>
        /// <param name="commandText">
        /// The SQL. Must not be null.
        /// </param>
        /// <returns>
        /// A statement instance (never null).
        /// </returns>
        public static IStatement CreateStatement(string commandText)
        ]]></source>
</chunk>
<method name="CreateStatement" namespace="MacroScope" type="MacroScope.Factory" typeName="Factory" token="60003c6" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="4"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[MacroScopeParser parser = CreateParser(commandText);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0008" domain="userortestcode"><source><![CDATA[return parser.statement();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="6" offset="0011" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public static MacroScopeParser CreateParser(string commandText)
        ]]></source>
</chunk>
<method name="CreateParser" namespace="MacroScope" type="MacroScope.Factory" typeName="Factory" token="60003c7" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="6" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="17" value="2"/>
<hit index="18" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="6" total="8" coveredRatio="0.75"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[if (commandText == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("commandText");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="0018" domain="userortestcode"><source><![CDATA[MacroScopeLexer lexer = new MacroScopeLexer(
                new CaseInsensitiveStringStream(commandText));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0024" domain="userortestcode"><source><![CDATA[return new MacroScopeParser(new CommonTokenStream(lexer));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0032" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        /// <summary>
        /// Produces an SQL tree walker which tries to convert the SQL
        /// to the syntax supported by a particular database engine.
        /// </summary>
        /// <param name="databaseProvider">
        /// Provider name (as in
        /// <see cref="System.Data.Common.DbProviderFactories.GetFactory"/>)
        /// specifying the target engine.
        /// </param>
        /// <returns>
        /// <see cref="MSqlServerTailor"/>, <see cref="MAccessTailor"/>
        /// or <see cref="OracleTailor"/> (never null).
        /// </returns>
        public static IVisitor CreateTailor(string databaseProvider)
        ]]></source>
</chunk>
<method name="CreateTailor" namespace="MacroScope" type="MacroScope.Factory" typeName="Factory" token="60003c8" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="4"/>
<hit index="17" value="2"/>
<hit index="18" value="2"/>
<hit index="19" value="2"/>
<hit index="20" value="4"/>
<hit index="22" value="2"/>
<hit index="23" value="2"/>
<hit index="24" value="2"/>
<hit index="25" value="2"/>
<hit index="26" value="2"/>
<hit index="27" value="4"/>
<hit index="39" value="2"/>
<hit index="40" value="2"/>
<hit index="52" value="2"/>
<hit index="53" value="2"/>
<hit index="54" value="2"/>
<hit index="55" value="2"/>
<hit index="56" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="9" total="22" coveredRatio="0.40909090909090912"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[if (databaseProvider == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000f" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("databaseProvider");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="001a" domain="userortestcode"><source><![CDATA[if (!m_tailors.ContainsKey(databaseProvider))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="002b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="002c" domain="userortestcode"><source><![CDATA[string message = string.Format("Unknown database provider {0}.",
                    databaseProvider);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0038" domain="userortestcode"><source><![CDATA[throw new ArgumentException(message, "databaseProvider");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="0044" domain="userortestcode"><source><![CDATA[Type type = m_tailors[databaseProvider];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            //ConstructorInfo ctor = type.GetConstructor(Type.EmptyTypes);
            ]]></source>
</chunk>
<chunk hits="6" offset="0050" domain="userortestcode"><source><![CDATA[ConstructorInfo ctor = type.GetConstructor(new Type[0]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="005d" domain="userortestcode"><source><![CDATA[if (ctor == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="006a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="006b" domain="userortestcode"><source><![CDATA[string message = string.Format(
                    "Class {0} doesn't have an accessible default constructor.",
                    type.ToString());]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="007c" domain="userortestcode"><source><![CDATA[throw new Exception(message);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="0083" domain="userortestcode"><source><![CDATA[object tailor = ctor.Invoke(null);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="008b" domain="userortestcode"><source><![CDATA[if (tailor == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0098" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0099" domain="userortestcode"><source><![CDATA[string message = string.Format(
                    "Cannot construct {0}.",
                    type.ToString());]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00aa" domain="userortestcode"><source><![CDATA[throw new Exception(message);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="00b1" domain="userortestcode"><source><![CDATA[return (IVisitor)tailor;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="00bb" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion
    }
}
]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MacroScopeCE\QueryExpression.cs" renderPrefix="s8"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;

namespace MacroScope
{
    /// <summary>
    /// Represents a query expression
    /// (i.e. <c>SELECT count(*) FROM t WHERE id IS NOT NULL</c>)
    /// of a SQL SELECT statement.
    /// </summary>
    /// <remarks>
    /// A query expression is a <see cref="SelectStatement">SELECT statement</see>
    /// but not necessarily vice versa - one select statement can consist
    /// of multiple query expressions.
    /// </remarks>
    public sealed class QueryExpression : INode
    {
        #region Fields

        ]]></source>
</chunk>
<method name=".ctor" namespace="MacroScope" type="MacroScope.QueryExpression" typeName="QueryExpression" token="6000276" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[private bool m_distinct = false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="4" offset="0007" domain="userortestcode"><source><![CDATA[private bool m_all = false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        private int? m_top;

        private AliasedItem m_selectItems;

        private AliasedItem m_from;

        private IExpression m_where;

        private GroupByClause m_groupBy;

        private OrderExpression m_orderBy;

        private QueryExpression m_next;

        #endregion

        #region Accessors

        public int? Top
        {
            get
            {
                return m_top;
            }

            set
            {
                m_top = value;
            }
        }

        public bool Distinct
        {
            get
            ]]></source>
</chunk>
<method name="get_Distinct" namespace="MacroScope" type="MacroScope.QueryExpression" typeName="QueryExpression" token="6000261" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[return m_distinct;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="000a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            set
            {
                m_distinct = value;
            }
        }

        public bool HasNext
        {
            get
            {
                return m_next != null;
            }
        }

        /// <summary>
        /// Set if the union with the previous query expression is
        /// UNION ALL.
        /// </summary>
        public bool All
        {
            get
            {
                return m_all;
            }

            set
            {
                m_all = value;
            }
        }

        public AliasedItem SelectItems
        {
            get
            {
                return m_selectItems;
            }

            set
            ]]></source>
</chunk>
<method name="set_SelectItems" namespace="MacroScope" type="MacroScope.QueryExpression" typeName="QueryExpression" token="6000267" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[m_selectItems = value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0008" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        public AliasedItem From
        {
            get { return m_from; }
            set ]]></source>
</chunk>
<method name="set_From" namespace="MacroScope" type="MacroScope.QueryExpression" typeName="QueryExpression" token="6000269" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[m_from = value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="4" offset="0008" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        public IExpression Where
        {
            get ]]></source>
</chunk>
<method name="get_Where" namespace="MacroScope" type="MacroScope.QueryExpression" typeName="QueryExpression" token="600026a" module="MacroScope.dll"><hits><hit index="0" value="4"/>
<hit index="1" value="4"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="4" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="4" offset="0001" domain="userortestcode"><source><![CDATA[return m_where;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="4" offset="000a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            set ]]></source>
</chunk>
<method name="set_Where" namespace="MacroScope" type="MacroScope.QueryExpression" typeName="QueryExpression" token="600026b" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[m_where = value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="4" offset="0008" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        public GroupByClause GroupBy
        {
            get { return m_groupBy; }
            set { m_groupBy = value; }
        }

        public OrderExpression OrderBy
        {
            get { return m_orderBy; }
            set { m_orderBy = value; }
        }

        #endregion

        #region Build methods

        public void Add(QueryExpression tail)
        {
            if (tail == null)
            {
                throw new ArgumentNullException("tail");
            }

            if (m_next == null)
            {
                m_next = tail;
            }
            else
            {
                m_next.Add(tail);
            }
        }

        internal void SetOrderBy(OrderExpression orderBy)
        {
            if (m_next == null)
            {
                m_orderBy = orderBy;
            }
            else
            {
                m_next.SetOrderBy(orderBy);
            }
        }

        internal OrderExpression GetOrderBy()
        {
            if (m_next == null)
            {
                return m_orderBy;
            }
            else
            {
                return m_next.GetOrderBy();
            }
        }

        internal IList<QueryExpression> GetUnion()
        {
            IList<QueryExpression> union;
            if (m_next == null)
            {
                union = new List<QueryExpression>();
            }
            else
            {
                union = m_next.GetUnion();
            }

            union.Insert(0, this);
            return union;
        }

        #endregion

        #region INode Members

        public INode Clone()
        {
            QueryExpression queryExpression = new QueryExpression();

            queryExpression.Distinct = m_distinct;
            queryExpression.All = m_all;
            queryExpression.Top = m_top;

            if (m_selectItems != null)
            {
                queryExpression.SelectItems = (AliasedItem)(m_selectItems.Clone());
            }

            if (m_from != null)
            {
                queryExpression.From = (AliasedItem)(m_from.Clone());
            }

            if (m_where != null)
            {
                queryExpression.Where = (IExpression)(m_where.Clone());
            }

            if (m_groupBy != null)
            {
                queryExpression.GroupBy = (GroupByClause)(m_groupBy.Clone());
            }

            if (m_orderBy != null)
            {
                queryExpression.OrderBy = (OrderExpression)(m_orderBy.Clone());
            }

            if (m_next != null)
            {
                queryExpression.Add((QueryExpression)(m_next.Clone()));
            }

            return queryExpression;
        }

        public void Traverse(IVisitor visitor)
        ]]></source>
</chunk>
<method name="Traverse" namespace="MacroScope" type="MacroScope.QueryExpression" typeName="QueryExpression" token="6000275" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="4"/>
<hit index="10" value="2"/>
<hit index="16" value="2"/>
<hit index="17" value="2"/>
<hit index="18" value="2"/>
<hit index="19" value="2"/>
<hit index="20" value="4"/>
<hit index="21" value="2"/>
<hit index="22" value="2"/>
<hit index="23" value="2"/>
<hit index="24" value="2"/>
<hit index="25" value="2"/>
<hit index="26" value="4"/>
<hit index="27" value="2"/>
<hit index="28" value="2"/>
<hit index="29" value="2"/>
<hit index="30" value="2"/>
<hit index="31" value="2"/>
<hit index="32" value="4"/>
<hit index="33" value="2"/>
<hit index="34" value="2"/>
<hit index="35" value="2"/>
<hit index="36" value="4"/>
<hit index="37" value="2"/>
<hit index="38" value="2"/>
<hit index="39" value="2"/>
<hit index="40" value="2"/>
<hit index="41" value="2"/>
<hit index="42" value="2"/>
<hit index="43" value="4"/>
<hit index="44" value="2"/>
<hit index="45" value="2"/>
<hit index="46" value="2"/>
<hit index="47" value="4"/>
<hit index="48" value="2"/>
<hit index="49" value="2"/>
<hit index="50" value="2"/>
<hit index="51" value="2"/>
<hit index="52" value="2"/>
<hit index="53" value="2"/>
<hit index="54" value="2"/>
<hit index="55" value="2"/>
<hit index="56" value="2"/>
<hit index="57" value="4"/>
<hit index="58" value="2"/>
<hit index="59" value="2"/>
<hit index="60" value="2"/>
<hit index="61" value="2"/>
<hit index="62" value="4"/>
<hit index="63" value="2"/>
<hit index="64" value="2"/>
<hit index="65" value="2"/>
<hit index="66" value="4"/>
<hit index="67" value="2"/>
<hit index="74" value="2"/>
<hit index="75" value="2"/>
<hit index="76" value="2"/>
<hit index="77" value="4"/>
<hit index="78" value="2"/>
<hit index="85" value="2"/>
<hit index="86" value="2"/>
<hit index="87" value="2"/>
<hit index="88" value="4"/>
<hit index="89" value="2"/>
<hit index="96" value="2"/>
<hit index="97" value="2"/>
<hit index="103" value="2"/>
<hit index="104" value="2"/>
<hit index="105" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="29" total="39" coveredRatio="0.74358974358974361"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[if (visitor == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("visitor");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="0018" domain="userortestcode"><source><![CDATA[visitor.PerformBefore(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0020" domain="userortestcode"><source><![CDATA[if (m_selectItems == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0030" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0031" domain="userortestcode"><source><![CDATA[throw new InvalidOperationException(
                    "Fully-constructed query expression must have select items.");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }
            //Aliased item on WildCard
            ]]></source>
</chunk>
<chunk hits="2" offset="003c" domain="userortestcode"><source><![CDATA[m_selectItems.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="6" offset="0049" domain="userortestcode"><source><![CDATA[if (visitor is MSqlServerTailor)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0059" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[  /*Added by Kunal*/

                ]]></source>
</chunk>
<chunk hits="2" offset="005a" domain="userortestcode"><source><![CDATA[MSqlServerTailor trailor = visitor as MSqlServerTailor;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0061" domain="userortestcode"><source><![CDATA[if (trailor.queryParts.ParsingState == ParsingState.COLUMNS)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0076" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    /*On encountering FROM*/
                    ]]></source>
</chunk>
<chunk hits="2" offset="0077" domain="userortestcode"><source><![CDATA[trailor.queryParts.ParsingState = ParsingState.TABLE;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="6" offset="0084" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="6" offset="0085" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0086" domain="userortestcode"><source><![CDATA[visitor.PerformOnFrom(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="008e" domain="userortestcode"><source><![CDATA[if (m_from != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="009b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="009c" domain="userortestcode"><source><![CDATA[m_from.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="00a9" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="6" offset="00aa" domain="userortestcode"><source><![CDATA[visitor.PerformOnWhere(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="00b2" domain="userortestcode"><source><![CDATA[if (m_where != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="00bf" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="00c0" domain="userortestcode"><source><![CDATA[Console.WriteLine("WHERE");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="00cb" domain="userortestcode"><source><![CDATA[if (visitor is MSqlServerTailor)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="00db" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[  /*Added by Kunal*/

                    ]]></source>
</chunk>
<chunk hits="2" offset="00dc" domain="userortestcode"><source><![CDATA[MSqlServerTailor trailor = visitor as MSqlServerTailor;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="00e3" domain="userortestcode"><source><![CDATA[trailor.queryParts.ParsingState = ParsingState.WHERECOND;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="6" offset="00f0" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="6" offset="00f1" domain="userortestcode"><source><![CDATA[m_where.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="00fe" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="6" offset="00ff" domain="userortestcode"><source><![CDATA[visitor.PerformOnGroupBy(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0107" domain="userortestcode"><source><![CDATA[if (m_groupBy != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0114" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0115" domain="userortestcode"><source><![CDATA[m_groupBy.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0122" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="2" offset="0123" domain="userortestcode"><source><![CDATA[visitor.PerformOnOrderBy(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="012b" domain="userortestcode"><source><![CDATA[if (m_orderBy != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0138" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0139" domain="userortestcode"><source><![CDATA[m_orderBy.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0146" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="2" offset="0147" domain="userortestcode"><source><![CDATA[visitor.PerformAfter(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="6" offset="014f" domain="userortestcode"><source><![CDATA[if (m_next != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="015c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="015d" domain="userortestcode"><source><![CDATA[m_next.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="016a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="016b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion
    }
}
]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MacroScopeCE\Wildcard.cs" renderPrefix="s9"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;

namespace MacroScope
{
    /// <summary>
    /// Represents '*' used as a wildcard argument.
    /// </summary>
    /// <remarks>
    /// Instances of this class have no state, allowing only one instance
    /// to be used by the whole package.
    /// </remarks>
    public sealed class Wildcard : INode
    {
        #region Well-known value

        private static readonly Wildcard m_value = new Wildcard();

        #endregion

        #region Constructor

        private Wildcard()
        {
        }

        #endregion

        #region Properties

        public static Wildcard Value
        {
            get ]]></source>
</chunk>
<method name="get_Value" namespace="MacroScope" type="MacroScope.Wildcard" typeName="Wildcard" token="60002ee" module="MacroScope.dll"><hits><hit index="0" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[return m_value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0009" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        #endregion

        #region INode Members

        public INode Clone()
        {
            return this;
        }

        public void Traverse(IVisitor visitor)
        ]]></source>
</chunk>
<method name="Traverse" namespace="MacroScope" type="MacroScope.Wildcard" typeName="Wildcard" token="60002f0" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="4"/>
<hit index="10" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="5" coveredRatio="0.6"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[if (visitor == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("visitor");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="0018" domain="userortestcode"><source><![CDATA[visitor.Perform(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="6" offset="0020" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion
    }
}
]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MacroScopeCE\AliasedItem.cs" renderPrefix="s10"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Diagnostics;
using System.Text;

namespace MacroScope
{
    /// <summary>
    /// SQL expression item (i.e. table column) with an optional alias.
    /// </summary>
    public sealed class AliasedItem : INode
    {
        #region Fields

        private INode m_item;

        private Identifier m_alias;

        private AliasedItem m_next;

        #endregion

        #region Constructor

        ]]></source>
</chunk>
<method name=".ctor" namespace="MacroScope" type="MacroScope.AliasedItem" typeName="AliasedItem" token="60000b2" module="MacroScope.dll"><hits><hit index="0" value="4"/>
<hit index="1" value="4"/>
<hit index="2" value="4"/>
<hit index="8" value="4"/>
<hit index="9" value="4"/>
<hit index="10" value="4"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="5" coveredRatio="0.6"/>
</method>
<chunk hits="4" offset="0000" domain="userortestcode"><source><![CDATA[public AliasedItem(INode item)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0008" domain="userortestcode"><source><![CDATA[if (item == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0013" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0014" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("item");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="4" offset="001f" domain="userortestcode"><source><![CDATA[m_item = item;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="8" offset="0026" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion

        #region Properties

        /// <summary>
        /// Item specification (never null).
        /// </summary>
        public INode Item
        {
            get
            {
                return m_item;
            }

            set
            {
                if (value == null)
                {
                    throw new ArgumentNullException("value");
                }

                m_item = value;
            }
        }

        public Identifier Alias
        {
            get
            {
                return m_alias;
            }

            set
            {
                if (value == null)
                {
                    throw new ArgumentException("Invalid alias.");
                }

                m_alias = value;
            }
        }

        public bool HasNext
        {
            get
            {
                return m_next != null;
            }
        }

        public AliasedItem Next
        {
            get { return m_next; }
            set { m_next = value; }
        }

        #endregion

        #region Build methods

        public void Add(AliasedItem tail)
        {
            if (tail == null)
            {
                throw new ArgumentNullException("tail");
            }

            if (m_next == null)
            {
                m_next = tail;
            }
            else
            {
                m_next.Add(tail);
            }
        }

        #endregion

        #region INode Members

        public INode Clone()
        {
            AliasedItem aliasedItem = new AliasedItem(m_item.Clone());

            if (m_alias != null)
            {
                aliasedItem.Alias = (Identifier)(m_alias.Clone());
            }

            if (m_next != null)
            {
                aliasedItem.Add((AliasedItem)(m_next.Clone()));
            }

            return aliasedItem;
        }

        public void Traverse(IVisitor visitor)
        ]]></source>
</chunk>
<method name="Traverse" namespace="MacroScope" type="MacroScope.AliasedItem" typeName="AliasedItem" token="60000bc" module="MacroScope.dll"><hits><hit index="0" value="4"/>
<hit index="6" value="4"/>
<hit index="7" value="4"/>
<hit index="8" value="4"/>
<hit index="9" value="8"/>
<hit index="10" value="4"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="2"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="16" value="2"/>
<hit index="17" value="4"/>
<hit index="18" value="2"/>
<hit index="19" value="2"/>
<hit index="20" value="2"/>
<hit index="21" value="2"/>
<hit index="22" value="2"/>
<hit index="23" value="4"/>
<hit index="24" value="4"/>
<hit index="25" value="4"/>
<hit index="26" value="4"/>
<hit index="27" value="4"/>
<hit index="28" value="8"/>
<hit index="29" value="4"/>
<hit index="30" value="4"/>
<hit index="31" value="4"/>
<hit index="32" value="8"/>
<hit index="33" value="4"/>
<hit index="40" value="4"/>
<hit index="41" value="4"/>
<hit index="42" value="4"/>
<hit index="43" value="8"/>
<hit index="44" value="4"/>
<hit index="51" value="4"/>
<hit index="52" value="2"/>
<hit index="55" value="4"/>
<hit index="56" value="4"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="16" total="22" coveredRatio="0.72727272727272729"/>
</method>
<chunk hits="4" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0001" domain="userortestcode"><source><![CDATA[if (visitor == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("visitor");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="4" offset="0018" domain="userortestcode"><source><![CDATA[visitor.PerformBefore(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            
            //Wildcard
            ]]></source>
</chunk>
<chunk hits="12" offset="0020" domain="userortestcode"><source><![CDATA[if (m_item is Wildcard)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0035" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0036" domain="userortestcode"><source><![CDATA[if (visitor is MSqlServerTailor)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0046" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[  /*Added by Kunal*/
                    ]]></source>
</chunk>
<chunk hits="2" offset="0047" domain="userortestcode"><source><![CDATA[MSqlServerTailor trailor = visitor as MSqlServerTailor;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="004e" domain="userortestcode"><source><![CDATA[if (trailor.queryParts.ParsingState == ParsingState.COLUMNS)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="0063" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="0064" domain="userortestcode"><source><![CDATA[trailor.queryParts.IsSelectAll = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        //Add all columns
                    ]]></source>
</chunk>
<chunk hits="6" offset="0071" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="6" offset="0072" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0073" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="8" offset="0074" domain="userortestcode"><source><![CDATA[m_item.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            

            ]]></source>
</chunk>
<chunk hits="12" offset="0081" domain="userortestcode"><source><![CDATA[visitor.PerformOnAlias(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="12" offset="0089" domain="userortestcode"><source><![CDATA[if (m_alias != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0096" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0097" domain="userortestcode"><source><![CDATA[m_alias.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00a4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="4" offset="00a5" domain="userortestcode"><source><![CDATA[visitor.PerformAfter(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="12" offset="00ad" domain="userortestcode"><source><![CDATA[if (m_next != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00ba" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00bb" domain="userortestcode"><source><![CDATA[m_next.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00c8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="00c9" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion
    }
}
]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MacroScopeCE\Identifier.cs" renderPrefix="s11"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text.RegularExpressions;

namespace MacroScope
{
    /// <summary>
    /// A simple name, optionally quoted.
    /// </summary>
    public sealed class Identifier : INode
    {
        #region Constants

        private const char NOQUOTE = '0';

        private static readonly Dictionary<string, int> m_reservedWords;

        #endregion

        #region Fields

        private string m_identifier;

        #endregion

        #region Constructors

        static Identifier()
        {
	    // SQL 92
            string[] reserved = { "ABSOLUTE", "ACTION", "ADD", "ALL",
        		"ALLOCATE", "ALTER", "AND", "ANY", "ARE", "AS", "ASC",
		        "ASSERTION", "AT", "AUTHORIZATION", "AVG", "BEGIN",
        		"BETWEEN", "BIT", "BIT_LENGTH", "BOTH", "BY", "CASCADE",
        		"CASCADED", "CASE", "CAST", "CATALOG", "CHAR",
		        "CHARACTER", "CHAR_LENGTH", "CHARACTER_LENGTH", "CHECK",
        		"CLOSE", "COALESCE", "COLLATE", "COLLATION", "COLUMN",
		        "COMMIT", "CONNECT", "CONNECTION", "CONSTRAINT",
        		"CONSTRAINTS", "CONTINUE", "CONVERT", "CORRESPONDING",
		        "COUNT", "CREATE", "CROSS", "CURRENT", "CURRENT_DATE",
        		"CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER",
		        "CURSOR", "DATE", "DAY", "DEALLOCATE", "DEC", "DECIMAL",
        		"DECLARE", "DEFAULT", "DEFERRABLE", "DEFERRED", "DELETE",
		        "DESC", "DESCRIBE", "DESCRIPTOR", "DIAGNOSTICS",
        		"DISCONNECT", "DISTINCT", "DOMAIN", "DOUBLE", "DROP",
		        "ELSE", "END", "END-EXEC", "ESCAPE", "EXCEPT", "EXCEPTION",
        		"EXEC", "EXECUTE", "EXISTS", "EXTERNAL", "EXTRACT", "FALSE",
		        "FETCH", "FIRST", "FLOAT", "FOR", "FOREIGN", "FOUND", "FROM",
        		"FULL", "GET", "GLOBAL", "GO", "GOTO", "GRANT", "GROUP",
		        "HAVING", "HOUR", "IDENTITY", "IMMEDIATE", "IN", "INDICATOR",
        		"INITIALLY", "INNER", "INPUT", "INSENSITIVE", "INSERT",
		        "INT", "INTEGER", "INTERSECT", "INTERVAL", "INTO", "IS",
        		"ISOLATION", "JOIN", "KEY", "LANGUAGE", "LAST", "LEADING",
		        "LEFT", "LEVEL", "LIKE", "LOCAL", "LOWER", "MATCH", "MAX",
        		"MIN", "MINUTE", "MODULE", "MONTH", "NAMES", "NATIONAL",
		        "NATURAL", "NCHAR", "NEXT", "NO", "NOT", "NULL", "NULLIF",
        		"NUMERIC", "OCTET_LENGTH", "OF", "ON", "ONLY", "OPEN",
		        "OPTION", "OR", "ORDER", "OUTER", "OUTPUT", "OVERLAPS", "PAD",
        		"PARTIAL", "POSITION", "PRECISION", "PREPARE", "PRESERVE",
		        "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURE", "PUBLIC",
        		"READ", "REAL", "REFERENCES", "RELATIVE", "RESTRICT",
		        "REVOKE", "RIGHT", "ROLLBACK", "ROWS", "SCHEMA", "SCROLL",
        		"SECOND", "SECTION", "SELECT", "SESSION", "SESSION_USER",
		        "SET", "SIZE", "SMALLINT", "SOME", "SPACE", "SQL", "SQLCODE",
        		"SQLERROR", "SQLSTATE", "SUBSTRING", "SUM", "SYSTEM_USER",
		        "TABLE", "TEMPORARY", "THEN", "TIME", "TIMESTAMP",
        		"TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TO", "TRAILING",
		        "TRANSACTION", "TRANSLATE", "TRANSLATION", "TRIM", "TRUE",
        		"UNION", "UNIQUE", "UNKNOWN", "UPDATE", "UPPER", "USAGE",
		        "USER", "USING", "VALUE", "VALUES", "VARCHAR", "VARYING",
        		"VIEW", "WHEN", "WHENEVER", "WHERE", "WITH", "WORK", "WRITE",
		        "YEAR", "ZONE" };

            m_reservedWords = new Dictionary<string, int>();
            for (int i = 0; i < reserved.Length; ++i)
            {
                m_reservedWords.Add(reserved[i], 1);
            }
        }

        ]]></source>
</chunk>
<method name=".ctor" namespace="MacroScope" type="MacroScope.Identifier" typeName="Identifier" token="60002d3" module="MacroScope.dll"><hits><hit index="0" value="3"/>
<hit index="1" value="3"/>
<hit index="2" value="3"/>
<hit index="8" value="3"/>
<hit index="9" value="3"/>
<hit index="10" value="3"/>
<hit index="11" value="6"/>
<hit index="17" value="3"/>
<hit index="18" value="3"/>
<hit index="19" value="3"/>
<hit index="20" value="3"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="5" total="9" coveredRatio="0.55555555555555558"/>
</method>
<chunk hits="3" offset="0000" domain="userortestcode"><source><![CDATA[public Identifier(string identifier)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="0008" domain="userortestcode"><source><![CDATA[if (identifier == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0013" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0014" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("identifier");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="3" offset="001f" domain="userortestcode"><source><![CDATA[if (identifier.Equals(""))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0031" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0032" domain="userortestcode"><source><![CDATA[throw new ArgumentException("Empty identifier.", "identifier");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="3" offset="0042" domain="userortestcode"><source><![CDATA[m_identifier = identifier;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="6" offset="0049" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion

        #region Properties

        /// <summary>
        /// The name, as currently quoted (never null).
        /// </summary>
        public string ID
        {
            get ]]></source>
</chunk>
<method name="get_ID" namespace="MacroScope" type="MacroScope.Identifier" typeName="Identifier" token="60002d4" module="MacroScope.dll"><hits><hit index="0" value="11"/>
<hit index="1" value="11"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="11" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="11" offset="0001" domain="userortestcode"><source><![CDATA[return m_identifier;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="11" offset="000a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        #endregion

        #region Quoting

        public void NormalizeQuotes(char openQuote)
        {
            char closeQuote = GetCloseQuote(openQuote);
            if (closeQuote == NOQUOTE)
            {
                string message = string.Format("Invalid opening quote '{0}'.",
                    openQuote);
                throw new ArgumentException(message, "openQuote");
            }

            string unquoted = Unquote(m_identifier);
            Match match = Regex.Match(unquoted, "^[a-z][a-z0-9_]*$",
                RegexOptions.IgnoreCase);
            if (match.Success &&
                !m_reservedWords.ContainsKey(unquoted.ToUpper()))
            {
                m_identifier = unquoted;
            }
            else
            {
                if (openQuote != m_identifier[0])
                {
                    string pattern = string.Format("{0}", closeQuote);
                    string replacement = string.Format("{0}{0}", closeQuote);
                    string inner = Regex.Replace(unquoted, pattern, replacement);
                    m_identifier = string.Format("{0}{1}{2}", openQuote, inner, closeQuote);
                }
            }
        }

        #endregion

        #region Value semantics

        public override string ToString()
        {
            return m_identifier;
        }

        public static string Canonicalize(string identifier)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException("identifier");
            }

            return Unquote(identifier.ToLower());
        }

        static char GetCloseQuote(char openQuote)
        {
            switch (openQuote)
            {
                case '[':
                    return ']';

                case '"':
                case '`':
                    return openQuote;

                default:
                    return NOQUOTE;
            }
        }

        public static string Unquote(string identifier)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException("identifier");
            }

            int l = identifier.Length;
            if (l < 2)
            {
                return identifier;
            }

            char openQuote = identifier[0];
            char closeQuote = GetCloseQuote(openQuote);
            if (closeQuote == NOQUOTE)
            {
                return identifier;
            }

            if (identifier[l - 1] != closeQuote)
            {
                string message = string.Format("Identifier \"{0}\" isn't quoted.",
                    identifier);
                throw new ArgumentException(message);
            }

            string p = identifier.Substring(1, l - 2);
            Debug.Assert(p != null);

            string v;
            if (openQuote == '`')
            {
                if (p.IndexOf('`') >= 0)
                {
                    throw new Exception("Backquotes cannot be quoted.");
                }

                v = p;
            }
            else
            {
                string pattern = string.Format("{0}{0}", closeQuote);
                string replacement = string.Format("{0}", closeQuote);
                v = Regex.Replace(p, pattern, replacement);
                Debug.Assert(v != null);
            }

            return v;
        }

        #endregion

        #region INode Members

        public INode Clone()
        {
            return new Identifier(m_identifier);
        }

        public void Traverse(IVisitor visitor)
        ]]></source>
</chunk>
<method name="Traverse" namespace="MacroScope" type="MacroScope.Identifier" typeName="Identifier" token="60002db" module="MacroScope.dll"><hits><hit index="0" value="3"/>
<hit index="6" value="3"/>
<hit index="7" value="3"/>
<hit index="8" value="3"/>
<hit index="9" value="6"/>
<hit index="10" value="3"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="5" coveredRatio="0.6"/>
</method>
<chunk hits="3" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="0001" domain="userortestcode"><source><![CDATA[if (visitor == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("visitor");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }
            //Console.WriteLine("Table : " + this.ID);
            ]]></source>
</chunk>
<chunk hits="3" offset="0018" domain="userortestcode"><source><![CDATA[visitor.Perform(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="9" offset="0020" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion
    }
}
]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MacroScopeCE\DbObject.cs" renderPrefix="s12"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;

namespace MacroScope
{
    /// <summary>
    /// Represents (the name of) a relational database object.
    /// </summary>
    public sealed class DbObject : INode, IComparable 
    {
        #region Fields

        private readonly Identifier m_identifier;

        private DbObject m_next;

        #endregion

        #region Constructor

        /// <summary>
        /// Constructs an instance from a single identifier.
        /// </summary>
        ]]></source>
</chunk>
<method name=".ctor" namespace="MacroScope" type="MacroScope.DbObject" typeName="DbObject" token="60003bb" module="MacroScope.dll"><hits><hit index="0" value="3"/>
<hit index="1" value="3"/>
<hit index="2" value="3"/>
<hit index="8" value="3"/>
<hit index="9" value="3"/>
<hit index="10" value="3"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="5" coveredRatio="0.6"/>
</method>
<chunk hits="3" offset="0000" domain="userortestcode"><source><![CDATA[public DbObject(Identifier identifier)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="0008" domain="userortestcode"><source><![CDATA[if (identifier == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0013" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0014" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("identifier");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="3" offset="001f" domain="userortestcode"><source><![CDATA[m_identifier = identifier;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="6" offset="0026" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion

        #region Properties

        /// <summary>
        /// The object identifier (never null).
        /// </summary>
        /// <remarks>
        /// Just the first segment - doesn't include potential next parts.
        /// </remarks>
        public Identifier Identifier
        {
            get ]]></source>
</chunk>
<method name="get_Identifier" namespace="MacroScope" type="MacroScope.DbObject" typeName="DbObject" token="60003bc" module="MacroScope.dll"><hits><hit index="0" value="5"/>
<hit index="1" value="5"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="5" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="5" offset="0001" domain="userortestcode"><source><![CDATA[return m_identifier;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="5" offset="000a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        public bool HasNext
        {
            get
            ]]></source>
</chunk>
<method name="get_HasNext" namespace="MacroScope" type="MacroScope.DbObject" typeName="DbObject" token="60003bd" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[return m_next != null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0010" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        public DbObject Next
        {
            get
            {
                return m_next;
            }
        }

        #endregion

        #region INode Members

        public INode Clone()
        {
            DbObject dbObject = new DbObject((Identifier)(m_identifier.Clone()));

            if (m_next != null)
            {
                dbObject.Add((DbObject)(m_next.Clone()));
            }

            return dbObject;
        }

        public void Traverse(IVisitor visitor)
        ]]></source>
</chunk>
<method name="Traverse" namespace="MacroScope" type="MacroScope.DbObject" typeName="DbObject" token="60003c0" module="MacroScope.dll"><hits><hit index="0" value="3"/>
<hit index="6" value="3"/>
<hit index="7" value="3"/>
<hit index="8" value="3"/>
<hit index="9" value="6"/>
<hit index="10" value="3"/>
<hit index="11" value="3"/>
<hit index="12" value="3"/>
<hit index="13" value="3"/>
<hit index="14" value="6"/>
<hit index="15" value="3"/>
<hit index="16" value="3"/>
<hit index="17" value="3"/>
<hit index="18" value="6"/>
<hit index="19" value="3"/>
<hit index="26" value="3"/>
<hit index="27" value="3"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="6" total="10" coveredRatio="0.6"/>
</method>
<chunk hits="3" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="0001" domain="userortestcode"><source><![CDATA[if (visitor == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("visitor");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="3" offset="0018" domain="userortestcode"><source><![CDATA[visitor.PerformBefore(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="9" offset="0020" domain="userortestcode"><source><![CDATA[m_identifier.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="9" offset="002d" domain="userortestcode"><source><![CDATA[visitor.PerformAfter(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="9" offset="0035" domain="userortestcode"><source><![CDATA[if (m_next != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0042" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0043" domain="userortestcode"><source><![CDATA[m_next.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0050" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="0051" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion

        #region Build methods

        public void Add(DbObject tail)
        {
            if (tail == null)
            {
                throw new ArgumentNullException("tail");
            }

            if (m_next == null)
            {
                m_next = tail;
            }
            else
            {
                m_next.Add(tail);
            }
        }

        #endregion

        #region Value semantics

        public override bool Equals(object obj)
        {
            DbObject other = obj as DbObject;
            if (other == null)
            {
                return false;
            }

            string left = Identifier.Canonicalize(Identifier.ID);
            string right = Identifier.Canonicalize(other.Identifier.ID);

            if (!left.Equals(right))
            {
                return false;
            }

            if (m_next != null)
            {
                DbObject tail = other.Next;
                if (tail == null)
                {
                    return false;
                }
                else
                {
                    return m_next.Equals(tail);
                }
            }
            else
            {
                return !other.HasNext;
            }
        }

        public override int GetHashCode()
        {
            string left = Identifier.Canonicalize(m_identifier.ID);
            int hash = left.GetHashCode();
            if (m_next != null)
            {
                hash ^= m_next.GetHashCode();
            }

            return hash;
        }

        public int CompareTo(object obj)
        {
            DbObject other = obj as DbObject;
            if (other == null)
            {
                throw new ArgumentException("Object is not a DbObject.", "obj");
            }

            string left = Identifier.Canonicalize(Identifier.ID);
            string right = Identifier.Canonicalize(other.Identifier.ID);

            int cmp = left.CompareTo(right);
            if (cmp != 0)
            {
                return cmp;
            }

            if (m_next != null)
            {
                DbObject tail = other.Next;
                if (tail == null)
                {
                    return 1;
                }
                else
                {
                    return m_next.CompareTo(tail);
                }
            }
            else
            {
                return other.HasNext ? -1 : 0;
            }
        }

        #endregion
    }
}
]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MacroScopeCE\Table.cs" renderPrefix="s13"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;

namespace MacroScope
{
    /// <summary>
    /// Represents a table (possibly a derived table), with optional alias and join.
    /// </summary>
    public sealed class Table : INode
    {
        #region Fields

        private readonly INode m_source;

        private Join m_join;

        private IExpression m_joinCondition;

        private Identifier m_alias;

        private Table m_next;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a table object.
        /// </summary>
        /// <param name="source">
        /// Table source - normally just a column name
        /// (i.e. an instance of <see cref="DbObject"/>), but can also be
        /// a group of joined tables, or a <see cref="QueryExpression"/>.
        /// </param>
        ]]></source>
</chunk>
<method name=".ctor" namespace="MacroScope" type="MacroScope.Table" typeName="Table" token="60002a9" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
<hit index="10" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="5" coveredRatio="0.6"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[public Table(INode source)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0008" domain="userortestcode"><source><![CDATA[if (source == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0013" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0014" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("source");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="001f" domain="userortestcode"><source><![CDATA[m_source = source;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0026" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion

        #region Properties

        /// <summary>
        /// The table source (never null).
        /// </summary>
        public INode Source
        {
            get { return m_source; }
        }

        public Join JoinType
        {
            get
            {
                return m_join;
            }

            set
            {
                m_join = value;
            }
        }

        public IExpression JoinCondition
        {
            get
            {
                return m_joinCondition;
            }

            set
            {
                if (value == null)
                {
                    throw new ArgumentNullException("value");
                }

                m_joinCondition = value;
            }
        }

        public Identifier Alias
        {
            get
            {
                return m_alias;
            }

            set
            {
                if (value == null)
                {
                    throw new ArgumentException("Invalid alias.");
                }

                m_alias = value;
            }
        }

        public bool HasNext
        {
            get
            {
                return m_next != null;
            }
        }

        public Table Next
        {
            get
            {
                return m_next;
            }

            set
            {
                m_next = value;
            }
        }

        #endregion

        #region Build methods

        public void Add(Table tail)
        {
            if (tail == null)
            {
                throw new ArgumentNullException("tail");
            }

            if ((tail.JoinType != Join.Cross) &&
                (tail.JoinCondition == null))
            {
                throw new InvalidOperationException("Cannot join a table without join condition.");
            }

            if (m_next == null)
            {
                m_next = tail;
            }
            else
            {
                m_next.Add(tail);
            }
        }

        #endregion

        #region INode Members

        public INode Clone()
        {
            Table table = new Table(m_source.Clone());

            if (m_join != null)
            {
                table.JoinType = (Join)(m_join.Clone());
            }

            if (m_joinCondition != null)
            {
                table.JoinCondition = (IExpression)(m_joinCondition.Clone());
            }

            if (m_alias != null)
            {
                table.Alias = (Identifier)(m_alias.Clone());
            }

            if (m_next != null)
            {
                table.Add((Table)(m_next.Clone()));
            }

            return table;
        }

        public void Traverse(IVisitor visitor)
        ]]></source>
</chunk>
<method name="Traverse" namespace="MacroScope" type="MacroScope.Table" typeName="Table" token="60002b6" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="4"/>
<hit index="10" value="2"/>
<hit index="17" value="2"/>
<hit index="18" value="2"/>
<hit index="19" value="2"/>
<hit index="20" value="4"/>
<hit index="21" value="2"/>
<hit index="22" value="2"/>
<hit index="23" value="2"/>
<hit index="24" value="2"/>
<hit index="25" value="2"/>
<hit index="26" value="2"/>
<hit index="27" value="2"/>
<hit index="28" value="2"/>
<hit index="29" value="4"/>
<hit index="30" value="2"/>
<hit index="31" value="2"/>
<hit index="32" value="2"/>
<hit index="33" value="2"/>
<hit index="34" value="2"/>
<hit index="35" value="4"/>
<hit index="36" value="2"/>
<hit index="37" value="2"/>
<hit index="38" value="2"/>
<hit index="39" value="2"/>
<hit index="40" value="2"/>
<hit index="41" value="4"/>
<hit index="42" value="2"/>
<hit index="43" value="2"/>
<hit index="44" value="2"/>
<hit index="45" value="4"/>
<hit index="46" value="2"/>
<hit index="47" value="2"/>
<hit index="48" value="2"/>
<hit index="49" value="4"/>
<hit index="50" value="2"/>
<hit index="51" value="2"/>
<hit index="52" value="2"/>
<hit index="53" value="2"/>
<hit index="54" value="4"/>
<hit index="55" value="2"/>
<hit index="56" value="2"/>
<hit index="57" value="2"/>
<hit index="58" value="4"/>
<hit index="59" value="2"/>
<hit index="66" value="2"/>
<hit index="67" value="2"/>
<hit index="68" value="2"/>
<hit index="69" value="4"/>
<hit index="70" value="2"/>
<hit index="83" value="2"/>
<hit index="84" value="2"/>
<hit index="85" value="2"/>
<hit index="86" value="4"/>
<hit index="87" value="2"/>
<hit index="94" value="2"/>
<hit index="95" value="2"/>
<hit index="96" value="2"/>
<hit index="97" value="4"/>
<hit index="98" value="2"/>
<hit index="99" value="2"/>
<hit index="102" value="2"/>
<hit index="103" value="2"/>
<hit index="105" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="23" total="35" coveredRatio="0.65714285714285714"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[if (visitor == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("visitor");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="0018" domain="userortestcode"><source><![CDATA[visitor.PerformBefore(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="6" offset="0020" domain="userortestcode"><source><![CDATA[if (m_join != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="002d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="002e" domain="userortestcode"><source><![CDATA[m_join.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="003b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="2" offset="003c" domain="userortestcode"><source><![CDATA[visitor.PerformOnSource(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="6" offset="0044" domain="userortestcode"><source><![CDATA[Debug.Assert(m_source != null);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0056" domain="userortestcode"><source><![CDATA[if (visitor is MSqlServerTailor)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0066" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[  /*Added by Kunal*/

                ]]></source>
</chunk>
<chunk hits="2" offset="0067" domain="userortestcode"><source><![CDATA[MSqlServerTailor trailor = visitor as MSqlServerTailor;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="006e" domain="userortestcode"><source><![CDATA[if (trailor.queryParts.ParsingState == ParsingState.TABLE)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0083" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    //trailor.queryParts.ParsingState = ParsingState.WHERE;
                    ]]></source>
</chunk>
<chunk hits="2" offset="0084" domain="userortestcode"><source><![CDATA[trailor.queryParts.TableNames.Add(((DbObject)m_source).Identifier.ID);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="6" offset="00aa" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="6" offset="00ab" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="00ac" domain="userortestcode"><source><![CDATA[m_source.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="6" offset="00b9" domain="userortestcode"><source><![CDATA[visitor.PerformOnAlias(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="00c1" domain="userortestcode"><source><![CDATA[if (m_alias != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00ce" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00cf" domain="userortestcode"><source><![CDATA[m_alias.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00dc" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="2" offset="00dd" domain="userortestcode"><source><![CDATA[visitor.PerformBeforeCondition(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="6" offset="00e5" domain="userortestcode"><source><![CDATA[if (m_joinCondition != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00f2" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00f3" domain="userortestcode"><source><![CDATA[if (visitor is MSqlServerTailor)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0103" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[  /*Added by Kunal*/
                    ]]></source>
</chunk>
<chunk hits="0" offset="0104" domain="userortestcode"><source><![CDATA[MSqlServerTailor trailor = visitor as MSqlServerTailor;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="010b" domain="userortestcode"><source><![CDATA[trailor.queryParts.joinCondition = (Expression) m_joinCondition;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0121" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0122" domain="userortestcode"><source><![CDATA[m_joinCondition.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="0" offset="012f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="2" offset="0130" domain="userortestcode"><source><![CDATA[visitor.PerformAfterCondition(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0138" domain="userortestcode"><source><![CDATA[if (m_next != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0145" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0146" domain="userortestcode"><source><![CDATA[m_next.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0153" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="2" offset="0154" domain="userortestcode"><source><![CDATA[visitor.PerformAfter(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="6" offset="015c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion
    }
}
]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MacroScopeCE\IntegerValue.cs" renderPrefix="s14"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Diagnostics;
using System.Globalization;

namespace MacroScope
{
    /// <summary>
    /// Represents an integer constant.
    /// </summary>
    public sealed class IntegerValue : INode
    {
        #region Fields

        /// <summary>
        /// AddressSearch needs higher range than int.
        /// </summary>
        private readonly decimal m_value;

        #endregion

        #region Constructor

        ]]></source>
</chunk>
<method name=".ctor" namespace="MacroScope" type="MacroScope.IntegerValue" typeName="IntegerValue" token="6000287" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[public IntegerValue(int v)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0008" domain="userortestcode"><source><![CDATA[m_value = v;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0014" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public IntegerValue(decimal v)
        {
            m_value = v;
        }

        #endregion

        #region Properties

        public decimal Value
        {
            get ]]></source>
</chunk>
<method name="get_Value" namespace="MacroScope" type="MacroScope.IntegerValue" typeName="IntegerValue" token="6000289" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[return m_value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="000a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        } 
        
        #endregion

        #region INode Members

        public INode Clone()
        {
            return new IntegerValue(m_value);
        }

        public void Traverse(IVisitor visitor)
        ]]></source>
</chunk>
<method name="Traverse" namespace="MacroScope" type="MacroScope.IntegerValue" typeName="IntegerValue" token="600028b" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="4"/>
<hit index="10" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="5" coveredRatio="0.6"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[if (visitor == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("visitor");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="0018" domain="userortestcode"><source><![CDATA[visitor.Perform(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="6" offset="0020" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion

        #region Input parsing

        public static int ParseHex(string s)
        {
            if (s == null)
            {
                throw new ArgumentNullException("s");
            }

            string t = s.ToLower(CultureInfo.InvariantCulture);
            if (!t.StartsWith("0x"))
            {
                string message = string.Format("\"{0}\" is not a hexadecimal number.",
                    s);
                throw new Exception(message);
            }

            int n = 0;
            int i = 2;
            while (i < t.Length)
            {
                if (n > int.MaxValue / 16)
                {
                    string message = string.Format("\"{0}\" overflows.",
                        s);
                    throw new Exception(message);
                }

                int d = ParseHexDigit(t[i]);
                if (d < 0)
                {
                    string message = string.Format("\"{0}\" isn't a hexadecimal number.",
                        s);
                    throw new Exception(message);
                }

                n = 16 * n + d;
                ++i;
            }

            return n;
        }

        static int ParseHexDigit(char d)
        {
            if ((d >= '0') && (d <= '9'))
            {
                return d - '0';
            }
            else if ((d >= 'a') && (d <= 'f'))
            {
                return 10 + d - 'a';
            }
            else
            {
                return -1;
            }
        }

        #endregion
    }
}
]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MacroScopeCE\Expression.cs" renderPrefix="s15"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Diagnostics;
using System.Text;

namespace MacroScope
{
    /// <summary>
    /// Represents an SQL expression - both arithmetic and logical.
    /// </summary>
    /// <remarks>
    /// Since expressions are built in recursive steps, some states
    /// of Expression objects do not correspond to valid expressions.
    /// Such objects cannot be used until fully constructed.
    /// </remarks>
    public sealed class Expression : IExpression
    {
        #region Fields

        private INode m_left;

        private ExpressionOperator m_operator;

        private INode m_right;

        #endregion

        #region Constructors

        /// <summary>
        /// Creates an empty (not fully constructed) expression.
        /// </summary>
        ]]></source>
</chunk>
<method name=".ctor" namespace="MacroScope" type="MacroScope.Expression" typeName="Expression" token="600029e" module="MacroScope.dll"><hits><hit index="0" value="4"/>
<hit index="1" value="4"/>
<hit index="2" value="4"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<chunk hits="4" offset="0000" domain="userortestcode"><source><![CDATA[public Expression()]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0008" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        /// <summary>
        /// Creates a fully constructed binary expression.
        /// </summary>
        /// <param name="left">
        /// The left sub-expression. Must not be null.
        /// </param>
        /// <param name="op">
        /// The operator. Must be a non-null binary operator.
        /// </param>
        /// <param name="right">
        /// The right sub-expression. Must not be null.
        /// </param>
        ]]></source>
</chunk>
<method name=".ctor" namespace="MacroScope" type="MacroScope.Expression" typeName="Expression" token="600029f" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="18" value="2"/>
<hit index="19" value="2"/>
<hit index="20" value="2"/>
<hit index="21" value="2"/>
<hit index="22" value="2"/>
<hit index="23" value="2"/>
<hit index="24" value="2"/>
<hit index="25" value="2"/>
<hit index="26" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="5" total="11" coveredRatio="0.45454545454545453"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[public Expression(INode left, ExpressionOperator op, INode right)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0008" domain="userortestcode"><source><![CDATA[if (left == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0013" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0014" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("left");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="001f" domain="userortestcode"><source><![CDATA[if (op == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="002a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="002b" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("op");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="0036" domain="userortestcode"><source><![CDATA[if (right == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0041" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0042" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("right");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="004d" domain="userortestcode"><source><![CDATA[m_left = left;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0054" domain="userortestcode"><source><![CDATA[m_operator = op;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="005b" domain="userortestcode"><source><![CDATA[m_right = right;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0062" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion

        #region Properties

        /// <summary>
        /// Sub-expression of this instance, or null.
        /// </summary>
        /// <remarks>
        /// Fully-constructed expressions must have either left or
        /// <see cref="Right"/> sub-expression (or both), depending
        /// on their <see cref="Operator"/>.
        /// </remarks>
        public INode Left
        {
            get ]]></source>
</chunk>
<method name="get_Left" namespace="MacroScope" type="MacroScope.Expression" typeName="Expression" token="60002a0" module="MacroScope.dll"><hits><hit index="0" value="58"/>
<hit index="1" value="58"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="58" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="58" offset="0001" domain="userortestcode"><source><![CDATA[return m_left;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="58" offset="000a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            set { m_left = value; }
        }

        /// <summary>
        /// An operator instance (if this expression is an operator expression),
        /// or null.
        /// </summary>
        /// <remarks>
        /// Expressions don't have to have an operator, but fully-constructed
        /// expressions without an operator must have exactly one sub-expression
        /// (either <see cref="Left"/> or <see cref="Right"/>). Valid operator
        /// is interpreted as a prefix operator of objects with <see cref="Right"/>
        /// but not <see cref="Left"/> sub-expression, as a suffix operator
        /// of objects with <see cref="Left"/> but not <see cref="Right"/> sub-expression
        /// and as a binary operator of objects with both <see cref="Left"/>
        /// and <see cref="Right"/> sub-expressions.
        /// </remarks>
        public ExpressionOperator Operator
        {
            get ]]></source>
</chunk>
<method name="get_Operator" namespace="MacroScope" type="MacroScope.Expression" typeName="Expression" token="60002a2" module="MacroScope.dll"><hits><hit index="0" value="52"/>
<hit index="1" value="52"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="52" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="52" offset="0001" domain="userortestcode"><source><![CDATA[return m_operator;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="52" offset="000a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            set { m_operator = value; }
        }

        /// <summary>
        /// Sub-expression of this instance, or null.
        /// </summary>
        /// <remarks>
        /// Fully-constructed expressions must have either <see cref="Left"/> or
        /// right sub-expression (or both), depending on their <see cref="Operator"/>.
        /// </remarks>
        public INode Right
        {
            get ]]></source>
</chunk>
<method name="get_Right" namespace="MacroScope" type="MacroScope.Expression" typeName="Expression" token="60002a4" module="MacroScope.dll"><hits><hit index="0" value="69"/>
<hit index="1" value="69"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="69" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="69" offset="0001" domain="userortestcode"><source><![CDATA[return m_right;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="69" offset="000a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            set ]]></source>
</chunk>
<method name="set_Right" namespace="MacroScope" type="MacroScope.Expression" typeName="Expression" token="60002a5" module="MacroScope.dll"><hits><hit index="0" value="4"/>
<hit index="1" value="4"/>
<hit index="2" value="4"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="4" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="4" offset="0001" domain="userortestcode"><source><![CDATA[m_right = value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="8" offset="0008" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        /// <summary>
        /// Should use parentheses when part of a larger expression?
        /// </summary>
        /// <remarks>
        /// Only valid for fully-constructed expressions.
        /// </remarks>
        public bool IsComposed
        {
            get
            {
                if (m_operator != null)
                {
                    return true;
                }

                if (m_left != null)
                {
                    IExpression left = m_left as IExpression;
                    if (left != null)
                    {
                        return left.IsComposed;
                    }
                }

                IExpression right = m_right as IExpression;
                if (right != null)
                {
                    return right.IsComposed;
                }

                return false;
            }
        }

        #endregion

        #region INode Members

        public INode Clone()
        {
            Expression expression = new Expression();

            if (m_left != null)
            {
                expression.Left = m_left.Clone();
            }

            if (m_operator != null)
            {
                expression.Operator = (ExpressionOperator)(m_operator.Clone());
            }

            if (m_right != null)
            {
                expression.Right = m_right.Clone();
            }

            return expression;
        }

        public void Traverse(IVisitor visitor)
        ]]></source>
</chunk>
<method name="Traverse" namespace="MacroScope" type="MacroScope.Expression" typeName="Expression" token="60002a8" module="MacroScope.dll"><hits><hit index="0" value="6"/>
<hit index="6" value="6"/>
<hit index="7" value="6"/>
<hit index="8" value="6"/>
<hit index="9" value="12"/>
<hit index="10" value="6"/>
<hit index="11" value="6"/>
<hit index="12" value="6"/>
<hit index="13" value="6"/>
<hit index="14" value="6"/>
<hit index="15" value="12"/>
<hit index="16" value="2"/>
<hit index="17" value="2"/>
<hit index="18" value="2"/>
<hit index="19" value="2"/>
<hit index="20" value="2"/>
<hit index="21" value="2"/>
<hit index="22" value="2"/>
<hit index="23" value="2"/>
<hit index="24" value="4"/>
<hit index="25" value="6"/>
<hit index="26" value="4"/>
<hit index="27" value="4"/>
<hit index="28" value="4"/>
<hit index="29" value="4"/>
<hit index="35" value="4"/>
<hit index="36" value="4"/>
<hit index="37" value="4"/>
<hit index="38" value="4"/>
<hit index="39" value="4"/>
<hit index="40" value="8"/>
<hit index="230" value="4"/>
<hit index="231" value="4"/>
<hit index="232" value="4"/>
<hit index="233" value="4"/>
<hit index="234" value="8"/>
<hit index="246" value="2"/>
<hit index="272" value="2"/>
<hit index="292" value="2"/>
<hit index="293" value="2"/>
<hit index="294" value="2"/>
<hit index="295" value="2"/>
<hit index="296" value="4"/>
<hit index="297" value="2"/>
<hit index="298" value="2"/>
<hit index="299" value="2"/>
<hit index="300" value="4"/>
<hit index="301" value="2"/>
<hit index="302" value="2"/>
<hit index="303" value="2"/>
<hit index="304" value="2"/>
<hit index="305" value="2"/>
<hit index="306" value="2"/>
<hit index="307" value="4"/>
<hit index="308" value="2"/>
<hit index="309" value="2"/>
<hit index="310" value="2"/>
<hit index="311" value="4"/>
<hit index="312" value="2"/>
<hit index="313" value="2"/>
<hit index="314" value="2"/>
<hit index="315" value="2"/>
<hit index="316" value="2"/>
<hit index="317" value="2"/>
<hit index="318" value="4"/>
<hit index="319" value="6"/>
<hit index="320" value="6"/>
<hit index="321" value="6"/>
<hit index="322" value="12"/>
<hit index="323" value="6"/>
<hit index="325" value="4"/>
<hit index="326" value="2"/>
<hit index="328" value="4"/>
<hit index="330" value="4"/>
<hit index="342" value="2"/>
<hit index="344" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="30" total="116" coveredRatio="0.25862068965517243"/>
</method>
<chunk hits="6" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0001" domain="userortestcode"><source><![CDATA[if (visitor == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000f" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("visitor");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="6" offset="001a" domain="userortestcode"><source><![CDATA[visitor.PerformBefore(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="18" offset="0022" domain="userortestcode"><source><![CDATA[if (visitor is MSqlServerTailor)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0034" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[  /*Added by Kunal*/

                ]]></source>
</chunk>
<chunk hits="6" offset="0035" domain="userortestcode"><source><![CDATA[MSqlServerTailor trailor = visitor as MSqlServerTailor;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="6" offset="003c" domain="userortestcode"><source><![CDATA[if (trailor.queryParts.ParsingState == ParsingState.WHERECOND)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0053" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="0054" domain="userortestcode"><source><![CDATA[trailor.queryParts.whereCondition = this;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="4" offset="0060" domain="userortestcode"><source><![CDATA[trailor.queryParts.ParsingState = ParsingState.DONE;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="6" offset="006d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="10" offset="006e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="10" offset="006f" domain="userortestcode"><source><![CDATA[if (m_operator == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0084" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="4" offset="0085" domain="userortestcode"><source><![CDATA[if (m_left == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="4" offset="009a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="4" offset="009b" domain="userortestcode"><source><![CDATA[if (m_right == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="00ad" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="00ae" domain="userortestcode"><source><![CDATA[throw new InvalidOperationException(
                            "Expression not set.");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    }
                    else
                    ]]></source>
</chunk>
<chunk hits="4" offset="00b9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="4" offset="00ba" domain="userortestcode"><source><![CDATA[if (visitor is MSqlServerTailor)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="4" offset="00cf" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[  /*Added by Kunal*/

                            ]]></source>
</chunk>
<chunk hits="4" offset="00d0" domain="userortestcode"><source><![CDATA[MSqlServerTailor trailor = visitor as MSqlServerTailor;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="4" offset="00d7" domain="userortestcode"><source><![CDATA[if (trailor.queryParts.ParsingState == ParsingState.COLUMNS)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="00f1" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="00f2" domain="userortestcode"><source><![CDATA[if (m_right is FunctionCall)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="010c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="010d" domain="userortestcode"><source><![CDATA[String name = ((FunctionCall)m_right).Name;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="011e" domain="userortestcode"><source><![CDATA[trailor.queryParts.IsFucntionCall = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="012b" domain="userortestcode"><source><![CDATA[if (name.ToLower().Equals("count"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0144" domain="userortestcode"><source><![CDATA[trailor.queryParts.FunctionType = Function.COUNT;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    else ]]></source>
</chunk>
<chunk hits="0" offset="0156" domain="userortestcode"><source><![CDATA[if (name.ToLower().Equals("sum"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="016f" domain="userortestcode"><source><![CDATA[trailor.queryParts.FunctionType = Function.SUM;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    else ]]></source>
</chunk>
<chunk hits="0" offset="0181" domain="userortestcode"><source><![CDATA[if (name.ToLower().Equals("avg"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="019a" domain="userortestcode"><source><![CDATA[trailor.queryParts.FunctionType = Function.AVG;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    else ]]></source>
</chunk>
<chunk hits="0" offset="01ac" domain="userortestcode"><source><![CDATA[if (name.ToLower().Equals("first"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="01c5" domain="userortestcode"><source><![CDATA[trailor.queryParts.FunctionType = Function.FIRST;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    else ]]></source>
</chunk>
<chunk hits="0" offset="01d7" domain="userortestcode"><source><![CDATA[if (name.ToLower().Equals("last"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="01f0" domain="userortestcode"><source><![CDATA[trailor.queryParts.FunctionType = Function.LAST;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    else ]]></source>
</chunk>
<chunk hits="0" offset="01ff" domain="userortestcode"><source><![CDATA[if (name.ToLower().Equals("max"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0218" domain="userortestcode"><source><![CDATA[trailor.queryParts.FunctionType = Function.MIN;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    else ]]></source>
</chunk>
<chunk hits="0" offset="0227" domain="userortestcode"><source><![CDATA[if (name.ToLower().Equals("min"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0240" domain="userortestcode"><source><![CDATA[trailor.queryParts.FunctionType = Function.MAX;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    else
                                        ]]></source>
</chunk>
<chunk hits="0" offset="024f" domain="userortestcode"><source><![CDATA[throw new NotImplementedException("Function " + name + " not implemented.");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                                ]]></source>
</chunk>
<chunk hits="0" offset="0265" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else ]]></source>
</chunk>
<chunk hits="0" offset="026b" domain="userortestcode"><source><![CDATA[if (m_right is DbObject)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0285" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0286" domain="userortestcode"><source><![CDATA[DbObject column = (DbObject)m_right;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0292" domain="userortestcode"><source><![CDATA[if (column.HasNext)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="02a1" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="02a2" domain="userortestcode"><source><![CDATA[String tableName = column.Identifier.ID;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="02ae" domain="userortestcode"><source><![CDATA[String name = column.Next.Identifier.ID;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="02bf" domain="userortestcode"><source><![CDATA[trailor.queryParts.selectedColumns.Add(name);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="02d1" domain="userortestcode"><source><![CDATA[trailor.queryParts.selectedColumnFrom.Add(tableName);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="02e3" domain="userortestcode"><source><![CDATA[trailor.queryParts.selectedColumns.Add(name + "_TAINT");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="02ff" domain="userortestcode"><source><![CDATA[trailor.queryParts.selectedColumnFrom.Add(tableName);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0311" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    else
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0314" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0315" domain="userortestcode"><source><![CDATA[trailor.queryParts.selectedColumns.Add(column.Identifier.ID);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0331" domain="userortestcode"><source><![CDATA[trailor.queryParts.selectedColumns.Add(column.Identifier.ID + "_TAINT");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0357" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        
                                ]]></source>
</chunk>
<chunk hits="0" offset="0358" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                //trailor.queryParts.ParsingState = ParsingState.FROM;
                            ]]></source>
</chunk>
<chunk hits="0" offset="0359" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                        ]]></source>
</chunk>
<chunk hits="4" offset="035a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="4" offset="035b" domain="userortestcode"><source><![CDATA[m_right.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="12" offset="0368" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="12" offset="0369" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else
                ]]></source>
</chunk>
<chunk hits="0" offset="036c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="036d" domain="userortestcode"><source><![CDATA[if (m_right == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="037f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0380" domain="userortestcode"><source><![CDATA[m_left.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="038d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else
                    ]]></source>
</chunk>
<chunk hits="0" offset="0390" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0391" domain="userortestcode"><source><![CDATA[throw new InvalidOperationException(
                            "Binary expression must have an operator.");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    }
                ]]></source>
</chunk>
<chunk hits="0" offset="039c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="12" offset="039d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else
            ]]></source>
</chunk>
<chunk hits="2" offset="03a3" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="03a4" domain="userortestcode"><source><![CDATA[if (m_left == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="03b6" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="03b7" domain="userortestcode"><source><![CDATA[if (m_right == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="03c9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="03ca" domain="userortestcode"><source><![CDATA[throw new InvalidOperationException(
                            "Operator expression must have an argument.");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    }
                    else
                    ]]></source>
</chunk>
<chunk hits="0" offset="03d5" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="03d6" domain="userortestcode"><source><![CDATA[visitor.PerformBeforePrefixOp(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="03de" domain="userortestcode"><source><![CDATA[m_operator.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="03eb" domain="userortestcode"><source><![CDATA[visitor.PerformAfterPrefixOp(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="03f3" domain="userortestcode"><source><![CDATA[m_right.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0400" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0401" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else
                ]]></source>
</chunk>
<chunk hits="2" offset="0407" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="0408" domain="userortestcode"><source><![CDATA[if (m_right == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="041a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="041b" domain="userortestcode"><source><![CDATA[m_left.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0428" domain="userortestcode"><source><![CDATA[visitor.PerformBeforePostfixOp(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0430" domain="userortestcode"><source><![CDATA[m_operator.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="043d" domain="userortestcode"><source><![CDATA[visitor.PerformAfterPostfixOp(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0445" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else
                    ]]></source>
</chunk>
<chunk hits="2" offset="0448" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="0449" domain="userortestcode"><source><![CDATA[m_left.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="6" offset="0456" domain="userortestcode"><source><![CDATA[visitor.PerformBeforeBinaryOp(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                        ]]></source>
</chunk>
<chunk hits="6" offset="045e" domain="userortestcode"><source><![CDATA[if (m_operator != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ // it wasn't null, at the start
                                                // of this method, but some visitors
                                                // (i.e. MTailor) like to reset them...
                        ]]></source>
</chunk>
<chunk hits="2" offset="046d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="2" offset="046e" domain="userortestcode"><source><![CDATA[m_operator.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="6" offset="047b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                        ]]></source>
</chunk>
<chunk hits="6" offset="047c" domain="userortestcode"><source><![CDATA[visitor.PerformAfterBinaryOp(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                        ]]></source>
</chunk>
<chunk hits="6" offset="0484" domain="userortestcode"><source><![CDATA[if (m_right != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="0493" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="2" offset="0494" domain="userortestcode"><source><![CDATA[m_right.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="6" offset="04a1" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="6" offset="04a2" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="6" offset="04a3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="04a4" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="18" offset="04a5" domain="userortestcode"><source><![CDATA[visitor.PerformAfter(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="18" offset="04ad" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion
    }
}
]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MacroScopeCE\ExpressionOperator.cs" renderPrefix="s16"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;

namespace MacroScope
{
    /// <summary>
    /// SQL operators - both unary and binary.
    /// </summary>
    public sealed class ExpressionOperator : INode
    {
        #region Fields

        private readonly string m_value;

        #endregion

        #region Well-known operators

        private static readonly ExpressionOperator m_plus = new ExpressionOperator("+");

        private static readonly ExpressionOperator m_minus = new ExpressionOperator("-");

        private static readonly ExpressionOperator m_mult = new ExpressionOperator("*");

        private static readonly ExpressionOperator m_div = new ExpressionOperator("/");

        private static readonly ExpressionOperator m_mod = new ExpressionOperator("%");

        private static readonly ExpressionOperator m_mAccessMod = new ExpressionOperator("MOD");

        private static readonly ExpressionOperator m_equal = new ExpressionOperator("=");

        private static readonly ExpressionOperator m_notEqual = new ExpressionOperator("<>");

        private static readonly ExpressionOperator m_lessOrEqual = new ExpressionOperator("<=");

        private static readonly ExpressionOperator m_less = new ExpressionOperator("<");

        private static readonly ExpressionOperator m_greaterOrEqual = new ExpressionOperator(">=");

        private static readonly ExpressionOperator m_greater = new ExpressionOperator(">");

        private static readonly ExpressionOperator m_or = new ExpressionOperator("OR");

        private static readonly ExpressionOperator m_and = new ExpressionOperator("AND");

        private static readonly ExpressionOperator m_not = new ExpressionOperator("NOT");

        private static readonly ExpressionOperator m_isNull = new ExpressionOperator("IS NULL");

        private static readonly ExpressionOperator m_isNotNull = new ExpressionOperator("IS NOT NULL");

        private static readonly ExpressionOperator m_like = new ExpressionOperator("LIKE");

        private static readonly ExpressionOperator m_notLike = new ExpressionOperator("NOT LIKE");

        private static readonly ExpressionOperator m_between = new ExpressionOperator("BETWEEN");

        private static readonly ExpressionOperator m_in = new ExpressionOperator("IN");

        private static readonly ExpressionOperator m_notIn = new ExpressionOperator("NOT IN");

        private static readonly ExpressionOperator m_exists = new ExpressionOperator("EXISTS");

        private static readonly ExpressionOperator m_strConcat = new ExpressionOperator("||");

        #endregion

        #region Constructor

        private ExpressionOperator(string v)
        {
            if (v == null)
            {
                throw new ArgumentNullException("v");
            }

            m_value = v;
        }

        #endregion

        #region Properties

        public static ExpressionOperator Plus
        {
            get { return ExpressionOperator.m_plus; }
        }

        public static ExpressionOperator Minus
        {
            get { return ExpressionOperator.m_minus; }
        }

        public static ExpressionOperator Mult
        {
            get { return ExpressionOperator.m_mult; }
        }

        public static ExpressionOperator Div
        {
            get { return ExpressionOperator.m_div; }
        }

        public static ExpressionOperator Mod
        {
            get ]]></source>
</chunk>
<method name="get_Mod" namespace="MacroScope" type="MacroScope.ExpressionOperator" typeName="ExpressionOperator" token="60000cc" module="MacroScope.dll"><hits><hit index="0" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[return ExpressionOperator.m_mod;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0009" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        public static ExpressionOperator MAccessMod
        {
            get ]]></source>
</chunk>
<method name="get_MAccessMod" namespace="MacroScope" type="MacroScope.ExpressionOperator" typeName="ExpressionOperator" token="60000cd" module="MacroScope.dll"><hits><hit index="0" value="8"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="8" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="8" offset="0001" domain="userortestcode"><source><![CDATA[return ExpressionOperator.m_mAccessMod;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="8" offset="0009" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        public static ExpressionOperator Equal
        {
            get ]]></source>
</chunk>
<method name="get_Equal" namespace="MacroScope" type="MacroScope.ExpressionOperator" typeName="ExpressionOperator" token="60000ce" module="MacroScope.dll"><hits><hit index="0" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[return ExpressionOperator.m_equal;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0009" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        public static ExpressionOperator NotEqual
        {
            get { return ExpressionOperator.m_notEqual; }
        }

        public static ExpressionOperator LessOrEqual
        {
            get ]]></source>
</chunk>
<method name="get_LessOrEqual" namespace="MacroScope" type="MacroScope.ExpressionOperator" typeName="ExpressionOperator" token="60000d0" module="MacroScope.dll"><hits><hit index="0" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[return ExpressionOperator.m_lessOrEqual;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0009" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        public static ExpressionOperator Less
        {
            get ]]></source>
</chunk>
<method name="get_Less" namespace="MacroScope" type="MacroScope.ExpressionOperator" typeName="ExpressionOperator" token="60000d1" module="MacroScope.dll"><hits><hit index="0" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[return ExpressionOperator.m_less;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0009" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        public static ExpressionOperator GreaterOrEqual
        {
            get ]]></source>
</chunk>
<method name="get_GreaterOrEqual" namespace="MacroScope" type="MacroScope.ExpressionOperator" typeName="ExpressionOperator" token="60000d2" module="MacroScope.dll"><hits><hit index="0" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[return ExpressionOperator.m_greaterOrEqual;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0009" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        public static ExpressionOperator Greater
        {
            get ]]></source>
</chunk>
<method name="get_Greater" namespace="MacroScope" type="MacroScope.ExpressionOperator" typeName="ExpressionOperator" token="60000d3" module="MacroScope.dll"><hits><hit index="0" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[return ExpressionOperator.m_greater;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0009" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        public static ExpressionOperator Or
        {
            get { return ExpressionOperator.m_or; }
        }

        public static ExpressionOperator And
        {
            get ]]></source>
</chunk>
<method name="get_And" namespace="MacroScope" type="MacroScope.ExpressionOperator" typeName="ExpressionOperator" token="60000d5" module="MacroScope.dll"><hits><hit index="0" value="6"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="6" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="6" offset="0001" domain="userortestcode"><source><![CDATA[return ExpressionOperator.m_and;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="6" offset="0009" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        public static ExpressionOperator Not
        {
            get { return ExpressionOperator.m_not; }
        }

        public static ExpressionOperator IsNull
        {
            get { return ExpressionOperator.m_isNull; }
        }

        public static ExpressionOperator IsNotNull
        {
            get { return ExpressionOperator.m_isNotNull; }
        }

        public static ExpressionOperator Like
        {
            get { return ExpressionOperator.m_like; }
        }

        public static ExpressionOperator NotLike
        {
            get { return ExpressionOperator.m_notLike; }
        }

        public static ExpressionOperator Between
        {
            get { return ExpressionOperator.m_between; }
        }

        public static ExpressionOperator In
        {
            get { return ExpressionOperator.m_in; }
        }

        public static ExpressionOperator NotIn
        {
            get { return ExpressionOperator.m_notIn; }
        }

        public static ExpressionOperator Exists
        {
            get { return ExpressionOperator.m_exists; }
        }

        public static ExpressionOperator StrConcat
        {
            get ]]></source>
</chunk>
<method name="get_StrConcat" namespace="MacroScope" type="MacroScope.ExpressionOperator" typeName="ExpressionOperator" token="60000df" module="MacroScope.dll"><hits><hit index="0" value="8"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="8" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="8" offset="0001" domain="userortestcode"><source><![CDATA[return ExpressionOperator.m_strConcat;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="8" offset="0009" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        public string Value
        {
            get ]]></source>
</chunk>
<method name="get_Value" namespace="MacroScope" type="MacroScope.ExpressionOperator" typeName="ExpressionOperator" token="60000e0" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[return m_value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="000a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        #endregion

        #region INode Members

        public INode Clone()
        {
            return this;
        }

        public void Traverse(IVisitor visitor)
        ]]></source>
</chunk>
<method name="Traverse" namespace="MacroScope" type="MacroScope.ExpressionOperator" typeName="ExpressionOperator" token="60000e2" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="4"/>
<hit index="10" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="5" coveredRatio="0.6"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[if (visitor == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("visitor");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="0018" domain="userortestcode"><source><![CDATA[visitor.Perform(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="6" offset="0020" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion
    }
}
]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MacroScopeCE\SelectStatement.cs" renderPrefix="s17"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Collections.Generic;
using System.Text;

namespace MacroScope
{
    /// <summary>
    /// SQL SELECT statement.
    /// </summary>
    public sealed class SelectStatement : IStatement
    {
        #region Fields

        private readonly QueryExpression m_queryExpression;

        #endregion

        #region Constructor

        ]]></source>
</chunk>
<method name=".ctor" namespace="MacroScope" type="MacroScope.SelectStatement" typeName="SelectStatement" token="6000083" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
<hit index="10" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="5" coveredRatio="0.6"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[public SelectStatement(QueryExpression queryExpression)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0008" domain="userortestcode"><source><![CDATA[if (queryExpression == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0013" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0014" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("queryExpression");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="001f" domain="userortestcode"><source><![CDATA[m_queryExpression = queryExpression;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0026" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion

        #region Accessors

        /// <summary>
        /// The single SELECT clause of this statement.
        /// </summary>
        /// <remarks>
        /// Throws when called on a statement with multiple SELECT clauses.
        /// </remarks>
        public QueryExpression SingleQueryExpression
        {
            get
            {
                if (m_queryExpression.HasNext)
                {
                    throw new InvalidOperationException("Query has more than 1 SELECT caluse.");
                }

                return m_queryExpression;
            }
        }

        public OrderExpression OrderBy
        {
            get
            {
                return m_queryExpression.GetOrderBy();
            }

            set
            {
                m_queryExpression.SetOrderBy(value);
            }
        }

        public IList<QueryExpression> GetQueryExpressions()
        {
            return m_queryExpression.GetUnion();
        }

        #endregion

        #region INode Members

        public INode Clone()
        {
            return new SelectStatement((QueryExpression)(m_queryExpression.Clone()));
        }

        public void Traverse(IVisitor visitor)
        ]]></source>
</chunk>
<method name="Traverse" namespace="MacroScope" type="MacroScope.SelectStatement" typeName="SelectStatement" token="6000089" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
<hit index="10" value="2"/>
<hit index="11" value="4"/>
<hit index="12" value="2"/>
<hit index="13" value="2"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="16" value="4"/>
<hit index="17" value="2"/>
<hit index="18" value="2"/>
<hit index="19" value="2"/>
<hit index="20" value="2"/>
<hit index="21" value="4"/>
<hit index="28" value="2"/>
<hit index="29" value="2"/>
<hit index="30" value="2"/>
<hit index="31" value="2"/>
<hit index="32" value="4"/>
<hit index="33" value="2"/>
<hit index="34" value="2"/>
<hit index="35" value="2"/>
<hit index="36" value="4"/>
<hit index="37" value="2"/>
<hit index="38" value="2"/>
<hit index="39" value="2"/>
<hit index="40" value="2"/>
<hit index="41" value="4"/>
<hit index="42" value="2"/>
<hit index="43" value="2"/>
<hit index="44" value="2"/>
<hit index="45" value="4"/>
<hit index="46" value="2"/>
<hit index="48" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="12" total="16" coveredRatio="0.75"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[if (visitor == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("visitor");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="0018" domain="userortestcode"><source><![CDATA[if (visitor is MSqlServerTailor)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0028" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[  /*Added by Kunal*/
                ]]></source>
</chunk>
<chunk hits="2" offset="0029" domain="userortestcode"><source><![CDATA[MSqlServerTailor trailor = visitor as MSqlServerTailor;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0030" domain="userortestcode"><source><![CDATA[trailor.queryParts.Type = QueryStatementType.SELECT;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="6" offset="003d" domain="userortestcode"><source><![CDATA[trailor.queryParts.ParsingState = ParsingState.COLUMNS;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="6" offset="004a" domain="userortestcode"><source><![CDATA[if(m_queryExpression.Distinct)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="005c" domain="userortestcode"><source><![CDATA[trailor.queryParts.Distinct = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else
                    ]]></source>
</chunk>
<chunk hits="2" offset="006b" domain="userortestcode"><source><![CDATA[trailor.queryParts.Distinct = false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0078" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="6" offset="0079" domain="userortestcode"><source><![CDATA[visitor.PerformBefore(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0081" domain="userortestcode"><source><![CDATA[m_queryExpression.Traverse(visitor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="008e" domain="userortestcode"><source><![CDATA[visitor.PerformAfter(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="6" offset="0096" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion
    }
}
]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MacroScopeCE\MSqlServerTailor.cs" renderPrefix="s18"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;

namespace MacroScope
{
    /// <summary>
    /// SQL for MS SQL Server.
    /// </summary>
    public class MSqlServerTailor : MTailor
    {
        //Fields Added by Kunal
        public QueryParts queryParts;

        #region Constructor

        ]]></source>
</chunk>
<method name=".ctor" namespace="MacroScope" type="MacroScope.MSqlServerTailor" typeName="MSqlServerTailor" token="60003e0" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="4" total="4" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[public MSqlServerTailor():
            base(ExpressionOperator.Mod)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="000d" domain="userortestcode"><source><![CDATA[queryParts = new QueryParts();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0018" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion

        #region IVisitor Members

        public override void PerformBefore(Expression node)
        ]]></source>
</chunk>
<method name="PerformBefore" namespace="MacroScope" type="MacroScope.MSqlServerTailor" typeName="MSqlServerTailor" token="60003e1" module="MacroScope.dll"><hits><hit index="0" value="6"/>
<hit index="6" value="6"/>
<hit index="7" value="6"/>
<hit index="8" value="6"/>
<hit index="9" value="6"/>
<hit index="10" value="6"/>
<hit index="11" value="6"/>
<hit index="12" value="6"/>
<hit index="13" value="6"/>
<hit index="14" value="6"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="6" total="8" coveredRatio="0.75"/>
</method>
<chunk hits="6" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0001" domain="userortestcode"><source><![CDATA[if (node == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("node");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="6" offset="0018" domain="userortestcode"><source><![CDATA[ReplaceOperator(node);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0020" domain="userortestcode"><source><![CDATA[ReplaceDate(node);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0027" domain="userortestcode"><source><![CDATA[ReplaceSysdate(node);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="6" offset="002e" domain="userortestcode"><source><![CDATA[base.PerformBefore(node);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="6" offset="0036" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public override void Perform(ExpressionOperator node)
        ]]></source>
</chunk>
<method name="Perform" namespace="MacroScope" type="MacroScope.MSqlServerTailor" typeName="MSqlServerTailor" token="60003e2" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
<hit index="15" value="2"/>
<hit index="16" value="2"/>
<hit index="22" value="2"/>
<hit index="23" value="2"/>
<hit index="24" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="7" total="13" coveredRatio="0.53846153846153844"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[if (node == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("node");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="0018" domain="userortestcode"><source><![CDATA[base.Perform(node);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="2" offset="0020" domain="userortestcode"><source><![CDATA[if (node == ExpressionOperator.MAccessMod)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="002f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0030" domain="userortestcode"><source><![CDATA[throw new InvalidOperationException("Modulo operator not in expression.");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }
            else ]]></source>
</chunk>
<chunk hits="2" offset="003b" domain="userortestcode"><source><![CDATA[if (node == ExpressionOperator.StrConcat)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="004a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="004b" domain="userortestcode"><source><![CDATA[throw new InvalidOperationException(
                    "String concatenation operator not in expression.");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }
        ]]></source>
</chunk>
<chunk hits="2" offset="0056" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public override void PerformBefore(FunctionCall node)
        {
            if (node == null)
            {
                throw new ArgumentNullException("node");
            }

            string name = node.Name.ToLower();
            if (name.Equals(TailorUtil.NOW))
            {
                node.Name = TailorUtil.GETDATE.ToUpper();
            }

            base.PerformBefore(node);
        }

        public override void Perform(Identifier node)
        ]]></source>
</chunk>
<method name="Perform" namespace="MacroScope" type="MacroScope.MSqlServerTailor" typeName="MSqlServerTailor" token="60003e4" module="MacroScope.dll"><hits><hit index="0" value="3"/>
<hit index="6" value="3"/>
<hit index="7" value="3"/>
<hit index="8" value="3"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="5" coveredRatio="0.6"/>
</method>
<chunk hits="3" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="0001" domain="userortestcode"><source><![CDATA[if (node == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("node");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="3" offset="0018" domain="userortestcode"><source><![CDATA[base.Perform(node);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            //node.NormalizeQuotes('[');
        ]]></source>
</chunk>
<chunk hits="3" offset="0020" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public override void Perform(LiteralDateTime node)
        {
            if (node == null)
            {
                throw new ArgumentNullException("node");
            }

            base.Perform(node);

            // SQL Server 2005 does, but we want to be more general than that
            throw new InvalidOperationException(
                "MS SQL Server does not necessarily have datetime literals.");
        }

        public override void PerformBefore(SwitchFunction node)
        {
            if (node == null)
            {
                throw new ArgumentNullException("node");
            }

            base.PerformBefore(node);

            throw new InvalidOperationException(
                "Switch not in expression.");
        }

        #endregion

        #region Transformations

        protected override FunctionCall GetDateaddCall(DateTimeUnit unit,
            INode number, INode date)
        {
            if (unit == null)
            {
                throw new ArgumentNullException("unit");
            }

            if (number == null)
            {
                throw new ArgumentNullException("number");
            }

            if (date == null)
            {
                throw new ArgumentNullException("date");
            }

            if (unit == DateTimeUnit.Month)
            {
                throw new ArgumentNullException("Standard month arithmetic not supported.");
            }

            FunctionCall dateadd = new FunctionCall(TailorUtil.DATEADD.ToUpper());
            dateadd.ExpressionArguments = new ExpressionItem(unit);
            dateadd.ExpressionArguments.Add(new ExpressionItem(number));
            dateadd.ExpressionArguments.Add(new ExpressionItem(date));
            return dateadd;
        }

        protected override INode CompleteSubstring(FunctionCall substringCall)
        {
            if (substringCall == null)
            {
                throw new ArgumentNullException("substringCall");
            }

            if (TailorUtil.HasNullArgument(substringCall))
            {
                return NullValue.Value;
            }

            ExpressionItem val = substringCall.ExpressionArguments;
            if (val == null)
            {
                throw new InvalidOperationException("No parameters for SUBSTRING.");
            }

            ExpressionItem start = val.Next;
            if (start == null)
            {
                throw new InvalidOperationException("Too few parameters for SUBSTRING.");
            }

            ExpressionItem len = start.Next;

            // before adding len to the list
            Expression when = MakeNotNullCheck(substringCall.ExpressionArguments);

            if (len == null)
            {
                IExpression argument = TailorUtil.MakeLenArg(start.Expression,
                    val.Expression, "LEN");
                start.Add(new ExpressionItem(argument));
            }
            else
            {
                if (len.Next != null)
                {
                    throw new InvalidOperationException("Too many parameters for SUBSTRING.");
                }
            }

            if (when != null)
            {
                CaseExpression caseExpression = new CaseExpression();
                caseExpression.Alternatives = new CaseAlternative(when, substringCall);

                Expression elseExpr = new Expression();
                elseExpr.Left = NullValue.Value;
                caseExpression.Else = elseExpr;

                return caseExpression;
            }
            else
            {
                return substringCall;
            }
        }

        protected override FunctionCall ReplaceExtractFunction(
            ExtractFunction extractFunction)
        {
            if (extractFunction == null)
            {
                throw new ArgumentNullException("extractFunction");
            }

            FunctionCall functionCall = new FunctionCall("DATEPART");
            functionCall.ExpressionArguments = new ExpressionItem(extractFunction.FieldSpec);
            functionCall.ExpressionArguments.Add(new ExpressionItem(extractFunction.Source));
            return functionCall;
        }

        void ReplaceOperator(Expression node)
        ]]></source>
</chunk>
<method name="ReplaceOperator" namespace="MacroScope" type="MacroScope.MSqlServerTailor" typeName="MSqlServerTailor" token="60003ea" module="MacroScope.dll"><hits><hit index="0" value="6"/>
<hit index="6" value="6"/>
<hit index="7" value="6"/>
<hit index="8" value="6"/>
<hit index="9" value="12"/>
<hit index="10" value="6"/>
<hit index="11" value="6"/>
<hit index="19" value="6"/>
<hit index="20" value="6"/>
<hit index="21" value="6"/>
<hit index="22" value="12"/>
<hit index="23" value="6"/>
<hit index="24" value="6"/>
<hit index="32" value="6"/>
<hit index="33" value="6"/>
<hit index="34" value="6"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="8" total="16" coveredRatio="0.5"/>
</method>
<chunk hits="6" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0001" domain="userortestcode"><source><![CDATA[if (node == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("node");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="6" offset="0018" domain="userortestcode"><source><![CDATA[if (node.Operator == ExpressionOperator.MAccessMod)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="002c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="002d" domain="userortestcode"><source><![CDATA[node.Operator = ExpressionOperator.Mod;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0039" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="6" offset="003c" domain="userortestcode"><source><![CDATA[if (node.Operator == ExpressionOperator.StrConcat)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0050" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0051" domain="userortestcode"><source><![CDATA[node.Operator = ExpressionOperator.Plus;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="005d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="6" offset="005e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        static void ReplaceDate(Expression node)
        ]]></source>
</chunk>
<method name="ReplaceDate" namespace="MacroScope" type="MacroScope.MSqlServerTailor" typeName="MSqlServerTailor" token="60003eb" module="MacroScope.dll"><hits><hit index="0" value="6"/>
<hit index="6" value="6"/>
<hit index="7" value="6"/>
<hit index="8" value="6"/>
<hit index="9" value="12"/>
<hit index="17" value="6"/>
<hit index="18" value="6"/>
<hit index="19" value="6"/>
<hit index="20" value="12"/>
<hit index="28" value="6"/>
<hit index="29" value="6"/>
<hit index="30" value="6"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="6" total="14" coveredRatio="0.42857142857142855"/>
</method>
<chunk hits="6" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0001" domain="userortestcode"><source><![CDATA[if (node == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("node");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="6" offset="0018" domain="userortestcode"><source><![CDATA[LiteralDateTime left = node.Left as LiteralDateTime;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="18" offset="0024" domain="userortestcode"><source><![CDATA[if (left != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="002c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="002d" domain="userortestcode"><source><![CDATA[node.Left = MakeConvert(left);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="003a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="6" offset="003b" domain="userortestcode"><source><![CDATA[LiteralDateTime right = node.Right as LiteralDateTime;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="18" offset="0047" domain="userortestcode"><source><![CDATA[if (right != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="004f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0050" domain="userortestcode"><source><![CDATA[node.Right = MakeConvert(right);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="005d" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="6" offset="005e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        static void ReplaceSysdate(Expression node)
        ]]></source>
</chunk>
<method name="ReplaceSysdate" namespace="MacroScope" type="MacroScope.MSqlServerTailor" typeName="MSqlServerTailor" token="60003ec" module="MacroScope.dll"><hits><hit index="0" value="6"/>
<hit index="6" value="6"/>
<hit index="7" value="6"/>
<hit index="8" value="6"/>
<hit index="9" value="12"/>
<hit index="10" value="6"/>
<hit index="11" value="6"/>
<hit index="22" value="6"/>
<hit index="23" value="6"/>
<hit index="24" value="6"/>
<hit index="25" value="12"/>
<hit index="26" value="6"/>
<hit index="27" value="6"/>
<hit index="38" value="6"/>
<hit index="39" value="6"/>
<hit index="40" value="6"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="8" total="18" coveredRatio="0.44444444444444442"/>
</method>
<chunk hits="6" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0001" domain="userortestcode"><source><![CDATA[if (node == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("node");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="6" offset="0018" domain="userortestcode"><source><![CDATA[if (TailorUtil.IsSysdateTerm(node.Left))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="002a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="002b" domain="userortestcode"><source><![CDATA[node.Left = new FunctionCall(TailorUtil.GETDATE.ToUpper());]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0041" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="6" offset="0042" domain="userortestcode"><source><![CDATA[if (TailorUtil.IsSysdateTerm(node.Right))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0054" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0055" domain="userortestcode"><source><![CDATA[node.Right = new FunctionCall(TailorUtil.GETDATE.ToUpper());]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="006b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="6" offset="006c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        static Expression MakeNotNullCheck(ExpressionItem list)
        {
            Expression top = null;

            while (list != null)
            {
                INode term = TailorUtil.GetTerm(list.Expression);
                if (!(term is IntegerValue) && !(term is StringValue))
                {
                    Expression leaf = new Expression();
                    leaf.Left = term.Clone();
                    leaf.Operator = ExpressionOperator.IsNotNull;

                    if (top == null)
                    {
                        top = leaf;
                    }
                    else
                    {
                        top = new Expression(top, ExpressionOperator.Or, leaf);
                    }
                }

                list = list.Next;
            }

            return top;
        }

        static FunctionCall MakeConvert(LiteralDateTime literalDateTime)
        {
            if (literalDateTime == null)
            {
                throw new ArgumentNullException("literalDateTime");
            }

            DateTime dateTime = literalDateTime.DateTime;
            string literal = dateTime.ToString("yyyy-MM-dd HH:mm:ss");

            FunctionCall functionCall = new FunctionCall(
                TailorUtil.CONVERT.ToUpper());

            // Well, technically it's a type name, not a database ID, but
            // this is what the parser builds from "CONVERT(datetime)"
            // and it should serve just as well...
            functionCall.ExpressionArguments = new ExpressionItem(
                new DbObject(new Identifier("datetime")));

            functionCall.ExpressionArguments.Add(
                TailorUtil.MakeLiteralString(literal));
            functionCall.ExpressionArguments.Add(
                TailorUtil.MakeLiteralInteger(120));

            return functionCall;
        }

        #endregion
    }
}
]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MacroScopeCE\MTailor.cs" renderPrefix="s19"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Collections.Generic;
using System.Diagnostics;

namespace MacroScope
{
    /// <summary>
    /// Common transformations for <see cref="MSqlServerTailor"/>
    /// and <see cref="MAccessTailor"/>.
    /// </summary>
    public abstract class MTailor : PassiveVisitor
    {
        #region Fields

        private readonly Dictionary<IExpression, QueryExpression> m_backref;

        private IExpression m_currentWhere;

        private Namer m_namer;

        private readonly ExpressionOperator m_modOp;

        private readonly List<Expression> m_expressionStack;

        #endregion

        #region Constructor

        ]]></source>
</chunk>
<method name=".ctor" namespace="MacroScope" type="MacroScope.MTailor" typeName="MTailor" token="6000228" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="8" value="2"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="2"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="16" value="2"/>
<hit index="17" value="2"/>
<hit index="19" value="2"/>
<hit index="20" value="2"/>
<hit index="21" value="2"/>
<hit index="22" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="5" total="7" coveredRatio="0.7142857142857143"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[public MTailor(ExpressionOperator modOp)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0008" domain="userortestcode"><source><![CDATA[if (modOp == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0013" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0014" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("modOp");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="001f" domain="userortestcode"><source><![CDATA[m_backref = new Dictionary<IExpression, QueryExpression>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="002a" domain="userortestcode"><source><![CDATA[m_currentWhere = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0031" domain="userortestcode"><source><![CDATA[m_modOp = modOp;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0038" domain="userortestcode"><source><![CDATA[m_expressionStack = new List<Expression>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0043" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion

        #region Properties

        public Namer Namer
        {
            get
            ]]></source>
</chunk>
<method name="get_Namer" namespace="MacroScope" type="MacroScope.MTailor" typeName="MTailor" token="6000229" module="MacroScope.dll"><hits><hit index="0" value="6"/>
<hit index="1" value="6"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="6"/>
<hit index="9" value="4"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="4" total="4" coveredRatio="1"/>
</method>
<chunk hits="6" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="6" offset="0001" domain="userortestcode"><source><![CDATA[if (m_namer == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0011" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="0012" domain="userortestcode"><source><![CDATA[m_namer = new Namer('@');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="4" offset="001f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                ]]></source>
</chunk>
<chunk hits="8" offset="0020" domain="userortestcode"><source><![CDATA[return m_namer;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0029" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            set
            {
                if (value == null)
                {
                    throw new ArgumentNullException("value");
                }

                m_namer = value;
            }
        }

        #endregion

        #region IVisitor Members

        public override void PerformAfter(ExpressionItem node)
        {
            if (node == null)
            {
                throw new ArgumentNullException("node");
            }

            // this isn't called in all the places where it should be,
            // but apart from being inefficient, extra nodes in
            // the stack probably shouldn't cause any trouble...
            m_expressionStack.Clear();
        }

        public override void Perform(Identifier node)
        ]]></source>
</chunk>
<method name="Perform" namespace="MacroScope" type="MacroScope.MTailor" typeName="MTailor" token="600022c" module="MacroScope.dll"><hits><hit index="0" value="3"/>
<hit index="6" value="3"/>
<hit index="7" value="3"/>
<hit index="13" value="3"/>
<hit index="14" value="3"/>
<hit index="20" value="3"/>
<hit index="21" value="3"/>
<hit index="22" value="3"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="6" total="12" coveredRatio="0.5"/>
</method>
<chunk hits="3" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="0001" domain="userortestcode"><source><![CDATA[if (node == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("node");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="3" offset="0018" domain="userortestcode"><source><![CDATA[if (IsRownum(node))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0025" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0026" domain="userortestcode"><source><![CDATA[throw new InvalidOperationException(
                    "MS engines do not have ROWNUM.");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="3" offset="0031" domain="userortestcode"><source><![CDATA[if (TailorUtil.IsSysdate(node))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="003e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="003f" domain="userortestcode"><source><![CDATA[throw new InvalidOperationException(
                    "MS engines do not have SYSDATE.");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }
        ]]></source>
</chunk>
<chunk hits="3" offset="004a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public override void PerformBefore(Expression node)
        ]]></source>
</chunk>
<method name="PerformBefore" namespace="MacroScope" type="MacroScope.MTailor" typeName="MTailor" token="600022d" module="MacroScope.dll"><hits><hit index="0" value="6"/>
<hit index="6" value="6"/>
<hit index="7" value="6"/>
<hit index="8" value="6"/>
<hit index="9" value="6"/>
<hit index="10" value="6"/>
<hit index="11" value="6"/>
<hit index="12" value="6"/>
<hit index="13" value="6"/>
<hit index="14" value="6"/>
<hit index="15" value="12"/>
<hit index="16" value="6"/>
<hit index="17" value="6"/>
<hit index="53" value="6"/>
<hit index="54" value="6"/>
<hit index="55" value="6"/>
<hit index="56" value="12"/>
<hit index="57" value="6"/>
<hit index="58" value="6"/>
<hit index="64" value="6"/>
<hit index="65" value="6"/>
<hit index="66" value="6"/>
<hit index="67" value="12"/>
<hit index="68" value="6"/>
<hit index="69" value="6"/>
<hit index="75" value="6"/>
<hit index="76" value="6"/>
<hit index="77" value="6"/>
<hit index="78" value="6"/>
<hit index="79" value="6"/>
<hit index="80" value="12"/>
<hit index="81" value="6"/>
<hit index="83" value="6"/>
<hit index="86" value="6"/>
<hit index="87" value="6"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="16" total="38" coveredRatio="0.42105263157894735"/>
</method>
<chunk hits="6" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0001" domain="userortestcode"><source><![CDATA[if (node == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("node");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="6" offset="0018" domain="userortestcode"><source><![CDATA[ReplaceSubstring(node);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0020" domain="userortestcode"><source><![CDATA[ReplaceExtract(node);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="6" offset="0028" domain="userortestcode"><source><![CDATA[if ((m_currentWhere != null) &&
                (node.Operator == ExpressionOperator.And))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0047" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0048" domain="userortestcode"><source><![CDATA[int limit = GetRownumExpressionLimit(node.Left);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0054" domain="userortestcode"><source><![CDATA[if (limit > 0)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="005f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0060" domain="userortestcode"><source><![CDATA[node.Operator = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0068" domain="userortestcode"><source><![CDATA[node.Left = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0070" domain="userortestcode"><source><![CDATA[LimitTop(limit);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0078" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else
                ]]></source>
</chunk>
<chunk hits="0" offset="007b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="007c" domain="userortestcode"><source><![CDATA[limit = GetRownumExpressionLimit(node.Right);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0088" domain="userortestcode"><source><![CDATA[if (limit > 0)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0093" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0094" domain="userortestcode"><source><![CDATA[node.Operator = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="009c" domain="userortestcode"><source><![CDATA[node.Right = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="00a4" domain="userortestcode"><source><![CDATA[LimitTop(limit);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="00ac" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00ad" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00ae" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="6" offset="00af" domain="userortestcode"><source><![CDATA[Expression leftMod = GetModCall(node.Left);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="00bc" domain="userortestcode"><source><![CDATA[if (leftMod != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00c4" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00c5" domain="userortestcode"><source><![CDATA[node.Left = leftMod;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00cd" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="6" offset="00ce" domain="userortestcode"><source><![CDATA[Expression rightMod = GetModCall(node.Right);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="00db" domain="userortestcode"><source><![CDATA[if (rightMod != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00e3" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00e4" domain="userortestcode"><source><![CDATA[node.Right = rightMod;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00ec" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="6" offset="00ed" domain="userortestcode"><source><![CDATA[Namer.PerformBefore(node);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[            
        ]]></source>
</chunk>
<chunk hits="18" offset="00fa" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public override void PerformBefore(ExtractFunction node)
        {
            if (node == null)
            {
                throw new ArgumentNullException("node");
            }

            throw new InvalidOperationException("EXTRACT not in expression.");
        }

        public override void PerformBefore(QueryExpression node)
        ]]></source>
</chunk>
<method name="PerformBefore" namespace="MacroScope" type="MacroScope.MTailor" typeName="MTailor" token="600022f" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="4"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="2"/>
<hit index="14" value="2"/>
<hit index="15" value="4"/>
<hit index="21" value="2"/>
<hit index="22" value="2"/>
<hit index="30" value="2"/>
<hit index="31" value="2"/>
<hit index="32" value="2"/>
<hit index="33" value="2"/>
<hit index="34" value="4"/>
<hit index="106" value="2"/>
<hit index="107" value="2"/>
<hit index="108" value="2"/>
<hit index="110" value="2"/>
<hit index="111" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="9" total="51" coveredRatio="0.17647058823529413"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[if (node == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000f" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("node");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="001a" domain="userortestcode"><source><![CDATA[IExpression where = node.Where;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0021" domain="userortestcode"><source><![CDATA[if (where != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="002b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="002c" domain="userortestcode"><source><![CDATA[if (m_backref.ContainsKey(where))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0041" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0042" domain="userortestcode"><source><![CDATA[throw new InvalidOperationException("Tailor can't be re-used.");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                }

                ]]></source>
</chunk>
<chunk hits="2" offset="004d" domain="userortestcode"><source><![CDATA[int limit = GetRownumExpressionLimit(where);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0054" domain="userortestcode"><source><![CDATA[if (limit > 0)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0061" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0062" domain="userortestcode"><source><![CDATA[SetTop(node, limit);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="006a" domain="userortestcode"><source><![CDATA[node.Where = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0072" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else
                ]]></source>
</chunk>
<chunk hits="2" offset="0075" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="0076" domain="userortestcode"><source><![CDATA[m_backref.Add(where, node);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="6" offset="0084" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0085" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else
            ]]></source>
</chunk>
<chunk hits="0" offset="008b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="008c" domain="userortestcode"><source><![CDATA[AliasedItem from = node.From;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0093" domain="userortestcode"><source><![CDATA[if ((from != null) && (from.Alias == null) && !from.HasNext)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00b0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="00b1" domain="userortestcode"><source><![CDATA[Table singleTable = from.Item as Table;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="00bd" domain="userortestcode"><source><![CDATA[if ((singleTable != null) && (singleTable.Alias == null) &&
                        (singleTable.JoinCondition == null) &&
                        (singleTable.JoinType == null) && !singleTable.HasNext)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="00e7" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="00e8" domain="userortestcode"><source><![CDATA[DbObject singleName = TailorUtil.GetTerm(
                            singleTable.Source) as DbObject;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="00fa" domain="userortestcode"><source><![CDATA[if ((singleName != null) && !singleName.HasNext)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="010e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="010f" domain="userortestcode"><source><![CDATA[Identifier identifier = singleName.Identifier;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                            // Not canonicalizing - we're accepting quoted "dual"
                            // as a regular identifier.
                            ]]></source>
</chunk>
<chunk hits="0" offset="0118" domain="userortestcode"><source><![CDATA[if (TailorUtil.DUAL.Equals(
                                identifier.ID.ToLower()))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0137" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0138" domain="userortestcode"><source><![CDATA[node.From = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0140" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0141" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0142" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0143" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0144" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="6" offset="0145" domain="userortestcode"><source><![CDATA[m_currentWhere = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[  // even if node does have WHERE,
                                    // the traversal isn't in it yet
        ]]></source>
</chunk>
<chunk hits="4" offset="014c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public override void PerformBeforeBinaryOp(Expression node)
        ]]></source>
</chunk>
<method name="PerformBeforeBinaryOp" namespace="MacroScope" type="MacroScope.MTailor" typeName="MTailor" token="6000230" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
<hit index="10" value="4"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="2"/>
<hit index="14" value="2"/>
<hit index="15" value="4"/>
<hit index="16" value="2"/>
<hit index="17" value="2"/>
<hit index="18" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="5" total="7" coveredRatio="0.7142857142857143"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[if (node == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("node");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="0018" domain="userortestcode"><source><![CDATA[m_expressionStack.Add(node);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0025" domain="userortestcode"><source><![CDATA[ReplaceIntervals(m_expressionStack.Count - 1);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0039" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public override void PerformOnWhere(QueryExpression node)
        ]]></source>
</chunk>
<method name="PerformOnWhere" namespace="MacroScope" type="MacroScope.MTailor" typeName="MTailor" token="6000231" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="4"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="2"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="16" value="4"/>
<hit index="17" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="4" total="6" coveredRatio="0.66666666666666663"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[if (node == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("node");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="0018" domain="userortestcode"><source><![CDATA[m_currentWhere = node.Where;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            // this isn't called in all the places where it should be,
            // but apart from being inefficient, extra nodes in
            // the stack probably shouldn't cause any trouble...
            ]]></source>
</chunk>
<chunk hits="4" offset="0024" domain="userortestcode"><source><![CDATA[m_expressionStack.Clear();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="6" offset="0030" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public override void PerformOnGroupBy(QueryExpression node)
        ]]></source>
</chunk>
<method name="PerformOnGroupBy" namespace="MacroScope" type="MacroScope.MTailor" typeName="MTailor" token="6000232" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="2" total="4" coveredRatio="0.5"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[if (node == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("node");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="0018" domain="userortestcode"><source><![CDATA[m_currentWhere = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[  // if there are constructions like
                                    // ORDER BY rownum, we're going to fail on them
        ]]></source>
</chunk>
<chunk hits="4" offset="001f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public override void Perform(Variable node)
        {
            if (node == null)
            {
                throw new ArgumentNullException("node");
            }

            node.Prefix = '@';
        }

        #endregion

        #region Transformations

        protected abstract FunctionCall GetDateaddCall(DateTimeUnit unit,
            INode number, INode date);

        protected abstract INode CompleteSubstring(FunctionCall substringCall);

        protected abstract FunctionCall ReplaceExtractFunction(
            ExtractFunction extractFunction);

        void LimitTop(int limit)
        {
            if (limit <= 0)
            {
                throw new ArgumentOutOfRangeException("limit");
            }

            Debug.Assert(m_currentWhere != null);

            if (!m_backref.ContainsKey(m_currentWhere))
            {
                throw new InvalidOperationException("WHERE without SELECT.");
            }

            QueryExpression query = m_backref[m_currentWhere];
            Debug.Assert(query != null);

            SetTop(query, limit);
        }

        static void SetTop(QueryExpression query, int limit)
        {
            if (query.Top == null)
            {
                query.Top = limit;
            }
            else
            {
                query.Top = Math.Min((int)(query.Top), limit);
            }
        }

        void ReplaceSubstring(Expression node)
        ]]></source>
</chunk>
<method name="ReplaceSubstring" namespace="MacroScope" type="MacroScope.MTailor" typeName="MTailor" token="6000239" module="MacroScope.dll"><hits><hit index="0" value="6"/>
<hit index="6" value="6"/>
<hit index="7" value="6"/>
<hit index="8" value="6"/>
<hit index="9" value="12"/>
<hit index="10" value="6"/>
<hit index="11" value="6"/>
<hit index="21" value="6"/>
<hit index="22" value="6"/>
<hit index="23" value="6"/>
<hit index="24" value="12"/>
<hit index="25" value="6"/>
<hit index="26" value="6"/>
<hit index="36" value="6"/>
<hit index="37" value="6"/>
<hit index="38" value="6"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="8" total="16" coveredRatio="0.5"/>
</method>
<chunk hits="6" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0001" domain="userortestcode"><source><![CDATA[if (node == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("node");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="6" offset="0018" domain="userortestcode"><source><![CDATA[FunctionCall leftSubstring = TailorUtil.GetSubstringTerm(node.Left);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0024" domain="userortestcode"><source><![CDATA[if (leftSubstring != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="002c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="002d" domain="userortestcode"><source><![CDATA[node.Left = CompleteSubstring(leftSubstring);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="003b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="6" offset="003c" domain="userortestcode"><source><![CDATA[FunctionCall rightSubstring = TailorUtil.GetSubstringTerm(node.Right);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0048" domain="userortestcode"><source><![CDATA[if (rightSubstring != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0050" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0051" domain="userortestcode"><source><![CDATA[node.Right = CompleteSubstring(rightSubstring);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="005f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="6" offset="0060" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        void ReplaceExtract(Expression node)
        ]]></source>
</chunk>
<method name="ReplaceExtract" namespace="MacroScope" type="MacroScope.MTailor" typeName="MTailor" token="600023a" module="MacroScope.dll"><hits><hit index="0" value="6"/>
<hit index="6" value="6"/>
<hit index="7" value="6"/>
<hit index="8" value="6"/>
<hit index="9" value="12"/>
<hit index="10" value="6"/>
<hit index="11" value="6"/>
<hit index="21" value="6"/>
<hit index="22" value="6"/>
<hit index="23" value="6"/>
<hit index="24" value="12"/>
<hit index="25" value="6"/>
<hit index="26" value="6"/>
<hit index="36" value="6"/>
<hit index="37" value="6"/>
<hit index="38" value="6"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="8" total="16" coveredRatio="0.5"/>
</method>
<chunk hits="6" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0001" domain="userortestcode"><source><![CDATA[if (node == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("node");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="6" offset="0018" domain="userortestcode"><source><![CDATA[ExtractFunction leftExtract = TailorUtil.GetExtractTerm(node.Left);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0024" domain="userortestcode"><source><![CDATA[if (leftExtract != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="002c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="002d" domain="userortestcode"><source><![CDATA[node.Left = ReplaceExtractFunction(leftExtract);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="003b" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="6" offset="003c" domain="userortestcode"><source><![CDATA[ExtractFunction rightExtract = TailorUtil.GetExtractTerm(node.Right);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0048" domain="userortestcode"><source><![CDATA[if (rightExtract != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0050" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0051" domain="userortestcode"><source><![CDATA[node.Right = ReplaceExtractFunction(rightExtract);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="005f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="6" offset="0060" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        void ReplaceIntervals(int last)
        ]]></source>
</chunk>
<method name="ReplaceIntervals" namespace="MacroScope" type="MacroScope.MTailor" typeName="MTailor" token="600023b" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
<hit index="10" value="4"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="2"/>
<hit index="14" value="4"/>
<hit index="15" value="2"/>
<hit index="16" value="2"/>
<hit index="17" value="2"/>
<hit index="18" value="2"/>
<hit index="19" value="2"/>
<hit index="20" value="4"/>
<hit index="21" value="2"/>
<hit index="22" value="2"/>
<hit index="32" value="2"/>
<hit index="33" value="2"/>
<hit index="35" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="9" total="18" coveredRatio="0.5"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[if (last < 0)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentOutOfRangeException("last");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="0018" domain="userortestcode"><source><![CDATA[Expression node = m_expressionStack[last];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="6" offset="0025" domain="userortestcode"><source><![CDATA[Interval leftInterval = GetInterval(node.Left);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0031" domain="userortestcode"><source><![CDATA[Interval rightInterval = GetInterval(node.Right);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="2" offset="003d" domain="userortestcode"><source><![CDATA[if (leftInterval != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0045" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0046" domain="userortestcode"><source><![CDATA[if (rightInterval != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="004e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="004f" domain="userortestcode"><source><![CDATA[ReplaceBothIntervals(last, node, leftInterval, rightInterval);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="005a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else
                ]]></source>
</chunk>
<chunk hits="0" offset="005d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="005e" domain="userortestcode"><source><![CDATA[ReplaceLeftInterval(last, node, leftInterval);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0068" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0069" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="2" offset="006c" domain="userortestcode"><source><![CDATA[if (rightInterval != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0074" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0075" domain="userortestcode"><source><![CDATA[ReplaceRightInterval(last, node, rightInterval);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="007f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0080" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        void ReplaceBothIntervals(int last, Expression node, Interval leftInterval,
            Interval rightInterval)
        {
            if (leftInterval.DateTimeUnit != rightInterval.DateTimeUnit)
            {
                throw new InvalidOperationException(
                    "Can't combine intervals with different units.");
            }

            if ((node.Operator != ExpressionOperator.Plus) &&
                (node.Operator != ExpressionOperator.Minus))
            {
                throw new InvalidOperationException("Can't multiply intervals.");
            }

            node.Left = new Interval(
                new Expression(leftInterval.GetSignedValue(),
                    node.Operator,
                    rightInterval.GetSignedValue()),
                leftInterval.DateTimeUnit);
            node.Operator = null;
            node.Right = null;

            if (last > 0)
            {
                ReplaceIntervals(last - 1);
            }
        }

        void ReplaceLeftInterval(int last, Expression node, Interval leftInterval)
        {
            if (node.Operator == ExpressionOperator.Plus)
            {
                // base date hasn't been tailored yet - keep it in the future
                // of this traversal
                node.Right = GetDateaddCall(leftInterval.DateTimeUnit,
                    leftInterval.GetSignedValue(),
                    node.Right);
                node.Operator = null;
                node.Left = null;
            }
            else if ((node.Operator == ExpressionOperator.Mult) ||
                (node.Operator == ExpressionOperator.Div))
            {
                // base date hasn't been tailored yet - keep it in the future
                // of this traversal
                node.Right = new Interval(
                    GetMultipliedInterval(leftInterval,
                        node.Right,
                        node.Operator),
                    leftInterval.DateTimeUnit);
                node.Operator = null;
                node.Left = null;

                if (last > 0)
                {
                    ReplaceIntervals(last - 1);
                }
            }
            else
            {
                throw new InvalidOperationException(
                    "Subtraction from interval not supported.");
            }
        }

        void ReplaceRightInterval(int last, Expression node, Interval rightInterval)
        {
            if (node.Operator == ExpressionOperator.Plus)
            {
                // base date hasn't been tailored yet - keep it in the future
                // of this traversal
                node.Right = GetDateaddCall(rightInterval.DateTimeUnit,
                    rightInterval.GetSignedValue(),
                    node.Left);
                node.Operator = null;
                node.Left = null;
            }
            else if (node.Operator == ExpressionOperator.Minus)
            {
                Interval negativeInterval = (Interval)(rightInterval.Clone());
                negativeInterval.Positive = !negativeInterval.Positive;

                // base date hasn't been tailored yet - keep it in the future
                // of this traversal
                node.Right = GetDateaddCall(negativeInterval.DateTimeUnit,
                    negativeInterval.GetSignedValue(),
                    node.Left);
                node.Operator = null;
                node.Left = null;
            }
            else if (node.Operator == ExpressionOperator.Mult)
            {
                // base date hasn't been tailored yet - keep it in the future
                // of this traversal
                node.Right = new Interval(
                    GetMultipliedInterval(rightInterval,
                        node.Left,
                        ExpressionOperator.Mult),
                    rightInterval.DateTimeUnit);
                node.Operator = null;
                node.Left = null;

                if (last > 0)
                {
                    ReplaceIntervals(last - 1);
                }
            }
            else
            {
                throw new InvalidOperationException(
                    "Division by interval not supported.");
            }
        }

        static INode GetMultipliedInterval(Interval interval,
            INode multiplier, ExpressionOperator op)
        {
            if (interval == null)
            {
                throw new ArgumentNullException("interval");
            }

            if (multiplier == null)
            {
                throw new ArgumentNullException("multiplier");
            }

            if (op == null)
            {
                throw new ArgumentNullException("op");
            }

            INode inner = interval.GetSignedValue();
            IntegerValue integerValue = inner as IntegerValue;
            INode newValue;
            if ((integerValue != null) &&
                (integerValue.Value == 1))
            {
                newValue = multiplier;
            }
            else
            {
                newValue = new Expression(inner, op, multiplier);
            }

            return newValue;
        }

        Expression GetModCall(INode arg)
        ]]></source>
</chunk>
<method name="GetModCall" namespace="MacroScope" type="MacroScope.MTailor" typeName="MTailor" token="6000240" module="MacroScope.dll"><hits><hit index="0" value="12"/>
<hit index="1" value="12"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="2" total="23" coveredRatio="0.086956521739130432"/>
</method>
<chunk hits="12" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="12" offset="0001" domain="userortestcode"><source><![CDATA[FunctionCall functionCall = arg as FunctionCall;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="12" offset="0008" domain="userortestcode"><source><![CDATA[if (functionCall == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="12" offset="0015" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="12" offset="0016" domain="userortestcode"><source><![CDATA[return null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="0" offset="001d" domain="userortestcode"><source><![CDATA[if (!TailorUtil.MOD.Equals(functionCall.Name.ToLower()))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0038" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0039" domain="userortestcode"><source><![CDATA[return null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="0" offset="003d" domain="userortestcode"><source><![CDATA[ExpressionItem head = functionCall.ExpressionArguments;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0044" domain="userortestcode"><source><![CDATA[if (head == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0051" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0052" domain="userortestcode"><source><![CDATA[throw new InvalidOperationException("MOD has no arguments.");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="0" offset="005d" domain="userortestcode"><source><![CDATA[ExpressionItem next = head.Next;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0064" domain="userortestcode"><source><![CDATA[if (next == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0071" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0072" domain="userortestcode"><source><![CDATA[throw new InvalidOperationException("MOD has only one argument.");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="0" offset="007d" domain="userortestcode"><source><![CDATA[if (next.Next != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="008c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="008d" domain="userortestcode"><source><![CDATA[throw new InvalidOperationException("MOD has too many arguments.");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="0" offset="0098" domain="userortestcode"><source><![CDATA[return new Expression(head.Expression,
                m_modOp,
                next.Expression);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="12" offset="00b2" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        static Interval GetInterval(INode arg)
        ]]></source>
</chunk>
<method name="GetInterval" namespace="MacroScope" type="MacroScope.MTailor" typeName="MTailor" token="6000241" module="MacroScope.dll"><hits><hit index="0" value="4"/>
<hit index="1" value="4"/>
<hit index="2" value="4"/>
<hit index="3" value="4"/>
<hit index="4" value="8"/>
<hit index="5" value="4"/>
<hit index="6" value="4"/>
<hit index="7" value="4"/>
<hit index="8" value="4"/>
<hit index="9" value="8"/>
<hit index="14" value="4"/>
<hit index="15" value="4"/>
<hit index="16" value="4"/>
<hit index="17" value="4"/>
<hit index="18" value="8"/>
<hit index="19" value="4"/>
<hit index="21" value="4"/>
<hit index="22" value="4"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="10" total="11" coveredRatio="0.90909090909090906"/>
</method>
<chunk hits="4" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0001" domain="userortestcode"><source><![CDATA[Expression expr = arg as Expression;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="16" offset="002b" domain="userortestcode"><source><![CDATA[while ((expr != null) && (expr.Operator == null))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="000a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="4" offset="000b" domain="userortestcode"><source><![CDATA[arg = (expr.Left != null) ? expr.Left : expr.Right;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="12" offset="0023" domain="userortestcode"><source><![CDATA[expr = arg as Expression;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="12" offset="002a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="4" offset="003e" domain="userortestcode"><source><![CDATA[return arg as Interval;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0047" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        static int GetRownumExpressionLimit(INode arg)
        ]]></source>
</chunk>
<method name="GetRownumExpressionLimit" namespace="MacroScope" type="MacroScope.MTailor" typeName="MTailor" token="6000242" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="7" value="2"/>
<hit index="9" value="2"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="4"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="30" value="2"/>
<hit index="31" value="2"/>
<hit index="32" value="2"/>
<hit index="33" value="4"/>
<hit index="34" value="2"/>
<hit index="35" value="2"/>
<hit index="50" value="2"/>
<hit index="51" value="2"/>
<hit index="52" value="2"/>
<hit index="53" value="4"/>
<hit index="54" value="2"/>
<hit index="55" value="2"/>
<hit index="70" value="2"/>
<hit index="71" value="2"/>
<hit index="72" value="2"/>
<hit index="73" value="4"/>
<hit index="74" value="2"/>
<hit index="75" value="2"/>
<hit index="90" value="2"/>
<hit index="91" value="2"/>
<hit index="92" value="2"/>
<hit index="93" value="2"/>
<hit index="94" value="2"/>
<hit index="95" value="2"/>
<hit index="104" value="2"/>
<hit index="105" value="2"/>
<hit index="106" value="2"/>
<hit index="108" value="2"/>
<hit index="110" value="2"/>
<hit index="112" value="2"/>
<hit index="114" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="20" total="54" coveredRatio="0.37037037037037035"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[if (arg == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000f" domain="userortestcode"><source><![CDATA[throw new InvalidOperationException("AND operator missing argument.");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="001a" domain="userortestcode"><source><![CDATA[Expression expr = arg as Expression;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0021" domain="userortestcode"><source><![CDATA[if (expr == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="002e" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="002f" domain="userortestcode"><source><![CDATA[return -1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="0037" domain="userortestcode"><source><![CDATA[decimal limit = -2;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="003f" domain="userortestcode"><source><![CDATA[if (expr.Operator == ExpressionOperator.LessOrEqual)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0055" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0056" domain="userortestcode"><source><![CDATA[if (IsRownumTerm(expr.Left))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="006a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="006b" domain="userortestcode"><source><![CDATA[limit = GetTermLimit(expr.Right);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0077" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0078" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="2" offset="007e" domain="userortestcode"><source><![CDATA[if (expr.Operator == ExpressionOperator.Less)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0094" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0095" domain="userortestcode"><source><![CDATA[if (IsRownumTerm(expr.Left))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00a9" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="00aa" domain="userortestcode"><source><![CDATA[limit = GetSharpTermLimit(expr.Right);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00b6" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00b7" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="2" offset="00ba" domain="userortestcode"><source><![CDATA[if (expr.Operator == ExpressionOperator.GreaterOrEqual)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00d0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00d1" domain="userortestcode"><source><![CDATA[if (IsRownumTerm(expr.Right))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00e5" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="00e6" domain="userortestcode"><source><![CDATA[limit = GetTermLimit(expr.Left);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00f2" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00f3" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="2" offset="00f6" domain="userortestcode"><source><![CDATA[if (expr.Operator == ExpressionOperator.Greater)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="010c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="010d" domain="userortestcode"><source><![CDATA[if (IsRownumTerm(expr.Right))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0121" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0122" domain="userortestcode"><source><![CDATA[limit = GetSharpTermLimit(expr.Left);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="012e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="012f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="2" offset="0130" domain="userortestcode"><source><![CDATA[int ilimit = (int)limit;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0137" domain="userortestcode"><source><![CDATA[if (limit != ilimit)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="014c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="014d" domain="userortestcode"><source><![CDATA[string message = string.Format("TOP argument {0} too large.",
                    limit);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="015e" domain="userortestcode"><source><![CDATA[throw new Exception(message);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="0165" domain="userortestcode"><source><![CDATA[return ilimit;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="016a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        static decimal GetSharpTermLimit(INode arg)
        {
            decimal limit = GetTermLimit(arg);
            if (limit > 0)
            {
                --limit;
            }

            return limit;
        }

        static decimal GetTermLimit(INode arg)
        {
            arg = GetComparedTerm(arg);

            IntegerValue iv = arg as IntegerValue;
            if (iv == null)
            {
                return -1;
            }

            return iv.Value;
        }

        static bool IsRownumTerm(INode arg)
        {
            arg = GetComparedTerm(arg);

            DbObject dbObject = arg as DbObject;
            if ((dbObject == null) || dbObject.HasNext)
            {
                return false;
            }

            return IsRownum(dbObject.Identifier);
        }

        static INode GetComparedTerm(INode arg)
        {
            if (arg == null)
            {
                throw new InvalidOperationException(
                    "Comparison operator missing argument.");
            }

            return TailorUtil.GetTerm(arg);
        }

        /// <summary>
        /// Test for unquoted <see cref="TailorUtil.ROWNUM"/>.
        /// </summary>
        /// <remarks>
        /// Not canonicalizing - we're accepting quoted "rownum"
        /// as a regular identifier.
        /// </remarks>
        static bool IsRownum(Identifier identifier)
        ]]></source>
</chunk>
<method name="IsRownum" namespace="MacroScope" type="MacroScope.MTailor" typeName="MTailor" token="6000247" module="MacroScope.dll"><hits><hit index="0" value="3"/>
<hit index="6" value="3"/>
<hit index="7" value="3"/>
<hit index="8" value="3"/>
<hit index="9" value="6"/>
<hit index="10" value="3"/>
<hit index="11" value="3"/>
<hit index="12" value="3"/>
<hit index="13" value="3"/>
<hit index="14" value="3"/>
<hit index="15" value="6"/>
<hit index="16" value="3"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="5" total="7" coveredRatio="0.7142857142857143"/>
</method>
<chunk hits="3" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="0001" domain="userortestcode"><source><![CDATA[if (identifier == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("identifier");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="3" offset="0018" domain="userortestcode"><source><![CDATA[return TailorUtil.ROWNUM.Equals(
                identifier.ID.ToLower());]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="9" offset="0030" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion
    }
}
]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MacroScopeCE\QueryParts.cs" renderPrefix="s20"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Collections.Generic;
using System.Text;
using MacroScope.AddedClasses;

namespace MacroScope
{
    public enum QueryStatementType { SELECT, UPDATE, DELETE, INSERT };
    public enum ParsingState { TYPE, TABLE, COLUMNS, WHERE, WHERECOND, DONE, WHERELHS, WHEREOP, WHERERHS, COLUMNVALUES, ASSIGN, FUNCTION };
    public enum Function { COUNT, AVG, MIN, MAX, FIRST, LAST, SUM };

    public class QueryParts
    {


        ]]></source>
</chunk>
<chunk hits="4" offset="0019" domain="userortestcode"><source><![CDATA[public QueryParts()]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0020" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0021" domain="userortestcode"><source><![CDATA[parsingState = ParsingState.TYPE;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0028" domain="userortestcode"><source><![CDATA[selectedColumns = new List<string>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0033" domain="userortestcode"><source><![CDATA[selectedColumnFrom = new List<string>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="003e" domain="userortestcode"><source><![CDATA[tableNames = new List<string>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0049" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #region fields

        private QueryStatementType type;
        private ParsingState parsingState;
        ]]></source>
</chunk>
<method name=".ctor" namespace="MacroScope" type="MacroScope.QueryParts" typeName="QueryParts" token="600039d" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="2"/>
<hit index="14" value="2"/>
<hit index="16" value="2"/>
<hit index="17" value="2"/>
<hit index="18" value="2"/>
<hit index="19" value="2"/>
<hit index="21" value="2"/>
<hit index="22" value="2"/>
<hit index="23" value="2"/>
<hit index="24" value="2"/>
<hit index="26" value="2"/>
<hit index="27" value="2"/>
<hit index="28" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="6" total="6" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[private bool isFucntionCall = false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        private Function functionType;
        private bool distinct;

        public bool Distinct
        {
            get { return distinct; }
            set ]]></source>
</chunk>
<method name="set_Distinct" namespace="MacroScope" type="MacroScope.QueryParts" typeName="QueryParts" token="600039f" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[distinct = value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="4" offset="0008" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }



        ]]></source>
</chunk>
<chunk hits="4" offset="0007" domain="userortestcode"><source><![CDATA[private Dictionary<string, object> columnNameValueMap = new Dictionary<string, object>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        public List<string> selectedColumns;
        public List<string> selectedColumnFrom;//Table in which a selected column is from

        /*If a wildcard is encountered in the query*/
        ]]></source>
</chunk>
<chunk hits="4" offset="0012" domain="userortestcode"><source><![CDATA[private bool isSelectAll = false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public Expression whereCondition;
        public Expression joinCondition;
        public string whereConditionLHS;
        public string whereConditionRHS;
        public string whereConditionop;
        private List<string> tableNames;

        #endregion

        #region properties


        public bool IsSelectAll
        {
            get ]]></source>
</chunk>
<method name="get_IsSelectAll" namespace="MacroScope" type="MacroScope.QueryParts" typeName="QueryParts" token="60003a0" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[return isSelectAll;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="000a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            set ]]></source>
</chunk>
<method name="set_IsSelectAll" namespace="MacroScope" type="MacroScope.QueryParts" typeName="QueryParts" token="60003a1" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[isSelectAll = value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="4" offset="0008" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        public bool IsFucntionCall
        {
            get { return isFucntionCall; }
            set { isFucntionCall = value; }
        }


        public Dictionary<string, object> ColumnNameValueMap
        {
            get { return columnNameValueMap; }
            set { columnNameValueMap = value; }
        }

        public ParsingState ParsingState
        {
            get ]]></source>
</chunk>
<method name="get_ParsingState" namespace="MacroScope" type="MacroScope.QueryParts" typeName="QueryParts" token="60003a6" module="MacroScope.dll"><hits><hit index="0" value="16"/>
<hit index="1" value="16"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="16" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="16" offset="0001" domain="userortestcode"><source><![CDATA[return parsingState;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="16" offset="000a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            set ]]></source>
</chunk>
<method name="set_ParsingState" namespace="MacroScope" type="MacroScope.QueryParts" typeName="QueryParts" token="60003a7" module="MacroScope.dll"><hits><hit index="0" value="8"/>
<hit index="1" value="8"/>
<hit index="2" value="8"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="8" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="8" offset="0001" domain="userortestcode"><source><![CDATA[parsingState = value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="16" offset="0008" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }


        public QueryStatementType Type
        {
            get ]]></source>
</chunk>
<method name="get_Type" namespace="MacroScope" type="MacroScope.QueryParts" typeName="QueryParts" token="60003a8" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[return type;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="000a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            set ]]></source>
</chunk>
<method name="set_Type" namespace="MacroScope" type="MacroScope.QueryParts" typeName="QueryParts" token="60003a9" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[type = value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="4" offset="0008" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }


        public List<string> TableNames
        {
            get ]]></source>
</chunk>
<method name="get_TableNames" namespace="MacroScope" type="MacroScope.QueryParts" typeName="QueryParts" token="60003aa" module="MacroScope.dll"><hits><hit index="0" value="6"/>
<hit index="1" value="6"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="6" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="6" offset="0001" domain="userortestcode"><source><![CDATA[return tableNames;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="6" offset="000a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            set { tableNames = value; }
        }

        public Function FunctionType
        {
            get { return functionType; }
            set { functionType = value; }
        }

        #endregion

    }
}
]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MacroScopeCE\PassiveVisitor.cs" renderPrefix="s21"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;

namespace MacroScope
{
    /// <summary>
    /// Visits SQL statement trees not doing anything.
    /// </summary>
    /// <remarks>
    /// Base for visitors not wishing to implement all
    /// callbacks of <see cref="IVisitor"/>.
    /// </remarks>
    public class PassiveVisitor : IVisitor
    {
        #region IVisitor Members

        public virtual void PerformBefore(AliasedItem node)
        ]]></source>
</chunk>
<method name="PerformBefore" namespace="MacroScope" type="MacroScope.PassiveVisitor" typeName="PassiveVisitor" token="60001ae" module="MacroScope.dll"><hits><hit index="0" value="4"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="4" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0001" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public virtual void PerformOnAlias(AliasedItem node)
        ]]></source>
</chunk>
<method name="PerformOnAlias" namespace="MacroScope" type="MacroScope.PassiveVisitor" typeName="PassiveVisitor" token="60001af" module="MacroScope.dll"><hits><hit index="0" value="4"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="4" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0001" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public virtual void PerformAfter(AliasedItem node)
        ]]></source>
</chunk>
<method name="PerformAfter" namespace="MacroScope" type="MacroScope.PassiveVisitor" typeName="PassiveVisitor" token="60001b0" module="MacroScope.dll"><hits><hit index="0" value="4"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="4" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0001" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public virtual void PerformBefore(Assignment node)
        {
        }

        public virtual void PerformOnAssignment(Assignment node)
        {
        }

        public virtual void PerformAfter(Assignment node)
        {
        }

        public virtual void PerformBefore(BracketedExpression node)
        {
        }

        public virtual void PerformAfter(BracketedExpression node)
        {
        }

        public virtual void PerformBefore(CaseAlternative node)
        {
        }

        public virtual void PerformOnThen(CaseAlternative node)
        {
        }

        public virtual void PerformAfter(CaseAlternative node)
        {
        }

        public virtual void PerformBefore(CaseExpression node)
        {
        }

        public virtual void PerformOnWhen(CaseExpression node)
        {
        }

        public virtual void PerformOnElse(CaseExpression node)
        {
        }

        public virtual void PerformAfter(CaseExpression node)
        {
        }

        public virtual void Perform(DateTimeUnit node)
        {
        }

        public virtual void PerformBefore(DbObject node)
        ]]></source>
</chunk>
<method name="PerformBefore" namespace="MacroScope" type="MacroScope.PassiveVisitor" typeName="PassiveVisitor" token="60001be" module="MacroScope.dll"><hits><hit index="0" value="3"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="3" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="0001" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public virtual void PerformAfter(DbObject node)
        ]]></source>
</chunk>
<method name="PerformAfter" namespace="MacroScope" type="MacroScope.PassiveVisitor" typeName="PassiveVisitor" token="60001bf" module="MacroScope.dll"><hits><hit index="0" value="3"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="3" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="0001" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public virtual void Perform(DefaultValue node)
        {
        }

        public virtual void PerformBefore(DeleteStatement node)
        {
        }

        public virtual void PerformOnWhere(DeleteStatement node)
        {
        }

        public virtual void PerformAfter(DeleteStatement node)
        {
        }

        public virtual void Perform(DoubleValue node)
        {
        }

        public virtual void PerformBefore(Expression node)
        {
        }

        public virtual void PerformBeforePrefixOp(Expression node)
        {
        }

        public virtual void PerformAfterPrefixOp(Expression node)
        {
        }

        public virtual void PerformBeforePostfixOp(Expression node)
        {
        }

        public virtual void PerformAfterPostfixOp(Expression node)
        {
        }

        public virtual void PerformBeforeBinaryOp(Expression node)
        {
        }

        public virtual void PerformAfterBinaryOp(Expression node)
        ]]></source>
</chunk>
<method name="PerformAfterBinaryOp" namespace="MacroScope" type="MacroScope.PassiveVisitor" typeName="PassiveVisitor" token="60001cb" module="MacroScope.dll"><hits><hit index="0" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public virtual void PerformAfter(Expression node)
        ]]></source>
</chunk>
<method name="PerformAfter" namespace="MacroScope" type="MacroScope.PassiveVisitor" typeName="PassiveVisitor" token="60001cc" module="MacroScope.dll"><hits><hit index="0" value="6"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="6" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="6" offset="0001" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public virtual void PerformBefore(ExpressionItem node)
        {
        }

        public virtual void PerformAfter(ExpressionItem node)
        {
        }

        public virtual void Perform(ExpressionOperator node)
        ]]></source>
</chunk>
<method name="Perform" namespace="MacroScope" type="MacroScope.PassiveVisitor" typeName="PassiveVisitor" token="60001cf" module="MacroScope.dll"><hits><hit index="0" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public virtual void PerformBefore(ExtractFunction node)
        {
        }

        public virtual void PerformOnSource(ExtractFunction node)
        {
        }

        public virtual void PerformAfter(ExtractFunction node)
        {
        }

        public virtual void PerformBefore(FunctionCall node)
        {
        }

        public virtual void PerformAfter(FunctionCall node)
        {
        }

        public virtual void PerformBefore(GroupByClause node)
        {
        }

        public virtual void PerformOnHaving(GroupByClause node)
        {
        }

        public virtual void PerformAfter(GroupByClause node)
        {
        }

        public virtual void Perform(Identifier node)
        {
        }

        public virtual void PerformBefore(InsertStatement node)
        {
        }

        public virtual void PerformOnNames(InsertStatement node)
        {
        }

        public virtual void PerformOnValues(InsertStatement node)
        {
        }

        public virtual void PerformAfter(InsertStatement node)
        {
        }

        public virtual void Perform(IntegerValue node)
        ]]></source>
</chunk>
<method name="Perform" namespace="MacroScope" type="MacroScope.PassiveVisitor" typeName="PassiveVisitor" token="60001dd" module="MacroScope.dll"><hits><hit index="0" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public virtual void PerformBefore(Interval node)
        {
        }

        public virtual void PerformOnUnit(Interval node)
        {
        }

        public virtual void PerformAfter(Interval node)
        {
        }

        public virtual void Perform(Join node)
        {
        }

        public virtual void Perform(LiteralDateTime node)
        {
        }

        public virtual void Perform(NullValue node)
        {
        }

        public virtual void PerformBefore(OrderExpression node)
        {
        }

        public virtual void PerformAfter(OrderExpression node)
        {
        }

        public virtual void PerformBefore(PatternExpression node)
        {
        }

        public virtual void PerformOnEscape(PatternExpression node)
        {
        }

        public virtual void PerformAfter(PatternExpression node)
        {
        }

        public virtual void Perform(Placeholder node)
        {
        }

        public virtual void PerformBefore(PredicateExpression node)
        {
        }

        public virtual void PerformOnOperator(PredicateExpression node)
        {
        }

        public virtual void PerformOnQuantifier(PredicateExpression node)
        {
        }

        public virtual void PerformOnSelect(PredicateExpression node)
        {
        }

        public virtual void PerformAfter(PredicateExpression node)
        {
        }

        public virtual void Perform(PredicateQuantifier node)
        {
        }

        public virtual void PerformBefore(QueryExpression node)
        {
        }

        public virtual void PerformOnFrom(QueryExpression node)
        ]]></source>
</chunk>
<method name="PerformOnFrom" namespace="MacroScope" type="MacroScope.PassiveVisitor" typeName="PassiveVisitor" token="60001f1" module="MacroScope.dll"><hits><hit index="0" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public virtual void PerformOnWhere(QueryExpression node)
        {
        }

        public virtual void PerformOnGroupBy(QueryExpression node)
        {
        }

        public virtual void PerformOnOrderBy(QueryExpression node)
        ]]></source>
</chunk>
<method name="PerformOnOrderBy" namespace="MacroScope" type="MacroScope.PassiveVisitor" typeName="PassiveVisitor" token="60001f4" module="MacroScope.dll"><hits><hit index="0" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public virtual void PerformAfter(QueryExpression node)
        ]]></source>
</chunk>
<method name="PerformAfter" namespace="MacroScope" type="MacroScope.PassiveVisitor" typeName="PassiveVisitor" token="60001f5" module="MacroScope.dll"><hits><hit index="0" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public virtual void PerformBefore(Range node)
        {
        }

        public virtual void PerformOnAnd(Range node)
        {
        }

        public virtual void PerformAfter(Range node)
        {
        }

        public virtual void PerformBefore(SelectStatement node)
        ]]></source>
</chunk>
<method name="PerformBefore" namespace="MacroScope" type="MacroScope.PassiveVisitor" typeName="PassiveVisitor" token="60001f9" module="MacroScope.dll"><hits><hit index="0" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public virtual void PerformAfter(SelectStatement node)
        ]]></source>
</chunk>
<method name="PerformAfter" namespace="MacroScope" type="MacroScope.PassiveVisitor" typeName="PassiveVisitor" token="60001fa" module="MacroScope.dll"><hits><hit index="0" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public virtual void Perform(StringValue node)
        ]]></source>
</chunk>
<method name="Perform" namespace="MacroScope" type="MacroScope.PassiveVisitor" typeName="PassiveVisitor" token="60001fb" module="MacroScope.dll"><hits><hit index="0" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public virtual void PerformBefore(SwitchFunction node)
        {
        }

        public virtual void PerformAfter(SwitchFunction node)
        {
        }

        public virtual void PerformBefore(Table node)
        ]]></source>
</chunk>
<method name="PerformBefore" namespace="MacroScope" type="MacroScope.PassiveVisitor" typeName="PassiveVisitor" token="60001fe" module="MacroScope.dll"><hits><hit index="0" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public virtual void PerformOnSource(Table node)
        ]]></source>
</chunk>
<method name="PerformOnSource" namespace="MacroScope" type="MacroScope.PassiveVisitor" typeName="PassiveVisitor" token="60001ff" module="MacroScope.dll"><hits><hit index="0" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public virtual void PerformOnAlias(Table node)
        ]]></source>
</chunk>
<method name="PerformOnAlias" namespace="MacroScope" type="MacroScope.PassiveVisitor" typeName="PassiveVisitor" token="6000200" module="MacroScope.dll"><hits><hit index="0" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public virtual void PerformBeforeCondition(Table node)
        ]]></source>
</chunk>
<method name="PerformBeforeCondition" namespace="MacroScope" type="MacroScope.PassiveVisitor" typeName="PassiveVisitor" token="6000201" module="MacroScope.dll"><hits><hit index="0" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public virtual void PerformAfterCondition(Table node)
        ]]></source>
</chunk>
<method name="PerformAfterCondition" namespace="MacroScope" type="MacroScope.PassiveVisitor" typeName="PassiveVisitor" token="6000202" module="MacroScope.dll"><hits><hit index="0" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public virtual void PerformAfter(Table node)
        ]]></source>
</chunk>
<method name="PerformAfter" namespace="MacroScope" type="MacroScope.PassiveVisitor" typeName="PassiveVisitor" token="6000203" module="MacroScope.dll"><hits><hit index="0" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public virtual void PerformBefore(TableWildcard node)
        {
        }

        public virtual void PerformAfter(TableWildcard node)
        {
        }

        public virtual void PerformBefore(TypeCast node)
        {
        }

        public virtual void PerformAfter(TypeCast node)
        {
        }

        public virtual void PerformBefore(UpdateStatement node)
        {
        }

        public virtual void PerformOnAssignments(UpdateStatement node)
        {
        }

        public virtual void PerformOnWhere(UpdateStatement node)
        {
        }

        public virtual void PerformAfter(UpdateStatement node)
        {
        }

        public virtual void Perform(Variable node)
        {
        }

        public virtual void Perform(Wildcard node)
        ]]></source>
</chunk>
<method name="Perform" namespace="MacroScope" type="MacroScope.PassiveVisitor" typeName="PassiveVisitor" token="600020d" module="MacroScope.dll"><hits><hit index="0" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion
    }
}
]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MacroScopeCE\TailorUtil.cs" renderPrefix="s22"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;

namespace MacroScope
{
    /// <summary>
    /// Tailor support.
    /// </summary>
    /// <remarks>
    /// Note that all strings defined by this class are expected to be in lowercase.
    /// </remarks>
    public static class TailorUtil
    {
        #region Well-known identifiers

        /// <summary>
        /// A function with different semantics in MS SQL Server and Oracle,
        /// not known by MS Access.
        /// </summary>
        public static readonly string CONVERT = "convert";

        /// <summary>
        /// A pseudo-table used by Oracle, not known by MS engines.
        /// </summary>
        public static readonly string DUAL = "dual";

        /// <summary>
        /// A MS date function, not known by Oracle.
        /// </summary>
        public static readonly string DATEADD = "dateadd";

        /// <summary>
        /// A MS SQL Server function returning the current time, not
        /// known by other engines.
        /// </summary>
        public static readonly string GETDATE = "getdate";

        /// <summary>
        /// A MS string transformation function (also an SQL keyword,
        /// but this declaration isn't used for that meaning), not known
        /// by Oracle.
        /// </summary>
        public static readonly string LEFT = "left";

        /// <summary>
        /// A MS Access string transformation function, not
        /// known by other engines.
        /// </summary>
        public static readonly string MID = "mid";

        /// <summary>
        /// An Oracle function and MS Access operator, spelled '%' by MS SQL Server.
        /// </summary>
        public static readonly string MOD = "mod";

        /// <summary>
        /// A MS Access function returning the current time, not
        /// known by other engines.
        /// </summary>
        public static readonly string NOW = "now";

        /// <summary>
        /// A MS string transformation function (also an SQL keyword,
        /// but this declaration isn't used for that meaning), not known
        /// by Oracle.
        /// </summary>
        public static readonly string RIGHT = "right";

        /// <summary>
        /// ROWNUM is an Oracle pseudo-column used to limit
        /// the number of returned rows (analogically to Microsoft TOP).
        /// </summary>
        public static readonly string ROWNUM = "rownum";

        /// <summary>
        /// An Oracle keyword (some documentation calls it "function",
        /// but syntactically it isn't) used to get the current
        /// time, not known by MS engines.
        /// </summary>
        public static readonly string SYSDATE = "sysdate";

        /// <summary>
        /// An Oracle string transformation function, not known
        /// by MS engines.
        /// </summary>
        public static readonly string SUBSTR = "substr";

        /// <summary>
        /// Standard string transformation function, not known
        /// by MS Access and Oracle.
        /// </summary>
        public static readonly string SUBSTRING = "substring";

        /// <summary>
        /// An Oracle function for converting string values
        /// to dates.
        /// </summary>
        public static readonly string TO_TIMESTAMP = "to_timestamp";

        #endregion

        #region Utility functions

        public static bool IsSysdateTerm(INode arg)
        ]]></source>
</chunk>
<method name="IsSysdateTerm" namespace="MacroScope" type="MacroScope.TailorUtil" typeName="TailorUtil" token="60001a2" module="MacroScope.dll"><hits><hit index="0" value="12"/>
<hit index="1" value="4"/>
<hit index="2" value="8"/>
<hit index="3" value="8"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="4"/>
<hit index="9" value="6"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="4"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="16" value="8"/>
<hit index="17" value="6"/>
<hit index="18" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="11" total="11" coveredRatio="1"/>
</method>
<chunk hits="12" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="12" offset="0001" domain="userortestcode"><source><![CDATA[if (arg == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="4" offset="000d" domain="userortestcode"><source><![CDATA[return false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="8" offset="0011" domain="userortestcode"><source><![CDATA[arg = GetTerm(arg);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="8" offset="0019" domain="userortestcode"><source><![CDATA[DbObject dbObject = arg as DbObject;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="8" offset="0020" domain="userortestcode"><source><![CDATA[if ((dbObject == null) || dbObject.HasNext)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0033" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="6" offset="0034" domain="userortestcode"><source><![CDATA[return false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="0038" domain="userortestcode"><source><![CDATA[return IsSysdate(dbObject.Identifier);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="12" offset="0046" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public static FunctionCall GetSubstringTerm(INode arg)
        ]]></source>
</chunk>
<method name="GetSubstringTerm" namespace="MacroScope" type="MacroScope.TailorUtil" typeName="TailorUtil" token="60001a3" module="MacroScope.dll"><hits><hit index="0" value="12"/>
<hit index="1" value="12"/>
<hit index="2" value="12"/>
<hit index="3" value="12"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="9" coveredRatio="0.33333333333333331"/>
</method>
<chunk hits="12" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="12" offset="0001" domain="userortestcode"><source><![CDATA[FunctionCall functionCall = CondGetFunctionCall(arg);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="12" offset="0008" domain="userortestcode"><source><![CDATA[if (functionCall == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="12" offset="0013" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="12" offset="0014" domain="userortestcode"><source><![CDATA[return null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="0" offset="0018" domain="userortestcode"><source><![CDATA[string name = functionCall.Name.ToLower();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0024" domain="userortestcode"><source><![CDATA[return name.Equals(SUBSTRING) ? functionCall : null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="12" offset="0038" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public static ExtractFunction GetExtractTerm(INode arg)
        ]]></source>
</chunk>
<method name="GetExtractTerm" namespace="MacroScope" type="MacroScope.TailorUtil" typeName="TailorUtil" token="60001a4" module="MacroScope.dll"><hits><hit index="0" value="12"/>
<hit index="1" value="4"/>
<hit index="2" value="8"/>
<hit index="3" value="8"/>
<hit index="4" value="8"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="4" total="4" coveredRatio="1"/>
</method>
<chunk hits="12" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="12" offset="0001" domain="userortestcode"><source><![CDATA[if (arg == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="4" offset="000d" domain="userortestcode"><source><![CDATA[return null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="8" offset="0011" domain="userortestcode"><source><![CDATA[arg = TailorUtil.GetTerm(arg);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="8" offset="0019" domain="userortestcode"><source><![CDATA[return arg as ExtractFunction;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="12" offset="0022" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public static bool HasNullArgument(FunctionCall functionCall)
        {
            if (functionCall == null)
            {
                throw new ArgumentNullException("functionCall");
            }

            ExpressionItem argument = functionCall.ExpressionArguments;
            while (argument != null)
            {
                INode term = GetTerm(argument.Expression);
                if (term == NullValue.Value)
                {
                    return true;
                }

                argument = argument.Next;
            }

            return false;
        }

        /// <summary>
        /// Test for unquoted <see cref="SYSDATE"/>.
        /// </summary>
        /// <remarks>
        /// Not canonicalizing - we're accepting quoted "sysdate"
        /// as a regular identifier.
        /// </remarks>
        public static bool IsSysdate(Identifier identifier)
        ]]></source>
</chunk>
<method name="IsSysdate" namespace="MacroScope" type="MacroScope.TailorUtil" typeName="TailorUtil" token="60001a6" module="MacroScope.dll"><hits><hit index="0" value="5"/>
<hit index="6" value="5"/>
<hit index="7" value="5"/>
<hit index="8" value="5"/>
<hit index="9" value="10"/>
<hit index="10" value="5"/>
<hit index="11" value="5"/>
<hit index="12" value="5"/>
<hit index="13" value="5"/>
<hit index="14" value="5"/>
<hit index="15" value="10"/>
<hit index="16" value="5"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="5" total="7" coveredRatio="0.7142857142857143"/>
</method>
<chunk hits="5" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="5" offset="0001" domain="userortestcode"><source><![CDATA[if (identifier == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("identifier");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="5" offset="0018" domain="userortestcode"><source><![CDATA[return SYSDATE.Equals(
                identifier.ID.ToLower());]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="15" offset="0030" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public static FunctionCall CondGetFunctionCall(INode arg)
        ]]></source>
</chunk>
<method name="CondGetFunctionCall" namespace="MacroScope" type="MacroScope.TailorUtil" typeName="TailorUtil" token="60001a7" module="MacroScope.dll"><hits><hit index="0" value="12"/>
<hit index="1" value="4"/>
<hit index="2" value="8"/>
<hit index="3" value="8"/>
<hit index="4" value="8"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="4" total="4" coveredRatio="1"/>
</method>
<chunk hits="12" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="12" offset="0001" domain="userortestcode"><source><![CDATA[if (arg == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="4" offset="000d" domain="userortestcode"><source><![CDATA[return null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="8" offset="0011" domain="userortestcode"><source><![CDATA[arg = TailorUtil.GetTerm(arg);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="8" offset="0019" domain="userortestcode"><source><![CDATA[return arg as FunctionCall;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="12" offset="0022" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public static INode GetTerm(INode arg)
        ]]></source>
</chunk>
<method name="GetTerm" namespace="MacroScope" type="MacroScope.TailorUtil" typeName="TailorUtil" token="60001a8" module="MacroScope.dll"><hits><hit index="0" value="24"/>
<hit index="6" value="12"/>
<hit index="7" value="12"/>
<hit index="8" value="12"/>
<hit index="9" value="24"/>
<hit index="10" value="12"/>
<hit index="11" value="12"/>
<hit index="12" value="12"/>
<hit index="13" value="12"/>
<hit index="14" value="24"/>
<hit index="19" value="12"/>
<hit index="20" value="12"/>
<hit index="21" value="12"/>
<hit index="22" value="12"/>
<hit index="23" value="24"/>
<hit index="24" value="24"/>
<hit index="25" value="24"/>
<hit index="27" value="24"/>
<hit index="28" value="12"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="11" total="14" coveredRatio="0.7857142857142857"/>
</method>
<chunk hits="24" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="24" offset="0001" domain="userortestcode"><source><![CDATA[if (arg == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("arg");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="24" offset="0018" domain="userortestcode"><source><![CDATA[Expression expr = arg as Expression;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="60" offset="0042" domain="userortestcode"><source><![CDATA[while ((expr != null) && (expr.Operator == null))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="12" offset="0021" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="12" offset="0022" domain="userortestcode"><source><![CDATA[arg = (expr.Left != null) ? expr.Left : expr.Right;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="36" offset="003a" domain="userortestcode"><source><![CDATA[expr = arg as Expression;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="36" offset="0041" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="24" offset="0055" domain="userortestcode"><source><![CDATA[return arg;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="24" offset="0059" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        /// <summary>
        /// Constructs the last argument for substring functions.
        /// </summary>
        /// <param name="startExpr">
        /// First argument of the substring function
        /// (<c>ExpressionItem.Expression</c>, not the top-level <c>ExpressionItem</c>).
        /// </param>
        /// <param name="valExpr">
        /// Second argument of the substring function
        /// (<c>ExpressionItem.Expression</c>, not the top-level <c>ExpressionItem</c>).
        /// </param>
        /// <param name="lenName">
        /// Name of the length function (must not be null).
        /// </param>
        public static IExpression MakeLenArg(INode startExpr, INode valExpr,
            string lenName)
        {
            if (startExpr == null)
            {
                throw new ArgumentNullException("startExpr");
            }

            if (valExpr == null)
            {
                throw new ArgumentNullException("valExpr");
            }

            if (lenName == null)
            {
                throw new ArgumentNullException("lenName");
            }

            FunctionCall lenCall = new FunctionCall(lenName);
            lenCall.ExpressionArguments = new ExpressionItem(valExpr.Clone());

            IExpression argument;
            INode startTerm = GetTerm(startExpr);
            IntegerValue integerValue = startTerm as IntegerValue;
            if ((integerValue != null) && (integerValue.Value == 1))
            {
                argument = lenCall;
            }
            else
            {
                Expression left = new Expression(lenCall,
                    ExpressionOperator.Plus,
                    new IntegerValue(1));
                argument = new Expression(left,
                    ExpressionOperator.Minus,
                    startTerm.Clone());
            }

            return argument;
        }

        public static ExpressionItem MakeLiteralString(string literal)
        {
            if (literal == null)
            {
                throw new ArgumentNullException("literal");
            }

            StringValue stringValue = new StringValue(literal);
            return new ExpressionItem(stringValue);
        }

        public static ExpressionItem MakeLiteralInteger(int literal)
        {
            IntegerValue integerValue = new IntegerValue(literal);
            return new ExpressionItem(integerValue);
        }

        public static string GetCapitalized(string s)
        {
            if (s == null)
            {
                throw new ArgumentNullException("s");
            }

            if (s.Equals(""))
            {
                throw new ArgumentException("Empty input.", "s");
            }

            char head = char.ToUpper(s[0]);
            if (s.Length == 1)
            {
                return char.ToString(head);
            }

            string tail = s.Substring(1);
            tail = tail.ToLower();

            return string.Format("{0}{1}", head, tail);
        }

        #endregion
    }
}
]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MacroScopeCE\Namer.cs" renderPrefix="s23"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Text;

namespace MacroScope
{
    /// <summary>
    /// Replaces <see cref="Placeholder">placeholders</see> with
    /// individually named variables.
    /// </summary>
    public class Namer
    {
        #region Constants

        public static readonly string DEFAULT_STEM = "x";

        #endregion

        #region Fields

        private readonly char m_prefix;

        private readonly string m_stem;

        private int m_counter;

        #endregion

        #region Constructors

        ]]></source>
</chunk>
<method name=".ctor" namespace="MacroScope" type="MacroScope.Namer" typeName="Namer" token="60002cc" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[public Namer(char prefix):
            this(prefix, DEFAULT_STEM)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="000d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="000e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<method name=".ctor" namespace="MacroScope" type="MacroScope.Namer" typeName="Namer" token="60002cd" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="18" value="2"/>
<hit index="19" value="2"/>
<hit index="20" value="2"/>
<hit index="21" value="2"/>
<hit index="22" value="2"/>
<hit index="23" value="2"/>
<hit index="24" value="2"/>
<hit index="25" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="5" total="10" coveredRatio="0.5"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[public Namer(char prefix, string stem)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0008" domain="userortestcode"><source><![CDATA[if (!Variable.IsPrefix(prefix))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0012" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0013" domain="userortestcode"><source><![CDATA[string message = string.Format("Invalid variable name prefix '{0}'.",
                    prefix);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0024" domain="userortestcode"><source><![CDATA[throw new ArgumentException(message, "prefix");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="0030" domain="userortestcode"><source><![CDATA[if (stem == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="003b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="003c" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("stem");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="2" offset="0047" domain="userortestcode"><source><![CDATA[m_prefix = prefix;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="004e" domain="userortestcode"><source><![CDATA[m_stem = stem;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0055" domain="userortestcode"><source><![CDATA[m_counter = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="005c" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion

        #region IVisitor members

        public void PerformBefore(Expression node)
        ]]></source>
</chunk>
<method name="PerformBefore" namespace="MacroScope" type="MacroScope.Namer" typeName="Namer" token="60002ce" module="MacroScope.dll"><hits><hit index="0" value="6"/>
<hit index="6" value="6"/>
<hit index="7" value="6"/>
<hit index="8" value="6"/>
<hit index="9" value="12"/>
<hit index="10" value="6"/>
<hit index="11" value="6"/>
<hit index="17" value="6"/>
<hit index="18" value="6"/>
<hit index="19" value="6"/>
<hit index="20" value="12"/>
<hit index="21" value="6"/>
<hit index="22" value="6"/>
<hit index="28" value="6"/>
<hit index="29" value="6"/>
<hit index="30" value="6"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="8" total="14" coveredRatio="0.5714285714285714"/>
</method>
<chunk hits="6" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0001" domain="userortestcode"><source><![CDATA[if (node == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("node");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="6" offset="0018" domain="userortestcode"><source><![CDATA[Variable left = CondGetVariable(node.Left);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0025" domain="userortestcode"><source><![CDATA[if (left != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="002d" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="002e" domain="userortestcode"><source><![CDATA[node.Left = left;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0036" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="6" offset="0037" domain="userortestcode"><source><![CDATA[Variable right = CondGetVariable(node.Right);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0044" domain="userortestcode"><source><![CDATA[if (right != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="004c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="004d" domain="userortestcode"><source><![CDATA[node.Right = right;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0055" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="6" offset="0056" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion

        #region Transformations

        Variable CondGetVariable(INode arg)
        ]]></source>
</chunk>
<method name="CondGetVariable" namespace="MacroScope" type="MacroScope.Namer" typeName="Namer" token="60002cf" module="MacroScope.dll"><hits><hit index="0" value="12"/>
<hit index="1" value="12"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="2" total="5" coveredRatio="0.4"/>
</method>
<chunk hits="12" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="12" offset="0001" domain="userortestcode"><source><![CDATA[Placeholder p = arg as Placeholder;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="12" offset="0008" domain="userortestcode"><source><![CDATA[if (p == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="12" offset="0013" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="12" offset="0014" domain="userortestcode"><source><![CDATA[return null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="0" offset="0018" domain="userortestcode"><source><![CDATA[return new Variable(GenName());]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="12" offset="0026" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public string GenName()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append(m_prefix);
            sb.Append(m_stem);

            sb.AppendFormat("{0:000}", m_counter++);
            if (m_counter >= 1000)
            {
                throw new Exception("Seriously...");
            }

            return sb.ToString();
        }

        #endregion
    }
}
]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MacroScopeCE\Variable.cs" renderPrefix="s24"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;

namespace MacroScope
{
    /// <summary>
    /// Represents a named SQL parameter.
    /// </summary>
    public sealed class Variable : INode
    {
        #region Fields

        private string m_prefixedName;

        #endregion

        #region Constructor

        public Variable(string prefixedName)
        {
            SetName(prefixedName);
        }

        #endregion

        #region Properties

        public char Prefix
        {
            get
            {
                return m_prefixedName[0];
            }

            set
            {
                if (!IsPrefix(value))
                {
                    string message = string.Format("Not a variable prefix: '{0}'.",
                        value);
                    throw new ArgumentException(message);
                }

                if (value != m_prefixedName[0])
                {
                    m_prefixedName = string.Format("{0}{1}", value, NameStem);
                }
            }
        }

        public string NameStem
        {
            get
            {
                return m_prefixedName.Substring(1);
            }

            set
            {
                if (value == null)
                {
                    throw new ArgumentNullException("value");
                }

                if (value.Equals(""))
                {
                    throw new ArgumentException("Variable name stem can't be empty.");
                }

                m_prefixedName = string.Format("{0}{1}", m_prefixedName[0], value);
            }
        }

        /// <summary>
        /// The variable name, including prefix (never null).
        /// </summary>
        public string PrefixedName
        {
            get
            {
                return m_prefixedName;
            }

            set
            {
                SetName(value);
            }
        }

        #endregion

        #region INode Members

        public INode Clone()
        {
            return new Variable(m_prefixedName);
        }

        public void Traverse(IVisitor visitor)
        {
            if (visitor == null)
            {
                throw new ArgumentNullException("visitor");
            }

            visitor.Perform(this);
        }

        #endregion

        #region Value semantics

        /// <summary>
        /// Normalizes the name to a form suitable for string comparisons.
        /// </summary>
        /// <param name="prefixedName">
        /// The variable name: a prefix, followed by an ASCII letter, optionally
        /// followed by more ASCII letters, digits and underscores.
        /// </param>
        /// <returns>
        /// Name stem in lowercase (never null).
        /// </returns>
        public static string Canonicalize(string prefixedName)
        {
            if (prefixedName == null)
            {
                throw new ArgumentNullException("prefixedName");
            }

            if (prefixedName.Length < 2)
            {
                string message = string.Format("Variable name {0} has no prefix.",
                    prefixedName);
                throw new ArgumentException(message, "prefixedName");
            }

            if (!IsPrefix(prefixedName[0]))
            {
                string message = string.Format("Variable {0} has no prefix.",
                    prefixedName);
                throw new ArgumentException(message, "prefixedName");
            }

            string tail = prefixedName.Substring(1);
            string v = tail.ToLower();
            if (v == null)
            {
                string message = string.Format("Can't lowercase {0}.", prefixedName);
                throw new Exception(message);
            }

            return v;
        }

        public override bool Equals(object obj)
        {
            Variable other = obj as Variable;
            if (other == null)
            {
                return false;
            }

            string left = Canonicalize(PrefixedName);
            string right = Canonicalize(other.PrefixedName);

            return left.Equals(right);
        }

        public override int GetHashCode()
        {
            string left = Canonicalize(PrefixedName);
            return left.GetHashCode();
        }

        public int CompareTo(object obj)
        {
            Variable other = obj as Variable;
            if (other == null)
            {
                throw new ArgumentException("Object is not a Variable.", "obj");
            }

            string left = Canonicalize(PrefixedName);
            string right = Canonicalize(other.PrefixedName);

            return left.CompareTo(right);
        }

        #endregion

        #region Utilities

        void SetName(string prefixedName)
        {
            if (prefixedName == null)
            {
                throw new ArgumentNullException("prefixedName");
            }

            if (prefixedName.Length < 2)
            {
                string message = string.Format("Variable name {0} has no prefix.",
                    prefixedName);
                throw new ArgumentException(message, "prefixedName");
            }

            if (!IsPrefix(prefixedName[0]))
            {
                string message = string.Format("Variable {0} has no prefix.",
                    prefixedName);
                throw new ArgumentException(message, "prefixedName");
            }

            m_prefixedName = prefixedName;
        }

        public static bool IsPrefix(char c)
        ]]></source>
</chunk>
<method name="IsPrefix" namespace="MacroScope" type="MacroScope.Variable" typeName="Variable" token="6000300" module="MacroScope.dll"><hits><hit index="0" value="2"/>
<hit index="2" value="2"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="2" total="3" coveredRatio="0.66666666666666663"/>
</method>
<chunk hits="2" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="userortestcode"><source><![CDATA[return (c == '@') || (c == ':');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0011" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion
    }
}
]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MockDBMS\SqlServerInterface\MockSqlDataReader.cs" renderPrefix="s25"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Collections.Generic;
using System.Text;

namespace MockDBMS.SqlServer
{
    public class MockSqlDataReader
    {
        public List<object[]> records;
        ]]></source>
</chunk>
<method name=".ctor" namespace="MockDBMS.SqlServer" type="MockDBMS.SqlServer.MockSqlDataReader" typeName="MockSqlDataReader" token="6000003" module="MockDBMS.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="usercodeundertest"><source><![CDATA[int currentIndex = -1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        object[] currentRecord; 

        private List<object[]> Records
        {
            get { return records; }
            set { records = value; }
        }
        ]]></source>
</chunk>
<chunk hits="4" offset="0007" domain="usercodeundertest"><source><![CDATA[public MockSqlDataReader(List<object[]> records)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="000e" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="000f" domain="usercodeundertest"><source><![CDATA[this.records = records;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0016" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public bool HasRows()
        {
            if (records.Count !=0 )
                return true;
            else
                return false;
        }


        // Summary:
        //     Gets the value of the specified column in its native format given the column
        //     ordinal.
        //
        // Parameters:
        //   i:
        //     The zero-based column ordinal.
        //
        // Returns:
        //     The value of the specified column in its native format.
        //
        // Exceptions:
        //   System.IndexOutOfRangeException:
        //     The index passed was outside the range of 0 through System.Data.IDataRecord.FieldCount.
        public object this[int i] 
        {       
            get 
            ]]></source>
</chunk>
<method name="get_Item" namespace="MockDBMS.SqlServer" type="MockDBMS.SqlServer.MockSqlDataReader" typeName="MockSqlDataReader" token="6000005" module="MockDBMS.dll"><hits><hit index="0" value="10"/>
<hit index="1" value="10"/>
<hit index="7" value="10"/>
<hit index="8" value="10"/>
<hit index="9" value="10"/>
<hit index="10" value="10"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="2" total="4" coveredRatio="0.5"/>
</method>
<chunk hits="10" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="10" offset="0001" domain="usercodeundertest"><source><![CDATA[if (currentRecord == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0011" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0012" domain="usercodeundertest"><source><![CDATA[throw new Exception("Not expected to be null");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                }
                ]]></source>
</chunk>
<chunk hits="10" offset="001d" domain="usercodeundertest"><source><![CDATA[return currentRecord[i];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            ]]></source>
</chunk>
<chunk hits="20" offset="0028" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
        }
        public object this[string name] 
        {
            get { throw new NotImplementedException(); }
        }

        //
        // Summary:
        //     Advances the System.Data.SqlClient.SqlDataReader to the next record.
        //
        // Returns:
        //     true if there are more rows; otherwise false.
        public bool Read()
        ]]></source>
</chunk>
<method name="Read" namespace="MockDBMS.SqlServer" type="MockDBMS.SqlServer.MockSqlDataReader" typeName="MockSqlDataReader" token="6000007" module="MockDBMS.dll"><hits><hit index="0" value="6"/>
<hit index="1" value="6"/>
<hit index="2" value="6"/>
<hit index="3" value="6"/>
<hit index="4" value="6"/>
<hit index="5" value="6"/>
<hit index="6" value="12"/>
<hit index="7" value="2"/>
<hit index="8" value="4"/>
<hit index="9" value="4"/>
<hit index="10" value="4"/>
<hit index="11" value="4"/>
<hit index="12" value="4"/>
<hit index="13" value="4"/>
<hit index="14" value="4"/>
<hit index="15" value="8"/>
<hit index="16" value="4"/>
<hit index="17" value="4"/>
<hit index="18" value="4"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="5" total="5" coveredRatio="1"/>
</method>
<chunk hits="6" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="0001" domain="usercodeundertest"><source><![CDATA[if (currentIndex == records.Count - 1)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="001d" domain="usercodeundertest"><source><![CDATA[return false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0021" domain="usercodeundertest"><source><![CDATA[currentRecord = records[++currentIndex];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="8" offset="0043" domain="usercodeundertest"><source><![CDATA[return true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="10" offset="0047" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

    }
}
]]></source>
</chunk>
</document>
<document src="C:\TaintSQL\MacroScopeCE\StringValue.cs" renderPrefix="s26"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Diagnostics;
using System.Text;
using System.Text.RegularExpressions;

namespace MacroScope
{
    /// <summary>
    /// Represents an SQL string literal.
    /// </summary>
    public sealed class StringValue : INode
    {
        #region Fields

        private string m_value;

        private char m_quoteType;

        #endregion

        #region Constructor

        ]]></source>
</chunk>
<method name=".ctor" namespace="MacroScope" type="MacroScope.StringValue" typeName="StringValue" token="60002dc" module="MacroScope.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
<hit index="10" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="5" coveredRatio="0.6"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[public StringValue(string v)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0008" domain="userortestcode"><source><![CDATA[if (v == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0013" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0014" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("v");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="1" offset="001f" domain="userortestcode"><source><![CDATA[m_value = v;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0026" domain="userortestcode"><source><![CDATA[m_quoteType = '\'';]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="002e" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion

        #region Properties

        public string Value
        {
            get ]]></source>
</chunk>
<method name="get_Value" namespace="MacroScope" type="MacroScope.StringValue" typeName="StringValue" token="60002dd" module="MacroScope.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="userortestcode"><source><![CDATA[return m_value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="000a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        }

        public char QuoteType
        {
            get
            {
                return m_quoteType;
            }

            set
            {
                char q = char.ToLower(value);
                if ((q == '\'') || (q == '\"') || (q == 'n'))
                {
                    m_quoteType = q;
                }
                else
                {
                    string message = string.Format("Invalid quote type {0}.", value);
                    throw new ArgumentException(message);
                }
            }
        }

        public string QuotedValue
        {
            get
            {
                StringBuilder quoted = new StringBuilder();

                char q = m_quoteType;
                if (q == 'n')
                {
                    quoted.Append('N');
                    q = '\'';
                }

                string quote = q.ToString();
                string quotequote = string.Format("{0}{1}", q, q);
                string p = Regex.Replace(m_value, quote, quotequote);

                quoted.Append(q);
                quoted.Append(p);
                quoted.Append(q);

                return quoted.ToString();
            }
        }

        #endregion

        #region Build methods

        public void Append(StringValue tail)
        {
            if (tail == null)
            {
                throw new ArgumentNullException("tail");
            }

            if (tail.QuoteType == 'n')
            {
                m_quoteType = 'n';
            }

            m_value += tail.Value;
        }

        #endregion

        #region INode Members

        public INode Clone()
        {
            return new StringValue(m_value);
        }

        public void Traverse(IVisitor visitor)
        ]]></source>
</chunk>
<method name="Traverse" namespace="MacroScope" type="MacroScope.StringValue" typeName="StringValue" token="60002e3" module="MacroScope.dll"><hits><hit index="0" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="2"/>
<hit index="10" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="5" coveredRatio="0.6"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="userortestcode"><source><![CDATA[if (visitor == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000d" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("visitor");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="1" offset="0018" domain="userortestcode"><source><![CDATA[visitor.Perform(this);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="0020" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion
    }
}
]]></source>
</chunk>
</document>
<document src="(no sources available for some parts of Antlr3.Runtime, MockDBMS, MacroScope)" missing="true"><method name=".ctor" type="Antlr.Runtime.CommonTokenStream" token="60002a1" module="Antlr3.Runtime.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="0" coveredRatio="0"/>
</method>
<method name="LA" type="Antlr.Runtime.CommonTokenStream" token="60002aa" module="Antlr3.Runtime.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="0" coveredRatio="0"/>
</method>
<method name="Match" type="Antlr.Runtime.Lexer" token="6000158" module="Antlr3.Runtime.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="0" coveredRatio="0"/>
</method>
<method name="Match" type="Antlr.Runtime.Lexer" token="600015a" module="Antlr3.Runtime.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="0" coveredRatio="0"/>
</method>
<method name="MatchRange" type="Antlr.Runtime.Lexer" token="600015b" module="Antlr3.Runtime.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="0" coveredRatio="0"/>
</method>
<method name="Predict" type="Antlr.Runtime.DFA" token="600031a" module="Antlr3.Runtime.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="0" coveredRatio="0"/>
</method>
<method name="Rewind" type="Antlr.Runtime.ANTLRStringStream" token="60001b9" module="Antlr3.Runtime.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="0" coveredRatio="0"/>
</method>
<method name="Match" type="Antlr.Runtime.BaseRecognizer" token="6000019" module="Antlr3.Runtime.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="0" coveredRatio="0"/>
</method>
<method name="LT" type="Antlr.Runtime.CommonTokenStream" token="60002a3" module="Antlr3.Runtime.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="0" coveredRatio="0"/>
</method>
<method name=".ctor" type="MockDBMS.DBMS" token="6000022" module="MockDBMS.dll"><hits/>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name=".ctor" type="MacroScope.PassiveVisitor" token="600020e" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
</document>
</documents>
