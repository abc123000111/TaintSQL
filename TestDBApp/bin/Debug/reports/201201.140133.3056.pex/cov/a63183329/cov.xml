<documents created="2020-12-01 06:02:00Z"><document src="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" renderPrefix="s0"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Collections.Generic;
//using System.Linq;
using System.Text;
using MacroScope;
using Microsoft.Pex.Framework;
using System.Text.RegularExpressions;
using Microsoft.Pex.Framework.Suppression;

namespace MockDBMS
{
    public enum DataTypes { STRING, INT, CHAR };
    public class DBMS
    {
        #region IMPORTANT: Accessing tables in DBMS (MG)
        public List<Table> tables;

        // MG: This function is not referenced
        public void AddTable(Table table)
        {
            tables.Add(table);
        }
        
        // MG: MOST IMPORTANT function, returns the reference to the table stored in the DBMS
        public Table GetTableByName(string name)
        ]]></source>
</chunk>
<method name="GetTableByName" namespace="MockDBMS" type="MockDBMS.DBMS" typeName="DBMS" token="6000014" module="MockDBMS.dll"><hits><hit index="0" value="4"/>
<hit index="1" value="4"/>
<hit index="2" value="4"/>
<hit index="3" value="4"/>
<hit index="4" value="4"/>
<hit index="5" value="8"/>
<hit index="6" value="8"/>
<hit index="7" value="8"/>
<hit index="8" value="8"/>
<hit index="9" value="8"/>
<hit index="10" value="8"/>
<hit index="11" value="8"/>
<hit index="12" value="16"/>
<hit index="13" value="4"/>
<hit index="14" value="8"/>
<hit index="15" value="8"/>
<hit index="17" value="4"/>
<hit index="18" value="8"/>
<hit index="22" value="4"/>
<hit index="23" value="4"/>
<hit index="24" value="4"/>
<hit index="25" value="4"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="9" total="10" coveredRatio="0.9"/>
</method>
<chunk hits="4" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0001" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="8" offset="0010" domain="usercodeundertest"><source><![CDATA[Table t]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="16" offset="0031" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="4" offset="0002" domain="usercodeundertest"><source><![CDATA[tables]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
            ]]></source>
</chunk>
<chunk hits="8" offset="0018" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="8" offset="0019" domain="usercodeundertest"><source><![CDATA[if (t.name.Equals(name))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="4" offset="002c" domain="usercodeundertest"><source><![CDATA[return t;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0030" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="004e" domain="usercodeundertest"><source><![CDATA[return null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0053" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        #endregion

        #region Initialize DBMS schema (MG)
        [PexIgnore("ignore")]
        private void readSchemaFromFile()
        ]]></source>
</chunk>
<method name="readSchemaFromFile" namespace="MockDBMS" type="MockDBMS.DBMS" typeName="DBMS" token="6000015" module="MockDBMS.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
<hit index="8" value="38"/>
<hit index="9" value="38"/>
<hit index="10" value="38"/>
<hit index="11" value="38"/>
<hit index="12" value="4"/>
<hit index="13" value="4"/>
<hit index="14" value="4"/>
<hit index="15" value="4"/>
<hit index="16" value="4"/>
<hit index="17" value="4"/>
<hit index="18" value="4"/>
<hit index="19" value="4"/>
<hit index="20" value="4"/>
<hit index="21" value="4"/>
<hit index="23" value="4"/>
<hit index="24" value="4"/>
<hit index="25" value="4"/>
<hit index="26" value="4"/>
<hit index="27" value="4"/>
<hit index="28" value="8"/>
<hit index="29" value="34"/>
<hit index="30" value="34"/>
<hit index="31" value="25"/>
<hit index="32" value="25"/>
<hit index="33" value="25"/>
<hit index="34" value="34"/>
<hit index="35" value="34"/>
<hit index="39" value="34"/>
<hit index="40" value="34"/>
<hit index="41" value="2"/>
<hit index="42" value="2"/>
<hit index="43" value="2"/>
<hit index="44" value="34"/>
<hit index="45" value="34"/>
<hit index="49" value="34"/>
<hit index="50" value="34"/>
<hit index="54" value="34"/>
<hit index="55" value="34"/>
<hit index="59" value="34"/>
<hit index="60" value="34"/>
<hit index="64" value="34"/>
<hit index="65" value="34"/>
<hit index="69" value="34"/>
<hit index="70" value="34"/>
<hit index="74" value="34"/>
<hit index="75" value="34"/>
<hit index="79" value="7"/>
<hit index="80" value="27"/>
<hit index="81" value="27"/>
<hit index="82" value="27"/>
<hit index="83" value="27"/>
<hit index="84" value="27"/>
<hit index="85" value="27"/>
<hit index="86" value="27"/>
<hit index="87" value="54"/>
<hit index="88" value="27"/>
<hit index="89" value="27"/>
<hit index="90" value="27"/>
<hit index="91" value="27"/>
<hit index="92" value="27"/>
<hit index="93" value="54"/>
<hit index="94" value="39"/>
<hit index="95" value="1"/>
<hit index="96" value="34"/>
<hit index="97" value="9"/>
<hit index="98" value="34"/>
<hit index="99" value="32"/>
<hit index="100" value="34"/>
<hit index="101" value="34"/>
<hit index="102" value="34"/>
<hit index="103" value="34"/>
<hit index="104" value="34"/>
<hit index="105" value="34"/>
<hit index="106" value="34"/>
<hit index="107" value="27"/>
<hit index="108" value="38"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="45" total="61" coveredRatio="0.73770491803278693"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[tables = new List<Table>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="000c" domain="usercodeundertest"><source><![CDATA[string[] lines = System.IO.File.ReadAllLines(@"C:\schema.txt");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0017" domain="usercodeundertest"><source><![CDATA[Table table = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0019" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="38" offset="0025" domain="usercodeundertest"><source><![CDATA[string line]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="101" offset="0254" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="001a" domain="usercodeundertest"><source><![CDATA[lines]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
            ]]></source>
</chunk>
<chunk hits="76" offset="002b" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="76" offset="002c" domain="usercodeundertest"><source><![CDATA[if (line.Contains("CREATE TABLE"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="4" offset="0040" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="4" offset="0041" domain="usercodeundertest"><source><![CDATA[int i = line.IndexOf("CREATE TABLE");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="4" offset="004d" domain="usercodeundertest"><source><![CDATA[int j = line.IndexOf("(");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="4" offset="005a" domain="usercodeundertest"><source><![CDATA[string tableName = line.Substring(i + 12, j - i - 12).Trim();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="4" offset="0072" domain="usercodeundertest"><source><![CDATA[table = new Table(tableName);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="4" offset="007a" domain="usercodeundertest"><source><![CDATA[tables.Add(table);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="12" offset="0087" domain="usercodeundertest"><source><![CDATA[continue;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                }
                ]]></source>
</chunk>
<chunk hits="34" offset="008c" domain="usercodeundertest"><source><![CDATA[DataTypes type = DataTypes.INT;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="34" offset="008f" domain="usercodeundertest"><source><![CDATA[int index = -1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="34" offset="0092" domain="usercodeundertest"><source><![CDATA[if (line.Contains("varchar"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="25" offset="00a6" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="25" offset="00a7" domain="usercodeundertest"><source><![CDATA[type = DataTypes.STRING;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="25" offset="00aa" domain="usercodeundertest"><source><![CDATA[index = line.IndexOf("varchar");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="25" offset="00b7" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="34" offset="00b8" domain="usercodeundertest"><source><![CDATA[if (line.Contains("VARCHAR"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00cc" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="00cd" domain="usercodeundertest"><source><![CDATA[type = DataTypes.STRING;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="00d0" domain="usercodeundertest"><source><![CDATA[index = line.IndexOf("VARCHAR");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00dd" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="34" offset="00de" domain="usercodeundertest"><source><![CDATA[if (line.Contains("int"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="00f2" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="00f3" domain="usercodeundertest"><source><![CDATA[type = DataTypes.INT;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="00f6" domain="usercodeundertest"><source><![CDATA[index = line.IndexOf("int");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0103" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="34" offset="0104" domain="usercodeundertest"><source><![CDATA[if (line.Contains("INT"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0118" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0119" domain="usercodeundertest"><source><![CDATA[type = DataTypes.INT;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="011c" domain="usercodeundertest"><source><![CDATA[index = line.IndexOf("INT");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0129" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="34" offset="012a" domain="usercodeundertest"><source><![CDATA[if (line.Contains("enum"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="013e" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="013f" domain="usercodeundertest"><source><![CDATA[type = DataTypes.STRING;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0142" domain="usercodeundertest"><source><![CDATA[index = line.IndexOf("enum");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="014f" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="34" offset="0150" domain="usercodeundertest"><source><![CDATA[if (line.Contains("ENUM"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0164" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0165" domain="usercodeundertest"><source><![CDATA[type = DataTypes.STRING;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0168" domain="usercodeundertest"><source><![CDATA[index = line.IndexOf("ENUM");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0175" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="34" offset="0176" domain="usercodeundertest"><source><![CDATA[if (line.Contains("bigint"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="018a" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="018b" domain="usercodeundertest"><source><![CDATA[type = DataTypes.INT;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="018e" domain="usercodeundertest"><source><![CDATA[index = line.IndexOf("bigint");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="019b" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="34" offset="019c" domain="usercodeundertest"><source><![CDATA[if (line.Contains("BIGINT"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="01b0" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="01b1" domain="usercodeundertest"><source><![CDATA[type = DataTypes.INT;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="01b4" domain="usercodeundertest"><source><![CDATA[index = line.IndexOf("BIGINT");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="01c1" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="34" offset="01c2" domain="usercodeundertest"><source><![CDATA[if (line.Contains("TINYINT"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="01d6" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="01d7" domain="usercodeundertest"><source><![CDATA[type = DataTypes.INT;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="01da" domain="usercodeundertest"><source><![CDATA[index = line.IndexOf("TINYINT");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="01e7" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="34" offset="01e8" domain="usercodeundertest"><source><![CDATA[if (line.Contains("tinyint"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="01fc" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="01fd" domain="usercodeundertest"><source><![CDATA[type = DataTypes.INT;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0200" domain="usercodeundertest"><source><![CDATA[index = line.IndexOf("tinyint");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="020d" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="34" offset="020e" domain="usercodeundertest"><source><![CDATA[if (index == -1)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="7" offset="021c" domain="usercodeundertest"><source><![CDATA[continue;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="27" offset="021e" domain="usercodeundertest"><source><![CDATA[string cname = line.Substring(0, index).Trim();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="27" offset="022e" domain="usercodeundertest"><source><![CDATA[table.AddColumn(cname, type);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="81" offset="0239" domain="usercodeundertest"><source><![CDATA[table.AddColumn(cname + "_TAINT", DataTypes.STRING);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="81" offset="024d" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0265" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[


        /// <summary>
        /// MG: Currently schema is hard-coded
        /// </summary>
        private void initializeDBMSFromSchema()
        ]]></source>
</chunk>
<method name="initializeDBMSFromSchema" namespace="MockDBMS" type="MockDBMS.DBMS" typeName="DBMS" token="6000016" module="MockDBMS.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[readSchemaFromFile();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            /* tables = new List<Table>(); 
            Table t = new Table("persons");
            t.AddColumn("firstname", DataTypes.STRING);
            t.AddColumn("lastname", DataTypes.STRING);
            t.AddColumn("age", DataTypes.INT);
            tables.Add(t);

            Table t2 = new Table("Users");
            t2.AddColumn("MID", DataTypes.INT);
            t2.AddColumn("Role", DataTypes.STRING);
            t2.AddPrimaryKey("MID");
            tables.Add(t2); */
            //tables = new List<Table>(); Table t = new Table("persons");
            //    t.AddColumn("firstname", DataTypes.STRING);
            //    t.AddColumn("lastname", DataTypes.STRING);
            //    t.AddColumn("age", DataTypes.INT);
            //    tables.Add(t);
        ]]></source>
</chunk>
<chunk hits="1" offset="0008" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        /// <summary>
        /// MG: This method initializes the database schema and call Pex to generate records
        /// </summary>
        [PexMethod()]
        public void CreateDatabaseState()
        ]]></source>
</chunk>
<method name="CreateDatabaseState" namespace="MockDBMS" type="MockDBMS.DBMS" typeName="DBMS" token="6000017" module="MockDBMS.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            //MockDBMS dbms = new MockDBMS();
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[initializeDBMSFromSchema();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
             //Test Code

            //FillTestRecords();
            //GenerateRandomReccords(1);
            ]]></source>
</chunk>
<chunk hits="1" offset="0008" domain="usercodeundertest"><source><![CDATA[LetPexChooseRecords();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="000f" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        /// <summary>
        /// MG: Use Pex to populate the tables in DBMS
        /// </summary>
        private void LetPexChooseRecords()
        ]]></source>
</chunk>
<method name="LetPexChooseRecords" namespace="MockDBMS" type="MockDBMS.DBMS" typeName="DBMS" token="6000018" module="MockDBMS.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="2"/>
<hit index="6" value="4"/>
<hit index="7" value="4"/>
<hit index="8" value="4"/>
<hit index="9" value="4"/>
<hit index="10" value="4"/>
<hit index="11" value="8"/>
<hit index="12" value="4"/>
<hit index="13" value="4"/>
<hit index="14" value="4"/>
<hit index="15" value="8"/>
<hit index="16" value="4"/>
<hit index="17" value="4"/>
<hit index="18" value="4"/>
<hit index="19" value="8"/>
<hit index="21" value="4"/>
<hit index="22" value="4"/>
<hit index="23" value="4"/>
<hit index="24" value="4"/>
<hit index="25" value="4"/>
<hit index="26" value="8"/>
<hit index="27" value="4"/>
<hit index="28" value="27"/>
<hit index="29" value="27"/>
<hit index="30" value="27"/>
<hit index="31" value="54"/>
<hit index="32" value="27"/>
<hit index="33" value="27"/>
<hit index="34" value="27"/>
<hit index="35" value="54"/>
<hit index="36" value="2"/>
<hit index="38" value="2"/>
<hit index="39" value="2"/>
<hit index="40" value="2"/>
<hit index="41" value="2"/>
<hit index="42" value="2"/>
<hit index="43" value="2"/>
<hit index="44" value="2"/>
<hit index="45" value="2"/>
<hit index="46" value="2"/>
<hit index="47" value="2"/>
<hit index="48" value="2"/>
<hit index="49" value="2"/>
<hit index="50" value="2"/>
<hit index="51" value="2"/>
<hit index="52" value="2"/>
<hit index="53" value="2"/>
<hit index="54" value="2"/>
<hit index="55" value="2"/>
<hit index="56" value="2"/>
<hit index="57" value="2"/>
<hit index="58" value="2"/>
<hit index="59" value="2"/>
<hit index="60" value="2"/>
<hit index="61" value="2"/>
<hit index="62" value="2"/>
<hit index="63" value="2"/>
<hit index="64" value="2"/>
<hit index="65" value="2"/>
<hit index="66" value="2"/>
<hit index="67" value="2"/>
<hit index="68" value="2"/>
<hit index="69" value="2"/>
<hit index="70" value="2"/>
<hit index="71" value="2"/>
<hit index="72" value="2"/>
<hit index="73" value="2"/>
<hit index="74" value="2"/>
<hit index="75" value="2"/>
<hit index="76" value="2"/>
<hit index="77" value="2"/>
<hit index="78" value="2"/>
<hit index="79" value="2"/>
<hit index="80" value="2"/>
<hit index="81" value="4"/>
<hit index="82" value="2"/>
<hit index="83" value="2"/>
<hit index="84" value="2"/>
<hit index="85" value="2"/>
<hit index="86" value="25"/>
<hit index="88" value="25"/>
<hit index="89" value="25"/>
<hit index="90" value="25"/>
<hit index="91" value="25"/>
<hit index="92" value="25"/>
<hit index="93" value="25"/>
<hit index="94" value="25"/>
<hit index="95" value="25"/>
<hit index="96" value="25"/>
<hit index="97" value="25"/>
<hit index="98" value="25"/>
<hit index="99" value="25"/>
<hit index="100" value="25"/>
<hit index="101" value="25"/>
<hit index="102" value="25"/>
<hit index="103" value="25"/>
<hit index="104" value="25"/>
<hit index="105" value="25"/>
<hit index="106" value="25"/>
<hit index="107" value="25"/>
<hit index="108" value="25"/>
<hit index="109" value="25"/>
<hit index="110" value="25"/>
<hit index="111" value="25"/>
<hit index="112" value="25"/>
<hit index="113" value="25"/>
<hit index="114" value="25"/>
<hit index="115" value="25"/>
<hit index="116" value="25"/>
<hit index="117" value="25"/>
<hit index="118" value="25"/>
<hit index="119" value="25"/>
<hit index="120" value="25"/>
<hit index="121" value="25"/>
<hit index="122" value="25"/>
<hit index="123" value="25"/>
<hit index="124" value="50"/>
<hit index="125" value="25"/>
<hit index="126" value="25"/>
<hit index="127" value="25"/>
<hit index="128" value="25"/>
<hit index="129" value="31"/>
<hit index="130" value="31"/>
<hit index="131" value="31"/>
<hit index="132" value="62"/>
<hit index="133" value="4"/>
<hit index="134" value="4"/>
<hit index="135" value="4"/>
<hit index="136" value="4"/>
<hit index="137" value="8"/>
<hit index="138" value="4"/>
<hit index="139" value="5"/>
<hit index="140" value="5"/>
<hit index="141" value="1"/>
<hit index="142" value="25"/>
<hit index="144" value="27"/>
<hit index="145" value="4"/>
<hit index="146" value="4"/>
<hit index="153" value="1"/>
<hit index="154" value="1"/>
<hit index="155" value="1"/>
<hit index="156" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="33" total="33" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="4" offset="0014" domain="usercodeundertest"><source><![CDATA[Table table]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="7" offset="01b8" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="0002" domain="usercodeundertest"><source><![CDATA[tables]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
            ]]></source>
</chunk>
<chunk hits="4" offset="001c" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                //var chooser = PexChoose.FromCall(this);
                //int numRecords = PexChoose.Value<int>("Num Records");
                //PexAssume.IsTrue(numRecords >= 0 && numRecords <= 2);
                ]]></source>
</chunk>
<chunk hits="4" offset="001d" domain="usercodeundertest"><source><![CDATA[int numRecords = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                for (]]></source>
</chunk>
<chunk hits="4" offset="001f" domain="usercodeundertest"><source><![CDATA[int i = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="16" offset="01aa" domain="usercodeundertest"><source><![CDATA[i < numRecords]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="12" offset="01a6" domain="usercodeundertest"><source><![CDATA[i++]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                ]]></source>
</chunk>
<chunk hits="4" offset="0026" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="4" offset="0027" domain="usercodeundertest"><source><![CDATA[Dictionary<string, DataTypes> nameType = table.ColumnNameType;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="12" offset="002e" domain="usercodeundertest"><source><![CDATA[Dictionary<string, DataTypes>.KeyCollection keys = nameType.Keys;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="12" offset="0036" domain="usercodeundertest"><source><![CDATA[object[] record = new object[keys.Count];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="4" offset="0044" domain="usercodeundertest"><source><![CDATA[IEnumerator<string> columnEnum = keys.GetEnumerator();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                    ]]></source>
</chunk>
<chunk hits="12" offset="0052" domain="usercodeundertest"><source><![CDATA[int j = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="120" offset="018c" domain="usercodeundertest"><source><![CDATA[while (columnEnum.MoveNext())]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="27" offset="005a" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="27" offset="005b" domain="usercodeundertest"><source><![CDATA[String column = columnEnum.Current;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="81" offset="0064" domain="usercodeundertest"><source><![CDATA[DataTypes type = nameType[column];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                        ]]></source>
</chunk>
<chunk hits="81" offset="006e" domain="usercodeundertest"><source><![CDATA[if (type == DataTypes.INT)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="007f" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="2" offset="0080" domain="usercodeundertest"><source><![CDATA[int value = PexChoose.Value<int>("Table: " + table.name + " Column " + column + " Record " + i);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="2" offset="00cb" domain="usercodeundertest"><source><![CDATA[PexAssume.IsNotNull(value);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            //PexAssume.IsFalse(value == 0);
                            ]]></source>
</chunk>
<chunk hits="2" offset="00d8" domain="usercodeundertest"><source><![CDATA[record[j++] = value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="8" offset="00e9" domain="usercodeundertest"><source><![CDATA[columnEnum.MoveNext();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="6" offset="00f1" domain="usercodeundertest"><source><![CDATA[record[j++] = "00000000";]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="8" offset="0100" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else ]]></source>
</chunk>
<chunk hits="25" offset="0106" domain="usercodeundertest"><source><![CDATA[if (type == DataTypes.STRING)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="25" offset="0114" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="25" offset="0115" domain="usercodeundertest"><source><![CDATA[string value = PexChoose.Value<string>("column " + column + " Record " + i);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="25" offset="014d" domain="usercodeundertest"><source><![CDATA[PexAssume.IsNotNull(value);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="25" offset="0155" domain="usercodeundertest"><source><![CDATA[PexAssume.IsTrue(value != "");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="25" offset="0167" domain="usercodeundertest"><source><![CDATA[record[j++] = value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="100" offset="0173" domain="usercodeundertest"><source><![CDATA[columnEnum.MoveNext();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="75" offset="017b" domain="usercodeundertest"><source><![CDATA[record[j++] = "00000000";]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="100" offset="018a" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="108" offset="018b" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="4" offset="019c" domain="usercodeundertest"><source><![CDATA[table.InsertRecord(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="12" offset="01a5" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="01b7" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="01da" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        #endregion

        #region Not referenced functions (MG)
        // MG: This function is not referenced
        private void GenerateRandomReccords(int numRecords)
        {
            //DateTime start = DateTime.Now;
            foreach (Table table in tables)
            {
                for (int i = 0; i < numRecords; i++)
                {
                    /*DateTime now = DateTime.Now;
                    TimeSpan duration = start - now;
                    if (duration.Minutes >= 2)
                        break;*/
                    Dictionary<string, DataTypes> nameType = table.ColumnNameType;
                    Dictionary<string, DataTypes>.KeyCollection keys = nameType.Keys;
                    object[] record = new object[keys.Count];
                    IEnumerator<string> columnEnum = keys.GetEnumerator();

                    int j = 0;
                    while (columnEnum.MoveNext())
                    {
                        String column = columnEnum.Current;
                        DataTypes type = nameType[column];

                        if (type == DataTypes.INT)
                        {
                            Random r = new Random((int)DateTime.Now.Ticks);
                            int value = r.Next(1, 10);
                            record[j++] = value;
                            columnEnum.MoveNext();
                            record[j++] = "00000000";
                        }
                        else if (type == DataTypes.STRING)
                        {
                            string value = RandomString(5, true);
                            record[j++] = value;
                            columnEnum.MoveNext();
                            record[j++] = "00000000";
                        }
                    }
                    table.InsertRecord(record);
                }
            }
        }

        // MG: This function is only used in GenerateRandomReccords(), which is currently not referenced
        private string RandomString(int size, bool lowerCase)
        {
            StringBuilder builder = new StringBuilder();
            Random random = new Random((int)DateTime.Now.Ticks);
            char ch;
            for (int i = 0; i < size; i++)
            {
                ch = Convert.ToChar(Convert.ToInt32(Math.Floor(26 * random.NextDouble() + 65)));
                builder.Append(ch);
            }
            if (lowerCase)
                return builder.ToString().ToLower();
            return builder.ToString();
        }

        // MG: This function is not referenced
        private void FillTestRecords()
        {
            /*
            tables = new List<Table>();
            Table t = new Table("persons");
            t.AddColumn("firstname", DataTypes.STRING);
            t.AddColumn("lastname", DataTypes.STRING);
            t.AddColumn("x", DataTypes.INT);
            tables.Add(t);
            Table t2 = new Table("salary");
            t2.AddColumn("firstname", DataTypes.STRING);
            t2.AddColumn("lastname", DataTypes.STRING);
            t2.AddColumn("salary", DataTypes.INT);
            t2.AddColumn("x", DataTypes.INT);
            tables.Add(t2);*/

            tables = new List<Table>();
            Table t = new Table("SignsSyms");
            t.AddColumn("SignSymID", DataTypes.INT);
            t.AddColumn("SignSymText", DataTypes.STRING);
             
            object[] record = new object[2];
            record[0] = (object)1;
            record[1] = "a";
            t.InsertRecord(record);
            
            record = new object[2];
            record[0] = (object)2;
            record[1] = "b";
            t.InsertRecord(record);

            record = new object[2];
            record[0] = (object)3;
            record[1] = "c";
            t.InsertRecord(record);
            tables.Add(t);

            t = new Table("ChiefComplaintToSignsSyms");
            t.AddColumn("CCID", DataTypes.INT);
            t.AddColumn("SignSymID", DataTypes.INT);

            record = new object[2];
            record[0] = (object)0;
            record[1] = (object)1;
            t.InsertRecord(record);

            record = new object[2];
            record[0] = (object)1;
            record[1] = (object)2;
            t.InsertRecord(record);

            record = new object[2];
            record[0] = (object)2;
            record[1] = (object)3;
            t.InsertRecord(record);

            record = new object[2];
            record[0] = (object)3;
            record[1] = (object)4;
            t.InsertRecord(record);

            tables.Add(t);
        }
        #endregion

        // MG: 污点标记，16进制字符串
        public static Dictionary<string, string> taintTags = new Dictionary<string, string>();

        private static char[] constant = {'1', '2', '3', '4', '5', '6', '7', '8', '9' };

        public static string GenerateRandomNumber(int Length)
        ]]></source>
</chunk>
<method name="GenerateRandomNumber" namespace="MockDBMS" type="MockDBMS.DBMS" typeName="DBMS" token="600001c" module="MockDBMS.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="8"/>
<hit index="8" value="8"/>
<hit index="9" value="8"/>
<hit index="10" value="16"/>
<hit index="11" value="8"/>
<hit index="12" value="8"/>
<hit index="13" value="8"/>
<hit index="14" value="8"/>
<hit index="15" value="1"/>
<hit index="16" value="1"/>
<hit index="17" value="1"/>
<hit index="18" value="1"/>
<hit index="19" value="2"/>
<hit index="20" value="8"/>
</hits>
<tags><tag offset="001d">call to uninstrumented method System.Int32 System.Random.Next(System.Int32 maxValue)</tag>
</tags>
<coverage domain="usercodeundertest" unit="block" covered="8" total="8" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[System.Text.StringBuilder newRandom = new System.Text.StringBuilder(9);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0009" domain="usercodeundertest"><source><![CDATA[Random rd = new Random();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            for (]]></source>
</chunk>
<chunk hits="1" offset="000f" domain="usercodeundertest"><source><![CDATA[int i = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="9" offset="002e" domain="usercodeundertest"><source><![CDATA[i < Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="8" offset="002a" domain="usercodeundertest"><source><![CDATA[i++]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
            ]]></source>
</chunk>
<chunk hits="8" offset="0013" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="8" offset="0014" domain="usercodeundertest" tag="true"><tooltip><![CDATA[call to uninstrumented method System.Int32 System.Random.Next(System.Int32 maxValue)]]></tooltip>
<source><![CDATA[newRandom.Append(constant[rd.Next(9)]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="8" offset="0029" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0038" domain="usercodeundertest"><source><![CDATA[return newRandom.ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="0041" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public static string processData(object x, string tag, string query, bool flag)
        ]]></source>
</chunk>
<method name="processData" namespace="MockDBMS" type="MockDBMS.DBMS" typeName="DBMS" token="600001d" module="MockDBMS.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
<hit index="10" value="1"/>
<hit index="11" value="2"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="1"/>
<hit index="16" value="2"/>
<hit index="46" value="1"/>
<hit index="47" value="1"/>
<hit index="48" value="1"/>
<hit index="49" value="1"/>
<hit index="50" value="1"/>
<hit index="51" value="1"/>
<hit index="52" value="1"/>
<hit index="53" value="1"/>
<hit index="54" value="1"/>
<hit index="55" value="1"/>
<hit index="56" value="1"/>
<hit index="57" value="1"/>
<hit index="58" value="1"/>
<hit index="59" value="1"/>
<hit index="60" value="1"/>
<hit index="61" value="1"/>
<hit index="62" value="1"/>
<hit index="63" value="1"/>
<hit index="64" value="1"/>
<hit index="65" value="1"/>
<hit index="68" value="1"/>
<hit index="70" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="10" total="20" coveredRatio="0.5"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[string pwd = GenerateRandomNumber(8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0013" domain="usercodeundertest"><source><![CDATA[while(query.Contains(pwd) || taintTags.ContainsKey(pwd))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000a" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="000b" domain="usercodeundertest"><source><![CDATA[pwd = GenerateRandomNumber(8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0012" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="002e" domain="usercodeundertest"><source><![CDATA[taintTags.Add(pwd, tag);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="003b" domain="usercodeundertest"><source><![CDATA[if (flag == false)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0040" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0041" domain="usercodeundertest"><source><![CDATA[if ((x is System.String) == false)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="004e" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    //Console.WriteLine(x + pwd);
                    ]]></source>
</chunk>
<chunk hits="0" offset="004f" domain="usercodeundertest"><source><![CDATA[return x + pwd;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                }
                else
                ]]></source>
</chunk>
<chunk hits="0" offset="0059" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="005a" domain="usercodeundertest"><source><![CDATA[return "\"" + x + pwd + "\"";]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                }
            }
            else
            ]]></source>
</chunk>
<chunk hits="1" offset="0082" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0083" domain="usercodeundertest"><source><![CDATA[if ((x is System.String) == false)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0090" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    //Console.WriteLine(x + pwd);
                    ]]></source>
</chunk>
<chunk hits="0" offset="0091" domain="usercodeundertest"><source><![CDATA[return x + pwd;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                }
                else
                ]]></source>
</chunk>
<chunk hits="1" offset="009b" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="009c" domain="usercodeundertest"><source><![CDATA[return "'" + x + pwd + "'";]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                }
            }
        ]]></source>
</chunk>
<chunk hits="1" offset="00c4" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        /*public static string processStringData(string x, string name, int flag)
        {
            if (flag == 0) //insert
            {
                if (taintTags.ContainsKey(name) == false)
                {
                    return "\"" + x + "00000000\"";
                }
                else
                {
                    return "\"" + x + taintTags[name] + "\"";
                }
            }
            else //others
            {
                if (taintTags.ContainsKey(name) == false)
                {
                    return "'" + x + "00000000'";
                }
                else
                {
                    return "'" + x + taintTags[name] + "'";
                }
            }
        }

        public static string processDecimalData(Decimal x, string name)
        {
            if (taintTags.ContainsKey(name) == false)
            {
                return x + "00000000";
            }
            else
            {
                return x + taintTags[name];
            }
        }*/

    }   // End class DBMS

    public class Table
    {
        #region Member variables (MG)
        public string name;

        // MG: Map conlumn name to datatype: STRING, INT, or CHAR
        Dictionary<string, DataTypes> columnNameType; // name -> type

        // MG: Map column name to the index of the column
        Dictionary<string, int> columnIndices;

        // MG: List of records (list of object type) 
        List<object[]> records; // List of records in the table

        // MG: Primary Keys
        ]]></source>
</chunk>
<method name=".ctor" namespace="MockDBMS" type="MockDBMS.Table" typeName="Table" token="6000026" module="MockDBMS.dll"><hits><hit index="0" value="4"/>
<hit index="1" value="4"/>
<hit index="3" value="4"/>
<hit index="4" value="4"/>
<hit index="5" value="4"/>
<hit index="6" value="4"/>
<hit index="7" value="4"/>
<hit index="8" value="4"/>
<hit index="9" value="4"/>
<hit index="10" value="4"/>
<hit index="11" value="4"/>
<hit index="12" value="4"/>
<hit index="14" value="4"/>
<hit index="15" value="4"/>
<hit index="16" value="4"/>
<hit index="17" value="4"/>
<hit index="19" value="4"/>
<hit index="20" value="4"/>
<hit index="21" value="4"/>
<hit index="22" value="4"/>
<hit index="24" value="4"/>
<hit index="25" value="4"/>
<hit index="26" value="4"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="6" total="6" coveredRatio="1"/>
</method>
<chunk hits="4" offset="0000" domain="usercodeundertest"><source><![CDATA[List<String> pKeys = new List<string>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        // MG: Foreign Keys
        public string[] foreignKeys;

        ]]></source>
</chunk>
<chunk hits="8" offset="000b" domain="usercodeundertest"><source><![CDATA[public int numColumns = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        #endregion

        #region Accessor for columnNameType, columnNameIndicies, and records (MG)
        public Dictionary<string, int> ColumnIndices
        {
            get ]]></source>
</chunk>
<method name="get_ColumnIndices" namespace="MockDBMS" type="MockDBMS.Table" typeName="Table" token="6000020" module="MockDBMS.dll"><hits><hit index="0" value="10"/>
<hit index="1" value="10"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="10" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="10" offset="0001" domain="usercodeundertest"><source><![CDATA[return columnIndices;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="10" offset="000a" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            set { columnIndices = value; }
        }

        public Dictionary<string, DataTypes> ColumnNameType
        {
            get ]]></source>
</chunk>
<method name="get_ColumnNameType" namespace="MockDBMS" type="MockDBMS.Table" typeName="Table" token="6000022" module="MockDBMS.dll"><hits><hit index="0" value="6"/>
<hit index="1" value="6"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="6" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="6" offset="0001" domain="usercodeundertest"><source><![CDATA[return columnNameType;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="6" offset="000a" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            set { columnNameType = value; }
        }

        public List<object[]> Records
        {
            get ]]></source>
</chunk>
<method name="get_Records" namespace="MockDBMS" type="MockDBMS.Table" typeName="Table" token="6000024" module="MockDBMS.dll"><hits><hit index="0" value="10"/>
<hit index="1" value="10"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="10" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="10" offset="0001" domain="usercodeundertest"><source><![CDATA[return records;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="10" offset="000a" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            set { records = value; }
        }
        #endregion

        #region Constructor for class Table
        ]]></source>
</chunk>
<chunk hits="8" offset="0012" domain="usercodeundertest"><source><![CDATA[public Table(string tableName)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0019" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="001a" domain="usercodeundertest"><source><![CDATA[name = tableName;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="8" offset="0021" domain="usercodeundertest"><source><![CDATA[columnNameType = new Dictionary<string, DataTypes>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="8" offset="002c" domain="usercodeundertest"><source><![CDATA[columnIndices = new Dictionary<string, int>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="8" offset="0037" domain="usercodeundertest"><source><![CDATA[records = new List<object[]>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="8" offset="0042" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        #endregion

        public void AddPrimaryKey(string column)
        {
            pKeys.Add(column);
        }

        //public Column SelectColumn(string name) { } //Column contains objects of each column
        public void AddColumn(string name, DataTypes type)
        ]]></source>
</chunk>
<method name="AddColumn" namespace="MockDBMS" type="MockDBMS.Table" typeName="Table" token="6000028" module="MockDBMS.dll"><hits><hit index="0" value="54"/>
<hit index="1" value="54"/>
<hit index="2" value="54"/>
<hit index="3" value="54"/>
<hit index="4" value="54"/>
<hit index="5" value="108"/>
<hit index="6" value="54"/>
<hit index="7" value="54"/>
<hit index="8" value="54"/>
<hit index="9" value="54"/>
<hit index="10" value="54"/>
<hit index="11" value="54"/>
<hit index="12" value="54"/>
<hit index="13" value="108"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<chunk hits="54" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="54" offset="0001" domain="usercodeundertest"><source><![CDATA[columnNameType.Add(name, type);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="162" offset="000f" domain="usercodeundertest"><source><![CDATA[columnIndices.Add(name, numColumns++);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="162" offset="002d" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public void InsertRecord(object[] record)
        ]]></source>
</chunk>
<method name="InsertRecord" namespace="MockDBMS" type="MockDBMS.Table" typeName="Table" token="6000029" module="MockDBMS.dll"><hits><hit index="0" value="4"/>
<hit index="1" value="4"/>
<hit index="2" value="4"/>
<hit index="3" value="4"/>
<hit index="4" value="4"/>
<hit index="5" value="8"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<chunk hits="4" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0001" domain="usercodeundertest"><source><![CDATA[records.Add(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="12" offset="000e" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        public void DeleteRecords(List<object[]> recds)
        {
            foreach (object[] r in recds)
            {
                if (!this.records.Contains(r))
                    throw new Exception("Record + " + r.ToString() + " not in the table");
                records.Remove(r);
            }
        }

        public void UpdateRecord(int recordID, object[] record)
        {
        }

        // MG: Need to investigate what is this
        public List<object[]> getRecordsWith(Expression condition, List<object[]> recds)
        {
            string left = null;
            string right = null;
            string op;
            List<object[]> resultSet = new List<object[]>();
            if (condition.Operator == null)
            {
                throw new Exception("operator cannot be null");
            }
            op = condition.Operator.Value;
            
            Expression lhs;
            Expression rhs;
            if (condition.Left is PatternExpression)
            {
                lhs = (Expression)((PatternExpression)condition.Left).Expression;
                //rhs = (Expression)((PatternExpression)condition.Right).Expression;
            }
            else
            {
                lhs = (Expression)condition.Left;
                //rhs = (Expression)condition.Right;
            }
            if (condition.Right is PatternExpression)
            {
                //lhs = (Expression)((PatternExpression)condition.Left).Expression;
                rhs = (Expression)((PatternExpression)condition.Right).Expression;
            }
            else
            {
                //lhs = (Expression)condition.Left;
                rhs = (Expression)condition.Right;
            }


            if (op.Equals("NOT"))
            {
                PexAssert.IsNull(lhs);
                PexAssert.IsNotNull(rhs);
                PexAssert.IsNotNull(rhs.Operator);
                List<object[]> rec = getRecordsWith(rhs, recds);
                resultSet = PerformOperationOnRecords(records, rec, op);
                return resultSet;
                
            }
            PexAssert.IsNotNull(lhs);
            PexAssert.IsNotNull(rhs);

            List<object[]> lhsRecords;
            List<object[]> rhsRecords;
            
            if (op.Equals("=") || op.Equals("<") || op.Equals("<=") 
                || op.Equals(">") || op.Equals(">=") || op.Equals("!="))
            {
                bool isNegative = false;
                PexAssert.IsNull(lhs.Operator);
                PexAssert.IsTrue(rhs.Operator == null || rhs.Operator.Value == "-");
                if (rhs.Operator != null && rhs.Operator.Value == "-")
                    isNegative = true;
                
                if (lhs.Right is IntegerValue && rhs.Right is IntegerValue)
                {
                    if (!isNegative)
                    {
                        if (((IntegerValue)lhs.Right).Value == ((IntegerValue)rhs.Right).Value)
                        {
                            resultSet = records;
                            return resultSet;
                        }
                    }
                    else
                    {
                        if (((IntegerValue)lhs.Right).Value == -((IntegerValue)rhs.Right).Value)
                        {
                            resultSet = records;
                            return resultSet;
                        }
                    }
                }
                else if (lhs.Right is StringValue && rhs.Right is StringValue)
                {
                    if (((StringValue)lhs.Right).Value == ((StringValue)rhs.Right).Value)
                    {
                        resultSet = records;
                        return resultSet;
                    }
                }

                left = ((DbObject)lhs.Right).Identifier.ID;
                if (rhs.Right is IntegerValue)
                {
                    right = ((IntegerValue)rhs.Right).Value.ToString();
                }
                else if (rhs.Right is DbObject)
                {
                    right = ((DbObject)rhs.Right).Identifier.ID;
                }
                else if (rhs.Right is StringValue)
                {
                    right = ((StringValue)rhs.Right).Value;
                }
               //has to be an integerValue
                resultSet = SelectRecords(left, right, op, recds);
            }
            else if (op.Equals("AND") || op.Equals("OR"))
            {
                PexAssert.IsNotNull(lhs.Operator);
                lhsRecords = getRecordsWith(lhs, recds);
                PexAssert.IsNotNull(rhs.Operator);
                rhsRecords = getRecordsWith(rhs, recds);
                resultSet = PerformOperationOnRecords(lhsRecords, rhsRecords, op);
            }
            else if (op.Equals("LIKE"))
            {
                PexAssert.IsNull(lhs.Operator);
                PexAssert.IsNull(rhs.Operator);
                right = ((StringValue)rhs.Right).Value.ToString();
                left = ((DbObject)lhs.Right).Identifier.ID;
                resultSet = SelectRecords(left, right, op, recds);
            }

            return resultSet;
        }

        // MG: Need to investigate what is this
        public List<object[]> PerformOperationOnRecords(List<object[]> lhsRecords, List<object[]> rhsRecords, string op)
        {
            List<object[]> selectedRecords = new List<object[]>();
            if (op.Equals("NOT"))
            {
                foreach (object[] record in lhsRecords)
                {
                    if (!rhsRecords.Contains(record))
                        selectedRecords.Add(record);
                }
            }
            else if (op.Equals("AND"))
            {
                foreach (object[] record in lhsRecords)
                {
                    if (rhsRecords.Contains(record))
                        selectedRecords.Add(record);
                }
            }
            else if (op.Equals("OR"))
            {
                foreach (object[] record in lhsRecords)
                {
                    selectedRecords.Add(record);
                }
                foreach (object[] record in rhsRecords)
                {
                    if (!selectedRecords.Contains(record))
                        selectedRecords.Add(record);
                }
            }
            else
                throw new NotImplementedException("Operator + " + op + " Not Implemented");
            return selectedRecords;
        }

        /*To be implemented for 
         * Operators: LIKE, IS NULL, IS NOT NULL
         */
        public List<object[]> SelectRecords(string left, string right, string op, List<object[]> recds)
        {
            left = left.Trim('[', ']');
            if (left.Contains("["))
            {
                left = left.Substring(1, left.Length - 2);
            }

            List<object[]> resultSet = new List<object[]>();
            if (op.Equals("=") || op.Equals("!="))
            {
                foreach (object[] record in records)
                {
                    object obj = record[columnIndices[left]];
                    DataTypes type = ColumnNameType[left];
                    if (type == DataTypes.STRING)
                    {
                        right = right.Trim('\"', '[', ']', '\'');
                        string tag = "00000000";
                        string value = right;
                        if (right.Length > 8)
                        {
                            string pwd = right.Substring(right.Length - 8);
                            
                            if (DBMS.taintTags.ContainsKey(pwd))
                            {
                                tag = DBMS.taintTags[pwd];
                                value = right.Substring(0, right.Length - 8);
                            }
                        }
                        if (op.Equals("="))
                        {
                            if (obj.Equals(value))
                            {
                                for (int k = 1; k < numColumns; k += 2)
                                {
                                    record[k] = record[k] + "$" + tag + "$" + record[columnIndices[left + "_TAINT"]];
                                }
                                resultSet.Add(record);
                            }
                                
                        }
                        else
                        {
                            if (!obj.Equals(value))
                            {
                                for (int k = 1; k < numColumns; k += 2)
                                {
                                    record[k] = record[k] + "$" + tag + "$" + record[columnIndices[left + "_TAINT"]];
                                }
                                resultSet.Add(record);
                            }
                                
                        }
                    }
                    else if (type == DataTypes.INT)
                    {
                        right = right.Trim('\"', '[', ']', '\'');
                        int i= right.IndexOf("[");
                        int j= right.IndexOf("]");
                        int l = j-i-1;

                        if(i!=-1 && j!=-1)
                            right = right.Substring(i+1, l);

                        string tag = "00000000";
                        string value = right;
                        if (right.Length > 8)
                        {
                            string pwd = right.Substring(right.Length - 8);
                            Console.WriteLine("pwd: " + pwd);
                            if (DBMS.taintTags.ContainsKey(pwd))
                            {
                                tag = DBMS.taintTags[pwd];
                                value = right.Substring(0, right.Length - 8);
                                Console.WriteLine("tag: " + tag);
                            }
                        }

                        Int64 number = ToInt64(value, 10);
                        if (op.Equals("="))
                        {
                            string typeooo = obj.GetType().ToString();
                            
                            if (obj is System.Decimal)
                            {
                                Int64 num = Decimal.ToInt64((Decimal)obj);
                               /* Decimal n = (Decimal)obj;
                                if(n.ToString() == number)
                                    resultSet.Add(record);
                                * */
                                if (num == number)
                                {
                                    for (int k = 1; k < numColumns; k += 2)
                                    {
                                        record[k] = record[k] + "$" + tag + "$" + record[columnIndices[left + "_TAINT"]];
                                        Console.WriteLine("content:"+record[k-1]);
                                        Console.WriteLine("tag:"+record[k]);
                                    }
                                    resultSet.Add(record);
                                }
                                    
                            }
                            else if ((int)obj == number)
                            {
                                for (int k = 1; k < numColumns; k += 2)
                                {
                                    record[k] = record[k] + "$" + tag + "$" + record[columnIndices[left + "_TAINT"]];
                                    Console.WriteLine(record[k]);
                                }
                                resultSet.Add(record);
                            }
                        }
                        else
                        {
                            if ((int)obj != number)
                            {
                                for (int k = 1; k < numColumns; k += 2)
                                {
                                    record[k] = record[k] + "$" + tag + "$" + record[columnIndices[left + "_TAINT"]];
                                    Console.WriteLine(record[k]);
                                }
                                resultSet.Add(record);
                            }
                        }
                    }
                }
            }
            else if (op.Equals("<") || op.Equals("<=") || op.Equals(">") || op.Equals(">=")) 
            {
                foreach (object[] record in records)
                {
                    Console.WriteLine(left);
                    object obj = record[columnIndices[left]];
                    DataTypes type = ColumnNameType[left];
                    if (type == DataTypes.INT)
                    {
                        //right = right.Trim('\"', '[', ']');
                        //Int64 number = System.Convert.ToInt64(right, 10);
                        string tag = "00000000";
                        string value = right;
                        if (right.Length > 8)
                        {
                            string pwd = right.Substring(right.Length - 8);
                            if (DBMS.taintTags.ContainsKey(pwd))
                            {
                                tag = DBMS.taintTags[pwd];
                                value = right.Substring(0, right.Length - 8);
                            }
                        }
                        Int64 number = ToInt64(value, 10);
                        if (op.Equals("<"))
                        {
                            if ((int)obj < number)
                            {
                                for (int k = 1; k < numColumns; k += 2)
                                {
                                    record[k] = record[k] + "$" + tag + "$" + record[columnIndices[left + "_TAINT"]];
                                }
                                resultSet.Add(record);
                            }
                        }
                        else if (op.Equals("<="))
                        {
                            if ((int)obj <= number)
                            {
                                for (int k = 1; k < numColumns; k += 2)
                                {
                                    record[k] = record[k] + "$" + tag + "$" + record[columnIndices[left + "_TAINT"]];
                                }
                                resultSet.Add(record);
                            }
                        }
                        else if (op.Equals(">"))
                        {
                            if ((int)obj > number)
                            {
                                for (int k = 1; k < numColumns; k += 2)
                                {
                                    record[k] = record[k] + "$" + tag + "$" + record[columnIndices[left + "_TAINT"]];
                                }
                                resultSet.Add(record);
                            }
                        }
                        else if (op.Equals(">="))
                        {
                            if ((int)obj >= number)
                            {
                                for (int k = 1; k < numColumns; k += 2)
                                {
                                    record[k] = record[k] + "$" + tag + "$" + record[columnIndices[left + "_TAINT"]];
                                }
                                resultSet.Add(record);
                            }
                        }
                        else
                        {
                            throw new Exception("Unexpected Symbol " + op);
                        }

                    }
                    else
                        throw new Exception("Expected a Integer but got " + type);
                }
            }
            else if (op.Equals("LIKE"))
            {
                foreach (object[] record in records)
                {
                    object obj = record[columnIndices[left]];
                    right = right.Trim('\"', '[', ']', '\'');
                    string tag = "00000000";
                    string value = right;
                    if (right.Length > 8)
                    {
                        string pwd = right.Substring(right.Length - 8);
                        if (DBMS.taintTags.ContainsKey(pwd))
                        {
                            tag = DBMS.taintTags[pwd];
                            value = right.Substring(0, right.Length - 8);
                        }
                    }
                    Match m = Regex.Match((string)obj, value);
                    if (m.Success)
                    {
                        for (int k = 1; k < numColumns; k += 2)
                        {
                            record[k] = record[k] + "$" + tag + "$" + record[columnIndices[left + "_TAINT"]];
                        }
                        resultSet.Add(record);
                    }
                }
            }

            else { throw new NotImplementedException("Not Implemented for Operator: " + op); }
            return resultSet;
        }

        //Syste,.Convert.ToInt64 is extern so pex cannot instrument
        private static Int64 ToInt64(string right, int p)
        {
            Int64 number = 0;
            for (int i = 0; i < right.Length; i++)
            {
                string digit = right.Substring(right.Length - i-1, 1);
                
                if (digit.Equals("1"))
                {
                    int n=1;
                    for (int j = 0; j < i; j++) 
                        n = n * 10;
                    number = number + n * 1;
                }
                else if (digit.Equals("2"))
                {
                    int n = 1;
                    for (int j = 0; j < i; j++)
                        n = n * 10;
                    number = number + n * 2;
                }
                else if (digit.Equals("3"))
                {
                    int n = 1;
                    for (int j = 0; j < i; j++)
                        n = n * 10;
                    number = number + n * 3;
                }
                else if (digit.Equals("4"))
                {
                    int n = 1;
                    for (int j = 0; j < i; j++)
                        n = n * 10;
                    number = number + n * 4;
                }
                else if (digit.Equals("5"))
                {
                    int n = 1;
                    for (int j = 0; j < i; j++)
                        n = n * 10;
                    number = number + n * 5;
                }
                else if (digit.Equals("6"))
                {
                    int n = 1;
                    for (int j = 0; j < i; j++)
                        n = n * 10;
                    number = number + n * 6;
                }
                else if (digit.Equals("7"))
                {
                    int n = 1;
                    for (int j = 0; j < i; j++)
                        n = n * 10;
                    number = number + n * 7;
                }
                else if (digit.Equals("8"))
                {
                    int n = 1;
                    for (int j = 0; j < i; j++)
                        n = n * 10;
                    number = number + n * 8;
                }
                else if (digit.Equals("9"))
                {
                    int n = 1;
                    for (int j = 0; j < i; j++)
                        n = n * 10;
                    number = number + n * 9;
                }
            }
            return number;
        }
        

        // MG: Not referenced
        public List<object[]> getRecordsWith(Expression condition)
        {
            string left = null;
            string right = null;
            string op;
            List<object[]> resultSet = new List<object[]>();

            if (condition.Operator == null)
            {
                throw new Exception("operator cannot be null");
            }
            op = condition.Operator.Value;
            Expression lhs = (Expression)condition.Left;
            Expression rhs = (Expression)condition.Right;
            if (lhs.Operator == null)
            {
                left = ((DbObject)lhs.Right).Identifier.ID;
            }
            if (rhs.Operator == null)
            {
                right = ((DbObject)rhs.Right).Identifier.ID;
            }

            if (op == "=")
            {
                foreach (object[] record in records)
                {
                    object obj = record[columnIndices[left]];
                    DataTypes type = ColumnNameType[left];
                    if (type == DataTypes.STRING)
                    {
                        char[] trinchars = new char[4];
                        trinchars[0] = '\"';
                        trinchars[1] = '[';
                        trinchars[2] = ']';
                        trinchars[3] = '\'';
                        right = right.Trim(trinchars[0], trinchars[1], trinchars[2], trinchars[3]);
                        if (obj.Equals(right))
                            resultSet.Add(record);
                    }
                }
            }
            return resultSet;
        }
    }   // End class Table
}   // End Namespace MockDBMS
        
            


]]></source>
</chunk>
</document>
<document src="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs" renderPrefix="s1"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Collections.Generic;
using System.Text;

namespace MockDBMS.SqlServer
{
    /// <summary>
    /// MG: This class contains only one MockDBMS.DBMS object
    /// </summary>
    public class MockSqlConnection
    {
        MockDBMS.DBMS dbms;

        public MockDBMS.DBMS Dbms
        {
            get ]]></source>
</chunk>
<method name="get_Dbms" namespace="MockDBMS.SqlServer" type="MockDBMS.SqlServer.MockSqlConnection" typeName="MockSqlConnection" token="600000f" module="MockDBMS.dll"><hits><hit index="0" value="4"/>
<hit index="1" value="4"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<chunk hits="4" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="4" offset="0001" domain="usercodeundertest"><source><![CDATA[return dbms;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="4" offset="000a" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            set { dbms = value; }
        }

        ]]></source>
</chunk>
<method name=".ctor" namespace="MockDBMS.SqlServer" type="MockDBMS.SqlServer.MockSqlConnection" typeName="MockSqlConnection" token="6000011" module="MockDBMS.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[public MockSqlConnection(string s)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0007" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0008" domain="usercodeundertest"><source><![CDATA[dbms = new MockDBMS.DBMS();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="2" offset="0013" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        /// <summary>
        /// MG: Initializes the DBMS state of the one and only MockD
        /// </summary>
        public void Open()
        ]]></source>
</chunk>
<method name="Open" namespace="MockDBMS.SqlServer" type="MockDBMS.SqlServer.MockSqlConnection" typeName="MockSqlConnection" token="6000012" module="MockDBMS.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="2"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[dbms.CreateDatabaseState();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="000d" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    }
}
]]></source>
</chunk>
</document>
<document src="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" renderPrefix="s2"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Collections.Generic;
using System.Text;
using MacroScope;
using System.Data;
using Microsoft.Pex.Framework;

namespace MockDBMS.SqlServer
{
    public class MockSqlCommand
    {
        //SqlDataReader
        public MockSqlConnection connection;
        private string commandText;

        public string CommandText
        {
            get { return commandText; }
            set { commandText = value; }
        }
        QueryParts parsedQuery;

        ]]></source>
</chunk>
<method name=".ctor" namespace="MockDBMS.SqlServer" type="MockDBMS.SqlServer.MockSqlCommand" typeName="MockSqlCommand" token="6000033" module="MockDBMS.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="usercodeundertest"><source><![CDATA[public MockSqlCommand(string q, MockSqlConnection myConnection)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0008" domain="usercodeundertest"><source><![CDATA[this.commandText = q;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="000f" domain="usercodeundertest"><source><![CDATA[this.connection = myConnection;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="4" offset="0016" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public MockSqlDataReader ExecuteReader()
        ]]></source>
</chunk>
<method name="ExecuteReader" namespace="MockDBMS.SqlServer" type="MockDBMS.SqlServer.MockSqlCommand" typeName="MockSqlCommand" token="6000034" module="MockDBMS.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
<hit index="10" value="2"/>
<hit index="11" value="2"/>
<hit index="12" value="2"/>
<hit index="13" value="4"/>
<hit index="14" value="2"/>
<hit index="15" value="2"/>
<hit index="16" value="2"/>
<hit index="17" value="2"/>
<hit index="18" value="2"/>
<hit index="19" value="4"/>
<hit index="20" value="2"/>
<hit index="21" value="2"/>
<hit index="22" value="2"/>
<hit index="23" value="4"/>
<hit index="71" value="2"/>
<hit index="73" value="2"/>
<hit index="74" value="2"/>
<hit index="75" value="2"/>
<hit index="76" value="2"/>
<hit index="77" value="2"/>
<hit index="78" value="4"/>
<hit index="79" value="2"/>
<hit index="80" value="2"/>
<hit index="81" value="2"/>
<hit index="82" value="4"/>
<hit index="83" value="4"/>
<hit index="84" value="4"/>
<hit index="85" value="4"/>
<hit index="86" value="4"/>
<hit index="87" value="4"/>
<hit index="88" value="4"/>
<hit index="89" value="8"/>
<hit index="90" value="4"/>
<hit index="91" value="4"/>
<hit index="92" value="4"/>
<hit index="93" value="8"/>
<hit index="94" value="4"/>
<hit index="95" value="4"/>
<hit index="96" value="4"/>
<hit index="97" value="8"/>
<hit index="98" value="6"/>
<hit index="99" value="6"/>
<hit index="100" value="2"/>
<hit index="101" value="4"/>
<hit index="105" value="2"/>
<hit index="106" value="2"/>
<hit index="107" value="2"/>
<hit index="108" value="2"/>
<hit index="111" value="2"/>
<hit index="113" value="2"/>
<hit index="114" value="2"/>
<hit index="115" value="2"/>
<hit index="116" value="2"/>
<hit index="117" value="1"/>
<hit index="118" value="1"/>
<hit index="119" value="1"/>
<hit index="127" value="1"/>
<hit index="128" value="1"/>
<hit index="129" value="1"/>
<hit index="130" value="1"/>
<hit index="131" value="1"/>
<hit index="132" value="1"/>
<hit index="133" value="1"/>
<hit index="134" value="2"/>
<hit index="741" value="1"/>
<hit index="743" value="1"/>
<hit index="745" value="2"/>
<hit index="747" value="1"/>
<hit index="748" value="1"/>
<hit index="766" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="27" total="220" coveredRatio="0.12272727272727273"/>
</method>
<chunk hits="2" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="usercodeundertest"><source><![CDATA[parsedQuery = parseQuery(commandText);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            //tempQueryParser(query);
            ]]></source>
</chunk>
<chunk hits="4" offset="0012" domain="usercodeundertest"><source><![CDATA[List<object[]> records = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0014" domain="usercodeundertest"><source><![CDATA[List<object[]> selectedRecords = new List<object[]>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="001a" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.Type == QueryStatementType.SELECT)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0034" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0035" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.TableNames.Count == 1)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0054" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0055" domain="usercodeundertest"><source><![CDATA[MockDBMS.Table table = connection.Dbms.GetTableByName(parsedQuery.TableNames[0]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0077" domain="usercodeundertest"><source><![CDATA[records = table.getRecordsWith(parsedQuery.whereCondition, new List<object[]>());]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="008e" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.joinCondition != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="00a2" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="00a3" domain="usercodeundertest"><source><![CDATA[List<object[]> joinRecords = table.getRecordsWith(parsedQuery.joinCondition, new List<object[]>());]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="00ba" domain="usercodeundertest"><source><![CDATA[records = table.PerformOperationOnRecords(records, joinRecords, "AND");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="00c8" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                    ]]></source>
</chunk>
<chunk hits="0" offset="00c9" domain="usercodeundertest"><source><![CDATA[selectedRecords = SelectColumnsFrom(records, parsedQuery, table);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00d8" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else
                ]]></source>
</chunk>
<chunk hits="2" offset="00de" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="00df" domain="usercodeundertest"><source><![CDATA[Dictionary<string, Table> tables = new Dictionary<string, Table>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="00e6" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="4" offset="00fb" domain="usercodeundertest"><source><![CDATA[string tableName]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="18" offset="0124" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="00e7" domain="usercodeundertest"><source><![CDATA[parsedQuery.TableNames]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                    ]]></source>
</chunk>
<chunk hits="4" offset="0104" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="4" offset="0105" domain="usercodeundertest"><source><![CDATA[MockDBMS.Table table = connection.Dbms.GetTableByName(tableName);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="12" offset="0118" domain="usercodeundertest"><source><![CDATA[tables.Add(tableName, table);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="12" offset="0123" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="0143" domain="usercodeundertest"><source><![CDATA[Dictionary<string, List<object[]>> recordsFromDifferentTables = new Dictionary<string, List<object[]>>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="014a" domain="usercodeundertest"><source><![CDATA[recordsFromDifferentTables = getRecordsFrommDifferentTablesWith(parsedQuery.whereCondition, tables);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="015f" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.joinCondition != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0173" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0174" domain="usercodeundertest"><source><![CDATA[Dictionary<string, List<object[]>> joinRecords = getRecordsFrommDifferentTablesWith(parsedQuery.joinCondition, tables);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0189" domain="usercodeundertest"><source><![CDATA[recordsFromDifferentTables = PerformOperationOnRecords(recordsFromDifferentTables, joinRecords, "AND");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[//table.PerformOperationOnRecords(records, joinRecords, "AND");
                    ]]></source>
</chunk>
<chunk hits="0" offset="019a" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="1" offset="019b" domain="usercodeundertest"><source><![CDATA[selectedRecords = SelectColumnsFromMultipleTables(recordsFromDifferentTables, parsedQuery, tables);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="01ac" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.Distinct)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="01c0" domain="usercodeundertest"><source><![CDATA[selectedRecords = SelectDistinct(selectedRecords);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="01c8" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                //records = table.getRecordsWith(parsedQuery.whereConditionLHS, parsedQuery.whereConditionop, parsedQuery.whereConditionop);
            ]]></source>
</chunk>
<chunk hits="1" offset="01c9" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="0" offset="01cf" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.Type == QueryStatementType.DELETE)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="01e9" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="01ea" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.TableNames.Count == 1)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0209" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="020a" domain="usercodeundertest"><source><![CDATA[MockDBMS.Table table = connection.Dbms.GetTableByName(parsedQuery.TableNames[0]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="022c" domain="usercodeundertest"><source><![CDATA[records = table.getRecordsWith(parsedQuery.whereCondition, new List<object[]>());]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0243" domain="usercodeundertest"><source><![CDATA[if (records.Count != 0)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0255" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0256" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="0" offset="0261" domain="usercodeundertest"><source><![CDATA[object[] record]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="02b7" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0257" domain="usercodeundertest"><source><![CDATA[records]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                        ]]></source>
</chunk>
<chunk hits="0" offset="026a" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            for (]]></source>
</chunk>
<chunk hits="0" offset="026b" domain="usercodeundertest"><source><![CDATA[int j = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="02a6" domain="usercodeundertest"><source><![CDATA[j < table.numColumns]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="02a0" domain="usercodeundertest"><source><![CDATA[j += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                            ]]></source>
</chunk>
<chunk hits="0" offset="0270" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0271" domain="usercodeundertest"><source><![CDATA[string tags = record[j].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="027d" domain="usercodeundertest"><source><![CDATA[string[] tags_arr = tags.Split('$');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0296" domain="usercodeundertest"><source><![CDATA[record[j] = tags_arr[0];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="029f" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="02b6" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="02d6" domain="usercodeundertest"><source><![CDATA[table.DeleteRecords(records);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="02de" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                ]]></source>
</chunk>
<chunk hits="0" offset="02df" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else
                ]]></source>
</chunk>
<chunk hits="0" offset="02e2" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="02e3" domain="usercodeundertest"><source><![CDATA[throw new NotImplementedException("Not Implemented for deletion from multiple tables");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                }
            ]]></source>
</chunk>
<chunk hits="0" offset="02ee" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            else ]]></source>
</chunk>
<chunk hits="0" offset="02f4" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.Type == QueryStatementType.INSERT)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="030e" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="030f" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.TableNames.Count == 1)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="032e" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="032f" domain="usercodeundertest"><source><![CDATA[MockDBMS.Table table = connection.Dbms.GetTableByName(parsedQuery.TableNames[0]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0351" domain="usercodeundertest"><source><![CDATA[object[] record = new object[table.numColumns];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="035e" domain="usercodeundertest"><source><![CDATA[IEnumerator<string> keys = parsedQuery.ColumnNameValueMap.Keys.GetEnumerator();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="051a" domain="usercodeundertest"><source><![CDATA[while (keys.MoveNext())]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="037f" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0380" domain="usercodeundertest"><source><![CDATA[string value_with_tag = parsedQuery.ColumnNameValueMap[keys.Current].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="039e" domain="usercodeundertest"><source><![CDATA[string tag = "00000000";]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="03a5" domain="usercodeundertest"><source><![CDATA[string value = value_with_tag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="03a9" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.ColumnNameValueMap[keys.Current] is System.Decimal)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="03d4" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            
                            ]]></source>
</chunk>
<chunk hits="0" offset="03d5" domain="usercodeundertest"><source><![CDATA[if (value_with_tag.Length > 8)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="03e8" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="03e9" domain="usercodeundertest"><source><![CDATA[string pwd = value_with_tag.Substring(value_with_tag.Length - 8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                
                                ]]></source>
</chunk>
<chunk hits="0" offset="03fb" domain="usercodeundertest"><source><![CDATA[if (DBMS.taintTags.ContainsKey(pwd))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0410" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0411" domain="usercodeundertest"><source><![CDATA[tag = DBMS.taintTags[pwd];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="041f" domain="usercodeundertest"><source><![CDATA[value = value_with_tag.Substring(0, value_with_tag.Length - 8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0432" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0433" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0434" domain="usercodeundertest"><source><![CDATA[record[table.ColumnIndices[keys.Current]] = Convert.ToDecimal(value);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0455" domain="usercodeundertest"><source><![CDATA[record[table.ColumnIndices[keys.Current + "_TAINT"]] = tag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0476" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else
                        ]]></source>
</chunk>
<chunk hits="0" offset="047c" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="047d" domain="usercodeundertest"><source><![CDATA[if (value_with_tag.Length > 10)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0491" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0492" domain="usercodeundertest"><source><![CDATA[string pwd = value_with_tag.Substring(value_with_tag.Length - 9, 8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="04a6" domain="usercodeundertest"><source><![CDATA[if (DBMS.taintTags.ContainsKey(pwd))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="04bb" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="04bc" domain="usercodeundertest"><source><![CDATA[tag = DBMS.taintTags[pwd];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="04ca" domain="usercodeundertest"><source><![CDATA[value = value_with_tag.Substring(1, value_with_tag.Length - 10);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="04de" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="04df" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="04e0" domain="usercodeundertest"><source><![CDATA[record[table.ColumnIndices[keys.Current]] = value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="04f7" domain="usercodeundertest"><source><![CDATA[record[table.ColumnIndices[keys.Current + "_TAINT"]] = tag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0518" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0519" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="052a" domain="usercodeundertest"><source><![CDATA[table.InsertRecord(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0533" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else
                ]]></source>
</chunk>
<chunk hits="0" offset="0536" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0537" domain="usercodeundertest"><source><![CDATA[throw new NotImplementedException("Not Implemented for deletion from multiple tables");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                }
            ]]></source>
</chunk>
<chunk hits="0" offset="0542" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="0" offset="0548" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.Type == QueryStatementType.UPDATE)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0562" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0563" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.TableNames.Count == 1)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0582" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0583" domain="usercodeundertest"><source><![CDATA[MockDBMS.Table table = connection.Dbms.GetTableByName(parsedQuery.TableNames[0]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="05a5" domain="usercodeundertest"><source><![CDATA[records = table.getRecordsWith(parsedQuery.whereCondition, new List<object[]>());]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="05bc" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="0" offset="05ca" domain="usercodeundertest"><source><![CDATA[object[] record]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="08ca" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="05bd" domain="usercodeundertest"><source><![CDATA[records]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                    ]]></source>
</chunk>
<chunk hits="0" offset="05d3" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="05d4" domain="usercodeundertest"><source><![CDATA[List<int> indices = new List<int>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="05db" domain="usercodeundertest"><source><![CDATA[IEnumerator<string> keys = parsedQuery.ColumnNameValueMap.Keys.GetEnumerator();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="07de" domain="usercodeundertest"><source><![CDATA[while (keys.MoveNext())]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="05fc" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="05fd" domain="usercodeundertest"><source><![CDATA[indices.Add(table.ColumnIndices[keys.Current]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0617" domain="usercodeundertest"><source><![CDATA[string value_with_tag = parsedQuery.ColumnNameValueMap[keys.Current].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0635" domain="usercodeundertest"><source><![CDATA[string tag = "00000000";]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="063c" domain="usercodeundertest"><source><![CDATA[string value = value_with_tag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0640" domain="usercodeundertest"><source><![CDATA[if (value_with_tag.Length > 8)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0653" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0654" domain="usercodeundertest"><source><![CDATA[string pwd = value_with_tag.Substring(value_with_tag.Length - 8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0666" domain="usercodeundertest"><source><![CDATA[if (DBMS.taintTags.ContainsKey(pwd))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="067b" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="067c" domain="usercodeundertest"><source><![CDATA[tag = DBMS.taintTags[pwd];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="068a" domain="usercodeundertest"><source><![CDATA[value = value_with_tag.Substring(0, value_with_tag.Length - 8);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="069d" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="069e" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="069f" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.ColumnNameValueMap[keys.Current] is System.Decimal)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="06c7" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="06c8" domain="usercodeundertest"><source><![CDATA[record[table.ColumnIndices[keys.Current]] = Convert.ToDecimal(value);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                            ]]></source>
</chunk>
<chunk hits="0" offset="06e9" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else
                            ]]></source>
</chunk>
<chunk hits="0" offset="06ec" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="06ed" domain="usercodeundertest"><source><![CDATA[record[table.ColumnIndices[keys.Current]] = value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0704" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0705" domain="usercodeundertest"><source><![CDATA[string tags = record[table.ColumnIndices[keys.Current + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="072b" domain="usercodeundertest"><source><![CDATA[string[] tags_arr = tags.Split('$');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0744" domain="usercodeundertest"><source><![CDATA[int len = tags_arr.Length,]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="074a" domain="usercodeundertest"><source><![CDATA[new_tag = Convert.ToInt32(tag, 16);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            for (]]></source>
</chunk>
<chunk hits="0" offset="0755" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0773" domain="usercodeundertest"><source><![CDATA[i < len]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="076d" domain="usercodeundertest"><source><![CDATA[i++]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                            ]]></source>
</chunk>
<chunk hits="0" offset="075a" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="075b" domain="usercodeundertest"><source><![CDATA[new_tag = new_tag | Convert.ToInt32(tags_arr[i], 16);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="076c" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="077f" domain="usercodeundertest"><source><![CDATA[string new_tag_16 = Convert.ToString(new_tag, 16);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="078a" domain="usercodeundertest"><source><![CDATA[len = 8 - new_tag_16.Length;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            for (]]></source>
</chunk>
<chunk hits="0" offset="0795" domain="usercodeundertest"><source><![CDATA[int i = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="07b0" domain="usercodeundertest"><source><![CDATA[i < len]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="07aa" domain="usercodeundertest"><source><![CDATA[i++]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                            ]]></source>
</chunk>
<chunk hits="0" offset="079a" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="079b" domain="usercodeundertest"><source><![CDATA[new_tag_16 = "0" + new_tag_16;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="07a9" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="07bc" domain="usercodeundertest"><source><![CDATA[record[table.ColumnIndices[keys.Current + "_TAINT"]] = new_tag_16;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="07dd" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        for (]]></source>
</chunk>
<chunk hits="0" offset="07ee" domain="usercodeundertest"><source><![CDATA[int j = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="08ae" domain="usercodeundertest"><source><![CDATA[j < table.numColumns]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="08a8" domain="usercodeundertest"><source><![CDATA[j += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                        ]]></source>
</chunk>
<chunk hits="0" offset="07f6" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="07f7" domain="usercodeundertest"><source><![CDATA[if (!indices.Contains(j))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0809" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="080a" domain="usercodeundertest"><source><![CDATA[string tags = record[j].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0816" domain="usercodeundertest"><source><![CDATA[string[] tags_arr = tags.Split('$');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="082f" domain="usercodeundertest"><source><![CDATA[int len = tags_arr.Length,]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0835" domain="usercodeundertest"><source><![CDATA[new_tag = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                for (]]></source>
</chunk>
<chunk hits="0" offset="0838" domain="usercodeundertest"><source><![CDATA[int i = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0856" domain="usercodeundertest"><source><![CDATA[i < len]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="0850" domain="usercodeundertest"><source><![CDATA[i++]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                ]]></source>
</chunk>
<chunk hits="0" offset="083d" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="083e" domain="usercodeundertest"><source><![CDATA[new_tag = new_tag | Convert.ToInt32(tags_arr[i], 16);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="084f" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0862" domain="usercodeundertest"><source><![CDATA[string new_tag_16 = Convert.ToString(new_tag, 16);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="086d" domain="usercodeundertest"><source><![CDATA[len = 8 - new_tag_16.Length;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                for (]]></source>
</chunk>
<chunk hits="0" offset="0878" domain="usercodeundertest"><source><![CDATA[int i = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0893" domain="usercodeundertest"><source><![CDATA[i < len]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="088d" domain="usercodeundertest"><source><![CDATA[i++]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                ]]></source>
</chunk>
<chunk hits="0" offset="087d" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="087e" domain="usercodeundertest"><source><![CDATA[new_tag_16 = "0" + new_tag_16;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="088c" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                //Console.WriteLine("newtag2: " + new_tag_16);
                                ]]></source>
</chunk>
<chunk hits="0" offset="089f" domain="usercodeundertest"><source><![CDATA[record[j] = new_tag_16;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="08a6" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="08a7" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="08c1" domain="usercodeundertest"><source><![CDATA[indices.Clear();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="08c9" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="08ec" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else
                ]]></source>
</chunk>
<chunk hits="0" offset="08ef" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="08f0" domain="usercodeundertest"><source><![CDATA[throw new NotImplementedException("Not Implemented for deletion from multiple tables");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                }
            ]]></source>
</chunk>
<chunk hits="0" offset="08fb" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[


            ]]></source>
</chunk>
<chunk hits="1" offset="08fc" domain="usercodeundertest"><source><![CDATA[return new MockSqlDataReader(selectedRecords);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0906" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        private List<object[]> SelectDistinct(List<object[]> selectedRecords)
        {
            List<object[]> distinctRecords = new List<object[]>();

            foreach (object[] o in selectedRecords)
            {
                bool isDistinct = true;
                foreach (object[] d in distinctRecords)
                {
                    for (int i = 0; i < o.Length; i++)
                    {
                        if (o[i].Equals(d[i]))
                            isDistinct = false;
                        else
                        {
                            isDistinct = true;
                            break;
                        }
                    }
                    if (!isDistinct)
                        break;
                }
                if (isDistinct)
                    distinctRecords.Add(o);
            }
            return distinctRecords;
        }

        private List<object[]> SelectColumnsFromMultipleTables(Dictionary<string, List<object[]>> records, QueryParts parsedQuery, Dictionary<string, Table> tables)
        ]]></source>
</chunk>
<method name="SelectColumnsFromMultipleTables" namespace="MockDBMS.SqlServer" type="MockDBMS.SqlServer.MockSqlCommand" typeName="MockSqlCommand" token="6000036" module="MockDBMS.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
<hit index="9" value="1"/>
<hit index="10" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
<hit index="13" value="2"/>
<hit index="73" value="1"/>
<hit index="74" value="1"/>
<hit index="75" value="1"/>
<hit index="76" value="1"/>
<hit index="77" value="1"/>
<hit index="78" value="2"/>
<hit index="79" value="4"/>
<hit index="80" value="4"/>
<hit index="81" value="4"/>
<hit index="82" value="4"/>
<hit index="83" value="4"/>
<hit index="84" value="8"/>
<hit index="86" value="4"/>
<hit index="87" value="4"/>
<hit index="88" value="4"/>
<hit index="89" value="4"/>
<hit index="90" value="4"/>
<hit index="91" value="8"/>
<hit index="92" value="4"/>
<hit index="93" value="4"/>
<hit index="94" value="4"/>
<hit index="95" value="8"/>
<hit index="96" value="4"/>
<hit index="97" value="4"/>
<hit index="98" value="4"/>
<hit index="99" value="8"/>
<hit index="100" value="4"/>
<hit index="101" value="4"/>
<hit index="102" value="4"/>
<hit index="103" value="4"/>
<hit index="104" value="4"/>
<hit index="105" value="4"/>
<hit index="106" value="4"/>
<hit index="107" value="8"/>
<hit index="109" value="4"/>
<hit index="110" value="4"/>
<hit index="111" value="4"/>
<hit index="112" value="8"/>
<hit index="113" value="4"/>
<hit index="114" value="4"/>
<hit index="115" value="4"/>
<hit index="116" value="4"/>
<hit index="117" value="4"/>
<hit index="118" value="8"/>
<hit index="119" value="3"/>
<hit index="120" value="3"/>
<hit index="121" value="3"/>
<hit index="122" value="3"/>
<hit index="123" value="6"/>
<hit index="124" value="1"/>
<hit index="125" value="1"/>
<hit index="126" value="1"/>
<hit index="127" value="2"/>
<hit index="129" value="1"/>
<hit index="130" value="1"/>
<hit index="131" value="1"/>
<hit index="132" value="1"/>
<hit index="133" value="1"/>
<hit index="134" value="2"/>
<hit index="143" value="4"/>
<hit index="144" value="4"/>
<hit index="145" value="4"/>
<hit index="146" value="4"/>
<hit index="147" value="4"/>
<hit index="148" value="4"/>
<hit index="149" value="4"/>
<hit index="150" value="2"/>
<hit index="151" value="2"/>
<hit index="152" value="2"/>
<hit index="153" value="2"/>
<hit index="154" value="2"/>
<hit index="155" value="2"/>
<hit index="156" value="2"/>
<hit index="157" value="2"/>
<hit index="158" value="4"/>
<hit index="159" value="2"/>
<hit index="160" value="2"/>
<hit index="161" value="2"/>
<hit index="162" value="4"/>
<hit index="163" value="2"/>
<hit index="164" value="2"/>
<hit index="165" value="2"/>
<hit index="166" value="2"/>
<hit index="167" value="2"/>
<hit index="168" value="4"/>
<hit index="169" value="2"/>
<hit index="170" value="2"/>
<hit index="171" value="2"/>
<hit index="172" value="2"/>
<hit index="174" value="2"/>
<hit index="175" value="2"/>
<hit index="176" value="2"/>
<hit index="177" value="2"/>
<hit index="178" value="2"/>
<hit index="179" value="2"/>
<hit index="180" value="2"/>
<hit index="181" value="2"/>
<hit index="182" value="2"/>
<hit index="183" value="2"/>
<hit index="184" value="2"/>
<hit index="185" value="2"/>
<hit index="186" value="2"/>
<hit index="187" value="2"/>
<hit index="188" value="2"/>
<hit index="189" value="2"/>
<hit index="190" value="14"/>
<hit index="191" value="14"/>
<hit index="192" value="2"/>
<hit index="193" value="2"/>
<hit index="194" value="2"/>
<hit index="195" value="2"/>
<hit index="196" value="4"/>
<hit index="197" value="2"/>
<hit index="198" value="2"/>
<hit index="199" value="2"/>
<hit index="200" value="4"/>
<hit index="201" value="2"/>
<hit index="202" value="2"/>
<hit index="203" value="2"/>
<hit index="204" value="2"/>
<hit index="205" value="2"/>
<hit index="206" value="2"/>
<hit index="207" value="2"/>
<hit index="208" value="2"/>
<hit index="209" value="2"/>
<hit index="210" value="2"/>
<hit index="211" value="2"/>
<hit index="212" value="2"/>
<hit index="213" value="2"/>
<hit index="214" value="4"/>
<hit index="215" value="2"/>
<hit index="216" value="2"/>
<hit index="217" value="2"/>
<hit index="218" value="4"/>
<hit index="219" value="2"/>
<hit index="220" value="2"/>
<hit index="221" value="2"/>
<hit index="222" value="2"/>
<hit index="223" value="2"/>
<hit index="224" value="2"/>
<hit index="225" value="4"/>
<hit index="226" value="4"/>
<hit index="227" value="4"/>
<hit index="228" value="8"/>
<hit index="229" value="8"/>
<hit index="230" value="8"/>
<hit index="231" value="4"/>
<hit index="232" value="1"/>
<hit index="233" value="4"/>
<hit index="235" value="2"/>
<hit index="236" value="2"/>
<hit index="237" value="14"/>
<hit index="238" value="4"/>
<hit index="245" value="4"/>
<hit index="246" value="4"/>
<hit index="247" value="4"/>
<hit index="248" value="4"/>
<hit index="251" value="5"/>
<hit index="252" value="5"/>
<hit index="253" value="1"/>
<hit index="254" value="4"/>
<hit index="255" value="4"/>
<hit index="260" value="1"/>
<hit index="261" value="1"/>
<hit index="262" value="1"/>
<hit index="263" value="1"/>
<hit index="266" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="58" total="80" coveredRatio="0.725"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[List<object[]> selectedRecords = new List<object[]>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0007" domain="usercodeundertest"><source><![CDATA[List<string> columnsToBeSelected = new List<string>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="000d" domain="usercodeundertest"><source><![CDATA[List<string> columnTableNames = new List<string>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="1" offset="0013" domain="usercodeundertest"><source><![CDATA[if (parsedQuery.IsSelectAll)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0025" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0026" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="0" offset="0036" domain="usercodeundertest"><source><![CDATA[string tableName]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0088" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0027" domain="usercodeundertest"><source><![CDATA[tables.Keys]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                ]]></source>
</chunk>
<chunk hits="0" offset="003e" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="003f" domain="usercodeundertest"><source><![CDATA[Table table = tables[tableName];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0048" domain="usercodeundertest"><source><![CDATA[IEnumerator<string> columnEnumerator = table.ColumnNameType.Keys.GetEnumerator();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="007a" domain="usercodeundertest"><source><![CDATA[while (columnEnumerator.MoveNext())]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0062" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0063" domain="usercodeundertest"><source><![CDATA[columnsToBeSelected.Add(columnEnumerator.Current);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0071" domain="usercodeundertest"><source><![CDATA[columnTableNames.Add(tableName);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0079" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0087" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00a7" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else
            ]]></source>
</chunk>
<chunk hits="1" offset="00aa" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="00ab" domain="usercodeundertest"><source><![CDATA[columnsToBeSelected = parsedQuery.selectedColumns;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="00b2" domain="usercodeundertest"><source><![CDATA[columnTableNames = parsedQuery.selectedColumnFrom;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="00b9" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="00ba" domain="usercodeundertest"><source><![CDATA[int columnIndex = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="00bd" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="4" offset="00cb" domain="usercodeundertest"><source><![CDATA[string column]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="7" offset="02fd" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="00be" domain="usercodeundertest"><source><![CDATA[columnsToBeSelected]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
            ]]></source>
</chunk>
<chunk hits="4" offset="00d4" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="4" offset="00d5" domain="usercodeundertest"><source><![CDATA[object[] selectedRecord = new object[columnsToBeSelected.Count];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="4" offset="00e2" domain="usercodeundertest"><source><![CDATA[columnIndex = columnsToBeSelected.IndexOf(column);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="12" offset="00ec" domain="usercodeundertest"><source><![CDATA[string tableName = columnTableNames[columnIndex];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="12" offset="00f5" domain="usercodeundertest"><source><![CDATA[Table table = tables[tableName];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="12" offset="00fe" domain="usercodeundertest"><source><![CDATA[Console.WriteLine("table::: " + tableName);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="4" offset="010f" domain="usercodeundertest"><source><![CDATA[List<object[]> recordsInTable = records[tableName];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="12" offset="0118" domain="usercodeundertest"><source><![CDATA[int rowIndex = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="12" offset="011b" domain="usercodeundertest"><source><![CDATA[if (recordsInTable == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0129" domain="usercodeundertest"><source><![CDATA[continue;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="4" offset="012e" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="4" offset="013d" domain="usercodeundertest"><source><![CDATA[object[] record]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="24" offset="02da" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="4" offset="012f" domain="usercodeundertest"><source><![CDATA[recordsInTable]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                ]]></source>
</chunk>
<chunk hits="4" offset="0146" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="4" offset="0147" domain="usercodeundertest"><source><![CDATA[if (selectedRecords.Count > rowIndex)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="3" offset="015a" domain="usercodeundertest"><source><![CDATA[selectedRecord = selectedRecords[rowIndex];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else
                    ]]></source>
</chunk>
<chunk hits="1" offset="0166" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="1" offset="0167" domain="usercodeundertest"><source><![CDATA[selectedRecord = new object[columnsToBeSelected.Count];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="1" offset="0174" domain="usercodeundertest"><source><![CDATA[selectedRecords.Add(selectedRecord);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="3" offset="017d" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="12" offset="017e" domain="usercodeundertest"><source><![CDATA[if (selectedRecord == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="018c" domain="usercodeundertest"><source><![CDATA[selectedRecord = new object[columnsToBeSelected.Count];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                    ]]></source>
</chunk>
<chunk hits="4" offset="0199" domain="usercodeundertest"><source><![CDATA[if (column.Length >= 6 && column.Substring(column.Length - 6) == "_TAINT")]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="01cc" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="01cd" domain="usercodeundertest"><source><![CDATA[Console.WriteLine("column:" + column);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="01df" domain="usercodeundertest"><source><![CDATA[string tags = record[table.ColumnIndices[column]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="6" offset="01f7" domain="usercodeundertest"><source><![CDATA[Console.WriteLine("tagggg:" + tags);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="0209" domain="usercodeundertest"><source><![CDATA[string[] tags_arr = tags.Split('$');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="0222" domain="usercodeundertest"><source><![CDATA[int len = tags_arr.Length,]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="2" offset="0228" domain="usercodeundertest"><source><![CDATA[new_tag = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        for (]]></source>
</chunk>
<chunk hits="2" offset="022b" domain="usercodeundertest"><source><![CDATA[int i = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="4" offset="0249" domain="usercodeundertest"><source><![CDATA[i < len]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="2" offset="0243" domain="usercodeundertest"><source><![CDATA[i++]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                        ]]></source>
</chunk>
<chunk hits="2" offset="0230" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="2" offset="0231" domain="usercodeundertest"><source><![CDATA[new_tag = new_tag | Convert.ToInt32(tags_arr[i], 16);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="0242" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="0255" domain="usercodeundertest"><source><![CDATA[string new_tag_16 = Convert.ToString(new_tag, 16);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="0260" domain="usercodeundertest"><source><![CDATA[len = 8 - new_tag_16.Length;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        for (]]></source>
</chunk>
<chunk hits="2" offset="026b" domain="usercodeundertest"><source><![CDATA[int i = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="16" offset="0286" domain="usercodeundertest"><source><![CDATA[i < len]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="14" offset="0280" domain="usercodeundertest"><source><![CDATA[i++]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                        ]]></source>
</chunk>
<chunk hits="14" offset="0270" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="14" offset="0271" domain="usercodeundertest"><source><![CDATA[new_tag_16 = "0" + new_tag_16;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="14" offset="027f" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="0292" domain="usercodeundertest"><source><![CDATA[record[table.ColumnIndices[column]] = tags_arr[0];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="8" offset="02a7" domain="usercodeundertest"><source><![CDATA[selectedRecord[columnIndex] = new_tag_16;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        
                    ]]></source>
</chunk>
<chunk hits="8" offset="02ae" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else
                    ]]></source>
</chunk>
<chunk hits="2" offset="02b1" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                        ]]></source>
</chunk>
<chunk hits="2" offset="02b2" domain="usercodeundertest"><source><![CDATA[selectedRecord[columnIndex] = record[table.ColumnIndices[column]];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="8" offset="02c8" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    
                    ]]></source>
</chunk>
<chunk hits="16" offset="02c9" domain="usercodeundertest"><source><![CDATA[selectedRecords[rowIndex++] = selectedRecord;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                ]]></source>
</chunk>
<chunk hits="12" offset="02d9" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                /*
                if (column.Length >= 6 && column.Substring(column.Length - 6) == "_TAINT")
                {
                    string tags = record[table.ColumnIndices[column]].ToString();
                    string[] tags_arr = tags.Split('$');
                    int len = tags_arr.Length, new_tag = 0;
                    for (int i = 0; i < len; i++)
                    {
                        new_tag = new_tag | Convert.ToInt32(tags_arr[i], 16);
                    }
                    string new_tag_16 = Convert.ToString(new_tag, 16);
                    len = 8 - new_tag_16.Length;
                    for (int i = 0; i < len; i++)
                    {
                        new_tag_16 = "0" + new_tag_16;
                    }
                    record[table.ColumnIndices[column]] = tags_arr[0];
                    selectedRecord[index++] = new_tag_16;
                }*/


            ]]></source>
</chunk>
<chunk hits="4" offset="02fc" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="031f" domain="usercodeundertest"><source><![CDATA[return selectedRecords;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0324" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[


        private Dictionary<string, List<object[]>> getRecordsFrommDifferentTablesWith(Expression condition, Dictionary<string, Table> tables)
        ]]></source>
</chunk>
<method name="getRecordsFrommDifferentTablesWith" namespace="MockDBMS.SqlServer" type="MockDBMS.SqlServer.MockSqlCommand" typeName="MockSqlCommand" token="6000037" module="MockDBMS.dll"><hits><hit index="0" value="4"/>
<hit index="1" value="4"/>
<hit index="3" value="4"/>
<hit index="4" value="4"/>
<hit index="5" value="4"/>
<hit index="6" value="4"/>
<hit index="7" value="8"/>
<hit index="8" value="4"/>
<hit index="9" value="4"/>
<hit index="10" value="4"/>
<hit index="11" value="8"/>
<hit index="12" value="8"/>
<hit index="13" value="8"/>
<hit index="14" value="8"/>
<hit index="15" value="8"/>
<hit index="16" value="8"/>
<hit index="17" value="16"/>
<hit index="18" value="8"/>
<hit index="19" value="8"/>
<hit index="20" value="8"/>
<hit index="21" value="16"/>
<hit index="22" value="8"/>
<hit index="23" value="8"/>
<hit index="24" value="8"/>
<hit index="25" value="16"/>
<hit index="26" value="12"/>
<hit index="27" value="12"/>
<hit index="28" value="4"/>
<hit index="29" value="8"/>
<hit index="33" value="4"/>
<hit index="34" value="4"/>
<hit index="35" value="4"/>
<hit index="36" value="4"/>
<hit index="39" value="4"/>
<hit index="41" value="4"/>
<hit index="42" value="4"/>
<hit index="43" value="4"/>
<hit index="44" value="4"/>
<hit index="45" value="8"/>
<hit index="51" value="4"/>
<hit index="52" value="4"/>
<hit index="53" value="4"/>
<hit index="54" value="8"/>
<hit index="55" value="4"/>
<hit index="56" value="4"/>
<hit index="57" value="4"/>
<hit index="58" value="8"/>
<hit index="59" value="4"/>
<hit index="60" value="4"/>
<hit index="61" value="4"/>
<hit index="62" value="8"/>
<hit index="74" value="4"/>
<hit index="75" value="4"/>
<hit index="76" value="4"/>
<hit index="77" value="8"/>
<hit index="78" value="4"/>
<hit index="79" value="4"/>
<hit index="80" value="4"/>
<hit index="81" value="4"/>
<hit index="82" value="8"/>
<hit index="83" value="1"/>
<hit index="84" value="1"/>
<hit index="85" value="1"/>
<hit index="86" value="1"/>
<hit index="87" value="2"/>
<hit index="88" value="1"/>
<hit index="89" value="1"/>
<hit index="90" value="1"/>
<hit index="91" value="1"/>
<hit index="92" value="2"/>
<hit index="93" value="1"/>
<hit index="94" value="3"/>
<hit index="95" value="3"/>
<hit index="96" value="3"/>
<hit index="97" value="6"/>
<hit index="98" value="3"/>
<hit index="99" value="4"/>
<hit index="100" value="4"/>
<hit index="101" value="4"/>
<hit index="102" value="8"/>
<hit index="118" value="4"/>
<hit index="119" value="4"/>
<hit index="120" value="4"/>
<hit index="121" value="4"/>
<hit index="122" value="4"/>
<hit index="123" value="4"/>
<hit index="124" value="4"/>
<hit index="125" value="8"/>
<hit index="126" value="2"/>
<hit index="127" value="2"/>
<hit index="128" value="2"/>
<hit index="129" value="2"/>
<hit index="130" value="4"/>
<hit index="131" value="2"/>
<hit index="132" value="2"/>
<hit index="133" value="2"/>
<hit index="134" value="2"/>
<hit index="135" value="4"/>
<hit index="136" value="2"/>
<hit index="137" value="2"/>
<hit index="138" value="2"/>
<hit index="139" value="2"/>
<hit index="140" value="4"/>
<hit index="141" value="2"/>
<hit index="142" value="2"/>
<hit index="143" value="2"/>
<hit index="144" value="2"/>
<hit index="145" value="4"/>
<hit index="146" value="2"/>
<hit index="147" value="2"/>
<hit index="148" value="2"/>
<hit index="149" value="2"/>
<hit index="150" value="4"/>
<hit index="151" value="2"/>
<hit index="152" value="2"/>
<hit index="153" value="2"/>
<hit index="154" value="2"/>
<hit index="155" value="4"/>
<hit index="156" value="2"/>
<hit index="157" value="2"/>
<hit index="158" value="2"/>
<hit index="159" value="2"/>
<hit index="160" value="2"/>
<hit index="161" value="4"/>
<hit index="173" value="2"/>
<hit index="174" value="2"/>
<hit index="175" value="2"/>
<hit index="176" value="2"/>
<hit index="177" value="2"/>
<hit index="178" value="4"/>
<hit index="191" value="2"/>
<hit index="192" value="2"/>
<hit index="193" value="2"/>
<hit index="194" value="4"/>
<hit index="195" value="1"/>
<hit index="196" value="1"/>
<hit index="197" value="1"/>
<hit index="198" value="1"/>
<hit index="199" value="2"/>
<hit index="200" value="1"/>
<hit index="201" value="1"/>
<hit index="202" value="1"/>
<hit index="203" value="1"/>
<hit index="204" value="1"/>
<hit index="205" value="2"/>
<hit index="206" value="1"/>
<hit index="207" value="1"/>
<hit index="208" value="1"/>
<hit index="209" value="1"/>
<hit index="210" value="2"/>
<hit index="211" value="1"/>
<hit index="212" value="1"/>
<hit index="213" value="1"/>
<hit index="214" value="2"/>
<hit index="215" value="1"/>
<hit index="216" value="1"/>
<hit index="217" value="1"/>
<hit index="218" value="1"/>
<hit index="219" value="2"/>
<hit index="220" value="1"/>
<hit index="221" value="1"/>
<hit index="222" value="1"/>
<hit index="246" value="1"/>
<hit index="247" value="1"/>
<hit index="248" value="1"/>
<hit index="249" value="2"/>
<hit index="277" value="1"/>
<hit index="278" value="1"/>
<hit index="279" value="1"/>
<hit index="280" value="2"/>
<hit index="281" value="1"/>
<hit index="282" value="1"/>
<hit index="283" value="1"/>
<hit index="284" value="1"/>
<hit index="285" value="2"/>
<hit index="286" value="1"/>
<hit index="287" value="1"/>
<hit index="288" value="1"/>
<hit index="289" value="1"/>
<hit index="290" value="2"/>
<hit index="291" value="1"/>
<hit index="292" value="1"/>
<hit index="293" value="1"/>
<hit index="294" value="2"/>
<hit index="295" value="1"/>
<hit index="296" value="1"/>
<hit index="297" value="1"/>
<hit index="298" value="2"/>
<hit index="299" value="1"/>
<hit index="300" value="1"/>
<hit index="301" value="1"/>
<hit index="302" value="1"/>
<hit index="303" value="2"/>
<hit index="304" value="1"/>
<hit index="305" value="1"/>
<hit index="306" value="1"/>
<hit index="307" value="2"/>
<hit index="308" value="1"/>
<hit index="309" value="1"/>
<hit index="310" value="1"/>
<hit index="311" value="2"/>
<hit index="312" value="1"/>
<hit index="313" value="1"/>
<hit index="314" value="1"/>
<hit index="315" value="2"/>
<hit index="328" value="1"/>
<hit index="329" value="1"/>
<hit index="330" value="1"/>
<hit index="331" value="2"/>
<hit index="342" value="1"/>
<hit index="343" value="1"/>
<hit index="344" value="1"/>
<hit index="345" value="2"/>
<hit index="346" value="1"/>
<hit index="347" value="1"/>
<hit index="349" value="1"/>
<hit index="350" value="1"/>
<hit index="351" value="1"/>
<hit index="352" value="1"/>
<hit index="353" value="2"/>
<hit index="354" value="1"/>
<hit index="355" value="1"/>
<hit index="356" value="1"/>
<hit index="357" value="2"/>
<hit index="358" value="2"/>
<hit index="359" value="2"/>
<hit index="360" value="2"/>
<hit index="361" value="2"/>
<hit index="362" value="2"/>
<hit index="363" value="4"/>
<hit index="364" value="2"/>
<hit index="365" value="2"/>
<hit index="366" value="2"/>
<hit index="367" value="4"/>
<hit index="368" value="2"/>
<hit index="369" value="2"/>
<hit index="370" value="2"/>
<hit index="371" value="4"/>
<hit index="372" value="3"/>
<hit index="373" value="3"/>
<hit index="374" value="1"/>
<hit index="375" value="2"/>
<hit index="379" value="1"/>
<hit index="380" value="1"/>
<hit index="381" value="1"/>
<hit index="382" value="1"/>
<hit index="385" value="1"/>
<hit index="386" value="1"/>
<hit index="387" value="1"/>
<hit index="388" value="2"/>
<hit index="389" value="1"/>
<hit index="390" value="1"/>
<hit index="391" value="1"/>
<hit index="392" value="1"/>
<hit index="393" value="2"/>
<hit index="394" value="1"/>
<hit index="395" value="1"/>
<hit index="396" value="1"/>
<hit index="477" value="2"/>
<hit index="478" value="2"/>
<hit index="479" value="2"/>
<hit index="480" value="4"/>
<hit index="481" value="1"/>
<hit index="482" value="1"/>
<hit index="483" value="1"/>
<hit index="484" value="1"/>
<hit index="485" value="2"/>
<hit index="486" value="1"/>
<hit index="487" value="1"/>
<hit index="488" value="1"/>
<hit index="489" value="1"/>
<hit index="490" value="2"/>
<hit index="491" value="1"/>
<hit index="492" value="1"/>
<hit index="493" value="1"/>
<hit index="494" value="1"/>
<hit index="495" value="1"/>
<hit index="496" value="1"/>
<hit index="497" value="1"/>
<hit index="498" value="2"/>
<hit index="499" value="1"/>
<hit index="500" value="1"/>
<hit index="501" value="1"/>
<hit index="502" value="1"/>
<hit index="503" value="1"/>
<hit index="505" value="1"/>
<hit index="506" value="1"/>
<hit index="507" value="1"/>
<hit index="508" value="2"/>
<hit index="509" value="1"/>
<hit index="510" value="4"/>
<hit index="511" value="4"/>
<hit index="512" value="3"/>
<hit index="513" value="4"/>
<hit index="514" value="2"/>
<hit index="519" value="2"/>
<hit index="520" value="2"/>
<hit index="521" value="2"/>
<hit index="522" value="2"/>
<hit index="523" value="1"/>
<hit index="524" value="1"/>
<hit index="528" value="1"/>
<hit index="529" value="1"/>
<hit index="531" value="1"/>
<hit index="532" value="1"/>
<hit index="536" value="1"/>
<hit index="537" value="1"/>
<hit index="543" value="1"/>
</hits>
<tags><tag offset="0124">This assertion has not been reached</tag>
<tag offset="012c">This assertion has not been reached</tag>
<tag offset="0139">This assertion has not been reached</tag>
</tags>
<coverage domain="usercodeundertest" unit="block" covered="111" total="190" coveredRatio="0.58421052631578951"/>
<coverage domain="usercodeundertest" unit="asserts" covered="6" total="9" coveredRatio="0.66666666666666663"/>
</method>
<chunk hits="4" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            //throw new NotImplementedException();
            ]]></source>
</chunk>
<chunk hits="4" offset="0001" domain="usercodeundertest"><source><![CDATA[Dictionary<string, List<object[]>> records = new Dictionary<string, List<object[]>>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0007" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="8" offset="0017" domain="usercodeundertest"><source><![CDATA[string tableName]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="36" offset="0035" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="4" offset="0008" domain="usercodeundertest"><source><![CDATA[tables.Keys]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
            ]]></source>
</chunk>
<chunk hits="8" offset="001f" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="8" offset="0020" domain="usercodeundertest"><source><![CDATA[records.Add(tableName, tables[tableName].Records);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="24" offset="0034" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="4" offset="0054" domain="usercodeundertest"><source><![CDATA[Dictionary<string, List<object[]>> resultSet = new Dictionary<string, List<object[]>>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="005a" domain="usercodeundertest"><source><![CDATA[string left = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="005c" domain="usercodeundertest"><source><![CDATA[string right = null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            string op;

            ]]></source>
</chunk>
<chunk hits="4" offset="005f" domain="usercodeundertest"><source><![CDATA[if (condition.Operator == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0071" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0072" domain="usercodeundertest"><source><![CDATA[throw new Exception("operator cannot be null");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }
            ]]></source>
</chunk>
<chunk hits="4" offset="007d" domain="usercodeundertest"><source><![CDATA[op = condition.Operator.Value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            Expression lhs;
            Expression rhs;
            ]]></source>
</chunk>
<chunk hits="12" offset="008a" domain="usercodeundertest"><source><![CDATA[if (condition.Left is PatternExpression)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00a1" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00a2" domain="usercodeundertest"><source><![CDATA[lhs = (Expression)((PatternExpression)condition.Left).Expression;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                //rhs = (Expression)((PatternExpression)condition.Right).Expression;
            ]]></source>
</chunk>
<chunk hits="0" offset="00b9" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else
            ]]></source>
</chunk>
<chunk hits="4" offset="00bc" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="4" offset="00bd" domain="usercodeundertest"><source><![CDATA[lhs = (Expression)condition.Left;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                //rhs = (Expression)condition.Right;
            ]]></source>
</chunk>
<chunk hits="4" offset="00ca" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="00cb" domain="usercodeundertest"><source><![CDATA[if (condition.Right is PatternExpression)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="00e2" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                //lhs = (Expression)((PatternExpression)condition.Left).Expression;
                ]]></source>
</chunk>
<chunk hits="1" offset="00e3" domain="usercodeundertest"><source><![CDATA[rhs = (Expression)((PatternExpression)condition.Right).Expression;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="00fa" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else
            ]]></source>
</chunk>
<chunk hits="3" offset="00fd" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                //lhs = (Expression)condition.Left;
                ]]></source>
</chunk>
<chunk hits="3" offset="00fe" domain="usercodeundertest"><source><![CDATA[rhs = (Expression)condition.Right;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="010b" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[


            ]]></source>
</chunk>
<chunk hits="4" offset="010c" domain="usercodeundertest"><source><![CDATA[if (op.Equals("NOT"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0121" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0122" domain="usercodeundertest" tag="true"><tooltip><![CDATA[This assertion has not been reached]]></tooltip>
<source><![CDATA[PexAssert.IsNull(lhs);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="012a" domain="usercodeundertest" tag="true"><tooltip><![CDATA[This assertion has not been reached]]></tooltip>
<source><![CDATA[PexAssert.IsNotNull(rhs);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0132" domain="usercodeundertest" tag="true"><tooltip><![CDATA[This assertion has not been reached]]></tooltip>
<source><![CDATA[PexAssert.IsNotNull(rhs.Operator);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="013f" domain="usercodeundertest"><source><![CDATA[Dictionary<string, List<object[]>> rec = getRecordsFrommDifferentTablesWith(rhs, tables);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="014a" domain="usercodeundertest"><source><![CDATA[resultSet = PerformOperationOnRecords(records, rec, op);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0156" domain="usercodeundertest"><source><![CDATA[return resultSet;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            }
            ]]></source>
</chunk>
<chunk hits="4" offset="015e" domain="usercodeundertest"><source><![CDATA[PexAssert.IsNotNull(lhs);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0166" domain="usercodeundertest"><source><![CDATA[PexAssert.IsNotNull(rhs);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            Dictionary<string, List<object[]>> lhsRecords;
            Dictionary<string, List<object[]>> rhsRecords;

            ]]></source>
</chunk>
<chunk hits="4" offset="016e" domain="usercodeundertest"><source><![CDATA[if (op.Equals("=") || op.Equals("<") || op.Equals("<=")
                || op.Equals(">") || op.Equals(">=") || op.Equals("!="))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="01cf" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="01d0" domain="usercodeundertest"><source><![CDATA[bool isNegative = false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="01d3" domain="usercodeundertest"><source><![CDATA[PexAssert.IsNull(lhs.Operator);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="01e0" domain="usercodeundertest"><source><![CDATA[PexAssert.IsTrue(rhs.Operator == null || rhs.Operator.Value == "-");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0208" domain="usercodeundertest"><source><![CDATA[if (rhs.Operator != null && rhs.Operator.Value == "-")]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0233" domain="usercodeundertest"><source><![CDATA[isNegative = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                ]]></source>
</chunk>
<chunk hits="2" offset="0236" domain="usercodeundertest"><source><![CDATA[if (lhs.Right is IntegerValue && rhs.Right is IntegerValue)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0262" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                   
                    ]]></source>
</chunk>
<chunk hits="1" offset="0263" domain="usercodeundertest"><source><![CDATA[if (!isNegative)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="026b" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="1" offset="026c" domain="usercodeundertest"><source><![CDATA[if (((IntegerValue)lhs.Right).Value == ((IntegerValue)rhs.Right).Value)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="1" offset="029c" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="1" offset="029d" domain="usercodeundertest"><source><![CDATA[resultSet = records;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="1" offset="029f" domain="usercodeundertest"><source><![CDATA[return resultSet;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        }
                    ]]></source>
</chunk>
<chunk hits="0" offset="02a7" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    else
                    ]]></source>
</chunk>
<chunk hits="0" offset="02aa" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="02ab" domain="usercodeundertest"><source><![CDATA[if (((IntegerValue)lhs.Right).Value == -((IntegerValue)rhs.Right).Value)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="02e0" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="02e1" domain="usercodeundertest"><source><![CDATA[resultSet = records;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="02e3" domain="usercodeundertest"><source><![CDATA[return resultSet;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        }
                    ]]></source>
</chunk>
<chunk hits="0" offset="02eb" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="02ec" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else ]]></source>
</chunk>
<chunk hits="1" offset="02ef" domain="usercodeundertest"><source><![CDATA[if (lhs.Right is StringValue && rhs.Right is StringValue)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0318" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0319" domain="usercodeundertest"><source><![CDATA[if (((StringValue)lhs.Right).Value == ((StringValue)rhs.Right).Value)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0349" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="034a" domain="usercodeundertest"><source><![CDATA[resultSet = records;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="034c" domain="usercodeundertest"><source><![CDATA[return resultSet;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    }
                ]]></source>
</chunk>
<chunk hits="0" offset="0354" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                ]]></source>
</chunk>
<chunk hits="1" offset="0355" domain="usercodeundertest"><source><![CDATA[DbObject rightPart = (DbObject)lhs.Right;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                string leftTableName, leftColumnName;
                string rightTableName, rightColumnName;

                ]]></source>
</chunk>
<chunk hits="1" offset="0363" domain="usercodeundertest"><source><![CDATA[leftTableName = ((DbObject)lhs.Right).Identifier.ID;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="3" offset="037b" domain="usercodeundertest"><source><![CDATA[leftColumnName = ((DbObject)lhs.Right).Next.Identifier.ID;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                ]]></source>
</chunk>
<chunk hits="3" offset="0398" domain="usercodeundertest"><source><![CDATA[if (rhs.Right is IntegerValue)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="03b0" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="03b1" domain="usercodeundertest"><source><![CDATA[right = ((IntegerValue)rhs.Right).Value.ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="03cd" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                else ]]></source>
</chunk>
<chunk hits="1" offset="03d3" domain="usercodeundertest"><source><![CDATA[if (rhs.Right is StringValue)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="03eb" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="03ec" domain="usercodeundertest"><source><![CDATA[right = ((StringValue)rhs.Right).Value;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="03ff" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                else ]]></source>
</chunk>
<chunk hits="1" offset="0405" domain="usercodeundertest"><source><![CDATA[if (rhs.Right is DbObject)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0420" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="0421" domain="usercodeundertest"><source><![CDATA[Dictionary<string, List<object[]>> rec = new Dictionary<string, List<object[]>>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="0428" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="2" offset="0438" domain="usercodeundertest"><source><![CDATA[string t]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="9" offset="0458" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="0429" domain="usercodeundertest"><source><![CDATA[tables.Keys]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                        ]]></source>
</chunk>
<chunk hits="2" offset="0441" domain="usercodeundertest"><source><![CDATA[rec.Add(t, tables[t].Records);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="0477" domain="usercodeundertest"><source><![CDATA[return SelectRecordsFromDifferentTables((DbObject)lhs.Right, (DbObject)rhs.Right, null, op, rec, tables);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                }

                ]]></source>
</chunk>
<chunk hits="0" offset="04a2" domain="usercodeundertest"><source><![CDATA[Console.WriteLine("leftTableName " + leftTableName);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="04b4" domain="usercodeundertest"><source><![CDATA[leftTableName = leftTableName.Trim('[', ']');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="04d3" domain="usercodeundertest"><source><![CDATA[if (leftTableName.Contains("[") && leftTableName.Contains("]"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="04f9" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="04fa" domain="usercodeundertest"><source><![CDATA[leftTableName = leftTableName.Substring(1, leftTableName.Length - 2);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="050d" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                ]]></source>
</chunk>
<chunk hits="0" offset="050e" domain="usercodeundertest"><source><![CDATA[Console.WriteLine("leftTableName " + leftTableName);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0520" domain="usercodeundertest"><source><![CDATA[Table table = tables[leftTableName];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="052a" domain="usercodeundertest"><source><![CDATA[Console.WriteLine("right:" + right);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="053c" domain="usercodeundertest"><source><![CDATA[List<object[]> tableResultSet = table.SelectRecords(leftColumnName, right, op, new List<object[]>());]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0550" domain="usercodeundertest"><source><![CDATA[resultSet.Add(table.name, tableResultSet);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0560" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="0" offset="0570" domain="usercodeundertest"><source><![CDATA[string t]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="059c" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0561" domain="usercodeundertest"><source><![CDATA[tables.Keys]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                ]]></source>
</chunk>
<chunk hits="0" offset="0579" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="057a" domain="usercodeundertest"><source><![CDATA[if (t != table.name)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0591" domain="usercodeundertest"><source><![CDATA[resultSet.Add(t, null);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="059b" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                
            ]]></source>
</chunk>
<chunk hits="0" offset="05bb" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="2" offset="05be" domain="usercodeundertest"><source><![CDATA[if (op.Equals("AND") || op.Equals("OR"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="05e4" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="05e5" domain="usercodeundertest"><source><![CDATA[PexAssert.IsNotNull(lhs.Operator);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="05f2" domain="usercodeundertest"><source><![CDATA[lhsRecords = getRecordsFrommDifferentTablesWith(lhs, tables);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="05fd" domain="usercodeundertest"><source><![CDATA[PexAssert.IsNotNull(rhs.Operator);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="060a" domain="usercodeundertest"><source><![CDATA[rhsRecords = getRecordsFrommDifferentTablesWith(rhs, tables);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0615" domain="usercodeundertest"><source><![CDATA[resultSet = PerformOperationOnRecords(lhsRecords, rhsRecords, op);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0622" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="1" offset="0625" domain="usercodeundertest"><source><![CDATA[if (op.Equals("LIKE"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="063a" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                /*
                PexAssert.IsNull(lhs.Operator);
                PexAssert.IsNull(rhs.Operator);
                right = ((StringValue)rhs.Right).Value.ToString();
                left = ((DbObject)lhs.Right).Identifier.ID;
                resultSet = SelectRecords(left, right, op, recds);
            
                 */
            ]]></source>
</chunk>
<chunk hits="1" offset="063b" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="063c" domain="usercodeundertest"><source><![CDATA[return resultSet;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[


        ]]></source>
</chunk>
<chunk hits="3" offset="0641" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[


        /*To be implemented for 
         * Operators: LIKE, IS NULL, IS NOT NULL
         */
        private Dictionary<string, List<object[]>> SelectRecordsFromDifferentTables(
            DbObject left, DbObject right, string rightString, string op, Dictionary<string, List<object[]>> records, Dictionary<string, Table> tables)
        ]]></source>
</chunk>
<method name="SelectRecordsFromDifferentTables" namespace="MockDBMS.SqlServer" type="MockDBMS.SqlServer.MockSqlCommand" typeName="MockSqlCommand" token="6000038" module="MockDBMS.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="2"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="2"/>
<hit index="10" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
<hit index="13" value="2"/>
<hit index="14" value="1"/>
<hit index="15" value="1"/>
<hit index="16" value="1"/>
<hit index="17" value="2"/>
<hit index="18" value="1"/>
<hit index="19" value="1"/>
<hit index="20" value="1"/>
<hit index="21" value="2"/>
<hit index="22" value="1"/>
<hit index="23" value="1"/>
<hit index="24" value="1"/>
<hit index="25" value="2"/>
<hit index="34" value="1"/>
<hit index="35" value="1"/>
<hit index="36" value="1"/>
<hit index="37" value="2"/>
<hit index="38" value="1"/>
<hit index="39" value="1"/>
<hit index="40" value="1"/>
<hit index="41" value="1"/>
<hit index="42" value="2"/>
<hit index="43" value="1"/>
<hit index="44" value="1"/>
<hit index="45" value="1"/>
<hit index="46" value="2"/>
<hit index="47" value="1"/>
<hit index="48" value="1"/>
<hit index="49" value="1"/>
<hit index="50" value="2"/>
<hit index="51" value="1"/>
<hit index="52" value="1"/>
<hit index="53" value="1"/>
<hit index="54" value="2"/>
<hit index="55" value="1"/>
<hit index="56" value="1"/>
<hit index="57" value="1"/>
<hit index="58" value="2"/>
<hit index="68" value="1"/>
<hit index="69" value="1"/>
<hit index="70" value="1"/>
<hit index="71" value="1"/>
<hit index="72" value="1"/>
<hit index="73" value="1"/>
<hit index="74" value="1"/>
<hit index="75" value="1"/>
<hit index="76" value="1"/>
<hit index="77" value="1"/>
<hit index="78" value="1"/>
<hit index="79" value="1"/>
<hit index="85" value="1"/>
<hit index="86" value="1"/>
<hit index="87" value="1"/>
<hit index="88" value="1"/>
<hit index="89" value="1"/>
<hit index="90" value="1"/>
<hit index="91" value="1"/>
<hit index="92" value="1"/>
<hit index="93" value="1"/>
<hit index="94" value="1"/>
<hit index="95" value="1"/>
<hit index="96" value="1"/>
<hit index="101" value="1"/>
<hit index="102" value="1"/>
<hit index="103" value="1"/>
<hit index="104" value="1"/>
<hit index="105" value="1"/>
<hit index="106" value="1"/>
<hit index="112" value="1"/>
<hit index="113" value="1"/>
<hit index="114" value="1"/>
<hit index="115" value="1"/>
<hit index="116" value="1"/>
<hit index="117" value="1"/>
<hit index="118" value="1"/>
<hit index="119" value="1"/>
<hit index="120" value="1"/>
<hit index="121" value="1"/>
<hit index="122" value="1"/>
<hit index="123" value="1"/>
<hit index="128" value="1"/>
<hit index="130" value="1"/>
<hit index="131" value="1"/>
<hit index="133" value="1"/>
<hit index="134" value="1"/>
<hit index="136" value="1"/>
<hit index="137" value="1"/>
<hit index="138" value="1"/>
<hit index="139" value="1"/>
<hit index="140" value="1"/>
<hit index="141" value="1"/>
<hit index="142" value="1"/>
<hit index="143" value="1"/>
<hit index="144" value="1"/>
<hit index="145" value="1"/>
<hit index="146" value="1"/>
<hit index="147" value="2"/>
<hit index="173" value="1"/>
<hit index="174" value="1"/>
<hit index="175" value="1"/>
<hit index="176" value="1"/>
<hit index="177" value="2"/>
<hit index="178" value="1"/>
<hit index="179" value="1"/>
<hit index="180" value="1"/>
<hit index="181" value="2"/>
<hit index="182" value="1"/>
<hit index="183" value="1"/>
<hit index="184" value="1"/>
<hit index="185" value="2"/>
<hit index="186" value="1"/>
<hit index="187" value="1"/>
<hit index="188" value="1"/>
<hit index="189" value="1"/>
<hit index="190" value="1"/>
<hit index="191" value="2"/>
<hit index="192" value="1"/>
<hit index="193" value="1"/>
<hit index="194" value="1"/>
<hit index="195" value="2"/>
<hit index="196" value="1"/>
<hit index="197" value="1"/>
<hit index="198" value="1"/>
<hit index="199" value="2"/>
<hit index="200" value="1"/>
<hit index="201" value="1"/>
<hit index="202" value="1"/>
<hit index="203" value="1"/>
<hit index="204" value="1"/>
<hit index="205" value="2"/>
<hit index="206" value="1"/>
<hit index="207" value="1"/>
<hit index="208" value="1"/>
<hit index="209" value="2"/>
<hit index="210" value="1"/>
<hit index="211" value="1"/>
<hit index="212" value="1"/>
<hit index="213" value="2"/>
<hit index="214" value="1"/>
<hit index="215" value="1"/>
<hit index="216" value="1"/>
<hit index="217" value="2"/>
<hit index="218" value="1"/>
<hit index="219" value="1"/>
<hit index="220" value="1"/>
<hit index="221" value="1"/>
<hit index="222" value="1"/>
<hit index="223" value="2"/>
<hit index="224" value="1"/>
<hit index="225" value="1"/>
<hit index="226" value="1"/>
<hit index="227" value="2"/>
<hit index="228" value="1"/>
<hit index="229" value="1"/>
<hit index="230" value="1"/>
<hit index="231" value="2"/>
<hit index="232" value="1"/>
<hit index="233" value="1"/>
<hit index="234" value="1"/>
<hit index="235" value="1"/>
<hit index="236" value="1"/>
<hit index="237" value="2"/>
<hit index="238" value="1"/>
<hit index="239" value="1"/>
<hit index="240" value="1"/>
<hit index="241" value="2"/>
<hit index="242" value="1"/>
<hit index="243" value="1"/>
<hit index="244" value="1"/>
<hit index="245" value="2"/>
<hit index="246" value="1"/>
<hit index="247" value="1"/>
<hit index="248" value="1"/>
<hit index="249" value="1"/>
<hit index="250" value="1"/>
<hit index="251" value="1"/>
<hit index="252" value="2"/>
<hit index="253" value="1"/>
<hit index="254" value="1"/>
<hit index="255" value="1"/>
<hit index="256" value="1"/>
<hit index="257" value="2"/>
<hit index="258" value="1"/>
<hit index="259" value="1"/>
<hit index="261" value="1"/>
<hit index="262" value="1"/>
<hit index="263" value="1"/>
<hit index="264" value="1"/>
<hit index="265" value="1"/>
<hit index="266" value="2"/>
<hit index="267" value="1"/>
<hit index="269" value="1"/>
<hit index="270" value="1"/>
<hit index="271" value="1"/>
<hit index="272" value="1"/>
<hit index="273" value="1"/>
<hit index="274" value="2"/>
<hit index="275" value="1"/>
<hit index="276" value="1"/>
<hit index="277" value="1"/>
<hit index="278" value="2"/>
<hit index="279" value="1"/>
<hit index="280" value="1"/>
<hit index="281" value="1"/>
<hit index="282" value="2"/>
<hit index="283" value="1"/>
<hit index="284" value="1"/>
<hit index="285" value="1"/>
<hit index="286" value="1"/>
<hit index="287" value="1"/>
<hit index="288" value="2"/>
<hit index="289" value="1"/>
<hit index="290" value="1"/>
<hit index="291" value="1"/>
<hit index="292" value="1"/>
<hit index="293" value="1"/>
<hit index="294" value="2"/>
<hit index="295" value="1"/>
<hit index="296" value="1"/>
<hit index="297" value="1"/>
<hit index="298" value="2"/>
<hit index="299" value="1"/>
<hit index="300" value="1"/>
<hit index="301" value="1"/>
<hit index="302" value="2"/>
<hit index="303" value="1"/>
<hit index="304" value="1"/>
<hit index="305" value="1"/>
<hit index="306" value="1"/>
<hit index="307" value="1"/>
<hit index="308" value="2"/>
<hit index="309" value="1"/>
<hit index="310" value="1"/>
<hit index="311" value="1"/>
<hit index="312" value="1"/>
<hit index="313" value="1"/>
<hit index="314" value="2"/>
<hit index="316" value="8"/>
<hit index="317" value="8"/>
<hit index="318" value="8"/>
<hit index="319" value="8"/>
<hit index="320" value="8"/>
<hit index="321" value="8"/>
<hit index="322" value="8"/>
<hit index="323" value="8"/>
<hit index="324" value="8"/>
<hit index="325" value="8"/>
<hit index="326" value="8"/>
<hit index="327" value="8"/>
<hit index="328" value="8"/>
<hit index="329" value="8"/>
<hit index="330" value="8"/>
<hit index="331" value="8"/>
<hit index="332" value="8"/>
<hit index="333" value="8"/>
<hit index="334" value="8"/>
<hit index="335" value="8"/>
<hit index="336" value="8"/>
<hit index="337" value="8"/>
<hit index="338" value="8"/>
<hit index="339" value="8"/>
<hit index="340" value="8"/>
<hit index="341" value="8"/>
<hit index="342" value="8"/>
<hit index="343" value="8"/>
<hit index="344" value="8"/>
<hit index="345" value="8"/>
<hit index="346" value="9"/>
<hit index="347" value="1"/>
<hit index="349" value="7"/>
<hit index="350" value="7"/>
<hit index="351" value="7"/>
<hit index="352" value="7"/>
<hit index="353" value="7"/>
<hit index="354" value="7"/>
<hit index="355" value="7"/>
<hit index="356" value="7"/>
<hit index="357" value="7"/>
<hit index="358" value="7"/>
<hit index="359" value="7"/>
<hit index="360" value="7"/>
<hit index="361" value="7"/>
<hit index="362" value="7"/>
<hit index="363" value="7"/>
<hit index="364" value="7"/>
<hit index="365" value="7"/>
<hit index="366" value="7"/>
<hit index="367" value="7"/>
<hit index="368" value="7"/>
<hit index="369" value="7"/>
<hit index="370" value="7"/>
<hit index="371" value="7"/>
<hit index="372" value="7"/>
<hit index="373" value="7"/>
<hit index="374" value="7"/>
<hit index="375" value="7"/>
<hit index="376" value="7"/>
<hit index="377" value="7"/>
<hit index="378" value="7"/>
<hit index="379" value="8"/>
<hit index="380" value="1"/>
<hit index="381" value="1"/>
<hit index="382" value="1"/>
<hit index="383" value="1"/>
<hit index="384" value="2"/>
<hit index="385" value="1"/>
<hit index="386" value="1"/>
<hit index="387" value="1"/>
<hit index="388" value="2"/>
<hit index="2234" value="2"/>
<hit index="2235" value="2"/>
<hit index="2236" value="1"/>
<hit index="2239" value="1"/>
<hit index="2240" value="8"/>
<hit index="2241" value="7"/>
<hit index="2295" value="1"/>
<hit index="2303" value="1"/>
<hit index="2304" value="1"/>
<hit index="2305" value="1"/>
<hit index="2306" value="1"/>
<hit index="2309" value="2"/>
<hit index="2310" value="2"/>
<hit index="2311" value="1"/>
<hit index="2312" value="1"/>
<hit index="2317" value="1"/>
<hit index="2318" value="1"/>
<hit index="2319" value="1"/>
<hit index="2320" value="1"/>
<hit index="2329" value="1"/>
<hit index="2330" value="1"/>
<hit index="2331" value="1"/>
<hit index="2332" value="2"/>
<hit index="2333" value="1"/>
<hit index="2334" value="1"/>
<hit index="2335" value="1"/>
<hit index="2336" value="2"/>
<hit index="2339" value="1"/>
<hit index="2340" value="1"/>
<hit index="2341" value="1"/>
<hit index="2342" value="1"/>
<hit index="2344" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="95" total="457" coveredRatio="0.20787746170678337"/>
<coverage domain="usercodeundertest" unit="asserts" covered="2" total="2" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[string leftTable = null,]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ leftColumn;
            ]]></source>
</chunk>
<chunk hits="1" offset="0003" domain="usercodeundertest"><source><![CDATA[string rightTable = null,]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ rightColumn;

            ]]></source>
</chunk>
<chunk hits="1" offset="0005" domain="usercodeundertest"><source><![CDATA[if (left.HasNext)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0014" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0015" domain="usercodeundertest"><source><![CDATA[leftTable = left.Identifier.ID;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="3" offset="0021" domain="usercodeundertest"><source><![CDATA[leftColumn = left.Next.Identifier.ID;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="0032" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else
                ]]></source>
</chunk>
<chunk hits="0" offset="0035" domain="usercodeundertest"><source><![CDATA[leftColumn = left.Identifier.ID;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="3" offset="0041" domain="usercodeundertest"><source><![CDATA[if (right.HasNext)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0050" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0051" domain="usercodeundertest"><source><![CDATA[rightTable = right.Identifier.ID;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="3" offset="005d" domain="usercodeundertest"><source><![CDATA[rightColumn = right.Next.Identifier.ID;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="006e" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else
                ]]></source>
</chunk>
<chunk hits="0" offset="0071" domain="usercodeundertest"><source><![CDATA[rightColumn = right.Identifier.ID;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[


            ]]></source>
</chunk>
<chunk hits="3" offset="007d" domain="usercodeundertest"><source><![CDATA[leftColumn = leftColumn.Trim('[', ']');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="009a" domain="usercodeundertest"><source><![CDATA[if (leftColumn.Contains("["))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00ae" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00af" domain="usercodeundertest"><source><![CDATA[leftColumn = leftColumn.Substring(1, leftColumn.Length - 2);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00bf" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="00c0" domain="usercodeundertest"><source><![CDATA[rightColumn = rightColumn.Trim('[', ']');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="00dd" domain="usercodeundertest"><source><![CDATA[if (rightColumn.Contains("["))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00f1" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00f2" domain="usercodeundertest"><source><![CDATA[rightColumn = rightColumn.Substring(1, rightColumn.Length - 2);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0102" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="1" offset="0103" domain="usercodeundertest"><source><![CDATA[Console.WriteLine("left = " + leftTable + " right = " + rightTable);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="011a" domain="usercodeundertest"><source><![CDATA[if (leftTable.Contains("["))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="012e" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="012f" domain="usercodeundertest"><source><![CDATA[leftTable = leftTable.Substring(1, leftTable.Length - 2);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="013f" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0140" domain="usercodeundertest"><source><![CDATA[rightColumn = rightColumn.Trim('[', ']');]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="015d" domain="usercodeundertest"><source><![CDATA[if (rightTable.Contains("["))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0171" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0172" domain="usercodeundertest"><source><![CDATA[rightTable = rightTable.Substring(1, rightTable.Length - 2);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0182" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[


            ]]></source>
</chunk>
<chunk hits="1" offset="0183" domain="usercodeundertest"><source><![CDATA[Dictionary<string, List<object[]>> resultSet = new Dictionary<string, List<object[]>>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="1" offset="018a" domain="usercodeundertest"><source><![CDATA[List<object[]> leftResultSet = new List<object[]>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0191" domain="usercodeundertest"><source><![CDATA[List<object[]> rightResultSet = new List<object[]>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="1" offset="0198" domain="usercodeundertest"><source><![CDATA[PexAssert.IsTrue(leftTable != null && rightTable != null);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="01ab" domain="usercodeundertest"><source><![CDATA[Console.WriteLine("left = " + leftTable + " right = " + rightTable);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="01c2" domain="usercodeundertest"><source><![CDATA[if (op.Equals("=") || op.Equals("!=") || op.Equals("<") || op.Equals("<=") || op.Equals(">") || op.Equals(">="))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0223" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0224" domain="usercodeundertest"><source><![CDATA[List<object[]> leftRecords = records[leftTable];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="3" offset="022e" domain="usercodeundertest"><source><![CDATA[List<object[]> rightRecords = records[rightTable];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                ]]></source>
</chunk>
<chunk hits="3" offset="0238" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="1" offset="0247" domain="usercodeundertest"><source><![CDATA[object[] leftRecord]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="4" offset="17d4" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="3" offset="0239" domain="usercodeundertest"><source><![CDATA[leftRecords]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                ]]></source>
</chunk>
<chunk hits="1" offset="0250" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="0251" domain="usercodeundertest"><source><![CDATA[object leftObj = leftRecord[tables[leftTable].ColumnIndices[leftColumn]];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="0269" domain="usercodeundertest"><source><![CDATA[DataTypes leftType = tables[leftTable].ColumnNameType[leftColumn];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                    ]]></source>
</chunk>
<chunk hits="3" offset="027e" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="1" offset="028d" domain="usercodeundertest"><source><![CDATA[object[] rightRecord]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="7" offset="17b1" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="3" offset="027f" domain="usercodeundertest"><source><![CDATA[rightRecords]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                    ]]></source>
</chunk>
<chunk hits="1" offset="0296" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="1" offset="0297" domain="usercodeundertest"><source><![CDATA[object rightObj = rightRecord[tables[rightTable].ColumnIndices[rightColumn]];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="2" offset="02af" domain="usercodeundertest"><source><![CDATA[DataTypes rightType = tables[rightTable].ColumnNameType[rightColumn];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="3" offset="02c4" domain="usercodeundertest"><source><![CDATA[PexAssert.IsTrue(leftType == rightType);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                        ]]></source>
</chunk>
<chunk hits="1" offset="02d0" domain="usercodeundertest"><source><![CDATA[if (leftType == DataTypes.STRING)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="1" offset="02e1" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="1" offset="02e2" domain="usercodeundertest"><source><![CDATA[if (op.Equals("="))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="1" offset="02fa" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="1" offset="02fb" domain="usercodeundertest"><source><![CDATA[if (leftObj.Equals(rightObj))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="1" offset="0310" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="1" offset="0311" domain="usercodeundertest"><source><![CDATA[object[] leftResult = new object[leftRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="1" offset="031c" domain="usercodeundertest"><source><![CDATA[leftRecord.CopyTo(leftResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="3" offset="0327" domain="usercodeundertest"><source><![CDATA[object[] rightResult = new object[rightRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="1" offset="0332" domain="usercodeundertest"><source><![CDATA[rightRecord.CopyTo(rightResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="3" offset="033d" domain="usercodeundertest"><source><![CDATA[string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="3" offset="0364" domain="usercodeundertest"><source><![CDATA[string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[  
                                    //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                    //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                    for (]]></source>
</chunk>
<chunk hits="3" offset="038b" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="35" offset="03d3" domain="usercodeundertest"><source><![CDATA[i < leftRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="32" offset="03cd" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                    ]]></source>
</chunk>
<chunk hits="8" offset="0390" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="8" offset="0391" domain="usercodeundertest"><source><![CDATA[leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="32" offset="03cc" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    for (]]></source>
</chunk>
<chunk hits="1" offset="03e1" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="29" offset="0429" domain="usercodeundertest"><source><![CDATA[i < rightRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="28" offset="0423" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                    ]]></source>
</chunk>
<chunk hits="7" offset="03e6" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="7" offset="03e7" domain="usercodeundertest"><source><![CDATA[rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="28" offset="0422" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="1" offset="0437" domain="usercodeundertest"><source><![CDATA[leftResultSet.Add(leftResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="3" offset="0441" domain="usercodeundertest"><source><![CDATA[rightResultSet.Add(rightResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="3" offset="044b" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="4" offset="044c" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else ]]></source>
</chunk>
<chunk hits="0" offset="0452" domain="usercodeundertest"><source><![CDATA[if (op.Equals("!="))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="046a" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="046b" domain="usercodeundertest"><source><![CDATA[if (!leftObj.Equals(rightObj))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="047d" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="047e" domain="usercodeundertest"><source><![CDATA[object[] leftResult = new object[leftRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0489" domain="usercodeundertest"><source><![CDATA[leftRecord.CopyTo(leftResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0494" domain="usercodeundertest"><source><![CDATA[object[] rightResult = new object[rightRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="049f" domain="usercodeundertest"><source><![CDATA[rightRecord.CopyTo(rightResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="04aa" domain="usercodeundertest"><source><![CDATA[string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="04d1" domain="usercodeundertest"><source><![CDATA[string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                    //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                    for (]]></source>
</chunk>
<chunk hits="0" offset="04f8" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0540" domain="usercodeundertest"><source><![CDATA[i < leftRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="053a" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                    ]]></source>
</chunk>
<chunk hits="0" offset="04fd" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="04fe" domain="usercodeundertest"><source><![CDATA[leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0539" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    for (]]></source>
</chunk>
<chunk hits="0" offset="054e" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0596" domain="usercodeundertest"><source><![CDATA[i < rightRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="0590" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0553" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0554" domain="usercodeundertest"><source><![CDATA[rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="058f" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="05a4" domain="usercodeundertest"><source><![CDATA[leftResultSet.Add(leftResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="05ae" domain="usercodeundertest"><source><![CDATA[rightResultSet.Add(rightResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="05b8" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="05b9" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="4" offset="05ba" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        else ]]></source>
</chunk>
<chunk hits="0" offset="05c0" domain="usercodeundertest"><source><![CDATA[if (leftType == DataTypes.INT)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="05d1" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            //Int64 number = System.Convert.ToInt64(right, 10);
                            ]]></source>
</chunk>
<chunk hits="0" offset="05d2" domain="usercodeundertest"><source><![CDATA[if (op.Equals("="))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="05ea" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="05eb" domain="usercodeundertest"><source><![CDATA[if (leftObj is System.Decimal)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0601" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0602" domain="usercodeundertest"><source><![CDATA[Int64 leftNumber = Decimal.ToInt64((Decimal)leftObj);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0610" domain="usercodeundertest"><source><![CDATA[Int64 rightNumber = Decimal.ToInt64((Decimal)rightObj);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                                    ]]></source>
</chunk>
<chunk hits="0" offset="061e" domain="usercodeundertest"><source><![CDATA[if (leftNumber == rightNumber)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0630" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0631" domain="usercodeundertest"><source><![CDATA[object[] leftResult = new object[leftRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="063c" domain="usercodeundertest"><source><![CDATA[leftRecord.CopyTo(leftResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0647" domain="usercodeundertest"><source><![CDATA[object[] rightResult = new object[rightRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0652" domain="usercodeundertest"><source><![CDATA[rightRecord.CopyTo(rightResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="065d" domain="usercodeundertest"><source><![CDATA[string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0684" domain="usercodeundertest"><source><![CDATA[string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                        //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                        for (]]></source>
</chunk>
<chunk hits="0" offset="06ab" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="06f3" domain="usercodeundertest"><source><![CDATA[i < leftRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="06ed" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                        ]]></source>
</chunk>
<chunk hits="0" offset="06b0" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="06b1" domain="usercodeundertest"><source><![CDATA[leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="06ec" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        for (]]></source>
</chunk>
<chunk hits="0" offset="0701" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0749" domain="usercodeundertest"><source><![CDATA[i < rightRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="0743" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0706" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="0707" domain="usercodeundertest"><source><![CDATA[rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0742" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0757" domain="usercodeundertest"><source><![CDATA[leftResultSet.Add(leftResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0761" domain="usercodeundertest"><source><![CDATA[rightResultSet.Add(rightResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="076b" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="076c" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else ]]></source>
</chunk>
<chunk hits="0" offset="0772" domain="usercodeundertest"><source><![CDATA[if ((int)leftObj == (int)rightObj)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="078e" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="078f" domain="usercodeundertest"><source><![CDATA[object[] leftResult = new object[leftRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="079a" domain="usercodeundertest"><source><![CDATA[leftRecord.CopyTo(leftResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="07a5" domain="usercodeundertest"><source><![CDATA[object[] rightResult = new object[rightRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="07b0" domain="usercodeundertest"><source><![CDATA[rightRecord.CopyTo(rightResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="07bb" domain="usercodeundertest"><source><![CDATA[string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="07e2" domain="usercodeundertest"><source><![CDATA[string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                    //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                    for (]]></source>
</chunk>
<chunk hits="0" offset="0809" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0851" domain="usercodeundertest"><source><![CDATA[i < leftRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="084b" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                    ]]></source>
</chunk>
<chunk hits="0" offset="080e" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="080f" domain="usercodeundertest"><source><![CDATA[leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="084a" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    for (]]></source>
</chunk>
<chunk hits="0" offset="085f" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="08a7" domain="usercodeundertest"><source><![CDATA[i < rightRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="08a1" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0864" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0865" domain="usercodeundertest"><source><![CDATA[rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="08a0" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                                    ]]></source>
</chunk>
<chunk hits="0" offset="08b5" domain="usercodeundertest"><source><![CDATA[leftResultSet.Add(leftResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="08bf" domain="usercodeundertest"><source><![CDATA[rightResultSet.Add(rightResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="08c9" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                            ]]></source>
</chunk>
<chunk hits="0" offset="08ca" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else ]]></source>
</chunk>
<chunk hits="0" offset="08d0" domain="usercodeundertest"><source><![CDATA[if (op.Equals("!="))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="08e8" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="08e9" domain="usercodeundertest"><source><![CDATA[if (leftObj is System.Decimal)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="08ff" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0900" domain="usercodeundertest"><source><![CDATA[Int64 leftNumber = Decimal.ToInt64((Decimal)leftObj);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="090e" domain="usercodeundertest"><source><![CDATA[Int64 rightNumber = Decimal.ToInt64((Decimal)rightObj);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                                    ]]></source>
</chunk>
<chunk hits="0" offset="091c" domain="usercodeundertest"><source><![CDATA[if (leftNumber != rightNumber)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="092b" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="092c" domain="usercodeundertest"><source><![CDATA[object[] leftResult = new object[leftRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0937" domain="usercodeundertest"><source><![CDATA[leftRecord.CopyTo(leftResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0942" domain="usercodeundertest"><source><![CDATA[object[] rightResult = new object[rightRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="094d" domain="usercodeundertest"><source><![CDATA[rightRecord.CopyTo(rightResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0958" domain="usercodeundertest"><source><![CDATA[string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="097f" domain="usercodeundertest"><source><![CDATA[string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                        //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                        for (]]></source>
</chunk>
<chunk hits="0" offset="09a6" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="09ee" domain="usercodeundertest"><source><![CDATA[i < leftRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="09e8" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                        ]]></source>
</chunk>
<chunk hits="0" offset="09ab" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="09ac" domain="usercodeundertest"><source><![CDATA[leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="09e7" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        for (]]></source>
</chunk>
<chunk hits="0" offset="09fc" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0a44" domain="usercodeundertest"><source><![CDATA[i < rightRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="0a3e" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0a01" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="0a02" domain="usercodeundertest"><source><![CDATA[rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0a3d" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0a52" domain="usercodeundertest"><source><![CDATA[leftResultSet.Add(leftResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0a5c" domain="usercodeundertest"><source><![CDATA[rightResultSet.Add(rightResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0a66" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0a67" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else ]]></source>
</chunk>
<chunk hits="0" offset="0a6d" domain="usercodeundertest"><source><![CDATA[if ((int)leftObj != (int)rightObj)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0a86" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0a87" domain="usercodeundertest"><source><![CDATA[object[] leftResult = new object[leftRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0a92" domain="usercodeundertest"><source><![CDATA[leftRecord.CopyTo(leftResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0a9d" domain="usercodeundertest"><source><![CDATA[object[] rightResult = new object[rightRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0aa8" domain="usercodeundertest"><source><![CDATA[rightRecord.CopyTo(rightResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0ab3" domain="usercodeundertest"><source><![CDATA[string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0ada" domain="usercodeundertest"><source><![CDATA[string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                    //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                    for (]]></source>
</chunk>
<chunk hits="0" offset="0b01" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0b49" domain="usercodeundertest"><source><![CDATA[i < leftRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="0b43" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0b06" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0b07" domain="usercodeundertest"><source><![CDATA[leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0b42" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    for (]]></source>
</chunk>
<chunk hits="0" offset="0b57" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0b9f" domain="usercodeundertest"><source><![CDATA[i < rightRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="0b99" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0b5c" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0b5d" domain="usercodeundertest"><source><![CDATA[rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0b98" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0bad" domain="usercodeundertest"><source><![CDATA[leftResultSet.Add(leftResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0bb7" domain="usercodeundertest"><source><![CDATA[rightResultSet.Add(rightResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0bc1" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0bc2" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else ]]></source>
</chunk>
<chunk hits="0" offset="0bc8" domain="usercodeundertest"><source><![CDATA[if (op.Equals("<"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0be0" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0be1" domain="usercodeundertest"><source><![CDATA[if (leftObj is System.Decimal)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0bf7" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0bf8" domain="usercodeundertest"><source><![CDATA[Int64 leftNumber = Decimal.ToInt64((Decimal)leftObj);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0c06" domain="usercodeundertest"><source><![CDATA[Int64 rightNumber = Decimal.ToInt64((Decimal)rightObj);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                                    ]]></source>
</chunk>
<chunk hits="0" offset="0c14" domain="usercodeundertest"><source><![CDATA[if (leftNumber < rightNumber)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0c26" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0c27" domain="usercodeundertest"><source><![CDATA[object[] leftResult = new object[leftRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0c32" domain="usercodeundertest"><source><![CDATA[leftRecord.CopyTo(leftResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0c3d" domain="usercodeundertest"><source><![CDATA[object[] rightResult = new object[rightRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0c48" domain="usercodeundertest"><source><![CDATA[rightRecord.CopyTo(rightResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0c53" domain="usercodeundertest"><source><![CDATA[string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0c7a" domain="usercodeundertest"><source><![CDATA[string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                        //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                        for (]]></source>
</chunk>
<chunk hits="0" offset="0ca1" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0ce9" domain="usercodeundertest"><source><![CDATA[i < leftRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="0ce3" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0ca6" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="0ca7" domain="usercodeundertest"><source><![CDATA[leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0ce2" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        for (]]></source>
</chunk>
<chunk hits="0" offset="0cf7" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0d3f" domain="usercodeundertest"><source><![CDATA[i < rightRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="0d39" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0cfc" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="0cfd" domain="usercodeundertest"><source><![CDATA[rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0d38" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0d4d" domain="usercodeundertest"><source><![CDATA[leftResultSet.Add(leftResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0d57" domain="usercodeundertest"><source><![CDATA[rightResultSet.Add(rightResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0d61" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0d62" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else ]]></source>
</chunk>
<chunk hits="0" offset="0d68" domain="usercodeundertest"><source><![CDATA[if ((int)leftObj < (int)rightObj)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0d84" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0d85" domain="usercodeundertest"><source><![CDATA[object[] leftResult = new object[leftRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0d90" domain="usercodeundertest"><source><![CDATA[leftRecord.CopyTo(leftResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0d9b" domain="usercodeundertest"><source><![CDATA[object[] rightResult = new object[rightRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0da6" domain="usercodeundertest"><source><![CDATA[rightRecord.CopyTo(rightResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0db1" domain="usercodeundertest"><source><![CDATA[string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0dd8" domain="usercodeundertest"><source><![CDATA[string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                    //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                    for (]]></source>
</chunk>
<chunk hits="0" offset="0dff" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0e47" domain="usercodeundertest"><source><![CDATA[i < leftRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="0e41" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0e04" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0e05" domain="usercodeundertest"><source><![CDATA[leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0e40" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    for (]]></source>
</chunk>
<chunk hits="0" offset="0e55" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0e9d" domain="usercodeundertest"><source><![CDATA[i < rightRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="0e97" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0e5a" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0e5b" domain="usercodeundertest"><source><![CDATA[rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0e96" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0eab" domain="usercodeundertest"><source><![CDATA[leftResultSet.Add(leftResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0eb5" domain="usercodeundertest"><source><![CDATA[rightResultSet.Add(rightResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0ebf" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0ec0" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else ]]></source>
</chunk>
<chunk hits="0" offset="0ec6" domain="usercodeundertest"><source><![CDATA[if (op.Equals("<="))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0ede" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0edf" domain="usercodeundertest"><source><![CDATA[if (leftObj is System.Decimal)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0ef5" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0ef6" domain="usercodeundertest"><source><![CDATA[Int64 leftNumber = Decimal.ToInt64((Decimal)leftObj);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0f04" domain="usercodeundertest"><source><![CDATA[Int64 rightNumber = Decimal.ToInt64((Decimal)rightObj);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                                    ]]></source>
</chunk>
<chunk hits="0" offset="0f12" domain="usercodeundertest"><source><![CDATA[if (leftNumber <= rightNumber)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0f21" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0f22" domain="usercodeundertest"><source><![CDATA[object[] leftResult = new object[leftRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0f2d" domain="usercodeundertest"><source><![CDATA[leftRecord.CopyTo(leftResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0f38" domain="usercodeundertest"><source><![CDATA[object[] rightResult = new object[rightRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0f43" domain="usercodeundertest"><source><![CDATA[rightRecord.CopyTo(rightResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0f4e" domain="usercodeundertest"><source><![CDATA[string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0f75" domain="usercodeundertest"><source><![CDATA[string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                        //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                        for (]]></source>
</chunk>
<chunk hits="0" offset="0f9c" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0fe4" domain="usercodeundertest"><source><![CDATA[i < leftRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="0fde" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0fa1" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="0fa2" domain="usercodeundertest"><source><![CDATA[leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0fdd" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        for (]]></source>
</chunk>
<chunk hits="0" offset="0ff2" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="103a" domain="usercodeundertest"><source><![CDATA[i < rightRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="1034" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0ff7" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="0ff8" domain="usercodeundertest"><source><![CDATA[rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="1033" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                                        ]]></source>
</chunk>
<chunk hits="0" offset="1048" domain="usercodeundertest"><source><![CDATA[leftResultSet.Add(leftResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="1052" domain="usercodeundertest"><source><![CDATA[rightResultSet.Add(rightResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="105c" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="105d" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else ]]></source>
</chunk>
<chunk hits="0" offset="1063" domain="usercodeundertest"><source><![CDATA[if ((int)leftObj <= (int)rightObj)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="107c" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="107d" domain="usercodeundertest"><source><![CDATA[object[] leftResult = new object[leftRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="1088" domain="usercodeundertest"><source><![CDATA[leftRecord.CopyTo(leftResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="1093" domain="usercodeundertest"><source><![CDATA[object[] rightResult = new object[rightRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="109e" domain="usercodeundertest"><source><![CDATA[rightRecord.CopyTo(rightResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="10a9" domain="usercodeundertest"><source><![CDATA[string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="10d0" domain="usercodeundertest"><source><![CDATA[string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                    //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                    for (]]></source>
</chunk>
<chunk hits="0" offset="10f7" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="113f" domain="usercodeundertest"><source><![CDATA[i < leftRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="1139" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                    ]]></source>
</chunk>
<chunk hits="0" offset="10fc" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="10fd" domain="usercodeundertest"><source><![CDATA[leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="1138" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    for (]]></source>
</chunk>
<chunk hits="0" offset="114d" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="1195" domain="usercodeundertest"><source><![CDATA[i < rightRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="118f" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                    ]]></source>
</chunk>
<chunk hits="0" offset="1152" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="1153" domain="usercodeundertest"><source><![CDATA[rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="118e" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                                    ]]></source>
</chunk>
<chunk hits="0" offset="11a3" domain="usercodeundertest"><source><![CDATA[leftResultSet.Add(leftResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="11ad" domain="usercodeundertest"><source><![CDATA[rightResultSet.Add(rightResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="11b7" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="11b8" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else ]]></source>
</chunk>
<chunk hits="0" offset="11be" domain="usercodeundertest"><source><![CDATA[if (op.Equals(">"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="11d6" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="11d7" domain="usercodeundertest"><source><![CDATA[if (leftObj is System.Decimal)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="11ed" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="11ee" domain="usercodeundertest"><source><![CDATA[Int64 leftNumber = Decimal.ToInt64((Decimal)leftObj);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="11fc" domain="usercodeundertest"><source><![CDATA[Int64 rightNumber = Decimal.ToInt64((Decimal)rightObj);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                                    ]]></source>
</chunk>
<chunk hits="0" offset="120a" domain="usercodeundertest"><source><![CDATA[if (leftNumber > rightNumber)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="121c" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="121d" domain="usercodeundertest"><source><![CDATA[object[] leftResult = new object[leftRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="1228" domain="usercodeundertest"><source><![CDATA[leftRecord.CopyTo(leftResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="1233" domain="usercodeundertest"><source><![CDATA[object[] rightResult = new object[rightRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="123e" domain="usercodeundertest"><source><![CDATA[rightRecord.CopyTo(rightResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="1249" domain="usercodeundertest"><source><![CDATA[string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="1270" domain="usercodeundertest"><source><![CDATA[string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                        //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                        for (]]></source>
</chunk>
<chunk hits="0" offset="1297" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="12df" domain="usercodeundertest"><source><![CDATA[i < leftRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="12d9" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                        ]]></source>
</chunk>
<chunk hits="0" offset="129c" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="129d" domain="usercodeundertest"><source><![CDATA[leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="12d8" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        for (]]></source>
</chunk>
<chunk hits="0" offset="12ed" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="1335" domain="usercodeundertest"><source><![CDATA[i < rightRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="132f" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                        ]]></source>
</chunk>
<chunk hits="0" offset="12f2" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="12f3" domain="usercodeundertest"><source><![CDATA[rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="132e" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                                        ]]></source>
</chunk>
<chunk hits="0" offset="1343" domain="usercodeundertest"><source><![CDATA[leftResultSet.Add(leftResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="134d" domain="usercodeundertest"><source><![CDATA[rightResultSet.Add(rightResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="1357" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="1358" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else ]]></source>
</chunk>
<chunk hits="0" offset="135e" domain="usercodeundertest"><source><![CDATA[if ((int)leftObj > (int)rightObj)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="137a" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="137b" domain="usercodeundertest"><source><![CDATA[object[] leftResult = new object[leftRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="1386" domain="usercodeundertest"><source><![CDATA[leftRecord.CopyTo(leftResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="1391" domain="usercodeundertest"><source><![CDATA[object[] rightResult = new object[rightRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="139c" domain="usercodeundertest"><source><![CDATA[rightRecord.CopyTo(rightResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="13a7" domain="usercodeundertest"><source><![CDATA[string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="13ce" domain="usercodeundertest"><source><![CDATA[string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                    //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                    for (]]></source>
</chunk>
<chunk hits="0" offset="13f5" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="143d" domain="usercodeundertest"><source><![CDATA[i < leftRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="1437" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                    ]]></source>
</chunk>
<chunk hits="0" offset="13fa" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="13fb" domain="usercodeundertest"><source><![CDATA[leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="1436" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    for (]]></source>
</chunk>
<chunk hits="0" offset="144b" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="1493" domain="usercodeundertest"><source><![CDATA[i < rightRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="148d" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                    ]]></source>
</chunk>
<chunk hits="0" offset="1450" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="1451" domain="usercodeundertest"><source><![CDATA[rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="148c" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                                    ]]></source>
</chunk>
<chunk hits="0" offset="14a1" domain="usercodeundertest"><source><![CDATA[leftResultSet.Add(leftResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="14ab" domain="usercodeundertest"><source><![CDATA[rightResultSet.Add(rightResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="14b5" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="14b6" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            else ]]></source>
</chunk>
<chunk hits="0" offset="14bc" domain="usercodeundertest"><source><![CDATA[if (op.Equals(">="))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="14d4" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="14d5" domain="usercodeundertest"><source><![CDATA[if (leftObj is System.Decimal)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="14eb" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="14ec" domain="usercodeundertest"><source><![CDATA[Int64 leftNumber = Decimal.ToInt64((Decimal)leftObj);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="14fa" domain="usercodeundertest"><source><![CDATA[Int64 rightNumber = Decimal.ToInt64((Decimal)rightObj);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                                    ]]></source>
</chunk>
<chunk hits="0" offset="1508" domain="usercodeundertest"><source><![CDATA[if (leftNumber >= rightNumber)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="1517" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="1518" domain="usercodeundertest"><source><![CDATA[object[] leftResult = new object[leftRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="1523" domain="usercodeundertest"><source><![CDATA[leftRecord.CopyTo(leftResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="152e" domain="usercodeundertest"><source><![CDATA[object[] rightResult = new object[rightRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="1539" domain="usercodeundertest"><source><![CDATA[rightRecord.CopyTo(rightResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="1544" domain="usercodeundertest"><source><![CDATA[string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="156b" domain="usercodeundertest"><source><![CDATA[string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                        //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                        for (]]></source>
</chunk>
<chunk hits="0" offset="1592" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="15da" domain="usercodeundertest"><source><![CDATA[i < leftRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="15d4" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                        ]]></source>
</chunk>
<chunk hits="0" offset="1597" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="1598" domain="usercodeundertest"><source><![CDATA[leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="15d3" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        for (]]></source>
</chunk>
<chunk hits="0" offset="15e8" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="1630" domain="usercodeundertest"><source><![CDATA[i < rightRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="162a" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                        ]]></source>
</chunk>
<chunk hits="0" offset="15ed" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="15ee" domain="usercodeundertest"><source><![CDATA[rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="1629" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                                        ]]></source>
</chunk>
<chunk hits="0" offset="163e" domain="usercodeundertest"><source><![CDATA[leftResultSet.Add(leftResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="1648" domain="usercodeundertest"><source><![CDATA[rightResultSet.Add(rightResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="1652" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="1653" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else ]]></source>
</chunk>
<chunk hits="0" offset="1659" domain="usercodeundertest"><source><![CDATA[if ((int)leftObj >= (int)rightObj)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="1672" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="1673" domain="usercodeundertest"><source><![CDATA[object[] leftResult = new object[leftRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="167e" domain="usercodeundertest"><source><![CDATA[leftRecord.CopyTo(leftResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="1689" domain="usercodeundertest"><source><![CDATA[object[] rightResult = new object[rightRecord.Length];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="1694" domain="usercodeundertest"><source><![CDATA[rightRecord.CopyTo(rightResult, 0);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="169f" domain="usercodeundertest"><source><![CDATA[string leftTag = leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="16c6" domain="usercodeundertest"><source><![CDATA[string rightTag = rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]].ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    //leftResult[tables[leftTable].ColumnIndices[leftColumn + "_TAINT"]] = leftTag + "$" + rightTag;
                                    //rightResult[tables[rightTable].ColumnIndices[rightColumn + "_TAINT"]] = rightTag + "$" + leftTag;
                                    for (]]></source>
</chunk>
<chunk hits="0" offset="16ed" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="1735" domain="usercodeundertest"><source><![CDATA[i < leftRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="172f" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                    ]]></source>
</chunk>
<chunk hits="0" offset="16f2" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="16f3" domain="usercodeundertest"><source><![CDATA[leftResult[i] = leftResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="172e" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    for (]]></source>
</chunk>
<chunk hits="0" offset="1743" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="178b" domain="usercodeundertest"><source><![CDATA[i < rightRecord.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="1785" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                    ]]></source>
</chunk>
<chunk hits="0" offset="1748" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="1749" domain="usercodeundertest"><source><![CDATA[rightResult[i] = rightResult[i] + "$" + leftTag + "$" + rightTag;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="1784" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
                                    ]]></source>
</chunk>
<chunk hits="0" offset="1799" domain="usercodeundertest"><source><![CDATA[leftResultSet.Add(leftResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="17a3" domain="usercodeundertest"><source><![CDATA[rightResultSet.Add(rightResult);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="17ad" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="17ae" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="17af" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="4" offset="17b0" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="17d3" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="17f6" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="0" offset="17f9" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="17fa" domain="usercodeundertest"><source><![CDATA[throw new NotImplementedException("Not Implemented for Operator: " + op);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ }
          
            ]]></source>
</chunk>
<chunk hits="1" offset="180c" domain="usercodeundertest"><source><![CDATA[resultSet.Add(leftTable, leftResultSet);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="1817" domain="usercodeundertest"><source><![CDATA[resultSet.Add(rightTable, rightResultSet);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="1822" domain="usercodeundertest"><source><![CDATA[return resultSet;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="1828" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[



        private Dictionary<string, List<object[]>> PerformOperationOnRecords(Dictionary<string, List<object[]>> lhsRecords, Dictionary<string, List<object[]>> rhsRecords, string op)
        ]]></source>
</chunk>
<method name="PerformOperationOnRecords" namespace="MockDBMS.SqlServer" type="MockDBMS.SqlServer.MockSqlCommand" typeName="MockSqlCommand" token="6000039" module="MockDBMS.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="2"/>
<hit index="103" value="1"/>
<hit index="104" value="1"/>
<hit index="105" value="1"/>
<hit index="106" value="2"/>
<hit index="107" value="1"/>
<hit index="108" value="1"/>
<hit index="109" value="1"/>
<hit index="110" value="1"/>
<hit index="111" value="2"/>
<hit index="112" value="1"/>
<hit index="113" value="1"/>
<hit index="114" value="1"/>
<hit index="115" value="2"/>
<hit index="116" value="2"/>
<hit index="117" value="2"/>
<hit index="118" value="2"/>
<hit index="119" value="2"/>
<hit index="120" value="2"/>
<hit index="121" value="4"/>
<hit index="122" value="3"/>
<hit index="123" value="3"/>
<hit index="124" value="1"/>
<hit index="125" value="2"/>
<hit index="129" value="1"/>
<hit index="130" value="1"/>
<hit index="131" value="1"/>
<hit index="132" value="1"/>
<hit index="135" value="1"/>
<hit index="136" value="1"/>
<hit index="137" value="1"/>
<hit index="138" value="2"/>
<hit index="139" value="1"/>
<hit index="140" value="1"/>
<hit index="141" value="1"/>
<hit index="142" value="2"/>
<hit index="154" value="1"/>
<hit index="155" value="1"/>
<hit index="156" value="1"/>
<hit index="162" value="1"/>
<hit index="163" value="1"/>
<hit index="164" value="1"/>
<hit index="165" value="1"/>
<hit index="168" value="1"/>
<hit index="169" value="1"/>
<hit index="170" value="1"/>
<hit index="171" value="2"/>
<hit index="172" value="1"/>
<hit index="173" value="1"/>
<hit index="174" value="1"/>
<hit index="175" value="2"/>
<hit index="176" value="1"/>
<hit index="177" value="1"/>
<hit index="178" value="1"/>
<hit index="179" value="1"/>
<hit index="180" value="1"/>
<hit index="181" value="2"/>
<hit index="182" value="1"/>
<hit index="183" value="1"/>
<hit index="185" value="1"/>
<hit index="589" value="1"/>
<hit index="590" value="1"/>
<hit index="594" value="1"/>
<hit index="596" value="1"/>
<hit index="598" value="1"/>
<hit index="599" value="1"/>
<hit index="600" value="1"/>
<hit index="601" value="1"/>
<hit index="705" value="1"/>
<hit index="709" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="27" total="245" coveredRatio="0.11020408163265306"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            List<object[]> lhsRecordsInTable;
            List<object[]> rhsRecordsInTable;

            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[Dictionary<string, List<object[]>> selectedRecords = new Dictionary<string, List<object[]>>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="1" offset="0007" domain="usercodeundertest"><source><![CDATA[if (op.Equals("NOT"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="001e" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="001f" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="0" offset="0032" domain="usercodeundertest"><source><![CDATA[string tableName]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0134" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0020" domain="usercodeundertest"><source><![CDATA[lhsRecords.Keys]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                ]]></source>
</chunk>
<chunk hits="0" offset="003a" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                   
                    ]]></source>
</chunk>
<chunk hits="0" offset="003b" domain="usercodeundertest"><source><![CDATA[lhsRecordsInTable = lhsRecords[tableName];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0043" domain="usercodeundertest"><source><![CDATA[rhsRecordsInTable = rhsRecords[tableName];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="004b" domain="usercodeundertest"><source><![CDATA[List<object[]> selectedRecordsInTable = new List<object[]>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                    ]]></source>
</chunk>
<chunk hits="0" offset="0052" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="0" offset="0060" domain="usercodeundertest"><source><![CDATA[object[] record]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0107" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0053" domain="usercodeundertest"><source><![CDATA[lhsRecordsInTable]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                    ]]></source>
</chunk>
<chunk hits="0" offset="0069" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="006a" domain="usercodeundertest"><source><![CDATA[int flag = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="006d" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="0" offset="0078" domain="usercodeundertest"><source><![CDATA[object[] record2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00cd" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="006e" domain="usercodeundertest"><source><![CDATA[rhsRecordsInTable]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                        ]]></source>
</chunk>
<chunk hits="0" offset="0081" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0082" domain="usercodeundertest"><source><![CDATA[int flag2 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            for (]]></source>
</chunk>
<chunk hits="0" offset="0085" domain="usercodeundertest"><source><![CDATA[int i = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="00aa" domain="usercodeundertest"><source><![CDATA[i < record2.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="00a4" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                            ]]></source>
</chunk>
<chunk hits="0" offset="008a" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="008b" domain="usercodeundertest"><source><![CDATA[if (record[i] != record2[i])]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="009d" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="009e" domain="usercodeundertest"><source><![CDATA[flag2 = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="00a1" domain="usercodeundertest"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                }

                            ]]></source>
</chunk>
<chunk hits="0" offset="00a3" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="00b8" domain="usercodeundertest"><source><![CDATA[if (flag2 == 1)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="00c6" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="00c7" domain="usercodeundertest"><source><![CDATA[flag = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="00ca" domain="usercodeundertest"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            }
                        ]]></source>
</chunk>
<chunk hits="0" offset="00cc" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[


                        ]]></source>
</chunk>
<chunk hits="0" offset="00ec" domain="usercodeundertest"><source><![CDATA[if (flag == 0)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="00fa" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="00fb" domain="usercodeundertest"><source><![CDATA[selectedRecordsInTable.Add(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0105" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0106" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0129" domain="usercodeundertest"><source><![CDATA[selectedRecords.Add(tableName, selectedRecordsInTable);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0133" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0156" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="1" offset="015c" domain="usercodeundertest"><source><![CDATA[if (op.Equals("AND"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0173" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0174" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="2" offset="0184" domain="usercodeundertest"><source><![CDATA[string tableName]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="9" offset="0197" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="0175" domain="usercodeundertest"><source><![CDATA[lhsRecords.Keys]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                ]]></source>
</chunk>
<chunk hits="2" offset="018c" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="2" offset="018d" domain="usercodeundertest"><source><![CDATA[selectedRecords.Add(tableName, null);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="6" offset="0196" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                ]]></source>
</chunk>
<chunk hits="1" offset="01b6" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="0" offset="01c6" domain="usercodeundertest"><source><![CDATA[string tableName]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="3" offset="01e6" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="01b7" domain="usercodeundertest"><source><![CDATA[rhsRecords.Keys]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                ]]></source>
</chunk>
<chunk hits="0" offset="01ce" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="01cf" domain="usercodeundertest"><source><![CDATA[if (!selectedRecords.ContainsKey(tableName))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="01dc" domain="usercodeundertest"><source><![CDATA[selectedRecords.Add(tableName, null);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="01e5" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                ]]></source>
</chunk>
<chunk hits="1" offset="0205" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="1" offset="0218" domain="usercodeundertest"><source><![CDATA[string tableName]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="3" offset="06c1" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="0206" domain="usercodeundertest"><source><![CDATA[lhsRecords.Keys]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                ]]></source>
</chunk>
<chunk hits="1" offset="0220" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="0221" domain="usercodeundertest"><source><![CDATA[lhsRecordsInTable = lhsRecords[tableName];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="3" offset="0229" domain="usercodeundertest"><source><![CDATA[rhsRecordsInTable = rhsRecords[tableName];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="1" offset="0231" domain="usercodeundertest"><source><![CDATA[List<object[]> selectedRecordsInTable = new List<object[]>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                    ]]></source>
</chunk>
<chunk hits="0" offset="0238" domain="usercodeundertest"><source><![CDATA[if (lhsRecordsInTable == null || rhsRecordsInTable == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="024b" domain="usercodeundertest"><source><![CDATA[continue;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                   

                    ]]></source>
</chunk>
<chunk hits="0" offset="0250" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="0" offset="025e" domain="usercodeundertest"><source><![CDATA[object[] record]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0697" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0251" domain="usercodeundertest"><source><![CDATA[lhsRecordsInTable]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                    ]]></source>
</chunk>
<chunk hits="0" offset="0267" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0268" domain="usercodeundertest"><source><![CDATA[int flag = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="026b" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="0" offset="0279" domain="usercodeundertest"><source><![CDATA[object[] record2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0302" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="026c" domain="usercodeundertest"><source><![CDATA[rhsRecordsInTable]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                        ]]></source>
</chunk>
<chunk hits="0" offset="0282" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0283" domain="usercodeundertest"><source><![CDATA[int flag2 = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            for (]]></source>
</chunk>
<chunk hits="0" offset="0286" domain="usercodeundertest"><source><![CDATA[int i = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="02ab" domain="usercodeundertest"><source><![CDATA[i < record2.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="02a5" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                            ]]></source>
</chunk>
<chunk hits="0" offset="028b" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="028c" domain="usercodeundertest"><source><![CDATA[if (record[i] != record2[i])]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="029e" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="029f" domain="usercodeundertest"><source><![CDATA[flag2 = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="02a2" domain="usercodeundertest"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                }
                                
                            ]]></source>
</chunk>
<chunk hits="0" offset="02a4" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="02b9" domain="usercodeundertest"><source><![CDATA[if (flag2 == 1)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="02c7" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                for (]]></source>
</chunk>
<chunk hits="0" offset="02c8" domain="usercodeundertest"><source><![CDATA[int i = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="02ee" domain="usercodeundertest"><source><![CDATA[i < record2.Length]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="02e8" domain="usercodeundertest"><source><![CDATA[i += 2]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                ]]></source>
</chunk>
<chunk hits="0" offset="02cd" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="02ce" domain="usercodeundertest"><source><![CDATA[record[i] = record[i] + "$" + record2[i];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="02e7" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="02fc" domain="usercodeundertest"><source><![CDATA[flag = 1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="02ff" domain="usercodeundertest"><source><![CDATA[break;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            }
                        ]]></source>
</chunk>
<chunk hits="0" offset="0301" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                        
                        ]]></source>
</chunk>
<chunk hits="0" offset="0324" domain="usercodeundertest"><source><![CDATA[if (flag == 1)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0335" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0336" domain="usercodeundertest"><source><![CDATA[selectedRecordsInTable.Add(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0340" domain="usercodeundertest"><source><![CDATA[bool flagToBeAdded = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0343" domain="usercodeundertest"><source><![CDATA[List<string> tabls = new List<string>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="034a" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="0" offset="035a" domain="usercodeundertest"><source><![CDATA[string t]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="036d" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="034b" domain="usercodeundertest"><source><![CDATA[lhsRecords.Keys]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                                ]]></source>
</chunk>
<chunk hits="0" offset="0363" domain="usercodeundertest"><source><![CDATA[tabls.Add(t);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="038c" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="0" offset="039c" domain="usercodeundertest"><source><![CDATA[string t]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="03c0" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="038d" domain="usercodeundertest"><source><![CDATA[rhsRecords.Keys]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                            ]]></source>
</chunk>
<chunk hits="0" offset="03a5" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="03a6" domain="usercodeundertest"><source><![CDATA[if (!tabls.Contains(t))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="03b5" domain="usercodeundertest"><source><![CDATA[tabls.Add(t);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="03bf" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[


                            ]]></source>
</chunk>
<chunk hits="0" offset="03df" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="0" offset="03ee" domain="usercodeundertest"><source><![CDATA[string t]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0624" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="03e0" domain="usercodeundertest"><source><![CDATA[tabls]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                            ]]></source>
</chunk>
<chunk hits="0" offset="03f7" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="03f8" domain="usercodeundertest"><source><![CDATA[if (!t.Equals(tableName))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0409" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="040a" domain="usercodeundertest"><source><![CDATA[if (lhsRecords.ContainsKey(t) && lhsRecords[t] != null && (!rhsRecords.ContainsKey(t) || (rhsRecords.ContainsKey(t) && rhsRecords[t] == null)))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="044f" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0450" domain="usercodeundertest"><source><![CDATA[int i = lhsRecordsInTable.IndexOf(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="045a" domain="usercodeundertest"><source><![CDATA[List<object[]> r = lhsRecords[t];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0464" domain="usercodeundertest"><source><![CDATA[object[] recToBeAdded = r[i];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="046f" domain="usercodeundertest"><source><![CDATA[if (selectedRecords[t] == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0483" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="0484" domain="usercodeundertest"><source><![CDATA[selectedRecords[t] = new List<object[]>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="0492" domain="usercodeundertest"><source><![CDATA[selectedRecords[t].Add(recToBeAdded);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="04a2" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        else
                                            ]]></source>
</chunk>
<chunk hits="0" offset="04a5" domain="usercodeundertest"><source><![CDATA[selectedRecords[t].Add(recToBeAdded);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="04b5" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    else ]]></source>
</chunk>
<chunk hits="0" offset="04bb" domain="usercodeundertest"><source><![CDATA[if (rhsRecords.ContainsKey(t) && rhsRecords[t] != null && (!lhsRecords.ContainsKey(t) || (lhsRecords.ContainsKey(t) && lhsRecords[t] == null)))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0500" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0501" domain="usercodeundertest"><source><![CDATA[int i = rhsRecordsInTable.IndexOf(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="050b" domain="usercodeundertest"><source><![CDATA[List<object[]> r = rhsRecords[t];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0515" domain="usercodeundertest"><source><![CDATA[object[] recToBeAdded = r[i];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0520" domain="usercodeundertest"><source><![CDATA[if (selectedRecords[t] == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0534" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="0535" domain="usercodeundertest"><source><![CDATA[selectedRecords[t] = new List<object[]>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="0543" domain="usercodeundertest"><source><![CDATA[selectedRecords[t].Add(recToBeAdded);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="0553" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        else
                                            ]]></source>
</chunk>
<chunk hits="0" offset="0556" domain="usercodeundertest"><source><![CDATA[selectedRecords[t].Add(recToBeAdded);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0566" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    else ]]></source>
</chunk>
<chunk hits="0" offset="056c" domain="usercodeundertest"><source><![CDATA[if (rhsRecords[t] != null && lhsRecords[t] != null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="058d" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="058e" domain="usercodeundertest"><source><![CDATA[int i = lhsRecordsInTable.IndexOf(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                                        ]]></source>
</chunk>
<chunk hits="0" offset="0598" domain="usercodeundertest"><source><![CDATA[List<object[]> rl = lhsRecords[t];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="05a2" domain="usercodeundertest"><source><![CDATA[object[] recToBeAddedl = rl[i];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="05ad" domain="usercodeundertest"><source><![CDATA[List<object[]> rr = lhsRecords[t];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="05b7" domain="usercodeundertest"><source><![CDATA[object[] recToBeAddedr = rr[i];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="05c2" domain="usercodeundertest"><source><![CDATA[if (recToBeAddedl.Equals(recToBeAddedr))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="05d4" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            
                                            ]]></source>
</chunk>
<chunk hits="0" offset="05d5" domain="usercodeundertest"><source><![CDATA[if (selectedRecords[t] == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="05e9" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                                ]]></source>
</chunk>
<chunk hits="0" offset="05ea" domain="usercodeundertest"><source><![CDATA[selectedRecords[t] = new List<object[]>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                                ]]></source>
</chunk>
<chunk hits="0" offset="05f8" domain="usercodeundertest"><source><![CDATA[selectedRecords[t].Add(recToBeAddedr);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            ]]></source>
</chunk>
<chunk hits="0" offset="0608" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                            else
                                                ]]></source>
</chunk>
<chunk hits="0" offset="060b" domain="usercodeundertest"><source><![CDATA[selectedRecords[t].Add(recToBeAddedr);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        ]]></source>
</chunk>
<chunk hits="0" offset="061b" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                        else
                                            ]]></source>
</chunk>
<chunk hits="0" offset="061e" domain="usercodeundertest"><source><![CDATA[flagToBeAdded = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0621" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0622" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0623" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0646" domain="usercodeundertest"><source><![CDATA[if (flagToBeAdded)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0651" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0652" domain="usercodeundertest"><source><![CDATA[if (selectedRecords[tableName] == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0665" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0666" domain="usercodeundertest"><source><![CDATA[selectedRecords[tableName] = new List<object[]>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0673" domain="usercodeundertest"><source><![CDATA[selectedRecords[tableName].Add(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                ]]></source>
</chunk>
<chunk hits="0" offset="0682" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                                else
                                    ]]></source>
</chunk>
<chunk hits="0" offset="0685" domain="usercodeundertest"><source><![CDATA[selectedRecords[tableName].Add(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0694" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0695" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0696" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="06b9" domain="usercodeundertest"><source><![CDATA[return selectedRecords;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                }
            ]]></source>
</chunk>
<chunk hits="0" offset="06e3" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else ]]></source>
</chunk>
<chunk hits="0" offset="06e9" domain="usercodeundertest"><source><![CDATA[if (op.Equals("OR"))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0700" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0701" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="0" offset="0714" domain="usercodeundertest"><source><![CDATA[string tableName]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="07cc" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0702" domain="usercodeundertest"><source><![CDATA[lhsRecords.Keys]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                ]]></source>
</chunk>
<chunk hits="0" offset="071c" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="071d" domain="usercodeundertest"><source><![CDATA[lhsRecordsInTable = lhsRecords[tableName];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0725" domain="usercodeundertest"><source><![CDATA[rhsRecordsInTable = rhsRecords[tableName];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="072d" domain="usercodeundertest"><source><![CDATA[List<object[]> selectedRecordsInTable = new List<object[]>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

                    ]]></source>
</chunk>
<chunk hits="0" offset="0734" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="0" offset="073f" domain="usercodeundertest"><source><![CDATA[object[] record]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0754" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0735" domain="usercodeundertest"><source><![CDATA[lhsRecordsInTable]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                    ]]></source>
</chunk>
<chunk hits="0" offset="0748" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0749" domain="usercodeundertest"><source><![CDATA[selectedRecordsInTable.Add(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0753" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0773" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="0" offset="077e" domain="usercodeundertest"><source><![CDATA[object[] record]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="07a2" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0774" domain="usercodeundertest"><source><![CDATA[rhsRecordsInTable]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                    ]]></source>
</chunk>
<chunk hits="0" offset="0787" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                        ]]></source>
</chunk>
<chunk hits="0" offset="0788" domain="usercodeundertest"><source><![CDATA[if (!selectedRecordsInTable.Contains(record))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                            ]]></source>
</chunk>
<chunk hits="0" offset="0797" domain="usercodeundertest"><source><![CDATA[selectedRecordsInTable.Add(record);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="07a1" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="07c1" domain="usercodeundertest"><source><![CDATA[selectedRecords.Add(tableName, selectedRecordsInTable);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="07cb" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="07ee" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            else
                ]]></source>
</chunk>
<chunk hits="0" offset="07f1" domain="usercodeundertest"><source><![CDATA[throw new NotImplementedException("Operator + " + op + " Not Implemented");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0807" domain="usercodeundertest"><source><![CDATA[return selectedRecords;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        ]]></source>
</chunk>
<chunk hits="0" offset="080d" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[



        private List<object[]> SelectColumnsFrom(List<object[]> records, QueryParts parsedQuery, MockDBMS.Table table)
        {
            //DataSet
            List<object[]> selectedRecords = new List<object[]>();
            List<string> columnsToBeSelected = new List<string>();
            if (parsedQuery.IsSelectAll)
            {
                IEnumerator<string> columnEnumerator = table.ColumnNameType.Keys.GetEnumerator();
                while (columnEnumerator.MoveNext())
                {
                    columnsToBeSelected.Add(columnEnumerator.Current);
                }
            }
            else
                columnsToBeSelected = parsedQuery.selectedColumns;
            foreach (object[] record in records)
            {
                object[] selectedRecord = new object[columnsToBeSelected.Count];
                int index = 0;
                foreach (string column in columnsToBeSelected)
                {
                    if (column.Length >= 6 && column.Substring(column.Length - 6) == "_TAINT")
                    {
                        string tags = record[table.ColumnIndices[column]].ToString();
                        string[] tags_arr = tags.Split('$');
                        int len = tags_arr.Length, new_tag = 0;
                        for (int i = 0; i < len; i++)
                        {
                            new_tag = new_tag | Convert.ToInt32(tags_arr[i], 16);
                        }
                        string new_tag_16 = Convert.ToString(new_tag, 16);
                        len = 8 - new_tag_16.Length;
                        for (int i = 0; i < len; i++)
                        {
                            new_tag_16 = "0" + new_tag_16;
                        }
                        record[table.ColumnIndices[column]] = tags_arr[0];
                        selectedRecord[index++] = new_tag_16;
                    }
                    else
                    {
                        selectedRecord[index++] = record[table.ColumnIndices[column]];
                    }
                    
                }
                selectedRecords.Add(selectedRecord);
            }
            return selectedRecords;
        }

        /*
                private void tempQueryParser(string query)
                {
                    QueryParts parsedQuery = new QueryParts();
                    char[] c = new char[1];
                    c[0] = ' ';
                    string[] parts = query.Split(c);
                    ParsingState state = ParsingState.TYPE;
                    foreach (string part in parts)
                    {
                        if (part.Equals("SELECT"))
                        {
                            state = ParsingState.COLUMNS;
                            parsedQuery.Type = QueryStatementType.SELECT;
                        }
                        else if (part.Equals("WHERE"))
                        {
                            state = ParsingState.WHERECOND;
                        }
                        else if (part.Equals("FROM"))
                        {
                            state = ParsingState.TABLE;
                        }
                        else
                        {
                            if (state == ParsingState.COLUMNS)
                            {
                                parsedQuery.columns.Add(part);
                                state = ParsingState.FROM;
                            }
                            else if (state == ParsingState.TABLE)
                            {
                                parsedQuery.TableName = part;
                                state = ParsingState.WHERE;
                            }
                            else if (state == ParsingState.WHERECOND)
                            {
                                parsedQuery.whereConditionLHS = part;
                                state = ParsingState.WHEREOP;
                            }
                            else if (state == ParsingState.WHEREOP)
                            {
                                parsedQuery.whereConditionop = part;
                                state = ParsingState.WHERERHS;
                            }
                            else if (state == ParsingState.WHERERHS)
                            {
                                parsedQuery.whereConditionRHS = part;
                                state = ParsingState.DONE;
                            }
                    
                        }

                    }
                }
                */
        private static QueryParts parseQuery(string query)
        ]]></source>
</chunk>
<method name="parseQuery" namespace="MockDBMS.SqlServer" type="MockDBMS.SqlServer.MockSqlCommand" typeName="MockSqlCommand" token="600003b" module="MockDBMS.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="4"/>
<hit index="9" value="2"/>
<hit index="10" value="2"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="4" total="4" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="usercodeundertest"><source><![CDATA[IStatement st = Factory.CreateStatement(query);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0008" domain="usercodeundertest"><source><![CDATA[IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0013" domain="usercodeundertest"><source><![CDATA[st.Traverse(tailor);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="6" offset="001b" domain="usercodeundertest"><source><![CDATA[QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0027" domain="usercodeundertest"><source><![CDATA[return parsed;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            //tailor.
        ]]></source>
</chunk>
<chunk hits="2" offset="002b" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[


        public object ExecuteScalar()
        {
            List<object[]> resultSet = ExecuteReader().records;
            if (parsedQuery.IsFucntionCall == false)
            {
                if (resultSet.Count == 0)
                    return null;
                return resultSet[0][0].ToString() + resultSet[0][1].ToString();
            }
            if (parsedQuery.FunctionType == Function.COUNT)
            {
                int count = 0;
                foreach (object[] record in resultSet)
                {
                    bool flag = false;
                    foreach (object field in record)
                    {
                        if (record == null)
                        {
                            flag = true;
                            break;
                        }
                    }
                    if (!flag)
                        count++;
                }
                return count + "00000000";
            }
            else if (parsedQuery.FunctionType == Function.SUM)
            {
                throw new NotImplementedException();
            }
            else if (parsedQuery.FunctionType == Function.MIN)
            {
                throw new NotImplementedException();
            }
            else if (parsedQuery.FunctionType == Function.MAX)
            {
                throw new NotImplementedException();
            }
            else if (parsedQuery.FunctionType == Function.AVG)
            {
                throw new NotImplementedException();
            }
            else if (parsedQuery.FunctionType == Function.FIRST)
            {
                return resultSet[0][0].ToString() + resultSet[0][1].ToString();
            }
            else if (parsedQuery.FunctionType == Function.LAST)
            {
                return resultSet[resultSet.Count - 1][0].ToString() + resultSet[resultSet.Count - 1][1].ToString();
            }
            else
                throw new NotImplementedException("Unknown Function " + parsedQuery.FunctionType);
            return null;
        }

        public int ExecuteNonQuery()
        {
            throw new NotImplementedException();
        }
    }
}
]]></source>
</chunk>
</document>
<document src="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlDataReader.cs" renderPrefix="s3"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Collections.Generic;
using System.Text;

namespace MockDBMS.SqlServer
{
    public class MockSqlDataReader
    {
        public List<object[]> records;
        ]]></source>
</chunk>
<method name=".ctor" namespace="MockDBMS.SqlServer" type="MockDBMS.SqlServer.MockSqlDataReader" typeName="MockSqlDataReader" token="6000077" module="MockDBMS.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[int currentIndex = -1;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        object[] currentRecord; 

        private List<object[]> Records
        {
            get { return records; }
            set { records = value; }
        }
        ]]></source>
</chunk>
<chunk hits="2" offset="0007" domain="usercodeundertest"><source><![CDATA[public MockSqlDataReader(List<object[]> records)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="000e" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="000f" domain="usercodeundertest"><source><![CDATA[this.records = records;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0016" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public bool HasRows()
        {
            if (records.Count !=0 )
                return true;
            else
                return false;
        }


        // Summary:
        //     Gets the value of the specified column in its native format given the column
        //     ordinal.
        //
        // Parameters:
        //   i:
        //     The zero-based column ordinal.
        //
        // Returns:
        //     The value of the specified column in its native format.
        //
        // Exceptions:
        //   System.IndexOutOfRangeException:
        //     The index passed was outside the range of 0 through System.Data.IDataRecord.FieldCount.
        public object this[int i] 
        {       
            get 
            ]]></source>
</chunk>
<method name="get_Item" namespace="MockDBMS.SqlServer" type="MockDBMS.SqlServer.MockSqlDataReader" typeName="MockSqlDataReader" token="6000079" module="MockDBMS.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="7" value="2"/>
<hit index="8" value="2"/>
<hit index="9" value="2"/>
<hit index="10" value="2"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="2" total="4" coveredRatio="0.5"/>
</method>
<chunk hits="2" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="usercodeundertest"><source><![CDATA[if (currentRecord == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0011" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0012" domain="usercodeundertest"><source><![CDATA[throw new Exception("Not expected to be null");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                }
                ]]></source>
</chunk>
<chunk hits="2" offset="001d" domain="usercodeundertest"><source><![CDATA[return currentRecord[i];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
            ]]></source>
</chunk>
<chunk hits="4" offset="0028" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ 
        }
        public object this[string name] 
        {
            get { throw new NotImplementedException(); }
        }

        //
        // Summary:
        //     Advances the System.Data.SqlClient.SqlDataReader to the next record.
        //
        // Returns:
        //     true if there are more rows; otherwise false.
        public bool Read()
        ]]></source>
</chunk>
<method name="Read" namespace="MockDBMS.SqlServer" type="MockDBMS.SqlServer.MockSqlDataReader" typeName="MockSqlDataReader" token="600007b" module="MockDBMS.dll"><hits><hit index="0" value="2"/>
<hit index="1" value="2"/>
<hit index="2" value="2"/>
<hit index="3" value="2"/>
<hit index="4" value="2"/>
<hit index="5" value="2"/>
<hit index="6" value="4"/>
<hit index="7" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
<hit index="10" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="2"/>
<hit index="16" value="1"/>
<hit index="17" value="1"/>
<hit index="18" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="5" total="5" coveredRatio="1"/>
</method>
<chunk hits="2" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0001" domain="usercodeundertest"><source><![CDATA[if (currentIndex == records.Count - 1)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="001d" domain="usercodeundertest"><source><![CDATA[return false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0021" domain="usercodeundertest"><source><![CDATA[currentRecord = records[++currentIndex];]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="2" offset="0043" domain="usercodeundertest"><source><![CDATA[return true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="0047" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

    }
}
]]></source>
</chunk>
</document>
<document src="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" renderPrefix="s4"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Microsoft.Pex.Framework.Validation;
using Microsoft.Pex.Framework;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using MockDBMS;
using MockDBMS.SqlServer;
using MockDBMS.SqlCeServer;

namespace MyApplication
{
    [PexClass, TestClass]
    public class DBApplication
    {
        public static void TestMe()
        {

            MockSqlConnection myConnection = new MockSqlConnection("");     // Creates the (singleton) DBMS object

            myConnection.Open();   // Initializes the database state

            MockSqlCommand myCommand = new MockSqlCommand("SELECT firstname, x FROM persons WHERE lastname = 'Smith'", myConnection);
            MockSqlDataReader myReader = myCommand.ExecuteReader();
            while (myReader.Read())
            {
                if (myReader[0].Equals("John"))
                {
                    //myCommand = new MockSqlCommand("SELECT firstname FROM persons WHERE lastname = 'smith'", myConnection);
                    myCommand = new MockSqlCommand("SELECT salary FROM salary WHERE firstname = 'John' AND lastname = 'Smith'", myConnection);
                    /*int salary = (int)myCommand.ExecuteScalar();
                    if (salary < 0)
                        PexAssert.ReachEventually("Negative Salary for John!!");*/
                }
                else if (myReader[0].Equals("Tom"))
                {
                    string command = String.Format("SELECT salary FROM salary WHERE x = {0}", myReader[1]);
                    myCommand = new MockSqlCommand(command, myConnection);
                    /*int salary = (int)myCommand.ExecuteScalar();
                    if (salary < 0)
                        PexAssert.ReachEventually("Negative Salary for Tom!!");*/
                }
            }
        }

       
        public static string ExampleProgram(int k, string[] names)
        {
            MockSqlConnection myConnection = new MockSqlConnection("");
            myConnection.Open();
            MockSqlCommand myCommand = new MockSqlCommand("DELETE FROM PERSONS WHERE index > 0", myConnection);
            myCommand.ExecuteScalar();
            for (int i = 0; i < k; i++)
            {
                String query = String.Format("INSERT INTO PERSONS (index, name) VALUES (({0}, {1}))", i, names[i]);
                myCommand = new MockSqlCommand(query, myConnection);
                myCommand.ExecuteScalar();
            }
            myCommand = new MockSqlCommand("SELECT name FROM PERSONS WHERE index = 5", myConnection);
            MockSqlDataReader myReader = myCommand.ExecuteReader();
            if (myReader.Read())
            {
                //throw new PexGoalException();
                if (myReader[0].Equals("John"))
                {
                    PexAssert.ReachEventually();
                }
            }
            return PexSymbolicValue.GetPathConditionString();
        }
        
        public static void Main()
        {
            /*
            string[] names = new string[1];
            names[0] = "John";
            ExampleProgram(1, names); 
            */
            MockSqlConnection myConnection = new MockSqlConnection("");
            myConnection.Open();

            
            //MockSqlCommand myCommand = new MockSqlCommand("SELECT count(*) FROM persons WHERE lastname = \"Smith\" AND NOT x < 6", myConnection);
            //MockSqlCommand myCommand = new MockSqlCommand("SELECT firstname FROM persons WHERE x = 100 AND lastname = 'bob_y'", myConnection);
            //MockSqlCommand myCommand = new MockSqlCommand("SELECT distinct SignsSyms.SignSymText, SignsSyms.SignSymID FROM SignsSyms, ChiefComplaintToSignsSyms where ChiefComplaintToSignsSyms.CCID = 100 and ChiefComplaintToSignsSyms.SignSymID = SignsSyms.SignSymID order by SignsSyms.SignSymText", myConnection);
            //MockSqlCommand myCommand = new MockSqlCommand("SELECT sum(AssessmentSignsSymWeights.Weight) FROM AssessmentSignsSymWeights INNER JOIN SignsSyms ON AssessmentSignsSymWeights.SignSymID = SignsSyms.SignSymID WHERE AssessmentSignsSymWeights.AssessID = 1 AND (SignsSyms.SignSymText = 'a' OR SignsSyms.SignSymText = 'b')", myConnection);
            
            //MockSqlCommand myCommand = new MockSqlCommand("SELECT SignsSyms.SignSymText, SignsSyms.SignSymID FROM SignsSyms, PhysFindingsToSignsSyms, PhysFindings where PhysFindingsToSignsSyms.PFID = PhysFindings.PFID AND PhysFindingsToSignsSyms.SignSymID = SignsSyms.SignSymID AND PhysFindings.PFID = 17 and PhysFindings.SystemID = 0", myConnection);
            // MG this query throws exception

            MockSqlCommand myCommand = new MockSqlCommand("DELETE FROM persons WHERE lastname = \"Smith\"", myConnection);
            //MockSqlCommand myCommand = new MockSqlCommand("INSERT INTO persons (serial, lastname, x) VALUES (1005, \"smith\", 10)", myConnection);
            //MockSqlCommand myCommand = new MockSqlCommand("UPDATE persons SET lastname = 'Smith', firstname = 'John' WHERE x=10", myConnection);
            
            // MG: Failure in this line 
            MockSqlDataReader myReader = myCommand.ExecuteReader();
            int c = myReader.records.Count;
            if (c == 1)
                PexAssert.ReachEventually("Ye : 1");
            else if (c == 2)
                PexAssert.ReachEventually("Ye : 2");
            //myReader.Rea
            //myCommand = new MockSqlCommand("SELECT salary FROM salaryTable WHERE x = 100 AND lastname = 'bob_y'", myConnection);
            /*
             * int c = myReader.records.Count;
            if (c == 1)
                throw new PexGoalException("Ye : 1");
            else if( c == 3  )
                throw new PexGoalException("Yes: ");
            */

           // SqlCommand command = new SqlCommand();
           
            //SqlCommand command;
            //command.ExecuteScalar()
            //tailor.
        }
        

        /*
        [PexMethod]
        public static void Main(String name)
        {

            MockSqlConnection myConnection = new MockSqlConnection("user id=username;" +
                       "password=password;server=serverurl;" +
                       "Trusted_Connection=yes;" +
                       "database=database; " +
                       "connection timeout=30");

            try
            {
                myConnection.Open();
            }

            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
            }

            MockSqlCommand myCommand = new MockSqlCommand("INSERT INTO persons (serial, lastname, x) VALUES (1005, \"smith\", 10)", myConnection);

            MockSqlCommand myCommand = new MockSqlCommand("SELECT serial, firstname FROM persons WHERE lastname = \"smith\"", myConnection);
            MockSqlDataReader myReader = myCommand.ExecuteReader();
            
            
            while (myReader.Read())
            {
                String serial = myReader[0].ToString();
                myCommand = new MockSqlCommand("SELECT salary FROM SalaryTable WHERE serial = \"" + serial + "\" AND salary > 100 ", myConnection);
                MockSqlDataReader myReader2 = myCommand.ExecuteReader();
                if (myReader2.HasRows())
                {
                    if(myReader2.records.Count == 2)
                        throw new PexGoalException();
                }
            }
        }*/
    

    }
    [PexClass, TestClass]
    public partial class PexTestClass
    {
        [PexMethod(MaxBranches = 20000)]
        public void ExecuteQuery()
        {
            MockSqlConnection myConnection = new MockSqlConnection("");
            myConnection.Open();
            MockSqlCommand myCommand = new MockSqlCommand("DELETE FROM persons WHERE firstname = ’John’ AND lastname = ’Smith’ AND age>25", myConnection);
            myCommand.ExecuteScalar();
            myCommand = new MockSqlCommand("SELECT firstname, lastname FROM persons WHERE age > 25", myConnection);
            MockSqlDataReader myReader = myCommand.ExecuteReader();
            while (myReader.Read())
            {
                if (myReader[0].Equals("John") && myReader[1].Equals("Smith"))
                {
                    PexAssert.ReachEventually("1");
                }
                else if (myReader[0].Equals("Tom") && myReader[1].Equals("Smith")) 
                {
                    PexAssert.ReachEventually("2");
                }
            }
        }

        [PexMethod]
        public string getRole(int mid, string role)
        {
            
            MockSqlConnection myConnection = new MockSqlConnection("");
            myConnection.Open();
            // MockSqlCommand myCommand = new MockSqlCommand("DELETE FROM persons WHERE firstname = ’John’ AND lastname = ’Smith’ AND age>25", myConnection);
            //myCommand.ExecuteScalar();
            MockSqlCommand myCommand = new MockSqlCommand("SELECT Role FROM Users WHERE MID = 5 AND Role = 'mrole'", myConnection);
            MockSqlDataReader myReader = myCommand.ExecuteReader();
            string symbolicValue = PexSymbolicValue.GetPathConditionString();
            File.WriteAllText(@"C:\MODA.txt", "" + PexSymbolicValue.IsSymbolic<MockSqlCommand>(myCommand));
            while (myReader.Read())
            {
                if (myReader[0].Equals("MYROLE"))
                {
                    PexAssert.ReachEventually("1");
                }
            }
            return symbolicValue;
        }


        [PexMethod(MaxBranches = 1000000000, MaxConditions = 1000000000, Timeout = 480, MaxRunsWithoutNewTests = 400, MaxConstraintSolverTime = 6), TestMethod]
        //[PexExpectedException()]
        public void TestMain()
        {
            DBApplication.Main();
        }
        [PexMethod(MaxBranches = 1000000000, MaxConditions = 1000000000, Timeout = 480, MaxRunsWithoutNewTests = 400, MaxConstraintSolverTime = 6), TestMethod]
        public void testMe()
        {
            DBApplication.TestMe();
        }


        [PexMethod(MaxBranches = 40000)]
        public string testExample(int k, string[] n)
        {
            
            PexAssume.IsTrue(k>=0 && k<=6);
            PexAssume.IsTrue(n != null && n.Length == k);
            for (int i = 0; i < n.Length; i++)
            {
                PexAssume.IsTrue(n[i] != null && n[i].Length>0);            
            }
        
           /* string[] n = new string[k]; 
            
            for (int i = 0; i < k; i++)
            {
                n[i] = "John";
            }*/
            DBApplication.ExampleProgram(k, n);
            return PexSymbolicValue.GetPathConditionString();
        }

        [PexMethod]
        public void TestpexChoose()
        {
            //var chooser = PexChoose.FromCall(this);
            string value = PexChoose.Value<string>("letsC");
            if (value.Equals("abcde"))
                PexAssert.ReachEventually();
            string value2 = PexChoose.Value<string>("letsC2");
            if (value2.Equals("uvwxyz"))
                PexAssert.ReachEventually();
        }

        [PexMethod(MaxBranches = 40000)]
        public void TestOdysseyCreateFavorite(int passwordId, int folderId)
        {
            PexAssume.IsTrue(passwordId > 0 && folderId > 0 && passwordId < 10 && folderId < 10);
            MockSqlConnection myConnection = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");
            myConnection.Open();

            string sql = "insert into Favorite (PasswordId,FolderId) VALUES ({0}, {1})";
            string query = String.Format(sql, DBMS.processData(passwordId, "00000001", sql, false), DBMS.processData(folderId, "00000010", sql, false));
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);
            myCommand.ExecuteScalar();

            query = "SELECT * FROM Favorite WHERE 1 = 1";
            myCommand = new MockSqlCommand(query, myConnection);
            MockSqlDataReader myReader = myCommand.ExecuteReader();
            while (myReader.Read())
            {
                Console.WriteLine("PasswordId: " + myReader[0]);
                Console.WriteLine("tag: " + myReader[1]);
                Console.WriteLine("FolderId: " + myReader[2]);
                Console.WriteLine("tag: " + myReader[3]);
            }
        }

        [PexMethod(MaxBranches = 40000)]
        public void TestOdysseyGetExistingFaves(int passwordId)
        {
            PexAssume.IsTrue(passwordId > 0 && passwordId < 10);
            MockSqlConnection myConnection = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");
            myConnection.Open();

            string query = "select * from Favorite where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);
            MockSqlDataReader myReader = myCommand.ExecuteReader();
            while (myReader.Read())
            {
                if (myReader[0].Equals(passwordId) && Convert.ToInt32(myReader[2]) > 0)
                {
                    PexAssert.ReachEventually();
                }
            }

            string sql = "select FolderId from Favorite where PasswordId={0}";
            query = String.Format(sql, DBMS.processData(passwordId, "00000001", sql, true));
            myCommand = new MockSqlCommand(query, myConnection);
            myReader = myCommand.ExecuteReader();
            while (myReader.Read())
            {
                Console.WriteLine("FolderId: " + myReader[0]);
                Console.WriteLine("tag: " + myReader[1]);
            }
        }

        [PexMethod(MaxBranches = 40000)]
        public void TestOdysseyUpdateField(string name, string value, int order, int id)
        {
            PexAssume.IsTrue(name == "lw" && value == "123");
            PexAssume.IsTrue(order > 0 && order < 10 && id > 0 && id < 10);
            MockSqlConnection myConnection = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");
            myConnection.Open();

            string query = "select * from StringField where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);
            MockSqlDataReader myReader = myCommand.ExecuteReader();
            while (myReader.Read())
            {
                if (myReader[10].Equals(id) && Convert.ToInt32(myReader[8]) > 0)
                {
                    PexAssert.ReachEventually();
                    Console.WriteLine("order!!： " + myReader[8]);
                }
            }

            string sql = "update StringField set Name={0}, Value={1}, Orde={2} where Id={3}";
            query = String.Format(sql, DBMS.processData(name, "00000001", sql, true), DBMS.processData(value, "00000010", sql, true), DBMS.processData(order, "00000100", sql, true), DBMS.processData(id, "00001000", sql, true));
            myCommand = new MockSqlCommand(query, myConnection);
            myCommand.ExecuteScalar();

            sql = "select * from StringField where 1=1";
            myCommand = new MockSqlCommand(sql, myConnection);
            myReader = myCommand.ExecuteReader();
            while (myReader.Read())
            {
                Console.WriteLine("Name: " + myReader[0]);
                Console.WriteLine("tag: " + myReader[1]);
                Console.WriteLine("Value: " + myReader[2]);
                Console.WriteLine("tag: " + myReader[3]);
                Console.WriteLine("Order: " + myReader[8]);
                Console.WriteLine("tag: " + myReader[9]);
            }
        }

        [PexMethod(MaxBranches = 40000)]
        public void TestOdysseyGetFolderByPasswordId(int passwordId)
        {
            PexAssume.IsTrue(passwordId > 0 && passwordId < 10);
            MockSqlConnection myConnection = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");
            myConnection.Open();

            string query = "select Favorite.PasswordId, Favorite.FolderId, Folder.Id, Folder.Orde, Folder.ParentId, Folder.Name from Favorite, Folder where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);
            MockSqlDataReader myReader = myCommand.ExecuteReader();
            while (myReader.Read())
            {
                if (myReader[4].Equals(myReader[2]) && myReader[0].Equals(passwordId) && myReader[10].Equals("lw"))
                {
                    PexAssert.ReachEventually();
                }
            }

            string sql = "select Folder.Orde, Folder.ParentId, Folder.Name, Folder.Id, Favorite.PasswordId, Favorite.FolderId from Folder, Favorite where Folder.Id=Favorite.FolderId and Favorite.PasswordId={0}";
            query = String.Format(sql, DBMS.processData(passwordId, "00000001", sql, true));
            myCommand = new MockSqlCommand(query, myConnection);
            myReader = myCommand.ExecuteReader();
            while (myReader.Read())
            {
                Console.WriteLine("order: " + myReader[0]);
                Console.WriteLine("tag: " + myReader[1]);
                Console.WriteLine("parentid: " + myReader[2]);
                Console.WriteLine("tag: " + myReader[3]);
                Console.WriteLine("name: " + myReader[4]);
                Console.WriteLine("tag: " + myReader[5]);
                Console.WriteLine("id: " + myReader[6]);
                Console.WriteLine("tag: " + myReader[7]);
                Console.WriteLine("pasid: " + myReader[8]);
                Console.WriteLine("tag: " + myReader[9]);
                Console.WriteLine("foid: " + myReader[10]);
                Console.WriteLine("tag: " + myReader[11]);
            }
        }

        [PexMethod(MaxBranches = 80000)]
        public void TestMarketMSIsRightPassword(int LoginId, string LoginPassword)
        {
            PexAssume.IsTrue(LoginId == 4 && LoginPassword == "lw");
            MockSqlConnection myConnection = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");
            myConnection.Open();

            MockSqlCommand myCommand = new MockSqlCommand("insert into SysAdmins(LoginId,LoginPassword,AdminName,AdminStatus,RoleId) values(4,\"lw\",\"d\",2,3)", myConnection);
            myCommand.ExecuteScalar();

            string sql = "select count(*) from SysAdmins where LoginId={0} and LoginPassword={1}";
            string query = String.Format(sql, DBMS.processData(LoginId, "00000001", sql, true), DBMS.processData(LoginPassword, "00000010", sql, true));
            myCommand = new MockSqlCommand(query, myConnection);
            Console.WriteLine(myCommand.ExecuteScalar().ToString());
        }


        [PexMethod(MaxBranches = 80000)]
        public void TestMarketMSShowAllCheckInLogByID(string ID)
        ]]></source>
</chunk>
<method name="TestMarketMSShowAllCheckInLogByID" namespace="MyApplication" type="MyApplication.PexTestClass" typeName="PexTestClass" token="6000010" module="TestDBApp.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="7" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
<hit index="10" value="1"/>
<hit index="11" value="2"/>
<hit index="12" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="1"/>
<hit index="16" value="1"/>
<hit index="17" value="1"/>
<hit index="18" value="2"/>
<hit index="19" value="1"/>
<hit index="20" value="1"/>
<hit index="21" value="1"/>
<hit index="22" value="2"/>
<hit index="23" value="1"/>
<hit index="24" value="1"/>
<hit index="25" value="1"/>
<hit index="26" value="2"/>
<hit index="27" value="1"/>
<hit index="28" value="1"/>
<hit index="29" value="1"/>
<hit index="30" value="2"/>
<hit index="43" value="2"/>
<hit index="44" value="2"/>
<hit index="45" value="2"/>
<hit index="46" value="4"/>
<hit index="47" value="1"/>
<hit index="48" value="1"/>
<hit index="49" value="1"/>
<hit index="50" value="1"/>
<hit index="51" value="1"/>
<hit index="52" value="1"/>
<hit index="54" value="1"/>
<hit index="55" value="1"/>
<hit index="56" value="1"/>
<hit index="58" value="1"/>
<hit index="160" value="1"/>
<hit index="161" value="1"/>
<hit index="162" value="1"/>
<hit index="165" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="19" total="63" coveredRatio="0.30158730158730157"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="userortestcode"><source><![CDATA[PexAssume.IsTrue(ID == "lw");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0012" domain="userortestcode"><source><![CDATA[MockSqlConnection myConnection = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="001d" domain="userortestcode"><source><![CDATA[myConnection.Open();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="3" offset="0024" domain="userortestcode"><source><![CDATA[string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="3" offset="002a" domain="userortestcode"><source><![CDATA[MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0032" domain="userortestcode"><source><![CDATA[MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="4" offset="0073" domain="userortestcode"><source><![CDATA[while (myReader.Read())]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="003b" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="003c" domain="userortestcode"><source><![CDATA[if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="006a" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="006b" domain="userortestcode"><source><![CDATA[PexAssert.ReachEventually();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0071" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0072" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="1" offset="007f" domain="userortestcode"><source><![CDATA[string sql = "SELECT check_in.ROOM_NAME,roomer_management.Name,check_in.ID_CARD,check_in.STATE,check_in.IN_TIME,check_in.OUT_TIME FROM roomer_management,check_in where check_in.ID_CARD = roomer_management.ID_CARD and roomer_management.ID_CARD LIKE {0}";]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0086" domain="userortestcode"><source><![CDATA[query = String.Format(sql, DBMS.processData(ID, "00000001", sql, true));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="009c" domain="userortestcode"><source><![CDATA[myCommand = new MockSqlCommand(query, myConnection);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="00a4" domain="userortestcode"><source><![CDATA[myReader = myCommand.ExecuteReader();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="01c9" domain="userortestcode"><source><![CDATA[while (myReader.Read())]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00b0" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00b1" domain="userortestcode"><source><![CDATA[Console.WriteLine("ROOM_NAME: " + myReader[0]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00c8" domain="userortestcode"><source><![CDATA[Console.WriteLine("tag: " + myReader[1]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00df" domain="userortestcode"><source><![CDATA[Console.WriteLine("Name: " + myReader[2]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00f6" domain="userortestcode"><source><![CDATA[Console.WriteLine("tag: " + myReader[3]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="010d" domain="userortestcode"><source><![CDATA[Console.WriteLine("ID_CARD: " + myReader[4]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0124" domain="userortestcode"><source><![CDATA[Console.WriteLine("tag: " + myReader[5]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="013b" domain="userortestcode"><source><![CDATA[Console.WriteLine("STATE: " + myReader[6]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0152" domain="userortestcode"><source><![CDATA[Console.WriteLine("tag: " + myReader[7]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0169" domain="userortestcode"><source><![CDATA[Console.WriteLine("IN_TIME: " + myReader[8]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0180" domain="userortestcode"><source><![CDATA[Console.WriteLine("tag: " + myReader[9]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0198" domain="userortestcode"><source><![CDATA[Console.WriteLine("OUT_TIME: " + myReader[10]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="01b0" domain="userortestcode"><source><![CDATA[Console.WriteLine("tag: " + myReader[11]);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="01c8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="0" offset="01d8" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

    }
 
}
]]></source>
</chunk>
</document>
<document src="(no sources available for some parts of MacroScope, Antlr3.Runtime, MockDBMS)" missing="true"><method name=".ctor" type="MacroScope.CaseInsensitiveStringStream" token="6000336" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name=".ctor" type="MacroScope.MacroScopeLexer" token="600024b" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<method name=".ctor" type="MacroScope.MacroScopeLexer+DFA12" token="60002b2" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name=".ctor" type="Antlr.Runtime.CommonTokenStream" token="60002a1" module="Antlr3.Runtime.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="0" coveredRatio="0"/>
</method>
<method name=".ctor" type="MacroScope.MacroScopeParser" token="6000001" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<method name="LA" type="Antlr.Runtime.CommonTokenStream" token="60002aa" module="Antlr3.Runtime.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="0" coveredRatio="0"/>
</method>
<method name="Match" type="Antlr.Runtime.Lexer" token="6000158" module="Antlr3.Runtime.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="0" coveredRatio="0"/>
</method>
<method name="mWhitespace" type="MacroScope.MacroScopeLexer" token="60002ab" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="21" total="32" coveredRatio="0.65625"/>
</method>
<method name="MatchRange" type="Antlr.Runtime.Lexer" token="600015b" module="Antlr3.Runtime.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="0" coveredRatio="0"/>
</method>
<method name="Match" type="Antlr.Runtime.Lexer" token="600015a" module="Antlr3.Runtime.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="0" coveredRatio="0"/>
</method>
<method name="Predict" type="Antlr.Runtime.DFA" token="600031a" module="Antlr3.Runtime.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="0" coveredRatio="0"/>
</method>
<method name="DFA12_SpecialStateTransition" type="MacroScope.MacroScopeLexer" token="60002b0" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="14" total="51" coveredRatio="0.27450980392156865"/>
</method>
<method name="Rewind" type="Antlr.Runtime.ANTLRStringStream" token="60001b9" module="Antlr3.Runtime.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="0" coveredRatio="0"/>
</method>
<method name="statement" type="MacroScope.MacroScopeParser" token="6000004" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="13" total="54" coveredRatio="0.24074074074074073"/>
</method>
<method name="Match" type="Antlr.Runtime.BaseRecognizer" token="6000019" module="Antlr3.Runtime.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="0" coveredRatio="0"/>
</method>
<method name="DFA39_SpecialStateTransition" type="MacroScope.MacroScopeParser" token="6000054" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="21" total="138" coveredRatio="0.15217391304347827"/>
</method>
<method name="LT" type="Antlr.Runtime.CommonTokenStream" token="60002a3" module="Antlr3.Runtime.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="0" total="0" coveredRatio="0"/>
</method>
<method name="identifier" type="MacroScope.MacroScopeParser" token="6000036" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="11" total="28" coveredRatio="0.39285714285714285"/>
</method>
<method name="mAsciiStringLiteral" type="MacroScope.MacroScopeLexer" token="60002a5" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="26" total="64" coveredRatio="0.40625"/>
</method>
<method name=".ctor" type="MockDBMS.DBMS" token="600001e" module="MockDBMS.dll"><hits/>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name="CreateStatement" type="MacroScope.Factory" token="60003a9" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<method name="CreateParser" type="MacroScope.Factory" token="60003aa" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="6" total="8" coveredRatio="0.75"/>
</method>
<method name="InitializeCyclicDFAs" type="MacroScope.MacroScopeLexer" token="60002af" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<method name="InitializeCyclicDFAs" type="MacroScope.MacroScopeParser" token="6000053" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<method name=".ctor" type="MacroScope.MacroScopeParser+DFA39" token="6000056" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name="LA" type="MacroScope.CaseInsensitiveStringStream" token="6000337" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="6" total="8" coveredRatio="0.75"/>
</method>
<method name="mTokens" type="MacroScope.MacroScopeLexer" token="60002ac" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="151" total="1461" coveredRatio="0.10335386721423683"/>
</method>
<method name="mSELECT" type="MacroScope.MacroScopeLexer" token="600027a" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="4" coveredRatio="0.75"/>
</method>
<method name="mNonQuotedIdentifier" type="MacroScope.MacroScopeLexer" token="60002a1" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="5" total="7" coveredRatio="0.7142857142857143"/>
</method>
<method name="mLetter" type="MacroScope.MacroScopeLexer" token="6000298" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="4" coveredRatio="0.75"/>
</method>
<method name="mWordTail" type="MacroScope.MacroScopeLexer" token="60002a0" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="24" total="30" coveredRatio="0.8"/>
</method>
<method name="mDOT" type="MacroScope.MacroScopeLexer" token="6000287" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="4" coveredRatio="0.75"/>
</method>
<method name="mCOMMA" type="MacroScope.MacroScopeLexer" token="6000288" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="4" coveredRatio="0.75"/>
</method>
<method name="mFROM" type="MacroScope.MacroScopeLexer" token="6000262" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="4" coveredRatio="0.75"/>
</method>
<method name="mWHERE" type="MacroScope.MacroScopeLexer" token="6000284" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="4" coveredRatio="0.75"/>
</method>
<method name="mNumber" type="MacroScope.MacroScopeLexer" token="600029f" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="15" total="144" coveredRatio="0.10416666666666667"/>
</method>
<method name="mDigit" type="MacroScope.MacroScopeLexer" token="6000299" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="4" coveredRatio="0.75"/>
</method>
<method name="mASSIGNEQUAL" type="MacroScope.MacroScopeLexer" token="600028b" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="4" coveredRatio="0.75"/>
</method>
<method name="selectStatement" type="MacroScope.MacroScopeParser" token="6000006" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="7" total="8" coveredRatio="0.875"/>
</method>
<method name="queryExpression" type="MacroScope.MacroScopeParser" token="600000e" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="12" total="36" coveredRatio="0.33333333333333331"/>
</method>
<method name="subQueryExpression" type="MacroScope.MacroScopeParser" token="600000f" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="9" total="30" coveredRatio="0.3"/>
</method>
<method name="querySpecification" type="MacroScope.MacroScopeParser" token="6000010" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="29" total="56" coveredRatio="0.5178571428571429"/>
</method>
<method name="selectClause" type="MacroScope.MacroScopeParser" token="6000011" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="19" total="49" coveredRatio="0.38775510204081631"/>
</method>
<method name=".ctor" type="MacroScope.QueryExpression" token="6000388" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name="selectList" type="MacroScope.MacroScopeParser" token="600001d" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="19" total="22" coveredRatio="0.86363636363636365"/>
</method>
<method name="selectItem" type="MacroScope.MacroScopeParser" token="600001e" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="27" total="78" coveredRatio="0.34615384615384615"/>
</method>
<method name="expression" type="MacroScope.MacroScopeParser" token="6000029" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="10" total="25" coveredRatio="0.4"/>
</method>
<method name="additiveSubExpression" type="MacroScope.MacroScopeParser" token="600002a" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="11" total="27" coveredRatio="0.40740740740740738"/>
</method>
<method name="subExpression" type="MacroScope.MacroScopeParser" token="600002c" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="64" total="184" coveredRatio="0.34782608695652173"/>
</method>
<method name="dbObject" type="MacroScope.MacroScopeParser" token="6000033" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="21" total="24" coveredRatio="0.875"/>
</method>
<method name=".ctor" type="MacroScope.Identifier" token="600039f" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="5" total="9" coveredRatio="0.55555555555555558"/>
</method>
<method name=".ctor" type="MacroScope.DbObject" token="60002fc" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="5" coveredRatio="0.6"/>
</method>
<method name="Add" type="MacroScope.DbObject" token="6000302" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="7" coveredRatio="0.42857142857142855"/>
</method>
<method name=".ctor" type="MacroScope.Expression" token="6000346" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name="set_Right" type="MacroScope.Expression" token="600034d" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name=".ctor" type="MacroScope.AliasedItem" token="600033b" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="5" coveredRatio="0.6"/>
</method>
<method name="Add" type="MacroScope.AliasedItem" token="6000343" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="5" total="7" coveredRatio="0.7142857142857143"/>
</method>
<method name="set_SelectItems" type="MacroScope.QueryExpression" token="6000379" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="fromClause" type="MacroScope.MacroScopeParser" token="600001f" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="23" total="27" coveredRatio="0.85185185185185186"/>
</method>
<method name="tableSource" type="MacroScope.MacroScopeParser" token="6000020" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="11" total="24" coveredRatio="0.45833333333333331"/>
</method>
<method name="subTableSource" type="MacroScope.MacroScopeParser" token="6000021" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="29" total="189" coveredRatio="0.15343915343915343"/>
</method>
<method name=".ctor" type="MacroScope.Table" token="6000359" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="5" coveredRatio="0.6"/>
</method>
<method name="set_From" type="MacroScope.QueryExpression" token="600037b" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="whereClause" type="MacroScope.MacroScopeParser" token="6000012" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="8" total="10" coveredRatio="0.8"/>
</method>
<method name="searchCondition" type="MacroScope.MacroScopeParser" token="6000017" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="9" total="23" coveredRatio="0.391304347826087"/>
</method>
<method name="additiveSubSearchCondition" type="MacroScope.MacroScopeParser" token="6000018" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="20" total="23" coveredRatio="0.86956521739130432"/>
</method>
<method name="subSearchCondition" type="MacroScope.MacroScopeParser" token="600001a" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="23" total="63" coveredRatio="0.36507936507936506"/>
</method>
<method name="predicate" type="MacroScope.MacroScopeParser" token="600001b" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="65" total="310" coveredRatio="0.20967741935483872"/>
</method>
<method name="constant" type="MacroScope.MacroScopeParser" token="6000038" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="19" total="85" coveredRatio="0.22352941176470589"/>
</method>
<method name="nonNegativeInteger" type="MacroScope.MacroScopeParser" token="600003a" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="8" total="9" coveredRatio="0.88888888888888884"/>
</method>
<method name=".ctor" type="MacroScope.IntegerValue" token="60002e2" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<method name="comparisonOperator" type="MacroScope.MacroScopeParser" token="600003e" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="9" total="64" coveredRatio="0.140625"/>
</method>
<method name="get_Equal" type="MacroScope.ExpressionOperator" token="60003be" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name=".ctor" type="MacroScope.Expression" token="6000347" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="5" total="11" coveredRatio="0.45454545454545453"/>
</method>
<method name="set_Where" type="MacroScope.QueryExpression" token="600037d" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name=".ctor" type="MacroScope.SelectStatement" token="60002ce" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="5" coveredRatio="0.6"/>
</method>
<method name="CreateTailor" type="MacroScope.Factory" token="60003ab" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="9" total="22" coveredRatio="0.40909090909090912"/>
</method>
<method name=".ctor" type="MacroScope.MSqlServerTailor" token="600038f" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="4" total="4" coveredRatio="1"/>
</method>
<method name="get_Mod" type="MacroScope.ExpressionOperator" token="60003bc" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name=".ctor" type="MacroScope.MTailor" token="6000191" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="5" total="7" coveredRatio="0.7142857142857143"/>
</method>
<method name=".ctor" type="MacroScope.PassiveVisitor" token="600013e" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name=".ctor" type="MacroScope.QueryParts" token="6000064" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="6" total="6" coveredRatio="1"/>
</method>
<method name="Traverse" type="MacroScope.SelectStatement" token="60002d4" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="12" total="16" coveredRatio="0.75"/>
</method>
<method name="set_Type" type="MacroScope.QueryParts" token="6000070" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="set_ParsingState" type="MacroScope.QueryParts" token="600006e" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="get_Distinct" type="MacroScope.QueryExpression" token="6000373" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="set_Distinct" type="MacroScope.QueryParts" token="6000066" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="PerformBefore" type="MacroScope.PassiveVisitor" token="6000129" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="Traverse" type="MacroScope.QueryExpression" token="6000387" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="29" total="39" coveredRatio="0.74358974358974361"/>
</method>
<method name="PerformBefore" type="MacroScope.MTailor" token="6000198" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="9" total="51" coveredRatio="0.17647058823529413"/>
</method>
<method name="get_Where" type="MacroScope.QueryExpression" token="600037c" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="GetRownumExpressionLimit" type="MacroScope.MTailor" token="60001ab" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="20" total="54" coveredRatio="0.37037037037037035"/>
</method>
<method name="get_LessOrEqual" type="MacroScope.ExpressionOperator" token="60003c0" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="get_Less" type="MacroScope.ExpressionOperator" token="60003c1" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="get_GreaterOrEqual" type="MacroScope.ExpressionOperator" token="60003c2" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="get_Greater" type="MacroScope.ExpressionOperator" token="60003c3" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="Traverse" type="MacroScope.AliasedItem" token="6000345" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="11" total="22" coveredRatio="0.5"/>
</method>
<method name="PerformBefore" type="MacroScope.PassiveVisitor" token="60000de" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="Traverse" type="MacroScope.Expression" token="6000350" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="46" total="116" coveredRatio="0.39655172413793105"/>
</method>
<method name="PerformBefore" type="MacroScope.MSqlServerTailor" token="6000390" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="6" total="8" coveredRatio="0.75"/>
</method>
<method name="ReplaceOperator" type="MacroScope.MSqlServerTailor" token="6000399" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="8" total="16" coveredRatio="0.5"/>
</method>
<method name="get_MAccessMod" type="MacroScope.ExpressionOperator" token="60003bd" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="get_StrConcat" type="MacroScope.ExpressionOperator" token="60003cf" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="ReplaceDate" type="MacroScope.MSqlServerTailor" token="600039a" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="6" total="14" coveredRatio="0.42857142857142855"/>
</method>
<method name="ReplaceSysdate" type="MacroScope.MSqlServerTailor" token="600039b" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="8" total="18" coveredRatio="0.44444444444444442"/>
</method>
<method name="IsSysdateTerm" type="MacroScope.TailorUtil" token="6000311" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="8" total="11" coveredRatio="0.72727272727272729"/>
</method>
<method name="GetTerm" type="MacroScope.TailorUtil" token="6000317" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="11" total="14" coveredRatio="0.7857142857142857"/>
</method>
<method name="get_HasNext" type="MacroScope.DbObject" token="60002fe" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="PerformBefore" type="MacroScope.MTailor" token="6000196" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="24" total="38" coveredRatio="0.631578947368421"/>
</method>
<method name="ReplaceSubstring" type="MacroScope.MTailor" token="60001a2" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="8" total="16" coveredRatio="0.5"/>
</method>
<method name="GetSubstringTerm" type="MacroScope.TailorUtil" token="6000312" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="9" coveredRatio="0.33333333333333331"/>
</method>
<method name="CondGetFunctionCall" type="MacroScope.TailorUtil" token="6000316" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="4" total="4" coveredRatio="1"/>
</method>
<method name="ReplaceExtract" type="MacroScope.MTailor" token="60001a3" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="8" total="16" coveredRatio="0.5"/>
</method>
<method name="GetExtractTerm" type="MacroScope.TailorUtil" token="6000313" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="4" total="4" coveredRatio="1"/>
</method>
<method name="GetModCall" type="MacroScope.MTailor" token="60001a9" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="23" coveredRatio="0.086956521739130432"/>
</method>
<method name="get_Namer" type="MacroScope.MTailor" token="6000192" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="4" total="4" coveredRatio="1"/>
</method>
<method name=".ctor" type="MacroScope.Namer" token="6000389" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name=".ctor" type="MacroScope.Namer" token="600038a" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="5" total="10" coveredRatio="0.5"/>
</method>
<method name="IsPrefix" type="MacroScope.Variable" token="60002cd" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="3" coveredRatio="0.66666666666666663"/>
</method>
<method name="PerformBefore" type="MacroScope.Namer" token="600038b" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="8" total="14" coveredRatio="0.5714285714285714"/>
</method>
<method name="CondGetVariable" type="MacroScope.Namer" token="600038c" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="5" coveredRatio="0.4"/>
</method>
<method name="get_ParsingState" type="MacroScope.QueryParts" token="600006d" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="get_Identifier" type="MacroScope.DbObject" token="60002fd" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="get_ID" type="MacroScope.Identifier" token="60003a0" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="get_Next" type="MacroScope.DbObject" token="60002ff" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="Traverse" type="MacroScope.DbObject" token="6000301" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="8" total="10" coveredRatio="0.8"/>
</method>
<method name="PerformBefore" type="MacroScope.PassiveVisitor" token="60000ee" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="Traverse" type="MacroScope.Identifier" token="60003a7" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="5" coveredRatio="0.6"/>
</method>
<method name="Perform" type="MacroScope.MSqlServerTailor" token="6000393" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="5" coveredRatio="0.6"/>
</method>
<method name="Perform" type="MacroScope.MTailor" token="6000195" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="6" total="12" coveredRatio="0.5"/>
</method>
<method name="IsRownum" type="MacroScope.MTailor" token="60001b0" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="5" total="7" coveredRatio="0.7142857142857143"/>
</method>
<method name="IsSysdate" type="MacroScope.TailorUtil" token="6000315" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="5" total="7" coveredRatio="0.7142857142857143"/>
</method>
<method name="PerformAfter" type="MacroScope.PassiveVisitor" token="60000ef" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="PerformAfter" type="MacroScope.PassiveVisitor" token="60000fc" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="PerformOnAlias" type="MacroScope.PassiveVisitor" token="60000df" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="PerformAfter" type="MacroScope.PassiveVisitor" token="60000e0" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="PerformOnFrom" type="MacroScope.PassiveVisitor" token="6000121" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="Traverse" type="MacroScope.Table" token="6000366" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="23" total="35" coveredRatio="0.65714285714285714"/>
</method>
<method name="PerformBefore" type="MacroScope.PassiveVisitor" token="600012e" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="PerformOnSource" type="MacroScope.PassiveVisitor" token="600012f" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="get_TableNames" type="MacroScope.QueryParts" token="6000071" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="PerformOnAlias" type="MacroScope.PassiveVisitor" token="6000130" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="PerformBeforeCondition" type="MacroScope.PassiveVisitor" token="6000131" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="PerformAfterCondition" type="MacroScope.PassiveVisitor" token="6000132" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="PerformAfter" type="MacroScope.PassiveVisitor" token="6000133" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="PerformOnWhere" type="MacroScope.MTailor" token="600019a" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="4" total="6" coveredRatio="0.66666666666666663"/>
</method>
<method name="get_And" type="MacroScope.ExpressionOperator" token="60003c5" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="Traverse" type="MacroScope.IntegerValue" token="60002e6" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="5" coveredRatio="0.6"/>
</method>
<method name="Perform" type="MacroScope.PassiveVisitor" token="600010d" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="PerformBeforeBinaryOp" type="MacroScope.MTailor" token="6000199" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="5" total="7" coveredRatio="0.7142857142857143"/>
</method>
<method name="ReplaceIntervals" type="MacroScope.MTailor" token="60001a4" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="9" total="18" coveredRatio="0.5"/>
</method>
<method name="GetInterval" type="MacroScope.MTailor" token="60001aa" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="10" total="11" coveredRatio="0.90909090909090906"/>
</method>
<method name="Traverse" type="MacroScope.ExpressionOperator" token="60003d2" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="5" coveredRatio="0.6"/>
</method>
<method name="Perform" type="MacroScope.MSqlServerTailor" token="6000391" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="7" total="13" coveredRatio="0.53846153846153844"/>
</method>
<method name="Perform" type="MacroScope.PassiveVisitor" token="60000ff" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="PerformAfterBinaryOp" type="MacroScope.PassiveVisitor" token="60000fb" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="PerformOnGroupBy" type="MacroScope.MTailor" token="600019b" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="4" coveredRatio="0.5"/>
</method>
<method name="PerformOnOrderBy" type="MacroScope.PassiveVisitor" token="6000124" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="PerformAfter" type="MacroScope.PassiveVisitor" token="6000125" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="PerformAfter" type="MacroScope.PassiveVisitor" token="600012a" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="get_Type" type="MacroScope.QueryParts" token="600006f" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="get_Value" type="MacroScope.IntegerValue" token="60002e4" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="get_IsSelectAll" type="MacroScope.QueryParts" token="6000067" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="get_Distinct" type="MacroScope.QueryParts" token="6000065" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="mAND" type="MacroScope.MacroScopeLexer" token="600024e" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="4" coveredRatio="0.75"/>
</method>
<method name="mLIKE" type="MacroScope.MacroScopeLexer" token="600026f" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="4" coveredRatio="0.75"/>
</method>
<method name="mAsciiStringRun" type="MacroScope.MacroScopeLexer" token="60002a4" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="23" total="35" coveredRatio="0.65714285714285714"/>
</method>
<method name="stringLiteral" type="MacroScope.MacroScopeParser" token="6000034" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="10" total="21" coveredRatio="0.47619047619047616"/>
</method>
<method name="singleStringLiteral" type="MacroScope.MacroScopeParser" token="6000035" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="12" total="29" coveredRatio="0.41379310344827586"/>
</method>
<method name=".ctor" type="MacroScope.StringValue" token="6000189" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="5" coveredRatio="0.6"/>
</method>
<method name=".ctor" type="MacroScope.PatternExpression" token="600016a" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="5" coveredRatio="0.6"/>
</method>
<method name="get_Like" type="MacroScope.ExpressionOperator" token="60003c9" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="Traverse" type="MacroScope.PatternExpression" token="6000170" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="7" total="11" coveredRatio="0.63636363636363635"/>
</method>
<method name="PerformBefore" type="MacroScope.PassiveVisitor" token="6000116" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="Traverse" type="MacroScope.StringValue" token="6000190" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="5" coveredRatio="0.6"/>
</method>
<method name="Perform" type="MacroScope.PassiveVisitor" token="600012b" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="PerformOnEscape" type="MacroScope.PassiveVisitor" token="6000117" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="PerformAfter" type="MacroScope.PassiveVisitor" token="6000118" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="get_Operator" type="MacroScope.Expression" token="600034a" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="get_Left" type="MacroScope.Expression" token="6000348" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="get_Right" type="MacroScope.Expression" token="600034c" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="get_Value" type="MacroScope.ExpressionOperator" token="60003d0" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="get_Expression" type="MacroScope.PatternExpression" token="600016c" module="MacroScope.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
</document>
</documents>
