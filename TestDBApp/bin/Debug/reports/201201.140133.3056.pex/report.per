<?xml version="1.0" encoding="utf-8"?>
<pex id="{d288d5e7-bf5b-43e0-9a43-7f112f89bc09}" creationTime="2020-12-01 06:01:33Z" configuration="MyApplication!\PexTestClass!\TestMarketMSShowAllCheckInLogByID!" created="2020-12-01 06:01:33Z" pexVersion="0.94.51006.1" xml="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\bin\Debug\reports\201201.140133.3056.pex\report.per" html="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\bin\Debug\reports\201201.140133.3056.pex\report.html"><environment commandLine="&quot;C:\Program Files\Microsoft Pex\bin\Microsoft.Pex.exe&quot; &quot;C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\bin\Debug\TestDBApp.dll&quot; /membernamefilter:M:TestMarketMSShowAllCheckInLogByID! /methodnamefilter:TestMarketMSShowAllCheckInLogByID! /namespacefilter:MyApplication! /typefilter:PexTestClass! /x64failsilently /clrversion:v4.0.30319 /referencedprojectassemblies:MockDBMS /donotopenreport /reportlevel:Xml /reportrootpath:&quot;C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\bin\Debug\reports&quot; /testframework:VisualStudioUnitTest /testlanguage:cs /testprojectfile:&quot;C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\TestDBApp.csproj&quot; /testprojectnotupdate /testprojectskip" machineName="PKU-AAF96026023" osVersion="Microsoft Windows NT 5.1.2600 Service Pack 3" processorCount="1" clrVersion="4.0.30319.1" bitness="x86" user="Wei"><envVars><envVar name="HOMEPATH" value="\Documents and Settings\Wei"/>
<envVar name="COMPUTERNAME" value="PKU-AAF96026023"/>
<envVar name="CLRMONITOR_INJECT_TYPES" value=""/>
<envVar name="COMPLUS_ProfAPI_ProfilerCompatibilitySetting" value="EnableV2Profiler"/>
<envVar name="TMP" value="C:\DOCUME~1\Wei\LOCALS~1\Temp"/>
<envVar name="PROCESSOR_REVISION" value="3d04"/>
<envVar name="CLRMONITOR_INSTRUMENT_TYPES_EXCLUSIONS" value=""/>
<envVar name="PATHEXT" value=".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH"/>
<envVar name="COMPLUS_DEFAULTVERSION" value="v4.0.30319"/>
<envVar name="CLRMONITOR_CLSID" value="{21bbb412-71ac-41f9-a377-48529a4859cf}"/>
<envVar name="CommonProgramFiles" value="C:\Program Files\Common Files"/>
<envVar name="TEMP" value="C:\DOCUME~1\Wei\LOCALS~1\Temp"/>
<envVar name="CLRMONITOR_PROTECT_TYPES" value="Microsoft.FSharp.Text.Printf,Microsoft.FSharp.Text.PrintfImpl"/>
<envVar name="CLRMONITOR_INJECT_ASSEMBLIES" value=""/>
<envVar name="CLIENTNAME" value="Console"/>
<envVar name="CLRMONITOR_INITIALIZED" value="0x12"/>
<envVar name="USERDOMAIN" value="PKU-AAF96026023"/>
<envVar name="windir" value="C:\WINDOWS"/>
<envVar name="CLRMONITOR_ERASE_FINALIZER_TYPES" value=""/>
<envVar name="CLRMONITOR_INJECT_NAMESPACES" value=""/>
<envVar name="PROCESSOR_IDENTIFIER" value="x86 Family 6 Model 61 Stepping 4, GenuineIntel"/>
<envVar name="Path" value="C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;c:\Program Files\Microsoft SQL Server\100\Tools\Binn\;c:\Program Files\Microsoft SQL Server\100\DTS\Binn\"/>
<envVar name="pex_wait_for_server_channel" value="1"/>
<envVar name="PROCESSOR_LEVEL" value="6"/>
<envVar name="CLRMONITOR_INSTRUMENT_NAMESPACES_EXCLUSIONS" value=""/>
<envVar name="CLRMONITOR_FLAGS" value=""/>
<envVar name="pex_instrumentation" value="1"/>
<envVar name="SESSIONNAME" value="Console"/>
<envVar name="CLRMONITOR_INSTRUMENT_TYPES" value="System.Array,System.Array+ArrayEnumerator,System.Array+FunctorComparer`1,System.Array+SZArrayEnumerator,System.Array+SorterGenericArray,System.Array+SorterObjectArray,System.Boolean,System.Byte,System.Char,System.CharEnumerator,System.ComponentModel.Component,System.ComponentModel.Container,System.ComponentModel.Container+Site,System.Convert,System.Currency,System.DateTime,System.Decimal,System.Diagnostics.Assert,System.Double,System.Globalization.CharUnicodeInfo,System.Globalization.CultureTableRecord,System.Globalization.TextInfo,System.Guid,System.IO.MemoryStream,System.IO.Stream,System.IO.StreamReader,System.IO.StreamWriter,System.IO.StringReader,System.IO.StringWriter,System.Int16,System.Int32,System.Int64,System.Lazy`1,System.Lazy`1+Boxed,System.Lazy`1+LazyInternalExceptionHolder,System.Math,System.Nullable,System.Nullable`1,System.OrdinalComparer,System.SByte,System.SZArrayHelper,System.SZArrayHelper+SZGenericArrayEnumerator`1,System.Single,System.String,System.StringComparer,System.Text.ASCIIEncoding,System.Text.DecoderNLS,System.Text.Encoding,System.Text.UTF8Encoding,System.TimeSpan,System.Tuple,System.Tuple`1,System.Tuple`2,System.Tuple`3,System.Tuple`4,System.Tuple`5,System.Tuple`6,System.Tuple`7,System.Tuple`8,System.UInt16,System.UInt32,System.UInt64,System.Xml.XmlTextWriter,System.Xml.XmlTextWriter+Namespace,System.Xml.XmlTextWriter+NamespaceState,System.Xml.XmlTextWriter+SpecialAttr,System.Xml.XmlTextWriter+State,System.Xml.XmlTextWriter+TagInfo,System.Xml.XmlTextWriter+Token,System.Xml.XmlWriter,__Box`1,__SzArrayHelper`1"/>
<envVar name="VisualStudioDir" value="C:\Documents and Settings\Wei\My Documents\Visual Studio 2010"/>
<envVar name="ProgramFiles" value="C:\Program Files"/>
<envVar name="CLRMONITOR_ERASE_CCTOR_TYPES" value=""/>
<envVar name="FP_NO_HOST_CHECK" value="NO"/>
<envVar name="pex_clientid" value="pex3908_1"/>
<envVar name="NUMBER_OF_PROCESSORS" value="1"/>
<envVar name="SystemRoot" value="C:\WINDOWS"/>
<envVar name="CLRMONITOR_INSTRUMENT_ATTRIBUTE" value="Microsoft.Moles.Framework.Moles.MolesInstrumentAttribute"/>
<envVar name="CLRMONITOR_PROTECT_ALL_CCTORS" value="1"/>
<envVar name="LOGONSERVER" value="\\PKU-AAF96026023"/>
<envVar name="USERPROFILE" value="C:\Documents and Settings\Wei"/>
<envVar name="CLRMONITOR_SUBSTITUTIONS" value="C:\WINDOWS\assembly\GAC_MSIL\Microsoft.ExtendedReflection\0.94.0.0__31bf3856ad364e35\Microsoft.ExtendedReflection.dll"/>
<envVar name="CLRMONITOR_INSTRUMENT_ASSEMBLIES_EXCLUSIONS" value="Microsoft.VisualBasic"/>
<envVar name="APPDATA" value="C:\Documents and Settings\Wei\Application Data"/>
<envVar name="HOMEDRIVE" value="C:"/>
<envVar name="ComSpec" value="C:\WINDOWS\system32\cmd.exe"/>
<envVar name="VS100COMNTOOLS" value="C:\Program Files\Microsoft Visual Studio 10.0\Common7\Tools\"/>
<envVar name="USERNAME" value="Wei"/>
<envVar name="COR_PROFILER" value="{21bbb412-71ac-41f9-a377-48529a4859cf}"/>
<envVar name="PROCESSOR_ARCHITECTURE" value="x86"/>
<envVar name="pex_server_channel" value="pex3908"/>
<envVar name="OS" value="Windows_NT"/>
<envVar name="CLRMONITOR_INSTRUMENT_NAMESPACES" value="System.Collections,System.Collections.Generic,System.Collections.ObjectModel,System.Collections.Specialized,System.Diagnostics.Contracts"/>
<envVar name="SystemDrive" value="C:"/>
<envVar name="CLRMONITOR_INSTRUMENT_ASSEMBLIES" value="FSharp.Core,FSharp.PowerPack,MacroScope,Microsoft.Contracts,Microsoft.VisualBasic,Microsoft.VisualStudio.QualityTools.UnitTestFramework,MockDBMS,ParsedQuery,System,System.Core,System.Web,TestDBApp"/>
<envVar name="ALLUSERSPROFILE" value="C:\Documents and Settings\All Users"/>
</envVars>
</environment>
<settings/>
<reflection><existingTest method="TestMarketMSShowAllCheckInLogByIDThrowsKeyNotFoundException71" type="MyApplication.PexTestClass" token="6000011" generated="true" failure="true" exceptionType="System.Collections.Generic.KeyNotFoundException"/>
<existingTest method="TestMarketMSShowAllCheckInLogByIDThrowsKeyNotFoundException761" type="MyApplication.PexTestClass" token="6000012" generated="true" failure="true" exceptionType="System.Collections.Generic.KeyNotFoundException"/>
</reflection>
<assembly name="TestDBApp" version="1.0.0.0" fileVersion="1.0.0.0" fullName="TestDBApp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" location="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\bin\Debug\TestDBApp.dll" fileName="TestDBApp.dll"><settings testFramework="VisualStudioUnitTest" testLanguage="cs"/>
<fixture name="PexTestClass" type="MyApplication.PexTestClass" typeName="PexTestClass" token="2000003" href="fix\TestDBApp.630.html"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
<exploration shortName="TestMarketMSShowAllCheckInLogByID(String)" fullName="MyApplication.PexTestClass.TestMarketMSShowAllCheckInLogByID(String)"><method><definition assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<settings maxBranches="80000"/>
<log level="message" time="2020-12-01 06:01:33Z" category="progress" message="    0 runs"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.02"/>
<log level="message" time="2020-12-01 06:01:33Z" category="symbols" message="could not load symbols for C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<log level="message" time="2020-12-01 06:01:33Z" category="symbols" message="search path: ;"/>
<uninstrumented testability="true" methodDisplayName="System.String[] System.IO.File.ReadAllLines(System.String path)" declaringTypeDisplayName="System.IO.File" methodShortDisplayName="File.ReadAllLines(String)" wikiTopic="Testability Issue"><method><definition assemblyName="mscorlib" name="ReadAllLines" static="true" token="6003ecf"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at Encoding.get_UTF8()" method="Encoding.get_UTF8()" offset="0"><method assemblyName="mscorlib" name="get_UTF8" static="true" token="600311e"><declaringType assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
<resultType spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</resultType>
</method>
</frame>
<frame value="  at File.ReadAllLines(String)" method="File.ReadAllLines(String)" offset="38"><method assemblyName="mscorlib" name="ReadAllLines" static="true" token="6003ecf"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at DBMS.readSchemaFromFile() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(41)" method="DBMS.readSchemaFromFile()" offset="17" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="41"><method assemblyName="MockDBMS" name="readSchemaFromFile" token="6000015"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        private void readSchemaFromFile()
        {
            tables = new List<Table>();]]></beforeSource>
<source><![CDATA[            string[] lines = System.IO.File.ReadAllLines(@"C:\schema.txt");]]></source>
<afterSource><![CDATA[            Table table = null;
            foreach (string line in lines)
            {]]></afterSource>
</frame>
<frame value="  at DBMS.initializeDBMSFromSchema() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(120)" method="DBMS.initializeDBMSFromSchema()" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="120"><method assemblyName="MockDBMS" name="initializeDBMSFromSchema" token="6000016"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        private void initializeDBMSFromSchema()
        {]]></beforeSource>
<source><![CDATA[            readSchemaFromFile();]]></source>
<afterSource><![CDATA[            /* tables = new List<Table>(); 
            Table t = new Table("persons");
            t.AddColumn("firstname", DataTypes.STRING);]]></afterSource>
</frame>
<frame value="  at DBMS.CreateDatabaseState() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(147)" method="DBMS.CreateDatabaseState()" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="147"><method assemblyName="MockDBMS" name="CreateDatabaseState" token="6000017"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        public void CreateDatabaseState()
        {
            //MockDBMS dbms = new MockDBMS();]]></beforeSource>
<source><![CDATA[            initializeDBMSFromSchema();]]></source>
<afterSource><![CDATA[             //Test Code

            //FillTestRecords();]]></afterSource>
</frame>
<frame value="  at MockSqlConnection.Open() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs(31)" method="MockSqlConnection.Open()" offset="7" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs" line="31"><method assemblyName="MockDBMS" name="Open" token="6000012"><declaringType assemblyName="MockDBMS" name="MockSqlConnection" token="2000005" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlConnection" token="2000005" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        public void Open()
        {]]></beforeSource>
<source><![CDATA[            dbms.CreateDatabaseState();]]></source>
<afterSource><![CDATA[        }
    }
}]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(411)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="30" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="411"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        {
            PexAssume.IsTrue(ID == "lw");
            MockSqlConnection myConnection = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");]]></beforeSource>
<source><![CDATA[            myConnection.Open();]]></source>
<afterSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void System.IO.TextReader..ctor()" declaringTypeDisplayName="System.IO.TextReader" methodShortDisplayName="TextReader..ctor()" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="mscorlib" name=".ctor" token="6004020"><declaringType assemblyName="mscorlib" name="TextReader" token="20006cc" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="TextReader" token="20006cc" namespace="System.IO"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at StreamReader..ctor(String, Encoding, Boolean, Int32)" method="StreamReader..ctor(String, Encoding, Boolean, Int32)" offset="6"><method assemblyName="mscorlib" name=".ctor" token="6004040"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<parameter name="detectEncodingFromByteOrderMarks" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<parameter name="bufferSize" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at StreamReader..ctor(String, Encoding)" method="StreamReader..ctor(String, Encoding)" offset="9"><method assemblyName="mscorlib" name=".ctor" token="600403e"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at File.InternalReadAllLines(String, Encoding)" method="File.InternalReadAllLines(String, Encoding)" offset="13"><method assemblyName="mscorlib" name="InternalReadAllLines" static="true" token="6003ee1"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at File.ReadAllLines(String)" method="File.ReadAllLines(String)" offset="38"><method assemblyName="mscorlib" name="ReadAllLines" static="true" token="6003ecf"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at DBMS.readSchemaFromFile() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(41)" method="DBMS.readSchemaFromFile()" offset="17" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="41"><method assemblyName="MockDBMS" name="readSchemaFromFile" token="6000015"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        private void readSchemaFromFile()
        {
            tables = new List<Table>();]]></beforeSource>
<source><![CDATA[            string[] lines = System.IO.File.ReadAllLines(@"C:\schema.txt");]]></source>
<afterSource><![CDATA[            Table table = null;
            foreach (string line in lines)
            {]]></afterSource>
</frame>
<frame value="  at DBMS.initializeDBMSFromSchema() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(120)" method="DBMS.initializeDBMSFromSchema()" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="120"><method assemblyName="MockDBMS" name="initializeDBMSFromSchema" token="6000016"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        private void initializeDBMSFromSchema()
        {]]></beforeSource>
<source><![CDATA[            readSchemaFromFile();]]></source>
<afterSource><![CDATA[            /* tables = new List<Table>(); 
            Table t = new Table("persons");
            t.AddColumn("firstname", DataTypes.STRING);]]></afterSource>
</frame>
<frame value="  at DBMS.CreateDatabaseState() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(147)" method="DBMS.CreateDatabaseState()" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="147"><method assemblyName="MockDBMS" name="CreateDatabaseState" token="6000017"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        public void CreateDatabaseState()
        {
            //MockDBMS dbms = new MockDBMS();]]></beforeSource>
<source><![CDATA[            initializeDBMSFromSchema();]]></source>
<afterSource><![CDATA[             //Test Code

            //FillTestRecords();]]></afterSource>
</frame>
<frame value="  at MockSqlConnection.Open() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs(31)" method="MockSqlConnection.Open()" offset="7" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs" line="31"><method assemblyName="MockDBMS" name="Open" token="6000012"><declaringType assemblyName="MockDBMS" name="MockSqlConnection" token="2000005" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlConnection" token="2000005" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        public void Open()
        {]]></beforeSource>
<source><![CDATA[            dbms.CreateDatabaseState();]]></source>
<afterSource><![CDATA[        }
    }
}]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(411)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="30" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="411"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        {
            PexAssume.IsTrue(ID == "lw");
            MockSqlConnection myConnection = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");]]></beforeSource>
<source><![CDATA[            myConnection.Open();]]></source>
<afterSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented testability="true" methodDisplayName="System.Void System.IO.FileStream..ctor(System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Int32 bufferSize, System.IO.FileOptions options)" declaringTypeDisplayName="System.IO.FileStream" methodShortDisplayName="FileStream..ctor(String, FileMode, FileAccess, FileShare, Int32, FileOptions)" wikiTopic="Testability Issue"><method><definition assemblyName="mscorlib" name=".ctor" token="6003f31"><declaringType assemblyName="mscorlib" name="FileStream" token="20006b8" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="FileStream" token="20006b8" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="mode" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="FileMode" token="20006b3" namespace="System.IO"/>
</type>
</parameter>
<parameter name="access" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="FileAccess" token="20006b0" namespace="System.IO"/>
</type>
</parameter>
<parameter name="share" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="FileShare" token="20006b6" namespace="System.IO"/>
</type>
</parameter>
<parameter name="bufferSize" position="5"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="options" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="FileOptions" token="20006b5" namespace="System.IO"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at Stream..ctor()" method="Stream..ctor()" offset="0"><method assemblyName="mscorlib" name=".ctor" token="6003d68"><declaringType assemblyName="mscorlib" name="Stream" token="200069a" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="Stream" token="200069a" namespace="System.IO"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at FileStream..ctor(String, FileMode, FileAccess, FileShare, Int32, FileOptions)" method="FileStream..ctor(String, FileMode, FileAccess, FileShare, Int32, FileOptions)" offset="0"><method assemblyName="mscorlib" name=".ctor" token="6003f31"><declaringType assemblyName="mscorlib" name="FileStream" token="20006b8" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="FileStream" token="20006b8" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="mode" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="FileMode" token="20006b3" namespace="System.IO"/>
</type>
</parameter>
<parameter name="access" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="FileAccess" token="20006b0" namespace="System.IO"/>
</type>
</parameter>
<parameter name="share" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="FileShare" token="20006b6" namespace="System.IO"/>
</type>
</parameter>
<parameter name="bufferSize" position="5"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="options" position="6"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="FileOptions" token="20006b5" namespace="System.IO"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at StreamReader..ctor(String, Encoding, Boolean, Int32)" method="StreamReader..ctor(String, Encoding, Boolean, Int32)" offset="97"><method assemblyName="mscorlib" name=".ctor" token="6004040"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<parameter name="detectEncodingFromByteOrderMarks" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<parameter name="bufferSize" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at StreamReader..ctor(String, Encoding)" method="StreamReader..ctor(String, Encoding)" offset="9"><method assemblyName="mscorlib" name=".ctor" token="600403e"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at File.InternalReadAllLines(String, Encoding)" method="File.InternalReadAllLines(String, Encoding)" offset="13"><method assemblyName="mscorlib" name="InternalReadAllLines" static="true" token="6003ee1"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at File.ReadAllLines(String)" method="File.ReadAllLines(String)" offset="38"><method assemblyName="mscorlib" name="ReadAllLines" static="true" token="6003ecf"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at DBMS.readSchemaFromFile() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(41)" method="DBMS.readSchemaFromFile()" offset="17" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="41"><method assemblyName="MockDBMS" name="readSchemaFromFile" token="6000015"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        private void readSchemaFromFile()
        {
            tables = new List<Table>();]]></beforeSource>
<source><![CDATA[            string[] lines = System.IO.File.ReadAllLines(@"C:\schema.txt");]]></source>
<afterSource><![CDATA[            Table table = null;
            foreach (string line in lines)
            {]]></afterSource>
</frame>
<frame value="  at DBMS.initializeDBMSFromSchema() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(120)" method="DBMS.initializeDBMSFromSchema()" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="120"><method assemblyName="MockDBMS" name="initializeDBMSFromSchema" token="6000016"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        private void initializeDBMSFromSchema()
        {]]></beforeSource>
<source><![CDATA[            readSchemaFromFile();]]></source>
<afterSource><![CDATA[            /* tables = new List<Table>(); 
            Table t = new Table("persons");
            t.AddColumn("firstname", DataTypes.STRING);]]></afterSource>
</frame>
<frame value="  at DBMS.CreateDatabaseState() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(147)" method="DBMS.CreateDatabaseState()" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="147"><method assemblyName="MockDBMS" name="CreateDatabaseState" token="6000017"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        public void CreateDatabaseState()
        {
            //MockDBMS dbms = new MockDBMS();]]></beforeSource>
<source><![CDATA[            initializeDBMSFromSchema();]]></source>
<afterSource><![CDATA[             //Test Code

            //FillTestRecords();]]></afterSource>
</frame>
<frame value="  at MockSqlConnection.Open() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs(31)" method="MockSqlConnection.Open()" offset="7" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs" line="31"><method assemblyName="MockDBMS" name="Open" token="6000012"><declaringType assemblyName="MockDBMS" name="MockSqlConnection" token="2000005" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlConnection" token="2000005" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        public void Open()
        {]]></beforeSource>
<source><![CDATA[            dbms.CreateDatabaseState();]]></source>
<afterSource><![CDATA[        }
    }
}]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(411)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="30" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="411"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        {
            PexAssume.IsTrue(ID == "lw");
            MockSqlConnection myConnection = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");]]></beforeSource>
<source><![CDATA[            myConnection.Open();]]></source>
<afterSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void System.Text.Decoder..ctor()" declaringTypeDisplayName="System.Text.Decoder" methodShortDisplayName="Decoder..ctor()" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="mscorlib" name=".ctor" token="6003146"><declaringType assemblyName="mscorlib" name="Decoder" token="20004c8" namespace="System.Text"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="Decoder" token="20004c8" namespace="System.Text"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at DecoderNLS..ctor(Encoding)" method="DecoderNLS..ctor(Encoding)" offset="6"><method assemblyName="mscorlib" name=".ctor" token="60031b5"><declaringType assemblyName="mscorlib" name="DecoderNLS" token="20004d4" namespace="System.Text"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="DecoderNLS" token="20004d4" namespace="System.Text"/>
</type>
</parameter>
<parameter name="encoding" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at UTF8Encoding.GetDecoder()" method="UTF8Encoding.GetDecoder()" offset="1"><method assemblyName="mscorlib" name="GetDecoder" token="6003313"><declaringType assemblyName="mscorlib" name="UTF8Encoding" token="20004fb" namespace="System.Text"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="UTF8Encoding" token="20004fb" namespace="System.Text"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="Decoder" token="20004c8" namespace="System.Text"/>
</resultType>
</method>
</frame>
<frame value="  at StreamReader.Init(Stream, Encoding, Boolean, Int32)" method="StreamReader.Init(Stream, Encoding, Boolean, Int32)" offset="16"><method assemblyName="mscorlib" name="Init" token="600404f"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="stream" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Stream" token="200069a" namespace="System.IO"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<parameter name="detectEncodingFromByteOrderMarks" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<parameter name="bufferSize" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at StreamReader..ctor(String, Encoding, Boolean, Int32)" method="StreamReader..ctor(String, Encoding, Boolean, Int32)" offset="109"><method assemblyName="mscorlib" name=".ctor" token="6004040"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<parameter name="detectEncodingFromByteOrderMarks" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<parameter name="bufferSize" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at StreamReader..ctor(String, Encoding)" method="StreamReader..ctor(String, Encoding)" offset="9"><method assemblyName="mscorlib" name=".ctor" token="600403e"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at File.InternalReadAllLines(String, Encoding)" method="File.InternalReadAllLines(String, Encoding)" offset="13"><method assemblyName="mscorlib" name="InternalReadAllLines" static="true" token="6003ee1"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at File.ReadAllLines(String)" method="File.ReadAllLines(String)" offset="38"><method assemblyName="mscorlib" name="ReadAllLines" static="true" token="6003ecf"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at DBMS.readSchemaFromFile() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(41)" method="DBMS.readSchemaFromFile()" offset="17" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="41"><method assemblyName="MockDBMS" name="readSchemaFromFile" token="6000015"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        private void readSchemaFromFile()
        {
            tables = new List<Table>();]]></beforeSource>
<source><![CDATA[            string[] lines = System.IO.File.ReadAllLines(@"C:\schema.txt");]]></source>
<afterSource><![CDATA[            Table table = null;
            foreach (string line in lines)
            {]]></afterSource>
</frame>
<frame value="  at DBMS.initializeDBMSFromSchema() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(120)" method="DBMS.initializeDBMSFromSchema()" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="120"><method assemblyName="MockDBMS" name="initializeDBMSFromSchema" token="6000016"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        private void initializeDBMSFromSchema()
        {]]></beforeSource>
<source><![CDATA[            readSchemaFromFile();]]></source>
<afterSource><![CDATA[            /* tables = new List<Table>(); 
            Table t = new Table("persons");
            t.AddColumn("firstname", DataTypes.STRING);]]></afterSource>
</frame>
<frame value="  at DBMS.CreateDatabaseState() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(147)" method="DBMS.CreateDatabaseState()" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="147"><method assemblyName="MockDBMS" name="CreateDatabaseState" token="6000017"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        public void CreateDatabaseState()
        {
            //MockDBMS dbms = new MockDBMS();]]></beforeSource>
<source><![CDATA[            initializeDBMSFromSchema();]]></source>
<afterSource><![CDATA[             //Test Code

            //FillTestRecords();]]></afterSource>
</frame>
<frame value="  at MockSqlConnection.Open() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs(31)" method="MockSqlConnection.Open()" offset="7" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs" line="31"><method assemblyName="MockDBMS" name="Open" token="6000012"><declaringType assemblyName="MockDBMS" name="MockSqlConnection" token="2000005" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlConnection" token="2000005" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        public void Open()
        {]]></beforeSource>
<source><![CDATA[            dbms.CreateDatabaseState();]]></source>
<afterSource><![CDATA[        }
    }
}]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(411)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="30" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="411"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        {
            PexAssume.IsTrue(ID == "lw");
            MockSqlConnection myConnection = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");]]></beforeSource>
<source><![CDATA[            myConnection.Open();]]></source>
<afterSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void System.Text.UTF8Encoding+UTF8Decoder.Reset()" declaringTypeDisplayName="System.Text.UTF8Encoding+UTF8Decoder" methodShortDisplayName="UTF8Decoder.Reset()" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="mscorlib" name="Reset" token="6003328"><declaringType assemblyName="mscorlib" name="UTF8Decoder" token="20004fd"><declaringType assemblyName="mscorlib" name="UTF8Encoding" token="20004fb" namespace="System.Text"/>
</declaringType>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="UTF8Decoder" token="20004fd"><declaringType assemblyName="mscorlib" name="UTF8Encoding" token="20004fb" namespace="System.Text"/>
</definition>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at DecoderNLS..ctor(Encoding)" method="DecoderNLS..ctor(Encoding)" offset="36"><method assemblyName="mscorlib" name=".ctor" token="60031b5"><declaringType assemblyName="mscorlib" name="DecoderNLS" token="20004d4" namespace="System.Text"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="DecoderNLS" token="20004d4" namespace="System.Text"/>
</type>
</parameter>
<parameter name="encoding" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at UTF8Encoding.GetDecoder()" method="UTF8Encoding.GetDecoder()" offset="1"><method assemblyName="mscorlib" name="GetDecoder" token="6003313"><declaringType assemblyName="mscorlib" name="UTF8Encoding" token="20004fb" namespace="System.Text"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="UTF8Encoding" token="20004fb" namespace="System.Text"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="Decoder" token="20004c8" namespace="System.Text"/>
</resultType>
</method>
</frame>
<frame value="  at StreamReader.Init(Stream, Encoding, Boolean, Int32)" method="StreamReader.Init(Stream, Encoding, Boolean, Int32)" offset="16"><method assemblyName="mscorlib" name="Init" token="600404f"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="stream" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Stream" token="200069a" namespace="System.IO"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<parameter name="detectEncodingFromByteOrderMarks" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<parameter name="bufferSize" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at StreamReader..ctor(String, Encoding, Boolean, Int32)" method="StreamReader..ctor(String, Encoding, Boolean, Int32)" offset="109"><method assemblyName="mscorlib" name=".ctor" token="6004040"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<parameter name="detectEncodingFromByteOrderMarks" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<parameter name="bufferSize" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at StreamReader..ctor(String, Encoding)" method="StreamReader..ctor(String, Encoding)" offset="9"><method assemblyName="mscorlib" name=".ctor" token="600403e"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at File.InternalReadAllLines(String, Encoding)" method="File.InternalReadAllLines(String, Encoding)" offset="13"><method assemblyName="mscorlib" name="InternalReadAllLines" static="true" token="6003ee1"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at File.ReadAllLines(String)" method="File.ReadAllLines(String)" offset="38"><method assemblyName="mscorlib" name="ReadAllLines" static="true" token="6003ecf"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at DBMS.readSchemaFromFile() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(41)" method="DBMS.readSchemaFromFile()" offset="17" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="41"><method assemblyName="MockDBMS" name="readSchemaFromFile" token="6000015"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        private void readSchemaFromFile()
        {
            tables = new List<Table>();]]></beforeSource>
<source><![CDATA[            string[] lines = System.IO.File.ReadAllLines(@"C:\schema.txt");]]></source>
<afterSource><![CDATA[            Table table = null;
            foreach (string line in lines)
            {]]></afterSource>
</frame>
<frame value="  at DBMS.initializeDBMSFromSchema() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(120)" method="DBMS.initializeDBMSFromSchema()" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="120"><method assemblyName="MockDBMS" name="initializeDBMSFromSchema" token="6000016"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        private void initializeDBMSFromSchema()
        {]]></beforeSource>
<source><![CDATA[            readSchemaFromFile();]]></source>
<afterSource><![CDATA[            /* tables = new List<Table>(); 
            Table t = new Table("persons");
            t.AddColumn("firstname", DataTypes.STRING);]]></afterSource>
</frame>
<frame value="  at DBMS.CreateDatabaseState() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(147)" method="DBMS.CreateDatabaseState()" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="147"><method assemblyName="MockDBMS" name="CreateDatabaseState" token="6000017"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        public void CreateDatabaseState()
        {
            //MockDBMS dbms = new MockDBMS();]]></beforeSource>
<source><![CDATA[            initializeDBMSFromSchema();]]></source>
<afterSource><![CDATA[             //Test Code

            //FillTestRecords();]]></afterSource>
</frame>
<frame value="  at MockSqlConnection.Open() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs(31)" method="MockSqlConnection.Open()" offset="7" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs" line="31"><method assemblyName="MockDBMS" name="Open" token="6000012"><declaringType assemblyName="MockDBMS" name="MockSqlConnection" token="2000005" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlConnection" token="2000005" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        public void Open()
        {]]></beforeSource>
<source><![CDATA[            dbms.CreateDatabaseState();]]></source>
<afterSource><![CDATA[        }
    }
}]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(411)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="30" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="411"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        {
            PexAssume.IsTrue(ID == "lw");
            MockSqlConnection myConnection = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");]]></beforeSource>
<source><![CDATA[            myConnection.Open();]]></source>
<afterSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Int32 System.Text.DecoderReplacementFallback.get_MaxCharCount()" declaringTypeDisplayName="System.Text.DecoderReplacementFallback" methodShortDisplayName="DecoderReplacementFallback.get_MaxCharCount()" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="mscorlib" name="get_MaxCharCount" token="60031f9"><declaringType assemblyName="mscorlib" name="DecoderReplacementFallback" token="20004dc" namespace="System.Text"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="DecoderReplacementFallback" token="20004dc" namespace="System.Text"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at UTF8Encoding.GetMaxCharCount(Int32)" method="UTF8Encoding.GetMaxCharCount(Int32)" offset="42"><method assemblyName="mscorlib" name="GetMaxCharCount" token="6003316"><declaringType assemblyName="mscorlib" name="UTF8Encoding" token="20004fb" namespace="System.Text"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="UTF8Encoding" token="20004fb" namespace="System.Text"/>
</type>
</parameter>
<parameter name="byteCount" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at StreamReader.Init(Stream, Encoding, Boolean, Int32)" method="StreamReader.Init(Stream, Encoding, Boolean, Int32)" offset="59"><method assemblyName="mscorlib" name="Init" token="600404f"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="stream" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Stream" token="200069a" namespace="System.IO"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<parameter name="detectEncodingFromByteOrderMarks" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<parameter name="bufferSize" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at StreamReader..ctor(String, Encoding, Boolean, Int32)" method="StreamReader..ctor(String, Encoding, Boolean, Int32)" offset="109"><method assemblyName="mscorlib" name=".ctor" token="6004040"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<parameter name="detectEncodingFromByteOrderMarks" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<parameter name="bufferSize" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at StreamReader..ctor(String, Encoding)" method="StreamReader..ctor(String, Encoding)" offset="9"><method assemblyName="mscorlib" name=".ctor" token="600403e"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="path" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at File.InternalReadAllLines(String, Encoding)" method="File.InternalReadAllLines(String, Encoding)" offset="13"><method assemblyName="mscorlib" name="InternalReadAllLines" static="true" token="6003ee1"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at File.ReadAllLines(String)" method="File.ReadAllLines(String)" offset="38"><method assemblyName="mscorlib" name="ReadAllLines" static="true" token="6003ecf"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at DBMS.readSchemaFromFile() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(41)" method="DBMS.readSchemaFromFile()" offset="17" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="41"><method assemblyName="MockDBMS" name="readSchemaFromFile" token="6000015"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        private void readSchemaFromFile()
        {
            tables = new List<Table>();]]></beforeSource>
<source><![CDATA[            string[] lines = System.IO.File.ReadAllLines(@"C:\schema.txt");]]></source>
<afterSource><![CDATA[            Table table = null;
            foreach (string line in lines)
            {]]></afterSource>
</frame>
<frame value="  at DBMS.initializeDBMSFromSchema() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(120)" method="DBMS.initializeDBMSFromSchema()" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="120"><method assemblyName="MockDBMS" name="initializeDBMSFromSchema" token="6000016"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        private void initializeDBMSFromSchema()
        {]]></beforeSource>
<source><![CDATA[            readSchemaFromFile();]]></source>
<afterSource><![CDATA[            /* tables = new List<Table>(); 
            Table t = new Table("persons");
            t.AddColumn("firstname", DataTypes.STRING);]]></afterSource>
</frame>
<frame value="  at DBMS.CreateDatabaseState() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(147)" method="DBMS.CreateDatabaseState()" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="147"><method assemblyName="MockDBMS" name="CreateDatabaseState" token="6000017"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        public void CreateDatabaseState()
        {
            //MockDBMS dbms = new MockDBMS();]]></beforeSource>
<source><![CDATA[            initializeDBMSFromSchema();]]></source>
<afterSource><![CDATA[             //Test Code

            //FillTestRecords();]]></afterSource>
</frame>
<frame value="  at MockSqlConnection.Open() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs(31)" method="MockSqlConnection.Open()" offset="7" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs" line="31"><method assemblyName="MockDBMS" name="Open" token="6000012"><declaringType assemblyName="MockDBMS" name="MockSqlConnection" token="2000005" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlConnection" token="2000005" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        public void Open()
        {]]></beforeSource>
<source><![CDATA[            dbms.CreateDatabaseState();]]></source>
<afterSource><![CDATA[        }
    }
}]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(411)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="30" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="411"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        {
            PexAssume.IsTrue(ID == "lw");
            MockSqlConnection myConnection = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");]]></beforeSource>
<source><![CDATA[            myConnection.Open();]]></source>
<afterSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented testability="true" methodDisplayName="System.Int32 System.IO.FileStream.Read(System.Byte[] array, System.Int32 offset, System.Int32 count)" declaringTypeDisplayName="System.IO.FileStream" methodShortDisplayName="FileStream.Read(Byte[], Int32, Int32)" wikiTopic="Testability Issue"><method><definition assemblyName="mscorlib" name="Read" token="6003f51"><declaringType assemblyName="mscorlib" name="FileStream" token="20006b8" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="FileStream" token="20006b8" namespace="System.IO"/>
</type>
</parameter>
<parameter name="array" position="1" in="true" out="true"><type spec="SzArray"><elementType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Byte" token="2000098" namespace="System"/>
</elementType>
</type>
</parameter>
<parameter name="offset" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="count" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at StreamReader.ReadBuffer()" method="StreamReader.ReadBuffer()" offset="75"><method assemblyName="mscorlib" name="ReadBuffer" token="600404d"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at StreamReader.ReadLine()" method="StreamReader.ReadLine()" offset="28"><method assemblyName="mscorlib" name="ReadLine" token="600404e"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at File.InternalReadAllLines(String, Encoding)" method="File.InternalReadAllLines(String, Encoding)" offset="23"><method assemblyName="mscorlib" name="InternalReadAllLines" static="true" token="6003ee1"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at File.ReadAllLines(String)" method="File.ReadAllLines(String)" offset="38"><method assemblyName="mscorlib" name="ReadAllLines" static="true" token="6003ecf"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at DBMS.readSchemaFromFile() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(41)" method="DBMS.readSchemaFromFile()" offset="17" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="41"><method assemblyName="MockDBMS" name="readSchemaFromFile" token="6000015"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        private void readSchemaFromFile()
        {
            tables = new List<Table>();]]></beforeSource>
<source><![CDATA[            string[] lines = System.IO.File.ReadAllLines(@"C:\schema.txt");]]></source>
<afterSource><![CDATA[            Table table = null;
            foreach (string line in lines)
            {]]></afterSource>
</frame>
<frame value="  at DBMS.initializeDBMSFromSchema() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(120)" method="DBMS.initializeDBMSFromSchema()" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="120"><method assemblyName="MockDBMS" name="initializeDBMSFromSchema" token="6000016"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        private void initializeDBMSFromSchema()
        {]]></beforeSource>
<source><![CDATA[            readSchemaFromFile();]]></source>
<afterSource><![CDATA[            /* tables = new List<Table>(); 
            Table t = new Table("persons");
            t.AddColumn("firstname", DataTypes.STRING);]]></afterSource>
</frame>
<frame value="  at DBMS.CreateDatabaseState() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(147)" method="DBMS.CreateDatabaseState()" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="147"><method assemblyName="MockDBMS" name="CreateDatabaseState" token="6000017"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        public void CreateDatabaseState()
        {
            //MockDBMS dbms = new MockDBMS();]]></beforeSource>
<source><![CDATA[            initializeDBMSFromSchema();]]></source>
<afterSource><![CDATA[             //Test Code

            //FillTestRecords();]]></afterSource>
</frame>
<frame value="  at MockSqlConnection.Open() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs(31)" method="MockSqlConnection.Open()" offset="7" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs" line="31"><method assemblyName="MockDBMS" name="Open" token="6000012"><declaringType assemblyName="MockDBMS" name="MockSqlConnection" token="2000005" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlConnection" token="2000005" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        public void Open()
        {]]></beforeSource>
<source><![CDATA[            dbms.CreateDatabaseState();]]></source>
<afterSource><![CDATA[        }
    }
}]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(411)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="30" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="411"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        {
            PexAssume.IsTrue(ID == "lw");
            MockSqlConnection myConnection = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");]]></beforeSource>
<source><![CDATA[            myConnection.Open();]]></source>
<afterSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void System.IO.TextReader.Dispose(System.Boolean disposing)" declaringTypeDisplayName="System.IO.TextReader" methodShortDisplayName="TextReader.Dispose(Boolean)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="mscorlib" name="Dispose" token="6004023"><declaringType assemblyName="mscorlib" name="TextReader" token="20006cc" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="TextReader" token="20006cc" namespace="System.IO"/>
</type>
</parameter>
<parameter name="disposing" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at StreamReader.Dispose(Boolean)" method="StreamReader.Dispose(Boolean)" offset="104"><method assemblyName="mscorlib" name="Dispose" token="6004043"><declaringType assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StreamReader" token="20006ce" namespace="System.IO"/>
</type>
</parameter>
<parameter name="disposing" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at TextReader.Dispose()" method="TextReader.Dispose()" offset="7"><method assemblyName="mscorlib" name="Dispose" token="6004022"><declaringType assemblyName="mscorlib" name="TextReader" token="20006cc" namespace="System.IO"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="TextReader" token="20006cc" namespace="System.IO"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at File.InternalReadAllLines(String, Encoding)" method="File.InternalReadAllLines(String, Encoding)" offset="44"><method assemblyName="mscorlib" name="InternalReadAllLines" static="true" token="6003ee1"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="encoding" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Encoding" token="20004c5" namespace="System.Text"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at File.ReadAllLines(String)" method="File.ReadAllLines(String)" offset="38"><method assemblyName="mscorlib" name="ReadAllLines" static="true" token="6003ecf"><declaringType assemblyName="mscorlib" name="File" token="20006af" namespace="System.IO"/>
<parameter name="path" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</elementType>
</resultType>
</method>
</frame>
<frame value="  at DBMS.readSchemaFromFile() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(41)" method="DBMS.readSchemaFromFile()" offset="17" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="41"><method assemblyName="MockDBMS" name="readSchemaFromFile" token="6000015"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        private void readSchemaFromFile()
        {
            tables = new List<Table>();]]></beforeSource>
<source><![CDATA[            string[] lines = System.IO.File.ReadAllLines(@"C:\schema.txt");]]></source>
<afterSource><![CDATA[            Table table = null;
            foreach (string line in lines)
            {]]></afterSource>
</frame>
<frame value="  at DBMS.initializeDBMSFromSchema() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(120)" method="DBMS.initializeDBMSFromSchema()" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="120"><method assemblyName="MockDBMS" name="initializeDBMSFromSchema" token="6000016"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        private void initializeDBMSFromSchema()
        {]]></beforeSource>
<source><![CDATA[            readSchemaFromFile();]]></source>
<afterSource><![CDATA[            /* tables = new List<Table>(); 
            Table t = new Table("persons");
            t.AddColumn("firstname", DataTypes.STRING);]]></afterSource>
</frame>
<frame value="  at DBMS.CreateDatabaseState() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(147)" method="DBMS.CreateDatabaseState()" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="147"><method assemblyName="MockDBMS" name="CreateDatabaseState" token="6000017"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        public void CreateDatabaseState()
        {
            //MockDBMS dbms = new MockDBMS();]]></beforeSource>
<source><![CDATA[            initializeDBMSFromSchema();]]></source>
<afterSource><![CDATA[             //Test Code

            //FillTestRecords();]]></afterSource>
</frame>
<frame value="  at MockSqlConnection.Open() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs(31)" method="MockSqlConnection.Open()" offset="7" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlConnection.cs" line="31"><method assemblyName="MockDBMS" name="Open" token="6000012"><declaringType assemblyName="MockDBMS" name="MockSqlConnection" token="2000005" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlConnection" token="2000005" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        /// </summary>
        public void Open()
        {]]></beforeSource>
<source><![CDATA[            dbms.CreateDatabaseState();]]></source>
<afterSource><![CDATA[        }
    }
}]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(411)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="30" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="411"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[        {
            PexAssume.IsTrue(ID == "lw");
            MockSqlConnection myConnection = new MockSqlConnection("user id=username;password=password;server=serverurl;Trusted_Connection=yes;database=database;connection timeout=30");]]></beforeSource>
<source><![CDATA[            myConnection.Open();]]></source>
<afterSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.75"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.14"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.17"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.12"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.12"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.12"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.12"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.12"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.13"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.12"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.13"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.13"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.16"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.15"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.13"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.13"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.16"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.15"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.14"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.12"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.14"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.13"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.14"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.19"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.14"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.14"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.14"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.15"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.14"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.14"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.14"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.14"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.15"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.15"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.16"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.13"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.15"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.13"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.16"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.13"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.15"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.14"/>
<uninstrumented extern="true" methodDisplayName="System.Int32 System.Globalization.TextInfo.InternalCompareStringOrdinalIgnoreCase(System.String string1, System.Int32 index1, System.String string2, System.Int32 index2, System.Int32 length1, System.Int32 length2)" declaringTypeDisplayName="System.Globalization.TextInfo" methodShortDisplayName="TextInfo.InternalCompareStringOrdinalIgnoreCase(String, Int32, String, Int32, Int32, Int32)" wikiTopic="External Method Called"><method><definition assemblyName="mscorlib" name="InternalCompareStringOrdinalIgnoreCase" static="true" token="6002fb0"><declaringType assemblyName="mscorlib" name="TextInfo" token="20004b2" namespace="System.Globalization"/>
<parameter name="string1" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="index1" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="string2" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="index2" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="length1" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="length2" position="5"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at TextInfo.CompareOrdinalIgnoreCaseEx(String, Int32, String, Int32, Int32, Int32)" method="TextInfo.CompareOrdinalIgnoreCaseEx(String, Int32, String, Int32, Int32, Int32)" offset="13"><method assemblyName="mscorlib" name="CompareOrdinalIgnoreCaseEx" static="true" token="6002f91"><declaringType assemblyName="mscorlib" name="TextInfo" token="20004b2" namespace="System.Globalization"/>
<parameter name="strA" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="indexA" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="strB" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="indexB" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="lengthA" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="lengthB" position="5"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at String.Compare(String, Int32, String, Int32, Int32, StringComparison)" method="String.Compare(String, Int32, String, Int32, Int32, StringComparison)" offset="427"><method assemblyName="mscorlib" name="Compare" static="true" token="60002f3"><declaringType assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
<parameter name="strA" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="indexA" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="strB" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="indexB" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="length" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="comparisonType" position="5"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="StringComparison" token="2000051" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at StringExpressionSet.StringSubsetString(String, String, Boolean)" method="StringExpressionSet.StringSubsetString(String, String, Boolean)" offset="150"><method assemblyName="mscorlib" name="StringSubsetString" token="6003624"><declaringType assemblyName="mscorlib" name="StringExpressionSet" token="200056d" namespace="System.Security.Util"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StringExpressionSet" token="200056d" namespace="System.Security.Util"/>
</type>
</parameter>
<parameter name="left" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="right" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="ignoreCase" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at StringExpressionSet.StringSubsetStringExpression(String, StringExpressionSet, Boolean)" method="StringExpressionSet.StringSubsetStringExpression(String, StringExpressionSet, Boolean)" offset="4"><method assemblyName="mscorlib" name="StringSubsetStringExpression" token="6003622"><declaringType assemblyName="mscorlib" name="StringExpressionSet" token="200056d" namespace="System.Security.Util"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StringExpressionSet" token="200056d" namespace="System.Security.Util"/>
</type>
</parameter>
<parameter name="left" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="right" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="StringExpressionSet" token="200056d" namespace="System.Security.Util"/>
</type>
</parameter>
<parameter name="ignoreCase" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at StringExpressionSet.IsSubsetOf(StringExpressionSet)" method="StringExpressionSet.IsSubsetOf(StringExpressionSet)" offset="39"><method assemblyName="mscorlib" name="IsSubsetOf" token="600361b"><declaringType assemblyName="mscorlib" name="StringExpressionSet" token="200056d" namespace="System.Security.Util"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="StringExpressionSet" token="200056d" namespace="System.Security.Util"/>
</type>
</parameter>
<parameter name="ses" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="StringExpressionSet" token="200056d" namespace="System.Security.Util"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at FileIOAccess.IsSubsetOf(FileIOAccess)" method="FileIOAccess.IsSubsetOf(FileIOAccess)" offset="20"><method assemblyName="mscorlib" name="IsSubsetOf" token="60042bd"><declaringType assemblyName="mscorlib" name="FileIOAccess" token="200073f" namespace="System.Security.Permissions"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="FileIOAccess" token="200073f" namespace="System.Security.Permissions"/>
</type>
</parameter>
<parameter name="operand" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="FileIOAccess" token="200073f" namespace="System.Security.Permissions"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at RuntimeAssembly.IsAssemblyUnderAppBase()" method="RuntimeAssembly.IsAssemblyUnderAppBase()" offset="50"><method assemblyName="mscorlib" name="IsAssemblyUnderAppBase" token="6002475"><declaringType assemblyName="mscorlib" name="RuntimeAssembly" token="20003bd" namespace="System.Reflection"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="RuntimeAssembly" token="20003bd" namespace="System.Reflection"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(57)" method="Factory.CreateStatement(String)" offset="-1" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="57"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.ANTLRStringStream..ctor(System.String input)" declaringTypeDisplayName="Antlr.Runtime.ANTLRStringStream" methodShortDisplayName="ANTLRStringStream..ctor(String)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name=".ctor" token="60001ab"><declaringType assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at CaseInsensitiveStringStream..ctor(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\CaseInsensitiveStringStream.cs(19)" method="CaseInsensitiveStringStream..ctor(String)" offset="7" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\CaseInsensitiveStringStream.cs" line="19"><method assemblyName="MacroScope" name=".ctor" token="6000336"><declaringType assemblyName="MacroScope" name="CaseInsensitiveStringStream" token="200002f" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="CaseInsensitiveStringStream" token="200002f" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at Factory.CreateParser(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(66)" method="Factory.CreateParser(String)" offset="25" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="66"><method assemblyName="MacroScope" name="CreateParser" static="true" token="60003aa"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(55)" method="Factory.CreateStatement(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="55"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.Lexer..ctor(Antlr.Runtime.ICharStream input)" declaringTypeDisplayName="Antlr.Runtime.Lexer" methodShortDisplayName="Lexer..ctor(ICharStream)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name=".ctor" token="600014a"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ICharStream" token="200001f" namespace="Antlr.Runtime"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at MacroScopeLexer..ctor(ICharStream) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(126)" method="MacroScopeLexer..ctor(ICharStream)" offset="7" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="126"><method assemblyName="MacroScope" name=".ctor" token="600024b"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ICharStream" token="200001f" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at Factory.CreateParser(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(66)" method="Factory.CreateParser(String)" offset="30" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="66"><method assemblyName="MacroScope" name="CreateParser" static="true" token="60003aa"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(55)" method="Factory.CreateStatement(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="55"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.DFA..ctor()" declaringTypeDisplayName="Antlr.Runtime.DFA" methodShortDisplayName="DFA..ctor()" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name=".ctor" token="6000320"><declaringType assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at DFA12..ctor(BaseRecognizer) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(6421)" method="DFA12..ctor(BaseRecognizer)" offset="6" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="6421"><method assemblyName="MacroScope" name=".ctor" token="60002b2"><declaringType assemblyName="MacroScope" name="DFA12" token="200001f"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</declaringType>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="DFA12" token="200001f"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</definition>
</type>
</parameter>
<parameter name="recognizer" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="BaseRecognizer" token="2000005" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at MacroScopeLexer.InitializeCyclicDFAs() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(6366)" method="MacroScopeLexer.InitializeCyclicDFAs()" offset="3" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="6366"><method assemblyName="MacroScope" name="InitializeCyclicDFAs" token="60002af"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at MacroScopeLexer..ctor(ICharStream) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(129)" method="MacroScopeLexer..ctor(ICharStream)" offset="10" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="129"><method assemblyName="MacroScope" name=".ctor" token="600024b"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ICharStream" token="200001f" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at Factory.CreateParser(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(66)" method="Factory.CreateParser(String)" offset="30" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="66"><method assemblyName="MacroScope" name="CreateParser" static="true" token="60003aa"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(55)" method="Factory.CreateStatement(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="55"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<log level="message" time="2020-12-01 06:01:44Z" category="symbols" message="could not load symbols for C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\bin\Debug\Antlr3.Runtime.dll"/>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.CommonTokenStream..ctor(Antlr.Runtime.ITokenSource tokenSource)" declaringTypeDisplayName="Antlr.Runtime.CommonTokenStream" methodShortDisplayName="CommonTokenStream..ctor(ITokenSource)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name=".ctor" token="60002a1"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="tokenSource" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ITokenSource" token="2000016" namespace="Antlr.Runtime"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at ArrayList..ctor(Int32)" method="ArrayList..ctor(Int32)" offset="0"><method assemblyName="mscorlib" name=".ctor" token="6006960"><declaringType assemblyName="mscorlib" name="ArrayList" token="20002fc" namespace="System.Collections"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="ArrayList" token="20002fc" namespace="System.Collections"/>
</type>
</parameter>
<parameter position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream..ctor()" method="CommonTokenStream..ctor()" offset="40"><method assemblyName="Antlr3.Runtime" name=".ctor" token="60002a0"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream..ctor(ITokenSource)" method="CommonTokenStream..ctor(ITokenSource)" offset="6"><method assemblyName="Antlr3.Runtime" name=".ctor" token="60002a1"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="tokenSource" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ITokenSource" token="2000016" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at Factory.CreateParser(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(68)" method="Factory.CreateParser(String)" offset="37" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="68"><method assemblyName="MacroScope" name="CreateParser" static="true" token="60003aa"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(55)" method="Factory.CreateStatement(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="55"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.Parser..ctor(Antlr.Runtime.ITokenStream input)" declaringTypeDisplayName="Antlr.Runtime.Parser" methodShortDisplayName="Parser..ctor(ITokenStream)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name=".ctor" token="60002f5"><declaringType assemblyName="Antlr3.Runtime" name="Parser" token="2000042" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Parser" token="2000042" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ITokenStream" token="2000003" namespace="Antlr.Runtime"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at MacroScopeParser..ctor(ITokenStream) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(220)" method="MacroScopeParser..ctor(ITokenStream)" offset="7" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="220"><method assemblyName="MacroScope" name=".ctor" token="6000001"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ITokenStream" token="2000003" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at Factory.CreateParser(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(68)" method="Factory.CreateParser(String)" offset="42" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="68"><method assemblyName="MacroScope" name="CreateParser" static="true" token="60003aa"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(55)" method="Factory.CreateStatement(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="55"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Int32 Antlr.Runtime.CommonTokenStream.LA(System.Int32 i)" declaringTypeDisplayName="Antlr.Runtime.CommonTokenStream" methodShortDisplayName="CommonTokenStream.LA(Int32)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at CaseInsensitiveStringStream.LA(Int32) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\CaseInsensitiveStringStream.cs(23)" method="CaseInsensitiveStringStream.LA(Int32)" offset="0" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\CaseInsensitiveStringStream.cs" line="23"><method assemblyName="MacroScope" name="LA" token="6000337"><declaringType assemblyName="MacroScope" name="CaseInsensitiveStringStream" token="200002f" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="CaseInsensitiveStringStream" token="200002f" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at Lexer.NextToken()" method="Lexer.NextToken()" offset="79"><method assemblyName="Antlr3.Runtime" name="NextToken" token="6000153"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.FillBuffer()" method="CommonTokenStream.FillBuffer()" offset="3"><method assemblyName="Antlr3.Runtime" name="FillBuffer" token="60002b2"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="24"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(260)" method="MacroScopeParser.statement()" offset="23" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="260"><method assemblyName="MacroScope" name="statement" token="6000004"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.Lexer.Match(System.String s)" declaringTypeDisplayName="Antlr.Runtime.Lexer" methodShortDisplayName="Lexer.Match(String)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="Match" token="6000158"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="s" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at CaseInsensitiveStringStream.LA(Int32) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\CaseInsensitiveStringStream.cs(23)" method="CaseInsensitiveStringStream.LA(Int32)" offset="0" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\CaseInsensitiveStringStream.cs" line="23"><method assemblyName="MacroScope" name="LA" token="6000337"><declaringType assemblyName="MacroScope" name="CaseInsensitiveStringStream" token="200002f" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="CaseInsensitiveStringStream" token="200002f" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at Lexer.Match(String)" method="Lexer.Match(String)" offset="6"><method assemblyName="Antlr3.Runtime" name="Match" token="6000158"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="s" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at MacroScopeLexer.mSELECT() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(1137)" method="MacroScopeLexer.mSELECT()" offset="12" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="1137"><method assemblyName="MacroScope" name="mSELECT" token="600027a"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at MacroScopeLexer.mTokens() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(5994)" method="MacroScopeLexer.mTokens()" offset="13814" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="5994"><method assemblyName="MacroScope" name="mTokens" token="60002ac"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at Lexer.NextToken()" method="Lexer.NextToken()" offset="117"><method assemblyName="Antlr3.Runtime" name="NextToken" token="6000153"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.FillBuffer()" method="CommonTokenStream.FillBuffer()" offset="3"><method assemblyName="Antlr3.Runtime" name="FillBuffer" token="60002b2"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="24"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(260)" method="MacroScopeParser.statement()" offset="23" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="260"><method assemblyName="MacroScope" name="statement" token="6000004"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.ANTLRStringStream.Consume()" declaringTypeDisplayName="Antlr.Runtime.ANTLRStringStream" methodShortDisplayName="ANTLRStringStream.Consume()" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="Consume" token="60001b2"><declaringType assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at MacroScopeLexer.mWhitespace() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(3286)" method="MacroScopeLexer.mWhitespace()" offset="157" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="3286"><method assemblyName="MacroScope" name="mWhitespace" token="60002ab"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at MacroScopeLexer.mTokens() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(6274)" method="MacroScopeLexer.mTokens()" offset="15150" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="6274"><method assemblyName="MacroScope" name="mTokens" token="60002ac"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at Lexer.NextToken()" method="Lexer.NextToken()" offset="117"><method assemblyName="Antlr3.Runtime" name="NextToken" token="6000153"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.FillBuffer()" method="CommonTokenStream.FillBuffer()" offset="209"><method assemblyName="Antlr3.Runtime" name="FillBuffer" token="60002b2"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="24"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(260)" method="MacroScopeParser.statement()" offset="23" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="260"><method assemblyName="MacroScope" name="statement" token="6000004"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.Lexer.MatchRange(System.Int32 a, System.Int32 b)" declaringTypeDisplayName="Antlr.Runtime.Lexer" methodShortDisplayName="Lexer.MatchRange(Int32, Int32)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="MatchRange" token="600015b"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="a" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="b" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at CaseInsensitiveStringStream.LA(Int32) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\CaseInsensitiveStringStream.cs(23)" method="CaseInsensitiveStringStream.LA(Int32)" offset="0" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\CaseInsensitiveStringStream.cs" line="23"><method assemblyName="MacroScope" name="LA" token="6000337"><declaringType assemblyName="MacroScope" name="CaseInsensitiveStringStream" token="200002f" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="CaseInsensitiveStringStream" token="200002f" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at Lexer.MatchRange(Int32, Int32)" method="Lexer.MatchRange(Int32, Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="MatchRange" token="600015b"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="a" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="b" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at MacroScopeLexer.mLetter() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(1784)" method="MacroScopeLexer.mLetter()" offset="8" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="1784"><method assemblyName="MacroScope" name="mLetter" token="6000298"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at MacroScopeLexer.mNonQuotedIdentifier() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(2442)" method="MacroScopeLexer.mNonQuotedIdentifier()" offset="7" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="2442"><method assemblyName="MacroScope" name="mNonQuotedIdentifier" token="60002a1"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at MacroScopeLexer.mTokens() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(6225)" method="MacroScopeLexer.mTokens()" offset="14936" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="6225"><method assemblyName="MacroScope" name="mTokens" token="60002ac"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at Lexer.NextToken()" method="Lexer.NextToken()" offset="117"><method assemblyName="Antlr3.Runtime" name="NextToken" token="6000153"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.FillBuffer()" method="CommonTokenStream.FillBuffer()" offset="209"><method assemblyName="Antlr3.Runtime" name="FillBuffer" token="60002b2"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="24"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(260)" method="MacroScopeParser.statement()" offset="23" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="260"><method assemblyName="MacroScope" name="statement" token="6000004"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.Lexer.Match(System.Int32 c)" declaringTypeDisplayName="Antlr.Runtime.Lexer" methodShortDisplayName="Lexer.Match(Int32)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="Match" token="600015a"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="c" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at CaseInsensitiveStringStream.LA(Int32) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\CaseInsensitiveStringStream.cs(23)" method="CaseInsensitiveStringStream.LA(Int32)" offset="0" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\CaseInsensitiveStringStream.cs" line="23"><method assemblyName="MacroScope" name="LA" token="6000337"><declaringType assemblyName="MacroScope" name="CaseInsensitiveStringStream" token="200002f" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="CaseInsensitiveStringStream" token="200002f" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at Lexer.Match(Int32)" method="Lexer.Match(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="Match" token="600015a"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="c" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at MacroScopeLexer.mDOT() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(1423)" method="MacroScopeLexer.mDOT()" offset="9" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="1423"><method assemblyName="MacroScope" name="mDOT" token="6000287"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at MacroScopeLexer.mTokens() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(6085)" method="MacroScopeLexer.mTokens()" offset="14256" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="6085"><method assemblyName="MacroScope" name="mTokens" token="60002ac"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at Lexer.NextToken()" method="Lexer.NextToken()" offset="117"><method assemblyName="Antlr3.Runtime" name="NextToken" token="6000153"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.FillBuffer()" method="CommonTokenStream.FillBuffer()" offset="209"><method assemblyName="Antlr3.Runtime" name="FillBuffer" token="60002b2"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="24"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(260)" method="MacroScopeParser.statement()" offset="23" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="260"><method assemblyName="MacroScope" name="statement" token="6000004"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Int32 Antlr.Runtime.DFA.Predict(Antlr.Runtime.IIntStream input)" declaringTypeDisplayName="Antlr.Runtime.DFA" methodShortDisplayName="DFA.Predict(IIntStream)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="Predict" token="600031a"><declaringType assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at ArrayList..ctor()" method="ArrayList..ctor()" offset="0"><method assemblyName="mscorlib" name=".ctor" token="600695f"><declaringType assemblyName="mscorlib" name="ArrayList" token="20002fc" namespace="System.Collections"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="ArrayList" token="20002fc" namespace="System.Collections"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at ANTLRStringStream.Mark()" method="ANTLRStringStream.Mark()" offset="24"><method assemblyName="Antlr3.Runtime" name="Mark" token="60001b7"><declaringType assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at DFA.Predict(IIntStream)" method="DFA.Predict(IIntStream)" offset="1"><method assemblyName="Antlr3.Runtime" name="Predict" token="600031a"><declaringType assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeLexer.mNumber() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(2035)" method="MacroScopeLexer.mNumber()" offset="19" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="2035"><method assemblyName="MacroScope" name="mNumber" token="600029f"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at MacroScopeLexer.mTokens() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(6218)" method="MacroScopeLexer.mTokens()" offset="14902" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="6218"><method assemblyName="MacroScope" name="mTokens" token="60002ac"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at Lexer.NextToken()" method="Lexer.NextToken()" offset="117"><method assemblyName="Antlr3.Runtime" name="NextToken" token="6000153"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.FillBuffer()" method="CommonTokenStream.FillBuffer()" offset="209"><method assemblyName="Antlr3.Runtime" name="FillBuffer" token="60002b2"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="24"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(260)" method="MacroScopeParser.statement()" offset="23" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="260"><method assemblyName="MacroScope" name="statement" token="6000004"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Int32 Antlr.Runtime.ANTLRStringStream.Index()" declaringTypeDisplayName="Antlr.Runtime.ANTLRStringStream" methodShortDisplayName="ANTLRStringStream.Index()" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="Index" token="60001b5"><declaringType assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at MacroScopeLexer.DFA12_SpecialStateTransition(DFA, Int32, IIntStream) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(6452)" method="MacroScopeLexer.DFA12_SpecialStateTransition(DFA, Int32, IIntStream)" offset="35" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="6452"><method assemblyName="MacroScope" name="DFA12_SpecialStateTransition" token="60002b0"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="dfa" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="s" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="input" position="3"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at DFA.Predict(IIntStream)" method="DFA.Predict(IIntStream)" offset="47"><method assemblyName="Antlr3.Runtime" name="Predict" token="600031a"><declaringType assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeLexer.mNumber() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(2035)" method="MacroScopeLexer.mNumber()" offset="19" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="2035"><method assemblyName="MacroScope" name="mNumber" token="600029f"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at MacroScopeLexer.mTokens() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(6218)" method="MacroScopeLexer.mTokens()" offset="14902" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="6218"><method assemblyName="MacroScope" name="mTokens" token="60002ac"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at Lexer.NextToken()" method="Lexer.NextToken()" offset="117"><method assemblyName="Antlr3.Runtime" name="NextToken" token="6000153"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.FillBuffer()" method="CommonTokenStream.FillBuffer()" offset="209"><method assemblyName="Antlr3.Runtime" name="FillBuffer" token="60002b2"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="24"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(260)" method="MacroScopeParser.statement()" offset="23" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="260"><method assemblyName="MacroScope" name="statement" token="6000004"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.ANTLRStringStream.Rewind()" declaringTypeDisplayName="Antlr.Runtime.ANTLRStringStream" methodShortDisplayName="ANTLRStringStream.Rewind()" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="Rewind" token="60001b9"><declaringType assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at ArrayList.get_Item(Int32)" method="ArrayList.get_Item(Int32)" offset="0"><method assemblyName="mscorlib" name="get_Item" token="6001d7f"><declaringType assemblyName="mscorlib" name="ArrayList" token="20002fc" namespace="System.Collections"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="ArrayList" token="20002fc" namespace="System.Collections"/>
</type>
</parameter>
<parameter name="index" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at ANTLRStringStream.Rewind(Int32)" method="ANTLRStringStream.Rewind(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="Rewind" token="60001b8"><declaringType assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="m" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at ANTLRStringStream.Rewind()" method="ANTLRStringStream.Rewind()" offset="13"><method assemblyName="Antlr3.Runtime" name="Rewind" token="60001b9"><declaringType assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at MacroScopeLexer.DFA12_SpecialStateTransition(DFA, Int32, IIntStream) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(6453)" method="MacroScopeLexer.DFA12_SpecialStateTransition(DFA, Int32, IIntStream)" offset="42" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="6453"><method assemblyName="MacroScope" name="DFA12_SpecialStateTransition" token="60002b0"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="dfa" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="s" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="input" position="3"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at DFA.Predict(IIntStream)" method="DFA.Predict(IIntStream)" offset="47"><method assemblyName="Antlr3.Runtime" name="Predict" token="600031a"><declaringType assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeLexer.mNumber() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(2035)" method="MacroScopeLexer.mNumber()" offset="19" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="2035"><method assemblyName="MacroScope" name="mNumber" token="600029f"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at MacroScopeLexer.mTokens() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(6218)" method="MacroScopeLexer.mTokens()" offset="14902" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="6218"><method assemblyName="MacroScope" name="mTokens" token="60002ac"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at Lexer.NextToken()" method="Lexer.NextToken()" offset="117"><method assemblyName="Antlr3.Runtime" name="NextToken" token="6000153"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.FillBuffer()" method="CommonTokenStream.FillBuffer()" offset="209"><method assemblyName="Antlr3.Runtime" name="FillBuffer" token="60002b2"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="24"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(260)" method="MacroScopeParser.statement()" offset="23" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="260"><method assemblyName="MacroScope" name="statement" token="6000004"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.ANTLRStringStream.Seek(System.Int32 index)" declaringTypeDisplayName="Antlr.Runtime.ANTLRStringStream" methodShortDisplayName="ANTLRStringStream.Seek(Int32)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="Seek" token="60001bb"><declaringType assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ANTLRStringStream" token="2000020" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="index" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at MacroScopeLexer.DFA12_SpecialStateTransition(DFA, Int32, IIntStream) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(6464)" method="MacroScopeLexer.DFA12_SpecialStateTransition(DFA, Int32, IIntStream)" offset="142" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="6464"><method assemblyName="MacroScope" name="DFA12_SpecialStateTransition" token="60002b0"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="dfa" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="s" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="input" position="3"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at DFA.Predict(IIntStream)" method="DFA.Predict(IIntStream)" offset="47"><method assemblyName="Antlr3.Runtime" name="Predict" token="600031a"><declaringType assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeLexer.mNumber() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(2035)" method="MacroScopeLexer.mNumber()" offset="19" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="2035"><method assemblyName="MacroScope" name="mNumber" token="600029f"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at MacroScopeLexer.mTokens() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(6218)" method="MacroScopeLexer.mTokens()" offset="14902" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="6218"><method assemblyName="MacroScope" name="mTokens" token="60002ac"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at Lexer.NextToken()" method="Lexer.NextToken()" offset="117"><method assemblyName="Antlr3.Runtime" name="NextToken" token="6000153"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.FillBuffer()" method="CommonTokenStream.FillBuffer()" offset="209"><method assemblyName="Antlr3.Runtime" name="FillBuffer" token="60002b2"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="24"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(260)" method="MacroScopeParser.statement()" offset="23" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="260"><method assemblyName="MacroScope" name="statement" token="6000004"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.BaseRecognizer.PushFollow(Antlr.Runtime.BitSet fset)" declaringTypeDisplayName="Antlr.Runtime.BaseRecognizer" methodShortDisplayName="BaseRecognizer.PushFollow(BitSet)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="PushFollow" token="600002d"><declaringType assemblyName="Antlr3.Runtime" name="BaseRecognizer" token="2000005" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="BaseRecognizer" token="2000005" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="fset" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="BitSet" token="200001e" namespace="Antlr.Runtime"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at MacroScopeParser.statement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(311)" method="MacroScopeParser.statement()" offset="339" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="311"><method assemblyName="MacroScope" name="statement" token="6000004"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.BaseRecognizer.Match(Antlr.Runtime.IIntStream input, System.Int32 ttype, Antlr.Runtime.BitSet follow)" declaringTypeDisplayName="Antlr.Runtime.BaseRecognizer" methodShortDisplayName="BaseRecognizer.Match(IIntStream, Int32, BitSet)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="Match" token="6000019"><declaringType assemblyName="Antlr3.Runtime" name="BaseRecognizer" token="2000005" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="BaseRecognizer" token="2000005" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="ttype" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="follow" position="3"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="BitSet" token="200001e" namespace="Antlr.Runtime"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at ArrayList.get_Count()" method="ArrayList.get_Count()" offset="0"><method assemblyName="mscorlib" name="get_Count" token="6001d7a"><declaringType assemblyName="mscorlib" name="ArrayList" token="20002fc" namespace="System.Collections"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="ArrayList" token="20002fc" namespace="System.Collections"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="68"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at BaseRecognizer.Match(IIntStream, Int32, BitSet)" method="BaseRecognizer.Match(IIntStream, Int32, BitSet)" offset="1"><method assemblyName="Antlr3.Runtime" name="Match" token="6000019"><declaringType assemblyName="Antlr3.Runtime" name="BaseRecognizer" token="2000005" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="BaseRecognizer" token="2000005" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="ttype" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="follow" position="3"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="BitSet" token="200001e" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at MacroScopeParser.selectClause() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1369)" method="MacroScopeParser.selectClause()" offset="23" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1369"><method assemblyName="MacroScope" name="selectClause" token="6000011"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.querySpecification() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1225)" method="MacroScopeParser.querySpecification()" offset="30" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1225"><method assemblyName="MacroScope" name="querySpecification" token="6000010"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.subQueryExpression() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1163)" method="MacroScopeParser.subQueryExpression()" offset="158" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1163"><method assemblyName="MacroScope" name="subQueryExpression" token="600000f"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.queryExpression() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1034)" method="MacroScopeParser.queryExpression()" offset="24" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1034"><method assemblyName="MacroScope" name="queryExpression" token="600000e"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.selectStatement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(473)" method="MacroScopeParser.selectStatement()" offset="20" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="473"><method assemblyName="MacroScope" name="selectStatement" token="6000006"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="SelectStatement" token="2000022" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(312)" method="MacroScopeParser.statement()" offset="341" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="312"><method assemblyName="MacroScope" name="statement" token="6000004"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Int32 Antlr.Runtime.CommonTokenStream.Index()" declaringTypeDisplayName="Antlr.Runtime.CommonTokenStream" methodShortDisplayName="CommonTokenStream.Index()" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="Index" token="60002ac"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at MacroScopeParser.DFA39_SpecialStateTransition(DFA, Int32, IIntStream) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(7235)" method="MacroScopeParser.DFA39_SpecialStateTransition(DFA, Int32, IIntStream)" offset="463" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="7235"><method assemblyName="MacroScope" name="DFA39_SpecialStateTransition" token="6000054"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="dfa" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="s" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="input" position="3"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at DFA.Predict(IIntStream)" method="DFA.Predict(IIntStream)" offset="47"><method assemblyName="Antlr3.Runtime" name="Predict" token="600031a"><declaringType assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.selectItem() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(2905)" method="MacroScopeParser.selectItem()" offset="324" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="2905"><method assemblyName="MacroScope" name="selectItem" token="600001e"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="AliasedItem" token="2000031" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.selectList() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(2791)" method="MacroScopeParser.selectList()" offset="22" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="2791"><method assemblyName="MacroScope" name="selectList" token="600001d"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="AliasedItem" token="2000031" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.selectClause() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1436)" method="MacroScopeParser.selectClause()" offset="488" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1436"><method assemblyName="MacroScope" name="selectClause" token="6000011"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.querySpecification() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1225)" method="MacroScopeParser.querySpecification()" offset="30" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1225"><method assemblyName="MacroScope" name="querySpecification" token="6000010"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.subQueryExpression() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1163)" method="MacroScopeParser.subQueryExpression()" offset="158" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1163"><method assemblyName="MacroScope" name="subQueryExpression" token="600000f"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.queryExpression() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1034)" method="MacroScopeParser.queryExpression()" offset="24" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1034"><method assemblyName="MacroScope" name="queryExpression" token="600000e"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.selectStatement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(473)" method="MacroScopeParser.selectStatement()" offset="20" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="473"><method assemblyName="MacroScope" name="selectStatement" token="6000006"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="SelectStatement" token="2000022" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(312)" method="MacroScopeParser.statement()" offset="341" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="312"><method assemblyName="MacroScope" name="statement" token="6000004"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.CommonTokenStream.Rewind()" declaringTypeDisplayName="Antlr.Runtime.CommonTokenStream" methodShortDisplayName="CommonTokenStream.Rewind()" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="Rewind" token="60002ae"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at MacroScopeParser.DFA39_SpecialStateTransition(DFA, Int32, IIntStream) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(7236)" method="MacroScopeParser.DFA39_SpecialStateTransition(DFA, Int32, IIntStream)" offset="471" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="7236"><method assemblyName="MacroScope" name="DFA39_SpecialStateTransition" token="6000054"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="dfa" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="s" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="input" position="3"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at DFA.Predict(IIntStream)" method="DFA.Predict(IIntStream)" offset="47"><method assemblyName="Antlr3.Runtime" name="Predict" token="600031a"><declaringType assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.selectItem() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(2905)" method="MacroScopeParser.selectItem()" offset="324" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="2905"><method assemblyName="MacroScope" name="selectItem" token="600001e"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="AliasedItem" token="2000031" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.selectList() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(2791)" method="MacroScopeParser.selectList()" offset="22" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="2791"><method assemblyName="MacroScope" name="selectList" token="600001d"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="AliasedItem" token="2000031" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.selectClause() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1436)" method="MacroScopeParser.selectClause()" offset="488" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1436"><method assemblyName="MacroScope" name="selectClause" token="6000011"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.querySpecification() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1225)" method="MacroScopeParser.querySpecification()" offset="30" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1225"><method assemblyName="MacroScope" name="querySpecification" token="6000010"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.subQueryExpression() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1163)" method="MacroScopeParser.subQueryExpression()" offset="158" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1163"><method assemblyName="MacroScope" name="subQueryExpression" token="600000f"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.queryExpression() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1034)" method="MacroScopeParser.queryExpression()" offset="24" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1034"><method assemblyName="MacroScope" name="queryExpression" token="600000e"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.selectStatement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(473)" method="MacroScopeParser.selectStatement()" offset="20" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="473"><method assemblyName="MacroScope" name="selectStatement" token="6000006"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="SelectStatement" token="2000022" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(312)" method="MacroScopeParser.statement()" offset="341" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="312"><method assemblyName="MacroScope" name="statement" token="6000004"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.CommonTokenStream.Seek(System.Int32 index)" declaringTypeDisplayName="Antlr.Runtime.CommonTokenStream" methodShortDisplayName="CommonTokenStream.Seek(Int32)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="Seek" token="60002b0"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="index" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at MacroScopeParser.DFA39_SpecialStateTransition(DFA, Int32, IIntStream) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(7247)" method="MacroScopeParser.DFA39_SpecialStateTransition(DFA, Int32, IIntStream)" offset="677" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="7247"><method assemblyName="MacroScope" name="DFA39_SpecialStateTransition" token="6000054"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="dfa" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="s" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="input" position="3"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at DFA.Predict(IIntStream)" method="DFA.Predict(IIntStream)" offset="47"><method assemblyName="Antlr3.Runtime" name="Predict" token="600031a"><declaringType assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="DFA" token="2000047" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="IIntStream" token="2000002" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.selectItem() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(2905)" method="MacroScopeParser.selectItem()" offset="324" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="2905"><method assemblyName="MacroScope" name="selectItem" token="600001e"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="AliasedItem" token="2000031" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.selectList() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(2791)" method="MacroScopeParser.selectList()" offset="22" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="2791"><method assemblyName="MacroScope" name="selectList" token="600001d"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="AliasedItem" token="2000031" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.selectClause() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1436)" method="MacroScopeParser.selectClause()" offset="488" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1436"><method assemblyName="MacroScope" name="selectClause" token="6000011"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.querySpecification() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1225)" method="MacroScopeParser.querySpecification()" offset="30" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1225"><method assemblyName="MacroScope" name="querySpecification" token="6000010"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.subQueryExpression() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1163)" method="MacroScopeParser.subQueryExpression()" offset="158" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1163"><method assemblyName="MacroScope" name="subQueryExpression" token="600000f"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.queryExpression() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1034)" method="MacroScopeParser.queryExpression()" offset="24" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1034"><method assemblyName="MacroScope" name="queryExpression" token="600000e"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.selectStatement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(473)" method="MacroScopeParser.selectStatement()" offset="20" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="473"><method assemblyName="MacroScope" name="selectStatement" token="6000006"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="SelectStatement" token="2000022" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(312)" method="MacroScopeParser.statement()" offset="341" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="312"><method assemblyName="MacroScope" name="statement" token="6000004"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="Antlr.Runtime.IToken Antlr.Runtime.CommonTokenStream.LT(System.Int32 k)" declaringTypeDisplayName="Antlr.Runtime.CommonTokenStream" methodShortDisplayName="CommonTokenStream.LT(Int32)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at ArrayList.get_Count()" method="ArrayList.get_Count()" offset="0"><method assemblyName="mscorlib" name="get_Count" token="6001d7a"><declaringType assemblyName="mscorlib" name="ArrayList" token="20002fc" namespace="System.Collections"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="ArrayList" token="20002fc" namespace="System.Collections"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="68"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.identifier() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(5822)" method="MacroScopeParser.identifier()" offset="158" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="5822"><method assemblyName="MacroScope" name="identifier" token="6000036"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="Identifier" token="2000039" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.dbObject() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(5575)" method="MacroScopeParser.dbObject()" offset="20" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="5575"><method assemblyName="MacroScope" name="dbObject" token="6000033"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="DbObject" token="2000029" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.subExpression() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(4517)" method="MacroScopeParser.subExpression()" offset="1514" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="4517"><method assemblyName="MacroScope" name="subExpression" token="600002c"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IExpression" token="200000a" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.additiveSubExpression() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(4092)" method="MacroScopeParser.additiveSubExpression()" offset="24" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="4092"><method assemblyName="MacroScope" name="additiveSubExpression" token="600002a"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IExpression" token="200000a" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.expression() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(4008)" method="MacroScopeParser.expression()" offset="24" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="4008"><method assemblyName="MacroScope" name="expression" token="6000029"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IExpression" token="200000a" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.selectItem() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(2955)" method="MacroScopeParser.selectItem()" offset="621" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="2955"><method assemblyName="MacroScope" name="selectItem" token="600001e"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="AliasedItem" token="2000031" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.selectList() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(2791)" method="MacroScopeParser.selectList()" offset="22" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="2791"><method assemblyName="MacroScope" name="selectList" token="600001d"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="AliasedItem" token="2000031" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.selectClause() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1436)" method="MacroScopeParser.selectClause()" offset="488" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1436"><method assemblyName="MacroScope" name="selectClause" token="6000011"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.querySpecification() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1225)" method="MacroScopeParser.querySpecification()" offset="30" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1225"><method assemblyName="MacroScope" name="querySpecification" token="6000010"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.subQueryExpression() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1163)" method="MacroScopeParser.subQueryExpression()" offset="158" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1163"><method assemblyName="MacroScope" name="subQueryExpression" token="600000f"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.queryExpression() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1034)" method="MacroScopeParser.queryExpression()" offset="24" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1034"><method assemblyName="MacroScope" name="queryExpression" token="600000e"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.selectStatement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(473)" method="MacroScopeParser.selectStatement()" offset="20" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="473"><method assemblyName="MacroScope" name="selectStatement" token="6000006"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="SelectStatement" token="2000022" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(312)" method="MacroScopeParser.statement()" offset="341" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="312"><method assemblyName="MacroScope" name="statement" token="6000004"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.String Antlr.Runtime.CommonToken.get_Text()" declaringTypeDisplayName="Antlr.Runtime.CommonToken" methodShortDisplayName="CommonToken.get_Text()" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="get_Text" token="600030e"><declaringType assemblyName="Antlr3.Runtime" name="CommonToken" token="2000043" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonToken" token="2000043" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at MacroScopeParser.identifier() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(5827)" method="MacroScopeParser.identifier()" offset="227" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="5827"><method assemblyName="MacroScope" name="identifier" token="6000036"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="Identifier" token="2000039" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.dbObject() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(5575)" method="MacroScopeParser.dbObject()" offset="20" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="5575"><method assemblyName="MacroScope" name="dbObject" token="6000033"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="DbObject" token="2000029" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.subExpression() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(4517)" method="MacroScopeParser.subExpression()" offset="1514" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="4517"><method assemblyName="MacroScope" name="subExpression" token="600002c"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IExpression" token="200000a" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.additiveSubExpression() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(4092)" method="MacroScopeParser.additiveSubExpression()" offset="24" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="4092"><method assemblyName="MacroScope" name="additiveSubExpression" token="600002a"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IExpression" token="200000a" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.expression() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(4008)" method="MacroScopeParser.expression()" offset="24" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="4008"><method assemblyName="MacroScope" name="expression" token="6000029"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IExpression" token="200000a" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.selectItem() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(2955)" method="MacroScopeParser.selectItem()" offset="621" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="2955"><method assemblyName="MacroScope" name="selectItem" token="600001e"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="AliasedItem" token="2000031" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.selectList() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(2791)" method="MacroScopeParser.selectList()" offset="22" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="2791"><method assemblyName="MacroScope" name="selectList" token="600001d"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="AliasedItem" token="2000031" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.selectClause() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1436)" method="MacroScopeParser.selectClause()" offset="488" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1436"><method assemblyName="MacroScope" name="selectClause" token="6000011"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.querySpecification() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1225)" method="MacroScopeParser.querySpecification()" offset="30" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1225"><method assemblyName="MacroScope" name="querySpecification" token="6000010"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.subQueryExpression() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1163)" method="MacroScopeParser.subQueryExpression()" offset="158" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1163"><method assemblyName="MacroScope" name="subQueryExpression" token="600000f"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.queryExpression() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(1034)" method="MacroScopeParser.queryExpression()" offset="24" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="1034"><method assemblyName="MacroScope" name="queryExpression" token="600000e"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryExpression" token="2000036" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.selectStatement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(473)" method="MacroScopeParser.selectStatement()" offset="20" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="473"><method assemblyName="MacroScope" name="selectStatement" token="6000006"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="SelectStatement" token="2000022" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(312)" method="MacroScopeParser.statement()" offset="341" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="312"><method assemblyName="MacroScope" name="statement" token="6000004"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Int32 System.ParseNumbers.StringToInt(System.String s, System.Int32 radix, System.Int32 flags)" declaringTypeDisplayName="System.ParseNumbers" methodShortDisplayName="ParseNumbers.StringToInt(String, Int32, Int32)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="mscorlib" name="StringToInt" static="true" token="6000e50"><declaringType assemblyName="mscorlib" name="ParseNumbers" token="2000112" namespace="System"/>
<parameter name="s" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="radix" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="flags" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at Convert.ToInt32(String, Int32)" method="Convert.ToInt32(String, Int32)" offset="46"><method assemblyName="mscorlib" name="ToInt32" static="true" token="600676c"><declaringType assemblyName="mscorlib" name="Convert" token="20000b5" namespace="System"/>
<parameter position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.SelectColumnsFromMultipleTables(Dictionary`2&lt;String,List`1&lt;Object[]&gt;&gt;, QueryParts, Dictionary`2&lt;String,Table&gt;) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(317)" method="MockSqlCommand.SelectColumnsFromMultipleTables(Dictionary`2&lt;String,List`1&lt;Object[]&gt;&gt;, QueryParts, Dictionary`2&lt;String,Table&gt;)" offset="570" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="317"><method assemblyName="MockDBMS" name="SelectColumnsFromMultipleTables" token="6000036"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<parameter name="records" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="List`1" token="200033e" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</elementType>
</genericTypeArgument>
</genericTypeArgument>
</type>
</parameter>
<parameter name="parsedQuery" position="2"><type spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="tables" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="MockDBMS" name="Table" token="2000008" namespace="MockDBMS"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="List`1" token="200033e" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</elementType>
</genericTypeArgument>
</resultType>
</method>
<beforeSource><![CDATA[                        int len = tags_arr.Length, new_tag = 0;
                        for (int i = 0; i < len; i++)
                        {]]></beforeSource>
<source><![CDATA[                            new_tag = new_tag | Convert.ToInt32(tags_arr[i], 16);]]></source>
<afterSource><![CDATA[                        }
                        string new_tag_16 = Convert.ToString(new_tag, 16);
                        len = 8 - new_tag_16.Length;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(66)" method="MockSqlCommand.ExecuteReader()" offset="422" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="66"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[                        recordsFromDifferentTables = PerformOperationOnRecords(recordsFromDifferentTables, joinRecords, "AND");//table.PerformOperationOnRecords(records, joinRecords, "AND");
                    }
                    ]]></beforeSource>
<source><![CDATA[                    selectedRecords = SelectColumnsFromMultipleTables(recordsFromDifferentTables, parsedQuery, tables);]]></source>
<afterSource><![CDATA[                    if (parsedQuery.Distinct)
                        selectedRecords = SelectDistinct(selectedRecords);
                }]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented extern="true" methodDisplayName="System.String System.ParseNumbers.IntToString(System.Int32 l, System.Int32 radix, System.Int32 width, System.Char paddingChar, System.Int32 flags)" declaringTypeDisplayName="System.ParseNumbers" methodShortDisplayName="ParseNumbers.IntToString(Int32, Int32, Int32, Char, Int32)" wikiTopic="External Method Called"><method><definition assemblyName="mscorlib" name="IntToString" static="true" token="6000e53"><declaringType assemblyName="mscorlib" name="ParseNumbers" token="2000112" namespace="System"/>
<parameter name="l" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="radix" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="width" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="paddingChar" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Char" token="200009a" namespace="System"/>
</type>
</parameter>
<parameter name="flags" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at Convert.ToString(Int32, Int32)" method="Convert.ToString(Int32, Int32)" offset="45"><method assemblyName="mscorlib" name="ToString" static="true" token="6006772"><declaringType assemblyName="mscorlib" name="Convert" token="20000b5" namespace="System"/>
<parameter position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.SelectColumnsFromMultipleTables(Dictionary`2&lt;String,List`1&lt;Object[]&gt;&gt;, QueryParts, Dictionary`2&lt;String,Table&gt;) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(319)" method="MockSqlCommand.SelectColumnsFromMultipleTables(Dictionary`2&lt;String,List`1&lt;Object[]&gt;&gt;, QueryParts, Dictionary`2&lt;String,Table&gt;)" offset="601" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="319"><method assemblyName="MockDBMS" name="SelectColumnsFromMultipleTables" token="6000036"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<parameter name="records" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="List`1" token="200033e" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</elementType>
</genericTypeArgument>
</genericTypeArgument>
</type>
</parameter>
<parameter name="parsedQuery" position="2"><type spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="tables" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="MockDBMS" name="Table" token="2000008" namespace="MockDBMS"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="List`1" token="200033e" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</elementType>
</genericTypeArgument>
</resultType>
</method>
<beforeSource><![CDATA[                        {
                            new_tag = new_tag | Convert.ToInt32(tags_arr[i], 16);
                        }]]></beforeSource>
<source><![CDATA[                        string new_tag_16 = Convert.ToString(new_tag, 16);]]></source>
<afterSource><![CDATA[                        len = 8 - new_tag_16.Length;
                        for (int i = 0; i < len; i++)
                        {]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(66)" method="MockSqlCommand.ExecuteReader()" offset="422" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="66"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[                        recordsFromDifferentTables = PerformOperationOnRecords(recordsFromDifferentTables, joinRecords, "AND");//table.PerformOperationOnRecords(records, joinRecords, "AND");
                    }
                    ]]></beforeSource>
<source><![CDATA[                    selectedRecords = SelectColumnsFromMultipleTables(recordsFromDifferentTables, parsedQuery, tables);]]></source>
<afterSource><![CDATA[                    if (parsedQuery.Distinct)
                        selectedRecords = SelectDistinct(selectedRecords);
                }]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(415)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="51" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="415"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[
            string query = "select check_in.ID_CARD,roomer_management.ID_CARD from roomer_management,check_in where 1=1";
            MockSqlCommand myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            MockSqlDataReader myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                if (myReader[0].Equals(myReader[2]) && myReader[2].Equals(ID))]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented testability="true" methodDisplayName="System.Void System.Random..ctor()" declaringTypeDisplayName="System.Random" methodShortDisplayName="Random..ctor()" wikiTopic="Testability Issue"><method><definition assemblyName="mscorlib" name=".ctor" token="6000e59"><declaringType assemblyName="mscorlib" name="Random" token="2000115" namespace="System"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="Random" token="2000115" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at Math.Abs(Int32)" method="Math.Abs(Int32)" offset="0"><method assemblyName="mscorlib" name="Abs" static="true" token="6000d8d"><declaringType assemblyName="mscorlib" name="Math" token="20000fb" namespace="System"/>
<parameter name="value" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at Random..ctor(Int32)" method="Random..ctor(Int32)" offset="27"><method assemblyName="mscorlib" name=".ctor" token="6000e5a"><declaringType assemblyName="mscorlib" name="Random" token="2000115" namespace="System"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="Random" token="2000115" namespace="System"/>
</type>
</parameter>
<parameter name="Seed" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at Random..ctor()" method="Random..ctor()" offset="11"><method assemblyName="mscorlib" name=".ctor" token="6000e59"><declaringType assemblyName="mscorlib" name="Random" token="2000115" namespace="System"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="Random" token="2000115" namespace="System"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at DBMS.GenerateRandomNumber(Int32) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(339)" method="DBMS.GenerateRandomNumber(Int32)" offset="9" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="339"><method assemblyName="MockDBMS" name="GenerateRandomNumber" static="true" token="600001c"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter name="Length" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[        public static string GenerateRandomNumber(int Length)
        {
            System.Text.StringBuilder newRandom = new System.Text.StringBuilder(9);]]></beforeSource>
<source><![CDATA[            Random rd = new Random();]]></source>
<afterSource><![CDATA[            for (int i = 0; i < Length; i++)
            {
                newRandom.Append(constant[rd.Next(9)]);]]></afterSource>
</frame>
<frame value="  at DBMS.processData(Object, String, String, Boolean) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(349)" method="DBMS.processData(Object, String, String, Boolean)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="349"><method assemblyName="MockDBMS" name="processData" static="true" token="600001d"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter name="x" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</type>
</parameter>
<parameter name="tag" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="query" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="flag" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public static string processData(object x, string tag, string query, bool flag)
        {]]></beforeSource>
<source><![CDATA[            string pwd = GenerateRandomNumber(8);]]></source>
<afterSource><![CDATA[            while(query.Contains(pwd) || taintTags.ContainsKey(pwd))
            {
                pwd = GenerateRandomNumber(8);]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(425)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="145" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="425"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            }

            string sql = "SELECT check_in.ROOM_NAME,roomer_management.Name,check_in.ID_CARD,check_in.STATE,check_in.IN_TIME,check_in.OUT_TIME FROM roomer_management,check_in where check_in.ID_CARD = roomer_management.ID_CARD and roomer_management.ID_CARD LIKE {0}";]]></beforeSource>
<source><![CDATA[            query = String.Format(sql, DBMS.processData(ID, "00000001", sql, true));]]></source>
<afterSource><![CDATA[            myCommand = new MockSqlCommand(query, myConnection);
            myReader = myCommand.ExecuteReader();
            while (myReader.Read())]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented testability="true" methodDisplayName="System.Int32 System.Random.Next(System.Int32 maxValue)" declaringTypeDisplayName="System.Random" methodShortDisplayName="Random.Next(Int32)" wikiTopic="Testability Issue"><method><definition assemblyName="mscorlib" name="Next" token="6000e5f"><declaringType assemblyName="mscorlib" name="Random" token="2000115" namespace="System"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="Random" token="2000115" namespace="System"/>
</type>
</parameter>
<parameter name="maxValue" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at DBMS.GenerateRandomNumber(Int32) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(342)" method="DBMS.GenerateRandomNumber(Int32)" offset="29" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="342"><method assemblyName="MockDBMS" name="GenerateRandomNumber" static="true" token="600001c"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter name="Length" position="0"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[            Random rd = new Random();
            for (int i = 0; i < Length; i++)
            {]]></beforeSource>
<source><![CDATA[                newRandom.Append(constant[rd.Next(9)]);]]></source>
<afterSource><![CDATA[            }
            return newRandom.ToString();
        }]]></afterSource>
</frame>
<frame value="  at DBMS.processData(Object, String, String, Boolean) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs(349)" method="DBMS.processData(Object, String, String, Boolean)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\MockDBMS.cs" line="349"><method assemblyName="MockDBMS" name="processData" static="true" token="600001d"><declaringType assemblyName="MockDBMS" name="DBMS" token="2000007" namespace="MockDBMS"/>
<parameter name="x" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</type>
</parameter>
<parameter name="tag" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="query" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<parameter name="flag" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Boolean" token="2000096" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public static string processData(object x, string tag, string query, bool flag)
        {]]></beforeSource>
<source><![CDATA[            string pwd = GenerateRandomNumber(8);]]></source>
<afterSource><![CDATA[            while(query.Contains(pwd) || taintTags.ContainsKey(pwd))
            {
                pwd = GenerateRandomNumber(8);]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(425)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="145" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="425"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            }

            string sql = "SELECT check_in.ROOM_NAME,roomer_management.Name,check_in.ID_CARD,check_in.STATE,check_in.IN_TIME,check_in.OUT_TIME FROM roomer_management,check_in where check_in.ID_CARD = roomer_management.ID_CARD and roomer_management.ID_CARD LIKE {0}";]]></beforeSource>
<source><![CDATA[            query = String.Format(sql, DBMS.processData(ID, "00000001", sql, true));]]></source>
<afterSource><![CDATA[            myCommand = new MockSqlCommand(query, myConnection);
            myReader = myCommand.ExecuteReader();
            while (myReader.Read())]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Int32 Antlr.Runtime.Lexer.get_CharIndex()" declaringTypeDisplayName="Antlr.Runtime.Lexer" methodShortDisplayName="Lexer.get_CharIndex()" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name="get_CharIndex" token="600014f"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</definition>
</method>
<stackTrace><frame value="  at MacroScopeLexer.mAsciiStringLiteral() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(2926)" method="MacroScopeLexer.mAsciiStringLiteral()" offset="136" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="2926"><method assemblyName="MacroScope" name="mAsciiStringLiteral" token="60002a5"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at MacroScopeLexer.mTokens() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(6246)" method="MacroScopeLexer.mTokens()" offset="15038" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="6246"><method assemblyName="MacroScope" name="mTokens" token="60002ac"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at Lexer.NextToken()" method="Lexer.NextToken()" offset="117"><method assemblyName="Antlr3.Runtime" name="NextToken" token="6000153"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.FillBuffer()" method="CommonTokenStream.FillBuffer()" offset="209"><method assemblyName="Antlr3.Runtime" name="FillBuffer" token="60002b2"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="24"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(260)" method="MacroScopeParser.statement()" offset="23" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="260"><method assemblyName="MacroScope" name="statement" token="6000004"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(427)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="165" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="427"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            string sql = "SELECT check_in.ROOM_NAME,roomer_management.Name,check_in.ID_CARD,check_in.STATE,check_in.IN_TIME,check_in.OUT_TIME FROM roomer_management,check_in where check_in.ID_CARD = roomer_management.ID_CARD and roomer_management.ID_CARD LIKE {0}";
            query = String.Format(sql, DBMS.processData(ID, "00000001", sql, true));
            myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                Console.WriteLine("ROOM_NAME: " + myReader[0]);]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<uninstrumented methodDisplayName="System.Void Antlr.Runtime.CommonToken..ctor(Antlr.Runtime.ICharStream input, System.Int32 type, System.Int32 channel, System.Int32 start, System.Int32 stop)" declaringTypeDisplayName="Antlr.Runtime.CommonToken" methodShortDisplayName="CommonToken..ctor(ICharStream, Int32, Int32, Int32, Int32)" wikiTopic="Uninstrumented Method Called"><method><definition assemblyName="Antlr3.Runtime" name=".ctor" token="60002fd"><declaringType assemblyName="Antlr3.Runtime" name="CommonToken" token="2000043" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonToken" token="2000043" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="input" position="1"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="ICharStream" token="200001f" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="type" position="2"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="channel" position="3"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="start" position="4"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<parameter name="stop" position="5"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
</definition>
</method>
<stackTrace><frame value="  at MacroScopeLexer.mAsciiStringLiteral() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(2928)" method="MacroScopeLexer.mAsciiStringLiteral()" offset="193" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="2928"><method assemblyName="MacroScope" name="mAsciiStringLiteral" token="60002a5"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at MacroScopeLexer.mTokens() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs(6246)" method="MacroScopeLexer.mTokens()" offset="15038" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeLexer.cs" line="6246"><method assemblyName="MacroScope" name="mTokens" token="60002ac"><declaringType assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeLexer" token="200001e" namespace="MacroScope"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at Lexer.NextToken()" method="Lexer.NextToken()" offset="117"><method assemblyName="Antlr3.Runtime" name="NextToken" token="6000153"><declaringType assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="Lexer" token="2000017" namespace="Antlr.Runtime"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.FillBuffer()" method="CommonTokenStream.FillBuffer()" offset="209"><method assemblyName="Antlr3.Runtime" name="FillBuffer" token="60002b2"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
</method>
</frame>
<frame value="  at CommonTokenStream.LT(Int32)" method="CommonTokenStream.LT(Int32)" offset="24"><method assemblyName="Antlr3.Runtime" name="LT" token="60002a3"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="k" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="Antlr3.Runtime" name="IToken" token="2000026" namespace="Antlr.Runtime"/>
</resultType>
</method>
</frame>
<frame value="  at CommonTokenStream.LA(Int32)" method="CommonTokenStream.LA(Int32)" offset="1"><method assemblyName="Antlr3.Runtime" name="LA" token="60002aa"><declaringType assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="Antlr3.Runtime" name="CommonTokenStream" token="200003a" namespace="Antlr.Runtime"/>
</type>
</parameter>
<parameter name="i" position="1"><type spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</type>
</parameter>
<resultType spec="ValueType"><definition assemblyName="mscorlib" valueType="true" name="Int32" token="20000ec" namespace="System"/>
</resultType>
</method>
</frame>
<frame value="  at MacroScopeParser.statement() in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs(260)" method="MacroScopeParser.statement()" offset="23" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\MacroScopeParser.cs" line="260"><method assemblyName="MacroScope" name="statement" token="6000004"><declaringType assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MacroScope" name="MacroScopeParser" token="2000002" namespace="MacroScope"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at Factory.CreateStatement(String) in C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs(56)" method="Factory.CreateStatement(String)" offset="9" file="C:\Documents and Settings\Wei\桌面\moda_cs527\MacroScopeCE\Factory.cs" line="56"><method assemblyName="MacroScope" name="CreateStatement" static="true" token="60003a9"><declaringType assemblyName="MacroScope" name="Factory" token="200003a" namespace="MacroScope"/>
<parameter name="commandText" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="IStatement" token="200000f" namespace="MacroScope"/>
</resultType>
</method>
</frame>
<frame value="  at MockSqlCommand.parseQuery(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1293)" method="MockSqlCommand.parseQuery(String)" offset="2" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1293"><method assemblyName="MockDBMS" name="parseQuery" static="true" token="600003b"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter name="query" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MacroScope" name="QueryParts" token="2000009" namespace="MacroScope"/>
</resultType>
</method>
<beforeSource><![CDATA[                */
        private static QueryParts parseQuery(string query)
        {]]></beforeSource>
<source><![CDATA[            IStatement st = Factory.CreateStatement(query);]]></source>
<afterSource><![CDATA[            IVisitor tailor = Factory.CreateTailor(Factory.MSQLProvider);
            st.Traverse(tailor);
            QueryParts parsed = ((MSqlServerTailor)tailor).queryParts;]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(31)" method="MockSqlCommand.ExecuteReader()" offset="8" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="31"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[
        public MockSqlDataReader ExecuteReader()
        {]]></beforeSource>
<source><![CDATA[            parsedQuery = parseQuery(commandText);]]></source>
<afterSource><![CDATA[            //tempQueryParser(query);
            List<object[]> records = null;
            List<object[]> selectedRecords = new List<object[]>();]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(427)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="165" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="427"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            string sql = "SELECT check_in.ROOM_NAME,roomer_management.Name,check_in.ID_CARD,check_in.STATE,check_in.IN_TIME,check_in.OUT_TIME FROM roomer_management,check_in where check_in.ID_CARD = roomer_management.ID_CARD and roomer_management.ID_CARD LIKE {0}";
            query = String.Format(sql, DBMS.processData(ID, "00000001", sql, true));
            myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                Console.WriteLine("ROOM_NAME: " + myReader[0]);]]></afterSource>
</frame>
</stackTrace>
</uninstrumented>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="2.89638599319187"><console stream="out" mode="memory"><![CDATA[WHERE
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
WHERE
left = check_in right = roomer_management
left = check_in right = roomer_management
]]></console>
</test>
<log level="message" time="2020-12-01 06:01:49Z" category="summaries" message="using summary for Char.ToLower(Char)"/>
<generatedTest id="ce611e98-7e53-4d28-a406-1beec8d8da5a" index="1" run="44" exceptionState="unexpected" status="exception" duplicateOf="6000011" failed="true" generated="true" assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByIDThrowsKeyNotFoundException71" token="6000011"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<rcov name="Block" dcov="465" dtot="1368" acov="465" atot="1368"/>
<rcov name="asserts" dcov="9" dtot="12" acov="9" atot="12"/>
<value name="ID">&quot;lw&quot;</value>
<code><![CDATA[IPexChoiceRecorder choices = PexChoose.Replay.Setup();
choices.DefaultSession
    .At(0, "column ROOM_NAME Record 0", "l")
    .At(1, "column ID_CARD Record 0", "l")
    .At(2, "column IS_PAY Record 0", "l")
    .At(3, "column STATE Record 0", "l")
    .At(4, "column IN_TIME Record 0", "l")
    .At(5, "column OUT_TIME Record 0", "l")
    .At(6, "column PRO1 Record 0", "l")
    .At(7, "column PRO2 Record 0", "l")
    .At(9, "column ROOM_NAME Record 0", "l")
    .At(11, "column KIND Record 0", "l")
    .At(12, "column STATE Record 0", "l")
    .At(13, "column REMARK Record 0", "l")
    .At(14, "column PRO2 Record 0", "l")
    .At(15, "column ID_CARD Record 0", "l")
    .At(16, "column NAME Record 0", "lw")
    .At(17, "column PHONE Record 0", "l")
    .At(18, "column ADDRESS Record 0", "l")
    .At(19, "column STATE Record 0", "l")
    .At(20, "column REMARK Record 0", "l")
    .At(21, "column PRO2 Record 0", "l")
    .At(22, "column userName Record 0", "l")
    .At(23, "column password Record 0", "l")
    .At(24, "column LEVEL Record 0", "l")
    .At(25, "column status Record 0", 
lw
    .At(26, "column PRO2 Record 0", 
lw
this.TestMarketMSShowAllCheckInLogByID("lw");
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Generated;Microsoft.Pex.Framework;Microsoft.VisualStudio.TestTools.UnitTesting;System.Collections.Generic"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(PexTestClass))]
[PexRaisedException(typeof(KeyNotFoundException))]
public void TestMarketMSShowAllCheckInLogByIDThrowsKeyNotFoundException916()
{
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.DefaultSession
        .At(0, "column ROOM_NAME Record 0", "l")
        .At(1, "column ID_CARD Record 0", "l")
        .At(2, "column IS_PAY Record 0", "l")
        .At(3, "column STATE Record 0", "l")
        .At(4, "column IN_TIME Record 0", "l")
        .At(5, "column OUT_TIME Record 0", "l")
        .At(6, "column PRO1 Record 0", "l")
        .At(7, "column PRO2 Record 0", "l")
        .At(9, "column ROOM_NAME Record 0", "l")
        .At(11, "column KIND Record 0", "l")
        .At(12, "column STATE Record 0", "l")
        .At(13, "column REMARK Record 0", "l")
        .At(14, "column PRO2 Record 0", "l")
        .At(15, "column ID_CARD Record 0", "l")
        .At(16, "column NAME Record 0", "lw")
        .At(17, "column PHONE Record 0", "l")
        .At(18, "column ADDRESS Record 0", "l")
        .At(19, "column STATE Record 0", "l")
        .At(20, "column REMARK Record 0", "l")
        .At(21, "column PRO2 Record 0", "l")
        .At(22, "column userName Record 0", "l")
        .At(23, "column password Record 0", "l")
        .At(24, "column LEVEL Record 0", "l")
        .At(25, "column status Record 0", 
lw
        .At(26, "column PRO2 Record 0", 
lw
    this.TestMarketMSShowAllCheckInLogByID("lw");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="TestDBApp" location="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\bin\Debug\TestDBApp.dll"/>
<exceptionChain><exception typeDisplayName="KeyNotFoundException" source="mscorlib"><message><![CDATA[给定关键字不在字典中。]]></message>
<type spec="Class"><definition assemblyName="mscorlib" name="KeyNotFoundException" token="200033c" namespace="System.Collections.Generic"/>
</type>
<stackTrace><frame value="  at Dictionary`2.get_Item(!0)" method="Dictionary`2.get_Item(!0)" offset="30"><method assemblyName="mscorlib" name="get_Item" token="6001f2b"><declaringType assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</declaringType>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="GenericTypeParameter" index="0"/>
<genericTypeArgument spec="GenericTypeParameter" index="1"/>
</type>
</parameter>
<parameter name="key" position="1"><type spec="GenericTypeParameter" index="0"/>
</parameter>
<resultType spec="GenericTypeParameter" index="1"/>
</method>
</frame>
<frame value="  at MockSqlCommand.PerformOperationOnRecords(Dictionary`2&lt;String,List`1&lt;Object[]&gt;&gt;, Dictionary`2&lt;String,List`1&lt;Object[]&gt;&gt;, String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1040)" method="MockSqlCommand.PerformOperationOnRecords(Dictionary`2&lt;String,List`1&lt;Object[]&gt;&gt;, Dictionary`2&lt;String,List`1&lt;Object[]&gt;&gt;, String)" offset="555" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1040"><method assemblyName="MockDBMS" name="PerformOperationOnRecords" token="6000039"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<parameter name="lhsRecords" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="List`1" token="200033e" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</elementType>
</genericTypeArgument>
</genericTypeArgument>
</type>
</parameter>
<parameter name="rhsRecords" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="List`1" token="200033e" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</elementType>
</genericTypeArgument>
</genericTypeArgument>
</type>
</parameter>
<parameter name="op" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="List`1" token="200033e" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</elementType>
</genericTypeArgument>
</genericTypeArgument>
</resultType>
</method>
<beforeSource><![CDATA[                foreach (string tableName in lhsRecords.Keys)
                {
                    lhsRecordsInTable = lhsRecords[tableName];]]></beforeSource>
<source><![CDATA[                    rhsRecordsInTable = rhsRecords[tableName];]]></source>
<afterSource><![CDATA[                    List<object[]> selectedRecordsInTable = new List<object[]>();

                    if (lhsRecordsInTable == null || rhsRecordsInTable == null)]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.getRecordsFrommDifferentTablesWith(Expression, Dictionary`2&lt;String,Table&gt;) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(511)" method="MockSqlCommand.getRecordsFrommDifferentTablesWith(Expression, Dictionary`2&lt;String,Table&gt;)" offset="1564" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="511"><method assemblyName="MockDBMS" name="getRecordsFrommDifferentTablesWith" token="6000037"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<parameter name="condition" position="1"><type spec="Class"><definition assemblyName="MacroScope" name="Expression" token="2000032" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="tables" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="MockDBMS" name="Table" token="2000008" namespace="MockDBMS"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="List`1" token="200033e" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</elementType>
</genericTypeArgument>
</genericTypeArgument>
</resultType>
</method>
<beforeSource><![CDATA[                lhsRecords = getRecordsFrommDifferentTablesWith(lhs, tables);
                PexAssert.IsNotNull(rhs.Operator);
                rhsRecords = getRecordsFrommDifferentTablesWith(rhs, tables);]]></beforeSource>
<source><![CDATA[                resultSet = PerformOperationOnRecords(lhsRecords, rhsRecords, op);]]></source>
<afterSource><![CDATA[            }
            else if (op.Equals("LIKE"))
            {]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(59)" method="MockSqlCommand.ExecuteReader()" offset="344" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="59"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[                        tables.Add(tableName, table);
                    }
                    Dictionary<string, List<object[]>> recordsFromDifferentTables = new Dictionary<string, List<object[]>>();]]></beforeSource>
<source><![CDATA[                    recordsFromDifferentTables = getRecordsFrommDifferentTablesWith(parsedQuery.whereCondition, tables);]]></source>
<afterSource><![CDATA[                    if (parsedQuery.joinCondition != null)
                    {
                        Dictionary<string, List<object[]>> joinRecords = getRecordsFrommDifferentTablesWith(parsedQuery.joinCondition, tables);]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(427)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="165" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="427"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            string sql = "SELECT check_in.ROOM_NAME,roomer_management.Name,check_in.ID_CARD,check_in.STATE,check_in.IN_TIME,check_in.OUT_TIME FROM roomer_management,check_in where check_in.ID_CARD = roomer_management.ID_CARD and roomer_management.ID_CARD LIKE {0}";
            query = String.Format(sql, DBMS.processData(ID, "00000001", sql, true));
            myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                Console.WriteLine("ROOM_NAME: " + myReader[0]);]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[byte[] s1 = new;
uint s0 = &(sbyte[]).$Items + s1 + unchecked(0);
uint s2 = &(short[]).$Items + s1 + unchecked(0);
return ID != (string)null && s0 < 4294966616u && s2 < 4294965246u && 2u + s2 < 1346u + s2 && (4294967293u | 2u ^ 2u + s0) != uint.MaxValue && 
                                                                                             8u + s2 < 1346u + s2 && 24u + s2 < 1346u + s2 && 40u + s2 < 1346u + s2 && 56u + s2 < 1346u + s2 && 72u + s2 < 1346u + s2 && 88u + s2 < 1346u + s2 && 104u + s2 < 1346u + s2 && 
                                                                                                                                                                                                                                                  120u + s2 < 1346u + s2 && 136u + s2 < 1346u + s2 && 152u + s2 < 1346u + s2 && 168u + s2 < 1346u + s2 && 184u + s2 < 1346u + s2 && 200u + s2 < 1346u + s2 && 216u + s2 < 1346u + s2 && 
                                                                                                                                                                                                                                                                                                                                                                                                              232u + s2 < 1346u + s2 && 248u + s2 < 1346u + s2 && 264u + s2 < 1346u + s2 && 280u + s2 < 1346u + s2 && 296u + s2 < 1346u + s2 && 312u + s2 < 1346u + s2 && 328u + s2 < 1346u + s2 && 
u + s2 < 1346u + s2 && 360u + s2 < 1346u + s2 && 376u + s2 < 1346u + s2 && 392u + s2 < 1346u + s2 && 408u + s2 < 1346u + s2 && 424u + s2 < 1346u + s2 && 440u + s2 < 1346u + s2 && 
u + s2 < 1346u + s2 && 472u + s2 < 1346u + s2 && 488u + s2 < 1346u + s2 && 504u + s2 < 1346u + s2 && 520u + s2 < 1346u + s2 && 536u + s2 < 1346u + s2 && 552u + s2 < 1346u + s2 && 
u + s2 < 1346u + s2 && 584u + s2 < 1346u + s2 && 600u + s2 < 1346u + s2 && 616u + s2 < 1346u + s2 && 632u + s2 < 1346u + s2 && 648u + s2 < 1346u + s2 && 664u + s2 < 1346u + s2 && 
u + s2 < 1346u + s2 && 696u + s2 < 1346u + s2 && 712u + s2 < 1346u + s2 && 728u + s2 < 1346u + s2 && 744u + s2 < 1346u + s2 && 760u + s2 < 1346u + s2 && 776u + s2 < 1346u + s2 && 
u + s2 < 1346u + s2 && 808u + s2 < 1346u + s2 && 824u + s2 < 1346u + s2 && 840u + s2 < 1346u + s2 && 856u + s2 < 1346u + s2 && 872u + s2 < 1346u + s2 && 888u + s2 < 1346u + s2 && 
u + s2 < 1346u + s2 && 920u + s2 < 1346u + s2 && 936u + s2 < 1346u + s2 && 952u + s2 < 1346u + s2 && 968u + s2 < 1346u + s2 && 984u + s2 < 1346u + s2 && 1000u + s2 < 1346u + s2 && 
u + s2 < 1346u + s2 && 1032u + s2 < 1346u + s2 && 1048u + s2 < 1346u + s2 && 1064u + s2 < 1346u + s2 && 1080u + s2 < 1346u + s2 && 1096u + s2 < 1346u + s2 && 1112u + s2 < 1346u + s2 && 
u + s2 < 1346u + s2 && 1144u + s2 < 1346u + s2 && 1160u + s2 < 1346u + s2 && 1176u + s2 < 1346u + s2 && 1192u + s2 < 1346u + s2 && 1208u + s2 < 1346u + s2 && 1224u + s2 < 1346u + s2 && 
u + s2 < 1346u + s2 && 1256u + s2 < 1346u + s2 && 1272u + s2 < 1346u + s2 && 1288u + s2 < 1346u + s2 && 1304u + s2 < 1346u + s2 && 1320u + s2 < 1346u + s2 && 1336u + s2 < 1346u + s2 && 
u + s0 < 680u + s0 && 1352u + s2 < 2050u + s2 && 677u + s0 < 680u + s0 && 678u + s0 < 680u + s0 && 679u + s0 < 680u + s0 && choiceof(default, 0, column ROOM_NAME Record 0) != (string)null && 
choiceof(default, 0, column ROOM_NAME Record 0).Length != 0 && choiceof(default, 0, column ID_CARD Record 0) != (string)null && choiceof(default, 0, column ID_CARD Record 0).Length != 0 && 
choiceof(default, 0, column IS_PAY Record 0) != (string)null && choiceof(default, 0, column IS_PAY Record 0).Length != 0 && choiceof(default, 0, column STATE Record 0) != (string)null && 
choiceof(default, 0, column STATE Record 0).Length != 0 && choiceof(default, 0, column IN_TIME Record 0) != (string)null && choiceof(default, 0, column IN_TIME Record 0).Length != 0 && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               choiceof(default, 0, column OUT_TIME Record 0) != (string)null && choiceof(default, 0, column OUT_TIME Record 0).Length != 0 && choiceof(default, 0, column PRO1 Record 0) != (string)null && 
choiceof(default, 0, column PRO1 Record 0).Length != 0 && choiceof(default, 0, column PRO2 Record 0) != (string)null && choiceof(default, 0, column PRO2 Record 0).Length != 0 && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       choiceof(default, 1, column ROOM_NAME Record 0) != (string)null && choiceof(default, 1, column ROOM_NAME Record 0).Length != 0 && choiceof(default, 0, column KIND Record 0) != (string)null && 
choiceof(default, 0, column KIND Record 0).Length != 0 && choiceof(default, 1, column STATE Record 0) != (string)null && choiceof(default, 1, column STATE Record 0).Length != 0 && 
choiceof(default, 0, column REMARK Record 0) != (string)null && choiceof(default, 0, column REMARK Record 0).Length != 0 && choiceof(default, 1, column PRO2 Record 0) != (string)null && 
choiceof(default, 1, column PRO2 Record 0).Length != 0 && choiceof(default, 1, column ID_CARD Record 0) != (string)null && choiceof(default, 1, column ID_CARD Record 0).Length != 0 && 
choiceof(default, 0, column NAME Record 0) != (string)null && choiceof(default, 0, column NAME Record 0).Length != 0 && choiceof(default, 0, column PHONE Record 0) != (string)null && 
choiceof(default, 0, column PHONE Record 0).Length != 0 && choiceof(default, 0, column ADDRESS Record 0) != (string)null && choiceof(default, 0, column ADDRESS Record 0).Length != 0 && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             choiceof(default, 2, column STATE Record 0) != (string)null && choiceof(default, 2, column STATE Record 0).Length != 0 && choiceof(default, 1, column REMARK Record 0) != (string)null && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       choiceof(default, 1, column REMARK Record 0).Length != 0 && choiceof(default, 2, column PRO2 Record 0) != (string)null && choiceof(default, 2, column PRO2 Record 0).Length != 0 && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 choiceof(default, 0, column userName Record 0) != (string)null && choiceof(default, 0, column userName Record 0).Length != 0 && choiceof(default, 0, column password Record 0) != (string)null && 
choiceof(default, 0, column password Record 0).Length != 0 && choiceof(default, 0, column LEVEL Record 0) != (string)null && choiceof(default, 0, column LEVEL Record 0).Length != 0 && 
choiceof(default, 0, column status Record 0) != (string)null && choiceof(default, 0, column status Record 0).Length != 0 && choiceof(default, 3, column PRO2 Record 0) != (string)null && 
choiceof(default, 3, column PRO2 Record 0).Length != 0 && (choiceof(default, 0, column ID_CARD Record 0) == choiceof(default, 1, column ID_CARD Record 0) || 
choiceof(default, 0, column ID_CARD Record 0).Length == choiceof(default, 1, column ID_CARD Record 0).Length && 
choiceof(default, 0, column ID_CARD Record 0).op_Equality((object)choiceof(default, 1, column ID_CARD Record 0)) != (sbyte)0) && 
ength == 2 && ID[0] == 'l' && ID[1] == 'w' && (4294967294u | 1u ^ 2u + s0) == uint.MaxValue && 1352u + s2 >= 1346u + s2;
]]></pathCondition>
</generatedTest>
<log level="message" time="2020-12-01 06:01:51Z" category="coverage" message="coverage increased from 0 to 465 blocks (+465) after flipping Microsoft.Pex.Framework.PexAssume.IsNotNull at 0x0001"/>
<log level="message" time="2020-12-01 06:01:51Z" category="progress" message="   44 runs, 465/1368 blocks covered"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.63"><console stream="out" mode="memory"><![CDATA[WHERE
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
WHERE
left = check_in right = roomer_management
left = check_in right = roomer_management
]]></console>
</test>
<generatedTest id="802e88d5-9b04-4d82-a9b4-a22bc0a884bd" index="2" run="45" exceptionState="unexpected" status="exception" duplicateOf="6000012" failed="true" generated="true" assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByIDThrowsKeyNotFoundException761" token="6000012"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<rcov name="Block" dcov="0" dtot="0" acov="465" atot="1368"/>
<rcov name="asserts" dcov="0" dtot="0" acov="9" atot="12"/>
<value name="ID">&quot;lw&quot;</value>
<code><![CDATA[IPexChoiceRecorder choices = PexChoose.Replay.Setup();
choices.DefaultSession
    .At(0, "column ROOM_NAME Record 0", "l")
    .At(1, "column ID_CARD Record 0", 
                                                               "lw
    .At(2, "column IS_PAY Record 0", "l")
    .At(3, "column STATE Record 0", "l")
    .At(4, "column IN_TIME Record 0", "l")
    .At(5, "column OUT_TIME Record 0", 
lw\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0")
    .At(6, "column PRO1 Record 0", 
lw\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0")
    .At(7, "column PRO2 Record 0", "l")
    .At(9, "column ROOM_NAME Record 0", "l")
    .At(11, "column KIND Record 0", "l")
    .At(12, "column STATE Record 0", "l")
    .At(13, "column REMARK Record 0", "l")
    .At(14, "column PRO2 Record 0", "l")
    .At(15, "column ID_CARD Record 0", "lw")
    .At(16, "column NAME Record 0", "l")
    .At(17, "column PHONE Record 0", "l")
    .At(18, "column ADDRESS Record 0", "lw")
    .At(19, "column STATE Record 0", "l")
    .At(20, "column REMARK Record 0", "l")
    .At(21, "column PRO2 Record 0", "l")
    .At(22, "column userName Record 0", "l")
    .At(23, "column password Record 0", "l")
    .At(24, "column LEVEL Record 0", "l")
    .At(25, "column status Record 0", "l")
    .At(26, "column PRO2 Record 0", "l");
this.TestMarketMSShowAllCheckInLogByID("lw");
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Generated;Microsoft.Pex.Framework;Microsoft.VisualStudio.TestTools.UnitTesting;System.Collections.Generic"><![CDATA[[TestMethod]
[PexGeneratedBy(typeof(PexTestClass))]
[PexRaisedException(typeof(KeyNotFoundException))]
public void TestMarketMSShowAllCheckInLogByIDThrowsKeyNotFoundException295()
{
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.DefaultSession
        .At(0, "column ROOM_NAME Record 0", "l")
        .At(1, "column ID_CARD Record 0", 
                                                                   "lw
        .At(2, "column IS_PAY Record 0", "l")
        .At(3, "column STATE Record 0", "l")
        .At(4, "column IN_TIME Record 0", "l")
        .At(5, "column OUT_TIME Record 0", 
lw\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0")
        .At(6, "column PRO1 Record 0", 
lw\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0")
        .At(7, "column PRO2 Record 0", "l")
        .At(9, "column ROOM_NAME Record 0", "l")
        .At(11, "column KIND Record 0", "l")
        .At(12, "column STATE Record 0", "l")
        .At(13, "column REMARK Record 0", "l")
        .At(14, "column PRO2 Record 0", "l")
        .At(15, "column ID_CARD Record 0", "lw")
        .At(16, "column NAME Record 0", "l")
        .At(17, "column PHONE Record 0", "l")
        .At(18, "column ADDRESS Record 0", "lw")
        .At(19, "column STATE Record 0", "l")
        .At(20, "column REMARK Record 0", "l")
        .At(21, "column PRO2 Record 0", "l")
        .At(22, "column userName Record 0", "l")
        .At(23, "column password Record 0", "l")
        .At(24, "column LEVEL Record 0", "l")
        .At(25, "column status Record 0", "l")
        .At(26, "column PRO2 Record 0", "l");
    this.TestMarketMSShowAllCheckInLogByID("lw");
}
]]></methodCode>
<reference name="Microsoft.VisualStudio.QualityTools.UnitTestFramework"/>
<reference name="mscorlib" location="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\mscorlib.dll"/>
<reference name="Microsoft.Pex.Framework"/>
<reference name="TestDBApp" location="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\bin\Debug\TestDBApp.dll"/>
<exceptionChain><exception typeDisplayName="KeyNotFoundException" source="mscorlib"><message><![CDATA[给定关键字不在字典中。]]></message>
<type spec="Class"><definition assemblyName="mscorlib" name="KeyNotFoundException" token="200033c" namespace="System.Collections.Generic"/>
</type>
<stackTrace><frame value="  at Dictionary`2.get_Item(!0)" method="Dictionary`2.get_Item(!0)" offset="30"><method assemblyName="mscorlib" name="get_Item" token="6001f2b"><declaringType assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</declaringType>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="GenericTypeParameter" index="0"/>
<genericTypeArgument spec="GenericTypeParameter" index="1"/>
</type>
</parameter>
<parameter name="key" position="1"><type spec="GenericTypeParameter" index="0"/>
</parameter>
<resultType spec="GenericTypeParameter" index="1"/>
</method>
</frame>
<frame value="  at MockSqlCommand.PerformOperationOnRecords(Dictionary`2&lt;String,List`1&lt;Object[]&gt;&gt;, Dictionary`2&lt;String,List`1&lt;Object[]&gt;&gt;, String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1040)" method="MockSqlCommand.PerformOperationOnRecords(Dictionary`2&lt;String,List`1&lt;Object[]&gt;&gt;, Dictionary`2&lt;String,List`1&lt;Object[]&gt;&gt;, String)" offset="555" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1040"><method assemblyName="MockDBMS" name="PerformOperationOnRecords" token="6000039"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<parameter name="lhsRecords" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="List`1" token="200033e" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</elementType>
</genericTypeArgument>
</genericTypeArgument>
</type>
</parameter>
<parameter name="rhsRecords" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="List`1" token="200033e" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</elementType>
</genericTypeArgument>
</genericTypeArgument>
</type>
</parameter>
<parameter name="op" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="List`1" token="200033e" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</elementType>
</genericTypeArgument>
</genericTypeArgument>
</resultType>
</method>
<beforeSource><![CDATA[                foreach (string tableName in lhsRecords.Keys)
                {
                    lhsRecordsInTable = lhsRecords[tableName];]]></beforeSource>
<source><![CDATA[                    rhsRecordsInTable = rhsRecords[tableName];]]></source>
<afterSource><![CDATA[                    List<object[]> selectedRecordsInTable = new List<object[]>();

                    if (lhsRecordsInTable == null || rhsRecordsInTable == null)]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.getRecordsFrommDifferentTablesWith(Expression, Dictionary`2&lt;String,Table&gt;) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(511)" method="MockSqlCommand.getRecordsFrommDifferentTablesWith(Expression, Dictionary`2&lt;String,Table&gt;)" offset="1564" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="511"><method assemblyName="MockDBMS" name="getRecordsFrommDifferentTablesWith" token="6000037"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<parameter name="condition" position="1"><type spec="Class"><definition assemblyName="MacroScope" name="Expression" token="2000032" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="tables" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="MockDBMS" name="Table" token="2000008" namespace="MockDBMS"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="List`1" token="200033e" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</elementType>
</genericTypeArgument>
</genericTypeArgument>
</resultType>
</method>
<beforeSource><![CDATA[                lhsRecords = getRecordsFrommDifferentTablesWith(lhs, tables);
                PexAssert.IsNotNull(rhs.Operator);
                rhsRecords = getRecordsFrommDifferentTablesWith(rhs, tables);]]></beforeSource>
<source><![CDATA[                resultSet = PerformOperationOnRecords(lhsRecords, rhsRecords, op);]]></source>
<afterSource><![CDATA[            }
            else if (op.Equals("LIKE"))
            {]]></afterSource>
</frame>
<frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(59)" method="MockSqlCommand.ExecuteReader()" offset="344" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="59"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[                        tables.Add(tableName, table);
                    }
                    Dictionary<string, List<object[]>> recordsFromDifferentTables = new Dictionary<string, List<object[]>>();]]></beforeSource>
<source><![CDATA[                    recordsFromDifferentTables = getRecordsFrommDifferentTablesWith(parsedQuery.whereCondition, tables);]]></source>
<afterSource><![CDATA[                    if (parsedQuery.joinCondition != null)
                    {
                        Dictionary<string, List<object[]>> joinRecords = getRecordsFrommDifferentTablesWith(parsedQuery.joinCondition, tables);]]></afterSource>
</frame>
<frame value="  at PexTestClass.TestMarketMSShowAllCheckInLogByID(String) in C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs(427)" method="PexTestClass.TestMarketMSShowAllCheckInLogByID(String)" offset="165" file="C:\Documents and Settings\Wei\桌面\TaintSQL\TestDBApp\DBApplication.cs" line="427"><method assemblyName="TestDBApp" name="TestMarketMSShowAllCheckInLogByID" token="6000010"><declaringType assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="TestDBApp" name="PexTestClass" token="2000003" namespace="MyApplication"/>
</type>
</parameter>
<parameter name="ID" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
</method>
<beforeSource><![CDATA[            string sql = "SELECT check_in.ROOM_NAME,roomer_management.Name,check_in.ID_CARD,check_in.STATE,check_in.IN_TIME,check_in.OUT_TIME FROM roomer_management,check_in where check_in.ID_CARD = roomer_management.ID_CARD and roomer_management.ID_CARD LIKE {0}";
            query = String.Format(sql, DBMS.processData(ID, "00000001", sql, true));
            myCommand = new MockSqlCommand(query, myConnection);]]></beforeSource>
<source><![CDATA[            myReader = myCommand.ExecuteReader();]]></source>
<afterSource><![CDATA[            while (myReader.Read())
            {
                Console.WriteLine("ROOM_NAME: " + myReader[0]);]]></afterSource>
</frame>
</stackTrace>
</exception>
</exceptionChain>
<pathCondition><![CDATA[byte[] s1 = new;
uint s0 = &(sbyte[]).$Items + s1 + unchecked(0);
uint s2 = &(short[]).$Items + s1 + unchecked(0);
return ID != (string)null && s0 < 4294966616u && s2 < 4294965246u && 
                                                 2u + s2 < 1346u + s2 && (4294967293u | 2u ^ 2u + s0) != uint.MaxValue && 8u + s2 < 1346u + s2 && 24u + s2 < 1346u + s2 && 40u + s2 < 1346u + s2 && 56u + s2 < 1346u + s2 && 72u + s2 < 1346u + s2 && 
                                                                                                                                                                                                                             88u + s2 < 1346u + s2 && 104u + s2 < 1346u + s2 && 120u + s2 < 1346u + s2 && 136u + s2 < 1346u + s2 && 152u + s2 < 1346u + s2 && 168u + s2 < 1346u + s2 && 184u + s2 < 1346u + s2 && 
                                                                                                                                                                                                                                                                                                                                                                                        200u + s2 < 1346u + s2 && 216u + s2 < 1346u + s2 && 232u + s2 < 1346u + s2 && 248u + s2 < 1346u + s2 && 264u + s2 < 1346u + s2 && 280u + s2 < 1346u + s2 && 296u + s2 < 1346u + s2 && 
u + s2 < 1346u + s2 && 328u + s2 < 1346u + s2 && 344u + s2 < 1346u + s2 && 360u + s2 < 1346u + s2 && 376u + s2 < 1346u + s2 && 392u + s2 < 1346u + s2 && 408u + s2 < 1346u + s2 && 
u + s2 < 1346u + s2 && 440u + s2 < 1346u + s2 && 456u + s2 < 1346u + s2 && 472u + s2 < 1346u + s2 && 488u + s2 < 1346u + s2 && 504u + s2 < 1346u + s2 && 520u + s2 < 1346u + s2 && 
u + s2 < 1346u + s2 && 552u + s2 < 1346u + s2 && 568u + s2 < 1346u + s2 && 584u + s2 < 1346u + s2 && 600u + s2 < 1346u + s2 && 616u + s2 < 1346u + s2 && 632u + s2 < 1346u + s2 && 
u + s2 < 1346u + s2 && 664u + s2 < 1346u + s2 && 680u + s2 < 1346u + s2 && 696u + s2 < 1346u + s2 && 712u + s2 < 1346u + s2 && 728u + s2 < 1346u + s2 && 744u + s2 < 1346u + s2 && 
u + s2 < 1346u + s2 && 776u + s2 < 1346u + s2 && 792u + s2 < 1346u + s2 && 808u + s2 < 1346u + s2 && 824u + s2 < 1346u + s2 && 840u + s2 < 1346u + s2 && 856u + s2 < 1346u + s2 && 
u + s2 < 1346u + s2 && 888u + s2 < 1346u + s2 && 904u + s2 < 1346u + s2 && 920u + s2 < 1346u + s2 && 936u + s2 < 1346u + s2 && 952u + s2 < 1346u + s2 && 968u + s2 < 1346u + s2 && 
u + s2 < 1346u + s2 && 1000u + s2 < 1346u + s2 && 1016u + s2 < 1346u + s2 && 1032u + s2 < 1346u + s2 && 1048u + s2 < 1346u + s2 && 1064u + s2 < 1346u + s2 && 1080u + s2 < 1346u + s2 && 
u + s2 < 1346u + s2 && 1112u + s2 < 1346u + s2 && 1128u + s2 < 1346u + s2 && 1144u + s2 < 1346u + s2 && 1160u + s2 < 1346u + s2 && 1176u + s2 < 1346u + s2 && 1192u + s2 < 1346u + s2 && 
u + s2 < 1346u + s2 && 1224u + s2 < 1346u + s2 && 1240u + s2 < 1346u + s2 && 1256u + s2 < 1346u + s2 && 1272u + s2 < 1346u + s2 && 1288u + s2 < 1346u + s2 && 1304u + s2 < 1346u + s2 && 
u + s2 < 1346u + s2 && 1336u + s2 < 1346u + s2 && 676u + s0 < 680u + s0 && 1352u + s2 < 2050u + s2 && 677u + s0 < 680u + s0 && 678u + s0 < 680u + s0 && 679u + s0 < 680u + s0 && 
choiceof(default, 0, column ROOM_NAME Record 0) != (string)null && choiceof(default, 0, column ROOM_NAME Record 0).Length != 0 && choiceof(default, 0, column ID_CARD Record 0) != (string)null && 
choiceof(default, 0, column ID_CARD Record 0).Length != 0 && choiceof(default, 0, column IS_PAY Record 0) != (string)null && choiceof(default, 0, column IS_PAY Record 0).Length != 0 && 
choiceof(default, 0, column STATE Record 0) != (string)null && choiceof(default, 0, column STATE Record 0).Length != 0 && choiceof(default, 0, column IN_TIME Record 0) != (string)null && 
choiceof(default, 0, column IN_TIME Record 0).Length != 0 && choiceof(default, 0, column OUT_TIME Record 0) != (string)null && choiceof(default, 0, column OUT_TIME Record 0).Length != 0 && 
choiceof(default, 0, column PRO1 Record 0) != (string)null && choiceof(default, 0, column PRO1 Record 0).Length != 0 && choiceof(default, 0, column PRO2 Record 0) != (string)null && 
choiceof(default, 0, column PRO2 Record 0).Length != 0 && choiceof(default, 1, column ROOM_NAME Record 0) != (string)null && choiceof(default, 1, column ROOM_NAME Record 0).Length != 0 && 
choiceof(default, 0, column KIND Record 0) != (string)null && choiceof(default, 0, column KIND Record 0).Length != 0 && choiceof(default, 1, column STATE Record 0) != (string)null && 
choiceof(default, 1, column STATE Record 0).Length != 0 && choiceof(default, 0, column REMARK Record 0) != (string)null && choiceof(default, 0, column REMARK Record 0).Length != 0 && 
choiceof(default, 1, column PRO2 Record 0) != (string)null && choiceof(default, 1, column PRO2 Record 0).Length != 0 && choiceof(default, 1, column ID_CARD Record 0) != (string)null && 
choiceof(default, 1, column ID_CARD Record 0).Length != 0 && choiceof(default, 0, column NAME Record 0) != (string)null && choiceof(default, 0, column NAME Record 0).Length != 0 && 
choiceof(default, 0, column PHONE Record 0) != (string)null && choiceof(default, 0, column PHONE Record 0).Length != 0 && choiceof(default, 0, column ADDRESS Record 0) != (string)null && 
choiceof(default, 0, column ADDRESS Record 0).Length != 0 && choiceof(default, 2, column STATE Record 0) != (string)null && choiceof(default, 2, column STATE Record 0).Length != 0 && 
choiceof(default, 1, column REMARK Record 0) != (string)null && choiceof(default, 1, column REMARK Record 0).Length != 0 && choiceof(default, 2, column PRO2 Record 0) != (string)null && 
choiceof(default, 2, column PRO2 Record 0).Length != 0 && choiceof(default, 0, column userName Record 0) != (string)null && choiceof(default, 0, column userName Record 0).Length != 0 && 
choiceof(default, 0, column password Record 0) != (string)null && choiceof(default, 0, column password Record 0).Length != 0 && choiceof(default, 0, column LEVEL Record 0) != (string)null && 
choiceof(default, 0, column LEVEL Record 0).Length != 0 && choiceof(default, 0, column status Record 0) != (string)null && choiceof(default, 0, column status Record 0).Length != 0 && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         choiceof(default, 3, column PRO2 Record 0) != (string)null && choiceof(default, 3, column PRO2 Record 0).Length != 0 && ID.Length == 2 && ID[0] == 'l' && ID[1] == 'w' && 
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (4294967294u | 1u ^ 2u + s0) == uint.MaxValue && 1352u + s2 >= 1346u + s2 && (choiceof(default, 0, column ID_CARD Record 0).Length != choiceof(default, 1, column ID_CARD Record 0).Length || 
choiceof(default, 0, column ID_CARD Record 0).op_Equality((object)choiceof(default, 1, column ID_CARD Record 0)) == (sbyte)0) && 
choiceof(default, 0, column ID_CARD Record 0) != choiceof(default, 1, column ID_CARD Record 0);
]]></pathCondition>
</generatedTest>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.15"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.16"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.16"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.15"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.17"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.18"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.14"/>
<test name="TestMarketMSShowAllCheckInLogByID" state="success" duration="0.17"/>
<coverage domain="usercodeundertest" unit="block" covered="465" total="1368" coveredRatio="0.33991228070175439"/>
<coverage domain="usercodeundertest" unit="asserts" covered="8" total="11" coveredRatio="0.72727272727272729"/>
<sourceCoverage xml="cov\e332\cov.xml" html="cov\e332\cov.html"/>
<result name="TestMarketMSShowAllCheckInLogByID(String)" state="success" duration="25.4703824089375"><console stream="out" mode="memory"><![CDATA[WHERE
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
WHERE
left = check_in right = roomer_management
left = check_in right = roomer_management
WHERE
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
WHERE
left = check_in right = roomer_management
left = check_in right = roomer_management
WHERE
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
WHERE
left = check_in right = roomer_management
left = check_in right = roomer_management
WHERE
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
WHERE
left = check_in right = roomer_management
left = check_in right = roomer_management
WHERE
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
WHERE
left = check_in right = roomer_management
left = check_in right = roomer_management
WHERE
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
WHERE
left = check_in right = roomer_management
left = check_in right = roomer_management
WHERE
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
WHERE
left = check_in right = roomer_management
left = check_in right = roomer_management
WHERE
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
WHERE
left = check_in right = roomer_management
left = check_in right = roomer_management
WHERE
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
WHERE
left = check_in right = roomer_management
left = check_in right = roomer_management
WHERE
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
table::: check_in
table::: check_in
column:ID_CARD_TAINT
tagggg:00000000
WHERE
left = check_in right = roomer_management
left = check_in right = roomer_management
]]></console>
</result>
<duration start="2020-12-01 06:01:33Z" end="2020-12-01 06:01:59Z" seconds="25.4966624"/>
<trajectory><image src="fix\myapplicationpex637424281192719443.trajectories.png" width="800" height="1600"/>
</trajectory>
</exploration>
<coverage domain="usercodeundertest" unit="block" covered="465" total="1368" coveredRatio="0.33991228070175439"/>
<coverage domain="usercodeundertest" unit="asserts" covered="8" total="11" coveredRatio="0.72727272727272729"/>
<sourceCoverage xml="cov\t630\cov.xml" html="cov\t630\cov.html"/>
<duration start="2020-12-01 06:01:33Z" end="2020-12-01 06:01:59Z" seconds="26.1175552"/>
</fixture>
<coverage domain="usercodeundertest" unit="block" covered="465" total="1368" coveredRatio="0.33991228070175439"/>
<coverage domain="usercodeundertest" unit="asserts" covered="8" total="11" coveredRatio="0.72727272727272729"/>
<sourceCoverage xml="cov\a63183329\cov.xml" html="cov\a63183329\cov.html"/>
<duration start="2020-12-01 06:01:33Z" end="2020-12-01 06:02:00Z" seconds="26.5682032"/>
<frameTreeRef exceptionCount="1"/>
</assembly>
<duration start="2020-12-01 06:01:33Z" end="2020-12-01 06:02:00Z" seconds="26.738448"/>
<background/>
</pex>
