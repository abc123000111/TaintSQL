<frameTree version="0.94.51006.1"><frameException type="System.Collections.Generic.KeyNotFoundException"><tag exceptionState="unexpected"><generatedTestRef idref="9428455c-c4e8-4da1-97a2-a3621e909906"/>
</tag>
<frameNode><frame value="  at Dictionary`2.get_Item(!0)" method="Dictionary`2.get_Item(!0)" offset="30"><method assemblyName="mscorlib" name="get_Item" token="6001f2b"><declaringType assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</declaringType>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="GenericTypeParameter" index="0"/>
<genericTypeArgument spec="GenericTypeParameter" index="1"/>
</type>
</parameter>
<parameter name="key" position="1"><type spec="GenericTypeParameter" index="0"/>
</parameter>
<resultType spec="GenericTypeParameter" index="1"/>
</method>
</frame>
<tag exceptionState="unexpected"><generatedTestRef idref="9428455c-c4e8-4da1-97a2-a3621e909906"/>
<generatedTestRef idref="90402f46-422e-4869-8ff7-f3ab197b5921"/>
</tag>
<frameNode><frame value="  at MockSqlCommand.PerformOperationOnRecords(Dictionary`2&lt;String,List`1&lt;Object[]&gt;&gt;, Dictionary`2&lt;String,List`1&lt;Object[]&gt;&gt;, String) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(1040)" method="MockSqlCommand.PerformOperationOnRecords(Dictionary`2&lt;String,List`1&lt;Object[]&gt;&gt;, Dictionary`2&lt;String,List`1&lt;Object[]&gt;&gt;, String)" offset="555" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="1040"><method assemblyName="MockDBMS" name="PerformOperationOnRecords" token="6000039"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<parameter name="lhsRecords" position="1"><type spec="Class"><definition assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="List`1" token="200033e" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</elementType>
</genericTypeArgument>
</genericTypeArgument>
</type>
</parameter>
<parameter name="rhsRecords" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="List`1" token="200033e" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</elementType>
</genericTypeArgument>
</genericTypeArgument>
</type>
</parameter>
<parameter name="op" position="3"><type spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="List`1" token="200033e" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</elementType>
</genericTypeArgument>
</genericTypeArgument>
</resultType>
</method>
<beforeSource><![CDATA[                foreach (string tableName in lhsRecords.Keys)
                {
                    lhsRecordsInTable = lhsRecords[tableName];]]></beforeSource>
<source><![CDATA[                    rhsRecordsInTable = rhsRecords[tableName];]]></source>
<afterSource><![CDATA[                    List<object[]> selectedRecordsInTable = new List<object[]>();

                    if (lhsRecordsInTable == null || rhsRecordsInTable == null)]]></afterSource>
</frame>
<tag exceptionState="unexpected"><generatedTestRef idref="9428455c-c4e8-4da1-97a2-a3621e909906"/>
<generatedTestRef idref="90402f46-422e-4869-8ff7-f3ab197b5921"/>
</tag>
<frameNode><frame value="  at MockSqlCommand.getRecordsFrommDifferentTablesWith(Expression, Dictionary`2&lt;String,Table&gt;) in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(511)" method="MockSqlCommand.getRecordsFrommDifferentTablesWith(Expression, Dictionary`2&lt;String,Table&gt;)" offset="1564" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="511"><method assemblyName="MockDBMS" name="getRecordsFrommDifferentTablesWith" token="6000037"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<parameter name="condition" position="1"><type spec="Class"><definition assemblyName="MacroScope" name="Expression" token="2000032" namespace="MacroScope"/>
</type>
</parameter>
<parameter name="tables" position="2"><type spec="Class"><definition assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="MockDBMS" name="Table" token="2000008" namespace="MockDBMS"/>
</genericTypeArgument>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="mscorlib" name="Dictionary`2" token="2000325" namespace="System.Collections.Generic"><genericParameter value="TKey"/>
<genericParameter value="TValue"/>
</definition>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="String" token="2000049" namespace="System"/>
</genericTypeArgument>
<genericTypeArgument spec="Class"><definition assemblyName="mscorlib" name="List`1" token="200033e" namespace="System.Collections.Generic"><genericParameter value="T"/>
</definition>
<genericTypeArgument spec="SzArray"><elementType spec="Class"><definition assemblyName="mscorlib" name="Object" token="2000002" namespace="System"/>
</elementType>
</genericTypeArgument>
</genericTypeArgument>
</resultType>
</method>
<beforeSource><![CDATA[                lhsRecords = getRecordsFrommDifferentTablesWith(lhs, tables);
                PexAssert.IsNotNull(rhs.Operator);
                rhsRecords = getRecordsFrommDifferentTablesWith(rhs, tables);]]></beforeSource>
<source><![CDATA[                resultSet = PerformOperationOnRecords(lhsRecords, rhsRecords, op);]]></source>
<afterSource><![CDATA[            }
            else if (op.Equals("LIKE"))
            {]]></afterSource>
</frame>
<tag exceptionState="unexpected"><generatedTestRef idref="9428455c-c4e8-4da1-97a2-a3621e909906"/>
<generatedTestRef idref="90402f46-422e-4869-8ff7-f3ab197b5921"/>
</tag>
<frameNode><frame value="  at MockSqlCommand.ExecuteReader() in C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs(59)" method="MockSqlCommand.ExecuteReader()" offset="344" file="C:\Documents and Settings\Wei\桌面\TaintSQL\MockDBMS\SqlServerInterface\MockSqlCommand.cs" line="59"><method assemblyName="MockDBMS" name="ExecuteReader" token="6000034"><declaringType assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
<parameter this="true" name="this" position="0"><type spec="Class"><definition assemblyName="MockDBMS" name="MockSqlCommand" token="2000009" namespace="MockDBMS.SqlServer"/>
</type>
</parameter>
<resultType spec="Class"><definition assemblyName="MockDBMS" name="MockSqlDataReader" token="200000f" namespace="MockDBMS.SqlServer"/>
</resultType>
</method>
<beforeSource><![CDATA[                        tables.Add(tableName, table);
                    }
                    Dictionary<string, List<object[]>> recordsFromDifferentTables = new Dictionary<string, List<object[]>>();]]></beforeSource>
<source><![CDATA[                    recordsFromDifferentTables = getRecordsFrommDifferentTablesWith(parsedQuery.whereCondition, tables);]]></source>
<afterSource><![CDATA[                    if (parsedQuery.joinCondition != null)
                    {
                        Dictionary<string, List<object[]>> joinRecords = getRecordsFrommDifferentTablesWith(parsedQuery.joinCondition, tables);]]></afterSource>
</frame>
<tag exceptionState="unexpected"><generatedTestRef idref="9428455c-c4e8-4da1-97a2-a3621e909906"/>
<generatedTestRef idref="90402f46-422e-4869-8ff7-f3ab197b5921"/>
</tag>
</frameNode>
</frameNode>
</frameNode>
</frameNode>
</frameException>
</frameTree>
